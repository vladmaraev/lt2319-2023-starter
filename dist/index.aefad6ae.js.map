{"mappings":"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,OAAO,UAAU,wBAAwB,OAAO,QAAQ,aAAa,MAAM,OAAO,OAAO,CAAC,UAAU,GAAG,OAAO;;;A;A,I,yB,Q;A,O,e,S,c;I,O;A;A,Q,U,K;A,I,e,uB,Q;A,I,qB,uB,Q;A,I,mB,uB,Q;A,I,gB,uB,Q;A,I,a,uB,Q;A,I,8B,uB,Q;A,I,mB,uB,Q;AEJ9G,IAAA,MAAA,QAAA;AACA,IAAA,YAAA,uBAAA,QAAA;AACA,IAAA,qBAAA,uBAAA,QAAA;AAEA,IAAA,qBAAA,uBAAA,QAAA;AACA,IAAA,qBAAA,uBAAA,QAAA;AACA,IAAA,eAAA,uBAAA,QAAA;AACA,IAAA,iBAAA,uBAAA,QAAA;AACA,IAAA,wBAAA,uBAAA,QAAA;AACA,IAAA,4BAAA,uBAAA,QAAA;A,S,a,O;I,I,4B;I,O,S;Q,I,Q,A,C,G,iB,O,E,U;Q,I,2B;Y,I,Y,A,C,G,iB,O,E,I,E;Y,S,Q,U,O,W;Q,O,S,M,M,I,E;Q,O,A,C,G,4B,O,E,I,E;I;A;A,S;I,I,O,Y,e,C,Q,W,O;I,I,Q,U,M,O;I,I,O,U,Y,O;I,I;Q,Q,U,Q,K,Q,U,S,E,E,Y;Q,O;I,E,O,G;Q,O;I;A;AAEA,qJAAA;AACA,IAAMC,wBAAwB;AAC9B,IAAMC,cAAc,EAApB;AAEe,IAAA,WAAA,SAAA,SAAAC,OAAO;IACpB,IAAA,gBAQI,AAAA,CAAA,GAAAC,eAAAA,OAAAA,EAAaD,UAPfE,eADF,cACEA,cACAC,mBAFF,cAEEA,kBAFF,wBAAA,cAGEC,UAAAA,WAHF,0BAAA,KAAA,IAGa;QACTC,cAAcC,OAAOD,gBAAgBC,OAAOC;IADnC,IAAA,uBAGXC,8BANF,cAMEA,6BANF,wBAAA,cAOEC,6BAAAA,8BAPF,0BAAA,KAAA,IAOgCX,wBAPhC;IAUA,IAAI,CAACI,gBAAgB,CAACE,SAASC,cAAc;QAC3CK,QAAQC,KACN;QAGF,OAAO,CAAA;IACR;IAjBuB,IAmBlBC,kBAnBkB,WAAA,GAAA,SAAA,YAAA;QAAA,CAAA,GAAA,WAAA,OAAA,EAAA,iBAAA;QAAA,IAAA,SAAA,aAAA;QAoBtB,SAAA;YAAc,IAAA;YAAA,CAAA,GAAA,iBAAA,OAAA,EAAA,I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OAA+BG,IAAIC,IAAI,IAAID,IAAIC,IAAI,KAAK;oBAAxD;gBARK,KAAA;gBAAA,KAAA;oBAAA,OAAA,UAAA;YAAA;QAAA,GAAA;IAAA;I,O,M,M,I,E;A;;;A;A,I,yB,Q;A,O,e,S,c;I,O;A;A,Q,U,K;A,I,mB,uB,Q;A,I,gB,uB,Q;A,I,W,W,G;IExBb,SAAA,SAAA,IAAA;QAAwC,IAA1BV,SAA0B,KAA1BA,QAAQG,OAAkB,KAAlBA,MAAME,WAAY,KAAZA;QAAY,CAAA,GAAA,iBAAA,OAAA,EAAA,IAAA,EAAA;QACtC,IAAA,CAAKM,WAAW;QAChB,IAAA,CAAKC,UAAUZ;QACf,IAAA,CAAKa,QAAQV;QACb,IAAA,CAAKW,gBAAgB;QACrB,IAAA,CAAKC,QAAQV;QACb,IAAA,CAAKW,YAAYX;IAClB;I,C,G,c,O,E,U;Q;Y,K;YAED,KAAA,SAAA;gBACE,OAAO,IAAA,CAAKM;YACb;Q;Q;Y,K;YAED,KAAA,SAAA;gBACE,OAAO,IAAA,CAAKC;YACb;Q;Q;Y,K;YAED,KAAA,SAAA;gBACE,OAAO,IAAA,CAAKC;YACb;Q;Q;Y,K;YAED,KAAA,SAAA;gBACE,OAAO,IAAA,CAAKC;YACb;Q;Q;Y,K;YAED,KAAA,SAAA;gBACE,OAAO,IAAA,CAAKC;YACb;Q;Q;Y,K;YAED,KAAA,SAAA;gBACE,OAAO,IAAA,CAAKC;YACb;Q;K;I,O;A;A,Q,U;;;A;A,I,yB,Q;A,O,e,S,c;I,O;A;A,Q,U;A,I,e,uB,Q;A,I,mB,uB,Q;A,I,qB,uB,Q;AE9BH,IAAA,wBAAA,uBAAA,QAAA;A,S,Q,M,E,c;I,I,O,O,K;I,I,O,uB;Q,I,U,O,sB;Q,kB,C,U,Q,O,S,G;Y,O,O,yB,Q,K;Q,E,G,K,K,M,M;I;I,O;A;A,S,c,M;I,I,I,I,G,I,U,Q,I;Q,I,S,Q,S,C,E,G,S,C,E,G,C;Q,I,I,Q,O,S,C,G,Q,S,G;Y,C,G,iB,O,E,Q,K,M,C,I;Q,K,O,4B,O,iB,Q,O,0B,W,Q,O,S,Q,S,G;Y,O,e,Q,K,O,yB,Q;Q;I;I,O;A;AAE8B/C,SAAAA,YAAAA,EAAAA;I,O,a,M,I,E;A;A,S;IAAf,eAAA,AAAA,CAAA,GA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CF;IAEA,OAAO;AACT;AAEA,OAAO,UAAU,0BAA0B,OAAO,QAAQ,aAAa,MAAM,OAAO,OAAO,CAAC,UAAU,GAAG,OAAO;;;ACrBhH,SAAS,8BAA8B,MAAM,EAAE,QAAQ;IACrD,IAAI,UAAU,MAAM,OAAO,CAAC;IAC5B,IAAI,SAAS,CAAC;IACd,IAAI,aAAa,OAAO,KAAK;IAC7B,IAAI,KAAK;IAET,IAAK,IAAI,GAAG,IAAI,WAAW,QAAQ,IAAK;QACtC,MAAM,UAAU,CAAC,EAAE;QACnB,IAAI,SAAS,QAAQ,QAAQ,GAAG;QAChC,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI;IAC3B;IAEA,OAAO;AACT;AAEA,OAAO,UAAU,+BAA+B,OAAO,QAAQ,aAAa,MAAM,OAAO,OAAO,CAAC,UAAU,GAAG,OAAO;;;A;A,O,e,S,c;I,O;A;A,Q,U;AEftG,SAASE,6BAA6BG,SAAtC;IACb,OAAO,OAAOA,cAAc,aAAaA,cAAcA;AACxD;;;A;A,I,yB,Q;A,O,e,S,c;I,O;A;A,Q,U,K;A,I,gB,uB,Q;A,I,mB,uB,Q;A,I,a,uB,Q;A,I,8B,uB,Q;A,I,mB,uB,Q;AEFD,IAAA,MAAA,QAAA;A,S,a,O;I,I,4B;I,O,S;Q,I,Q,A,C,G,iB,O,E,U;Q,I,2B;Y,I,Y,A,C,G,iB,O,E,I,E;Y,S,Q,U,O,W;Q,O,S,M,M,I,E;Q,O,A,C,G,4B,O,E,I,E;I;A;A,S;I,I,O,Y,e,C,Q,W,O;I,I,Q,U,M,O;I,I,O,U,Y,O;I,I;Q,Q,U,Q,K,Q,U,S,E,E,Y;Q,O;I,E,O,G;Q,O;I;A;AAEqB1D,IAAAA,uBAAAA,WAAAA,GAAAA,SAAAA,MAAAA;I,C,G,W,O,E,sB;I,I,S,a;IACnB,SAAA,qBAAY2D,IAAZ;QAAkB,CAAA,GAAA,iBAAA,OAAA,EAAA,IAAA,EAAA;QAAA,OAAA,OAAA,KAAA,IAAA,EACVA;IACP;I,O,A,C,G,c,O,E;AAH+CC,EAAAA,IAAAA;A,Q,U;;;A;A,I,yB,Q;A,O,e,S,c;I,O;A;A,Q,U,K;A,I,e,uB,Q;A,I,qB,uB,Q;A,I,mB,uB,Q;A,I,gB,uB,Q;A,I,a,uB,Q;A,I,8B,uB,Q;A,I,mB,uB,Q;AEAlD,IAAA,MAAA,QAAA;AACA,IAAA,kBAAA,uBAAA,QAAA;AAEA,IAAA,mBAAA,uBAAA,QAAA;AACA,IAAA,wBAAA,uBAAA,QAAA;AACA,IAAA,kBAAA,uBAAA,QAAA;A,S,a,O;I,I,4B;I,O,S;Q,I,Q,A,C,G,iB,O,E,U;Q,I,2B;Y,I,Y,A,C,G,iB,O,E,I,E;Y,S,Q,U,O,W;Q,O,S,M,M,I,E;Q,O,A,C,G,4B,O,E,I,E;I;A;A,S;I,I,O,Y,e,C,Q,W,O;I,I,Q,U,M,O;I,I,O,U,Y,O;I,I;Q,Q,U,Q,K,Q,U,S,E,E,Y;Q,O;I,E,O,G;Q,O;I;A;AAEA,SAASC,qBAAqB/G,YAA9B,EAA4CgH,WAA5C;IACE,OAAO,IAAIC,QAAQ,SAACxF,OAAD,EAAUD,MAAV;QACjB,IAAME,UAAU1B,aAAakH,gBAAgBF,aAAavF,SAASD,SAEnE,kEAFA;QAGAE,WAAW,OAAOA,QAAQyF,SAAS,cAAc1F,QAAQC;IAC1D;AACF;AAED,SAAS0F,YAAYpH,YAArB,EAAmCqH,WAAnC,EAAgDC,MAAhD;IACE,OAAO,IAAIL,QAAQ,SAACxF,OAAD,EAAUD,MAAV;QACjB,IAAM+F,qBAAqB,IAAIC,gBAAAA;QAC/B,IAAMC,cAAc,IAAID,gBAAAA;QACxB,IAAME,cAAc,AAAA,CAAA,GAAAC,gBAAAA,OAAAA,EAClB3H,cACA,eACA,SAHF,IAAA;YAGE,IAAamE,QAAb,KAAGyD,OAAUzD;YAAb,OAA2BA,UAAU,YAAYoD,mBAAmBM;QAApE;QAGF,IAAI;YACFP,OAAOQ,SAAST,aAChB,4EADAC;YAEAA,OAAOS,UAAUN,YAAYI;YAE7BP,OAAOU,QAAQhI,aAAaiI;YAC5BX,OAAO1D,MAAM;YAEbqD,QAAQiB,KAAK;gBAACX,mBAAmBY;gBAAYV,YAAYU;aAAzD,EAAsEhB,KAAK1F;QAC5E,EAAC,OAAO2G,KAAK;YACZ5G,OAAO4G;QACR,SAAS;YACRV;QACD;IACF;AACF;AAEKrG,IAAAA,2BAAAA,WAAAA,GAAAA,SAAAA,YAAAA;I,C,G,W,O,E,0B;I,I,S,a;IACJ,SAAA,yBAAYgH,IAAZ;QAAkB,IAAA;QAAA,CAAA,GAAA,iBAAA,OAAA,EAAA,IAAA,EAAA;QAChB,QAAA,OAAA,KAAA,IAAA;QAEA,MAAKzC,QAAQ;QACb,MAAK0C,SAAS;QACd,MAAKC,QAAQ;QACb,MAAKC,SAAS;QACd,MAAKC,UAAU;QAEf,MAAKJ,OAAOA;QAEZ,MAAKK,aAAa;QAClB,MAAKC,QAAQ;QACb,MAAKC,UAAU;QACf,MAAKC,SAAS;QACd,MAAKC,UAAU;QACf,MAAKC,WAAW;QAChB,MAAKC,UAAU;QAjBC,OAAA;IAkBjB;I,C,G,c,O,E,0B;Q;Y,K;YAED,KAAA,SAAA;gBACE,OAAO,IAAA,CAAKpD;YACb;YAED,KAAA,SAAA,IAAS5E,KAAT;gBACE,IAAA,CAAK4E,QAAQ5E;YACd;Q;Q;Y,K;YAED,KAAA,SAAA;gBACE,OAAO,AAAA,CAAA,GAAAD,IAAAA,sBAAAA,EAAuB,IAAvB,EAA6B;YACrC;YAED,KAAA,SAAA,IAAeC,KAAf;gBACE,CAAA,GAAAC,IAAAA,sBAAAA,EAAuB,IAAvB,EAA6B,YAAYD;YAC1C;Q;Q;Y,K;YAED,KAAA,SAAA;gBACE,OAAO,AAAA,CAAA,GAAAD,IAAAA,sBAAAA,EAAuB,IAAvB,EAA6B;YACrC;YAED,KAAA,SAAA,IAAUC,KAAV;gBACE,CAAA,GAAAC,IAAAA,sBAAAA,EAAuB,IAAvB,EAA6B,OAAOD;YACrC;Q;Q;Y,K;YAED,KAAA,SAAA;gBACE,OAAO,AAAA,CAAA,GAAAD,IAAAA,sBAAAA,EAAuB,IAAvB,EAA6B;YACrC;YAED,KAAA,SAAA,IAAYC,KAAZ;gBACE,CAAA,GAAAC,IAAAA,sBAAAA,EAAuB,IAAvB,EAA6B,SAASD;YACvC;Q;Q;Y,K;YAED,KAAA,SAAA;gBACE,OAAO,AAAA,CAAA,GAAAD,IAAAA,sBAAAA,EAAuB,IAAvB,EAA6B;YACrC;YAED,KAAA,SAAA,IAAWC,KAAX;gBACE,CAAA,GAAAC,IAAAA,sBAAAA,EAAuB,IAAvB,EAA6B,QAAQD;YACtC;Q;Q;Y,K;YAED,KAAA,SAAA;gBACE,OAAO,AAAA,CAAA,GAAAD,IAAAA,sBAAAA,EAAuB,IAAvB,EAA6B;YACrC;YAED,KAAA,SAAA,IAAYC,KAAZ;gBACE,CAAA,GAAAC,IAAAA,sBAAAA,EAAuB,IAAvB,EAA6B,SAASD;YACvC;Q;Q;Y,K;YAED,KAAA,SAAA;gBACE,OAAO,AAAA,CAAA,GAAAD,IAAAA,sBAAAA,EAAuB,IAAvB,EAA6B;YACrC;YAED,KAAA,SAAA,IAAaC,KAAb;gBACE,CAAA,GAAAC,IAAAA,sBAAAA,EAAuB,IAAvB,EAA6B,UAAUD;YACxC;Q;Q;Y,K;YAED,KAAA,SAAA;gBACE,OAAO,AAAA,CAAA,GAAAD,IAAAA,sBAAAA,EAAuB,IAAvB,EAA6B;YACrC;YAED,KAAA,SAAA,IAAYC,KAAZ;gBACE,CAAA,GAAAC,IAAAA,sBAAAA,EAAuB,IAAvB,EAA6B,SAASD;YACvC;Q;Q;Y,K;YAED,KAAA,SAAA;gBACE,OAAO,IAAA,CAAKsH;YACb;YAED,KAAA,SAAA,IAAUtH,KAAV;gBACE,IAAA,CAAKsH,SAAStH;YACf;Q;Q;Y,K;YAED,KAAA,SAAA;gBACE,OAAO,IAAA,CAAKuH;YACb;YAED,KAAA,SAAA,IAASvH,KAAT;gBACE,IAAA,CAAKuH,QAAQvH;YACd;Q;Q;Y,K;YAED,KAAA,SAAA;gBACE,OAAO,IAAA,CAAKwH;YACb;YAED,KAAA,SAAA,IAAUxH,KAAV;gBACE,IAAA,CAAKwH,SAASxH;YACf;Q;Q;Y,K;YAED,KAAA,SAAA;gBACE,OAAO,IAAA,CAAKyH;YACb;YAED,KAAA,SAAA,IAAWzH,KAAX;gBACE,IAAA,CAAKyH,UAAUzH;YAChB;Q;Q;Y,K;YAED,OAAA,SAAA,QAAA,KAAA;gBAA0D,IAAhDkB,eAAgD,MAAhDA,cAAcjC,mBAAkC,MAAlCA,kBAAkBkC,eAAgB,MAAhBA;gBACxC,IAAA,CAAK8G,qBAAqB,AAAA,CAAA,GAAAC,iBAAAA,OAAAA,EAAgB;oBACxCjJ,kBAAAA;oBACAiC,cAAAA;oBACAgD,MAAM,IAAA,CAAKA,QAAQ9E,OAAO+I,UAAUC;oBACpCjH,cAAAA;oBACAkH,OAAO,IAAA,CAAKA;oBACZC,MAAM,IAAA,CAAKA;oBACXjB,MAAM,IAAA,CAAKA;oBACXkB,OAAO,IAAA,CAAKA,SAAS,IAAA,CAAKA,MAAMnE;oBAChCoE,QAAQ,IAAA,CAAKA;gBAT2B,IAY1C,+DAZ0C;gBAa1C,gEAAA;gBACA,IAAA,CAAKP,mBAAmBQ;YACzB;Q;Q;Y,K;Y,O;gBAED,IAAA,QAAA,AAAA,CAAA,GAAA,mBAAA,OAAA,EAAA,WAAA,GAAA,aAAA,QAAA,KAAA,SAAA,QAAWzJ,YAAX;oBAAA,IAAA,QAAA;oBAAA,OAAA,aAAA,QAAA,KAAA,SAAA,SAAA,QAAA;wBAAA,MAAA,KAAA,OAAA,SAAA,OAAA,SAAA;4BAAA,KAAA;gCAAA,SAAA,OAAA;gCAEI,yDAAA;gCACA,IAAA,CAAKiD,cAAc,IAAIC,sBAAAA,QAAqB,WAE5C,8EAFA;gCAGMoE,SAAStH,aAAa0J;gCANhC,SAAA,KAO8B3C;gCAP9B,SAAA,KAOmD/G;gCAPnD,SAAA,OAAA;gCAAA,OAOuE,IAAA,CAAKiJ;4BAP5E,KAAA;gCAAA,SAAA,KAAA,SAAA;gCAAA,SAAA,OAAA;gCAAA,OAAA,AAAA,CAAA,GAAA,SAAA,EAAA,EAAA,SAAA,IAAA,SAAA;4BAAA,KAAA;gCAOU5B,cAAAA,SAAAA;gCAEN,IAAA,CAAKsC,iBAAiBrC;gCAT1B,SAAA,OAAA;gCAAA,OAWUF,YAAYpH,cAAcqH,aAAaC;4BAXjD,KAAA;gCAaI,IAAA,CAAKqC,iBAAiB;gCACtB,IAAA,CAAK1G,cAAc,IAAIC,sBAAAA,QAAqB;gCAdhD,SAAA,OAAA;gCAAA;4BAAA,KAAA;gCAAA,SAAA,OAAA;gCAAA,SAAA,KAAA,QAAA,CAAA,QAAA,CAAA;gCAgBI,8DAAA;gCACA,IAAA,CAAKD,cAAc,IAAI2G,WAAW,SAAS;oCAAE/H,OAAO;oCAAoBC,SAAS,SAAA,GAAMC;gCAA5C;4BAjB/C,KAAA;4BAAA,KAAA;gCAAA,OAAA,SAAA;wBAAA;oBAAA,GAAA,SAAA,IAAA,EAAA;wBAAA;4BAAA;4BAAA;yBAAA;qBAAA;gBAAA;gB,S,K,E;oB,O,M,M,I,E;gB;gB,O;Y;Q;Q;Y,K;YAqBA,OAAA,SAAA;gBACE,IAAA,CAAK4H,kBAAkB,IAAA,CAAKA,eAAe7I;YAC5C;Q;K;I,O;AA9JoCqC,EAAAA,IAAAA;AAiKxB9B,IAAAA,WAAAA;A,Q,U;;;A;A,O,e,S,c;I,O;A;A,Q,U,K;AE9Mf,IAAA,UAAA,uBAAA,QAAA;A,S,uB,G;I,O,O,I,a,M;Q,S;I;A;A,S,gB,Q,E,W;I,I,C,C,oB,W,G,M,I,U;A;A,S,kB,M,E,K;I,I,I,I,G,I,M,Q,I;Q,I,a,K,C,E;Q,W,a,W,c;Q,W,e;Q,I,W,Y,W,W;Q,O,e,Q,W,K;I;A;A,S,a,W,E,U,E,W;I,I,Y,kB,Y,W;I,I,a,kB,a;I,O;A;AAEqBmG,IAAAA,iB,W,G;IACnB,SAAA;QAA0B,IAAA,QAAA,IAAA;QAAA,IAAd1H,UAAc,UAAA,SAAA,KAAA,SAAA,CAAA,EAAA,KAAA,YAAA,SAAA,CAAA,EAAA,GAAJ,CAAA;QAAI,gBAAA,IAAA,EAAA;QACxB,IAAA,CAAK+J,SAAS,EAAd;QACA,IAAA,CAAKC,mBAAmB;QACxB,IAAA,CAAKjC,gBAAgB,IAAA,CAAKA,cAAckC,KAAK,IAAxB;QACrB,IAAA,CAAKjK,UAAUA;QAEf,IAAA,CAAKkK,MAAM,IAAA,CAAKA,IAAID,KAAK,IAAd;QACX,IAAA,CAAK5B,WAAW,IAAA,CAAKA,SAAS4B,KAAK,IAAnB;QAEhB,IAAA,CAAKE,OAAOC,SAAZ,GAAwB;YAAA,OAAO;gBAC7BC,MAAM,SAANA;oBAAM,OAAO;wBACXC,MAAM;wBACNpJ,OAAO,MAAKmH;oBAFD;gBAAP;YADuB;QAAP;IAMzB;I,a,gB;Q;Y,K;YAEakC,OAAAA,SAAAA,cAAAA,K;gBACZ,IAAMC,WAAW,IAAA,CAAKT,OAAO5F;gBAC7B,IAAMsG,OAAO,IAAA,CAAKzK,QAAQ0K,QAAQ,EAAA,CAAGC,MAAMC,KAAKC,aAAaN;gBAE7DC,YAAYA,SAAS7I,QAAQ8I;gBAE7B,IAAI,IAAA,CAAKT,kBAAkB;oBACzB,IAAA,CAAKA,iBAAiBrI,QAAQ8I;oBAC9B,IAAA,CAAKT,mBAAmB;gBACzB;YACF;Q;Q;Y,K;YAEK,OAAA,SAAA;gBACJ,IAAMQ,WAAW,AAAA,CAAA,GAAA,QAAA,OAAA;gBAEjB,IAAA,CAAKT,OAAOzH,KAAKkI;gBAEjB,OAAOA,SAAS5I;YACjB;Q;Q;Y,K;YAEU,OAAA,SAAA;gBACT,IAAI,CAAC,IAAA,CAAKoI,kBACR,IAAA,CAAKA,mBAAmB,AAAA,CAAA,GAAA,QAAA,OAAA;gBAG1B,OAAO,IAAA,CAAKA,iBAAiBpI;YAC9B;Q;K;I,O;A;A,Q,U;A,O,U,Q;A,O,Q,U,Q;;;AE9CH,wBAAA;AACA,EAAA;AACA,0EAAA;AACA,EAAA;AACA,+EAAA;AACA,gFAAA;AACA,+EAAA;AACA,4EAAA;AACA,wEAAA;AACA,2DAAA;AACA,EAAA;AACA,6EAAA;AACA,sDAAA;AACA,EAAA;AACA,6EAAA;AACA,2EAAA;AACA,8EAAA;AACA,yEAAA;AACA,gFAAA;AACA,4EAAA;AACA,gBAAA;AAEA,6EAAA;AAEA,gDAAA;AACA,+DAAA;AACA,yCAAA;AACA,mFAAA;AACA,kGAAA;AAEA,mCAAA;AACA,mDAAA;AACA,iEAAA;AAEA;AAEAkJ,OAAOC,UAAU;IACf,IAAMC,MAAM,CAAA;IAEZA,IAAIpJ,UAAU,IAAIuF,QAAQ,SAAUxF,OAAV,EAAmBD,MAAnB;QACxBsJ,IAAIrJ,UAAUA;QACdqJ,IAAItJ,SAASA;IACd;IAED,OAAOsJ;AACR;;;A;A,I,yB,Q;A,O,e,S,c;I,O;A;A,Q,U;A,I,e,uB,Q;A,I,mB,uB,Q;A,I,qB,uB,Q;AE7CD,IAAA,qBAAA,QAAA;AACA,IAAA,aAAA,uBAAA,QAAA;AACA,IAAA,UAAA,uBAAA,QAAA;A,S,Q,M,E,c;I,I,O,O,K;I,I,O,uB;Q,I,U,O,sB;Q,kB,C,U,Q,O,S,G;Y,O,O,yB,Q,K;Q,E,G,K,K,M,M;I;I,O;A;A,S,c,M;I,I,I,I,G,I,U,Q,I;Q,I,S,Q,S,C,E,G,S,C,E,G,C;Q,I,I,Q,O,S,C,G,Q,S,G;Y,C,G,iB,O,E,Q,K,M,C,I;Q,K,O,4B,O,iB,Q,O,0B,W,Q,O,S,Q,S,G;Y,O,e,Q,K,O,yB,Q;Q;I;I,O;A;AAEA,IAAMC,mBAAmB;AACzB,IAAMnL,wBAAwB;AAC9B,IAAMoL,gBAAgB;AACtB,IAAMC,mBACJ;A,S,S,E;I,O,M,M,I,E;A;A,S;IAEa,QAAA,AAAA,CA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Q,S,Y,O,Q,Y,O;Q,S;I;I,I,Q,yB;I,I,S,M,I,M,O,M,I;I,I,S,C;I,I,wB,O,kB,O;I,I,I,O,I,I,Q,a,O,U,e,K,K,M;Q,I,O,wB,O,yB,K,O;Q,I,Q,C,K,O,K,G,G,O,e,Q,K;a,M,C,I,G,G,C,I;I;I,O,U;I,I,O,M,I,K;I,O;A;AAIeC,IAAAA,WAAAA,iCAAAA;A,Q,U;;;A;A,I,yB,Q;A,O,e,S,c;I,O;A;A,Q,gD;A,Q,U,K;A,I,e,uB,Q;A,I,sB,uB,Q;A,I,mB,uB,Q;A,I,qB,uB,Q;A,I,gB,uB,Q;A,I,mB,uB,Q;A,I,a,uB,Q;A,I,8B,uB,Q;A,I,mB,uB,Q;AEEf,IAAA,MAAA,QAAA;AAEA,IAAA,+DAAA,uBAAA,QAAA;AACA,IAAA,sBAAA,uBAAA,QAAA;AACA,IAAA,iBAAA,uBAAA,QAAA;AACA,IAAA,qBAAA,uBAAA,QAAA;AACA,IAAA,aAAA,uBAAA,QAAA;A,S,Q,M,E,c;I,I,O,O,K;I,I,O,uB;Q,I,U,O,sB;Q,kB,C,U,Q,O,S,G;Y,O,O,yB,Q,K;Q,E,G,K,K,M,M;I;I,O;A;A,S,c,M;I,I,I,I,G,I,U,Q,I;Q,I,S,Q,S,C,E,G,S,C,E,G,C;Q,I,I,Q,O,S,C,G,Q,S,G;Y,C,G,iB,O,E,Q,K,M,C,I;Q,K,O,4B,O,iB,Q,O,0B,W,Q,O,S,Q,S,G;Y,O,e,Q,K,O,yB,Q;Q;I;I,O;A;A,S,a,O;I,I,4B;I,O,S;Q,I,Q,A,C,G,iB,O,E,U;Q,I,2B;Y,I,Y,A,C,G,iB,O,E,I,E;Y,S,Q,U,O,W;Q,O,S,M,M,I,E;Q,O,A,C,G,4B,O,E,I,E;I;A;A,S;I,I,O,Y,e,C,Q,W,O;I,I,Q,U,M,O;I,I,O,U,Y,O;I,I;Q,Q,U,Q,K,Q,U,S,E,E,Y;Q,O;I,E,O,G;Q,O;I;A;AAEA,0IAAA;AACA,IAAA;AACA,oCAAA;AACA,sBAAA;AACA,0BAAA;AACA,eAAA;AACA,QAAA;AACA,gCAAA;AACA,6BAAA;AACA,yBAAA;AACA,+BAAA;AACA,6BAAA;AACA,QAAA;AACA,MAAA;AACA,IAAA;AAEA,IAAA;AACA,kDAAA;AACA,wBAAA;AACA,kBAAA;AACA,IAAA;AA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F,UACArF,sBAAsB,cACtBuF,YACAN;YATkG;QAArG,IAWP;YAAEH,SAAS;QAAX;QAGF,OAAOF;IACR;IAED,OAAO,EAAP;AACD;;;A;A,I,yB,Q;A,O,e,S,c;I,O;A;A,Q,U;A,I,mB,uB,Q;A,S,Q,M,E,c;I,I,O,O,K;I,I,O,uB;Q,I,U,O,sB;Q,kB,C,U,Q,O,S,G;Y,O,O,yB,Q,K;Q,E,G,K,K,M,M;I;I,O;A;A,S,c,M;I,I,I,I,G,I,U,Q,I;Q,I,S,Q,S,C,E,G,S,C,E,G,C;Q,I,I,Q,O,S,C,G,Q,S,G;Y,C,G,iB,O,E,Q,K,M,C,I;Q,K,O,4B,O,iB,Q,O,0B,W,Q,O,S,Q,S,G;Y,O,e,Q,K,O,yB,Q;Q;I;I,O;A;AE3Cc,SAAA,SAAS1J,KAAT,EAAgBuK,MAAhB;IACb,IAAMjQ,MAAG,cAAA,cAAA,cAAA,CAAA,GACJ,EAAA,CAAGuI,OAAO3C,KACXF,OACA,SAAC1F,GAAD,EAAM9D,KAAN,EAAagU,KAAb;QACElQ,GAAG,CAACkQ,MAAJ,GAAahU;QAEb,OAAO8D;IACR,GACD,CAAA,KAECiQ,SAHA,CAAA,GAAA,AAAA,CAAA,GAAA,iBAAA,OAAA,EAAA;QAIHrR,QAAQ8G,MAAM9G;IAXP,GAYNuG,OAAOC,UAAW;QAAA,OAAM,EAAA,CAAGO,MAAMC,KAAK5F,IAAd,CAAmBmF,OAAOC,SAA1B;IAAN;IAGrB,OAAOpF;AACR;;;A;A,O,e,S,c;I,O;A;A,Q,U,K;AEfD,IAAA,oCAAA,QAAA;AAFA,sCAAA;AAUe,IAAA,WAAA;IACbuH,aAAAA,kCAAAA;IACAE,cAAAA,kCAAAA;IACAC,cAAAA,kCAAAA;IACAC,cAAAA,kCAAAA;IACAC,kBAAAA,kCAAAA;AALa;A,Q,U;;;A;A,I,kB,A,I,I,I,C,mB,C,O,S,S,C,E,C,E,C,E,E;I,I,O,W,K;I,O,e,G,I;Q,Y;Q,K;Y,O,C,C,E;Q;I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,e,A,I,I,I,C,gB,S,C,E,Q;I,I,I,K,E,I,M,a,C,S,e,I,gB,U,G;A;A,O,e,S,c;I,O;A;AEVf,4DAA4D;AAC5D,kCAAkC;AAClC,IAAA,YAAA,QAAA;AACA,IAAA,YAAA,QAAA;AAEA,qEAAqE;AACrE,yEAAyE;AACzE,UAAA,OAAO,SAAS,sBAAsB,IAAI,UAAA;AAE1C,iBAAiB;AACjB,aAAA,QAAA,qBAAA;;;A;AEVA,4DAA4D;AAC5D,kCAAkC;A,I,kB,A,I,I,I,C,mB,C,O,S,S,C,E,C,E,C,E,E;I,I,O,W,K;I,O,e,G,I;Q,Y;Q,K;Y,O,C,C,E;Q;I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,e,A,I,I,I,C,gB,S,C,E,Q;I,I,I,K,E,I,M,a,C,S,e,I,gB,U,G;A;A,O,e,S,c;I,O;A;AAElC,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,oBAAA;AACA,aAAA,QAAA,oBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;AACA,aAAA,QAAA,qBAAA;;;A;AEbA,0DAAA,GACA,4DAA4D;AAC5D,kCAAkC;A,I,kB,A,I,I,I,C,mB,C,O,S,S,C,E,C,E,C,E,E;I,I,O,W,K;I,O,e,G,I;Q,Y;Q,K;Y,O,C,C,E;Q;I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,qB,A,I,I,I,C,sB,C,O,S,S,C,E,C;I,O,e,G,W;Q,Y;Q,O;I;A,I,S,C,E,C;I,C,C,U,G;A,C;A,I,e,A,I,I,I,C,gB,S,G;I,I,O,I,Y,O;I,I,S,C;I,I,O,M;Q,I,I,K,I,I,M,a,O,e,K,K,I,gB,Q,K;I;I,mB,Q;I,O;A;A,O,e,S,c;I,O;A;A,Q,yB,K;AAElC,IAAA,KAAA,aAAA,QAAA;AACA,IAAA,aAAA,QAAA;AAEA,IAAA,cAAA,QAAA;AAEA,IAAA,yBAAA,WAAA,GAAA;IAKI,SAAA,uBAAmB,cAAwC;QAAxC,IAAA,mBAAA,KAAA,GAAA,iBAA2B,WAAA,SAAS;QAH/C,IAAA,CAAA,cAA2B;QAC3B,IAAA,CAAA,0BAAmC;QAGvC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M,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG;QACnC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,GAAG;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG;QACnC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG;QACnC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,IAAI;QAChC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG;QACnC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,GAAG;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG;QACnC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,GAAG;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,GAAG;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG;QACnC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG;QACnC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG;QACnC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,GAAG;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,IAAI;QAChC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG;QACnC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG;QAC/B,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,GAAG;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG;QACnC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG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AW,KAAK;QAC3E;IACL;IAEQ,KAAA,UAAA,uBAAR,SAA6B,KAAa,EAAE,aAAsC;QAC9E,IAAI,eACA,IAAI;YACA,cAAc;QACjB,EAAC,OAAO,GAAG;YACR,MAAM,IAAI,MAAM,gCAA8B,IAAW,mBAAiB,QAAK;QAClF;aAED,MAAM,IAAI,MAAM,uBAAqB,QAAK;IAElD;IAEQ,KAAA,UAAA,iBAAR;QACI,IAAI,CAAC,oBAAoB,EAAE;QAC3B,IAAI,CAAC,sBAAsB,EAAE;IACjC;IACJ,OAAA;AAAA;AAlGa,QAAA,OAAA;AAoGb,+DAA+D;AAC/D,SAAgB,0BACZ,OAAmB,EACnB,EAAuB,EACvB,GAA6B;IAC7B,QAAQ,KAAK,SAAC,GAAM;QAChB,IAAI;YACA,IAAI,CAAC,CAAC,IACF,GAAG;QAEV,EAAC,OAAO,OAAO;YACZ,IAAI,CAAC,CAAC,KACF,IAAI;gBACA,IAAI,iBAAiB,OAAO;oBACxB,IAAM,aAAoB;oBAC1B,IAAI,WAAW,OAAO,OAAO,WAAW;gBAC3C,OACG,IAAI;YAEZ,oCAAoC;YACnC,EAAC,OAAO,OAAO,CAAA;QAEvB;IACL,GAAG,SAAC,KAAU;QACV,IAAI,CAAC,CAAC,KACF,IAAI;YACA,IAAI,iBAAiB,OAAO;gBACxB,IAAM,aAAoB;gBAC1B,IAAI,WAAW,OAAO,OAAO,WAAW;YAC3C,OACG,IAAI;QAEZ,oCAAoC;QACnC,EAAC,OAAO,OAAO,CAAA;IAExB;AACJ;AAnCA,QAAA,4BAAA;;;A;AEpNA,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,Q,K;AAElC,IAAA,UAAA,QAAA;AAGA,IAAA,SAAA,QAAA;AACA,IAAA,YAAA,QAAA;AAWA,IAAK;AAAL,CAAA,SAAK,cAAc;IACf,cAAA,CAAA,cAAA,CAAA,UAAA,GAAA,EAAA,GAAA;IACA,cAAA,CAAA,cAAA,CAAA,OAAA,GAAA,EAAA,GAAA;AACJ,CAAA,EAHK,kBAAA,CAAA,iBAAc,CAAA,CAAA;AAKnB,IAAA,QAAA,WAAA,GAAA;IASI,SAAA,MAAmB,IAAkB;QAArC,IAAA,QAAA,IAAA;QARQ,IAAA,CAAA,mBAAyC,IAAI,OAAA;QAI7C,IAAA,CAAA,wBAAiC;QACjC,IAAA,CAAA,kBAA2B;QAC3B,IAAA,CAAA,oBAA4B;QAGhC,IAAI,CAAC,WAAW,OAAO,OAAO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I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,S,K;AAElC,IAAA,UAAA,QAAA;AACA,IAAA,SAAA,QAAA;AACA,IAAA,UAAA,QAAA;AAQA,IAAA,SAAA,WAAA,GAAA;IAMI,SAAA,OAAmB,QAAiB;QAJ5B,IAAA,CAAA,mBAA4B;QAC5B,IAAA,CAAA,kBAA2B;QAI/B,IAAI,CAAC,SAAS,WAAW,WAAW,OAAA;QACpC,IAAI,CAAC,kBAAkB,IAAI,QAAA;IAC/B;IAEA,OAAA,eAAW,OAAA,WAAA,YAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,OAAA,W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G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,iB,Q,oC,K;AAElC,IAAA,YAAA,QAAA;AAKA,IAAA,YAAA,QAAA;AAqBA,IAAA,sBAAA,QAAA;AAaa,QAAA,oCAAoC;AAEjD,IAAA,iBAAA,WAAA,GAAA;IAsBI,SAAA,eACqB,YAAuB,EACvB,QAAiB,EAClC,aAAsB,EACtB,WAAyB;QAHR,IAAA,CAAA,eAAA;QACA,IAAA,CAAA,WAAA;QApBb,IAAA,CAAA,cAAsD,CAAA;QAyB1D,IAAI,CAAC,sBAAsB,eAAe,YAAY,iBAAiB;QACvE,IAAI,CAAC,SAAS,gBAAgB,gBAAgB,UAAA;QAC9C,IAAI,CAAC,aAAa,IAAI,UAAA;QACtB,IAAI,CAAC,kBAA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MAAM;aAEzC,MAAM,IAAI,MAAM;QAGpB,OAAO;IACX;IAEA,OAAA,eAAW,gBAAA,WAAA,cAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC,WAAW;QAC3B;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA,EAzHqC;AAAxB,QAAA,kBAAA;AA2Hb,IAAA,wBAAA,WAAA,GAAA,SAAA,MAAA;IAA2C,UAAA,uBAAA;IAGvC;;;;KAIG,GACH,SAAA,sBAAmB,WAA8B;QAAjD,IAAA,QACI,OAAA,KAAA,IAAA,KAAO,IAAA;QACP,MAAK,kBAAkB;Q,O;IAC3B;IAEA,OAAA,eAAW,sBAAA,WAAA,UAAX;QAAA,KAAA,SAAkB,MAAyB;YACvC,IAAI,CAAC,gBAAgB,SAAS;QAClC;Q,Y;Q,c;IAAC;IAEM,sBAAA,UAAA,QAAP,SAAa,MAAmB;QAC5B,IAAI,CAAC,gBAAgB,MAAM;IAC/B;IAEO,sBAAA,UAAA,QAAP;QACI,IAAI,CAAC,gBAAgB;IACzB;IAEO,sBAAA,UAAA,KAAP;QACI,OAAO,IAAI,CAAC,gBAAgB;IAChC;IAEO,sBAAA,UAAA,cAAP;QACI,MAAM,IAAI,MAAM;IACpB;IAEO,sBAAA,UAAA,cAAP;QACI,MAAM,IAAI,MAAM;IACpB;IACJ,OAAA;AAAA,EApC2C;AAA9B,QAAA,wBAAA;;;A;AEjVb,4DAA4D;AAC5D,kCAAkC;A,I,kB,A,I,I,I,C,mB,C,O,S,S,C,E,C,E,C,E,E;I,I,O,W,K;I,O,e,G,I;Q,Y;Q,K;Y,O,C,C,E;Q;I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,qB,A,I,I,I,C,sB,C,O,S,S,C,E,C;I,O,e,G,W;Q,Y;Q,O;I;A,I,S,C,E,C;I,C,C,U,G;A,C;A,I,e,A,I,I,I,C,gB,S,G;I,I,O,I,Y,O;I,I,S,C;I,I,O,M;Q,I,I,K,I,I,M,a,O,e,K,K,I,gB,Q,K;I;I,mB,Q;I,O;A;A,O,e,S,c;I,O;A;A,Q,kB,K;AAElC,IAAA,KAAA,aAAA,QAAA;AAEA,IAAA,cAAA,QAAA;AAIA,IAAA,kBAAA,WAAA,GAAA;IAMI,SAAA,gBAAmB,QAAqB;QACpC,YAAA,UAAU,uBAAuB,GAAG,UAAU;QAC9C,IAAI,CAAC,SAAS,GAAG,SAAS,UAAU;IACxC;IAEA,OAAA,eAAW,gBAAA,WAAA,UAAX;QAAA,KAAA,SAAkB,MAAyB;YACvC,YAAA,UAAU,oBAAoB,IAAI,CAAC,iBAAiB;YACpD,IAAI,CAAC,kBAAkB;YACvB,IAAI,eAAuB;YAC3B,IAAI,IAAI,CAAC,gBAAgB,WACrB,eAAe,IAAI,CAAC,gBAAgB,OAAO;YAE/C,IAAI,IAAI,CAAC,WAAW,WAChB,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,IAAI;gBAAC,IAAI,IAAI,CAAC;gBAAQ,OAAO;gBAAc,WAAW;YAAK;QAE/G;Q,Y;Q,c;IAAC;IAEM,gBAAA,UAAA,QAAP,SAAa,MAAmB;QAC5B,YAAA,UAAU,uBAAuB,IAAI,CAAC,iBAAiB;QACvD,IAAI,IAAI,CAAC,oBAAoB,WACzB,IAAI,CAAC,gBAAgB,MAAM,IAAI,WAAW,OAAO,MAAM;IAE/D;IAEO,gBAAA,UAAA,QAAP;QAAA,IAAA,QAAA,IAAA;QACI,IAAI,IAAI,CAAC,WAAW,WAAW;YAC3B,IAAI,CAAC,gBAAgB,GAAG,UAAU;gBAC9B,IAAI,MAAK,gBAAgB,WAAW;oBAChC,MAAK,gBAAgB,aAAa,MAAK,gBAAgB;oBACvD,GAAG,UAAU,MAAK,QACd,IAAI,UAAU,MAAK,gBAAgB,SACnC,GACA,MAAK,gBAAgB,OAAO,YAC5B;gBACP;gBACD,GAAG,UAAU,MAAK;gBAClB,MAAK,SAAS;YAClB;YACA,IAAI,CAAC,gBAAgB;QACxB;IACL;IAEO,gBAAA,UAAA,KAAP;QACI,OAAO,IAAI,CAAC;IAChB;IACJ,OAAA;AAAA;AAnDa,QAAA,kBAAA;;;;A;AETb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,2B,Q,uB,Q,2B,Q,uB,Q,mB,K;AAElC,uCAAA,GAEA,IAAA,YAAA,QAAA;AAKA,IAAA,YAAA,QAAA;AAeA,IAAA,SAAA,QAAA;AACA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O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,4B,Q,wB,Q,4B,Q,wB,Q,oB,K;AAElC,uCAAA,GAEA,IAAA,YAAA,QAAA;AAMA,IAAA,cAAA,QAAA;AAKA,IAAA,sBAAA,QAAA;AAEA;;;CAG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;QACtB,MAAK,aAAa;QAClB,MAAK,uBAAuB;QAC5B,MAAK,8BAA8B;QACnC,MAAK,eAAe;Q,O;IACxB;IAEc,sBAAA,kCAAd,SAA8C,2BAAyD;QACnG,IAAI,gCAAgC,WAChC,OAAO,sBAAsB;QAEjC,OAAO,sBAAsB,sCACzB,sBAAsB,mCAAmC,CAAC,4BAA4B;IAC9F;IAEc,sBAAA,wCAAd,SAAoD,iCAAyC;QACzF,OAAQ;YACJ,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,OACf,GACA,MACA,MACA,GACA,GACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,OACf,GACA,OACA,MACA,IACA,GACA,mCACA,iCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,OACf,GACA,OACA,MACA,IACA,GACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,KACf,GACA,OACA,MACA,GACA,IACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,KACf,GACA,OACA,OACA,GACA,IACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,KACf,GACA,OACA,MACA,GACA,IACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,KACf,GACA,OACA,MACA,GACA,IACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,KACf,GACA,OACA,OACA,GACA,IACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,KACf,GACA,OACA,OACA,GACA,IACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,WACf,GACA,OACA,OACA,GACA,IACA,mCACA,mCACA;YAER,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,KACf,GACA,MACA,OACA,GACA,IACA,mCACA,2BACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,KACf,GACA,OACA,OACA,GACA,IACA,mCACA,4BACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,OACf,GACA,MACA,MACA,GACA,GACA,mCACA,4BACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,KACf,GACA,OACA,OACA,GACA,IACA,mCACA,4BACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,KACf,GACA,OACA,OACA,GACA,IACA,mCACA,4BACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,KACf,GACA,MACA,OACA,GACA,IACA,mCACA,2BACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,UACf,GACA,OACA,MACA,GACA,IACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,UACf,GACA,OACA,MACA,GACA,IACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,KACf,GACA,OACA,OACA,GACA,IACA,mCACA,4BACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,KACf,GACA,OACA,OACA,GACA,IACA,mCACA,4BACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,KACf,GACA,OACA,OACA,GACA,IACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,KACf,GACA,OACA,OACA,GACA,IACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,UACf,GACA,OACA,OACA,GACA,IACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,WACf,GACA,OACA,MACA,GACA,IACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,WACf,GACA,OACA,MACA,GACA,IACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,WACf,GACA,OACA,MACA,GACA,IACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,MACf,GACA,OACA,MACA,GACA,IACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,MACf,GACA,OACA,MACA,GACA,IACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,MACf,GACA,OACA,MACA,GACA,IACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,MACf,GACA,OACA,OACA,GACA,IACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,MACf,GACA,OACA,OACA,GACA,IACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,WACf,GACA,OACA,OACA,GACA,IACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,MACf,GACA,MACA,MACA,GACA,GACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,MACf,GACA,MACA,MACA,GACA,GACA,mCACA,2BACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,KACf,GACA,OACA,OACA,GACA,IACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,KACf,GACA,OACA,OACA,GACA,IACA,mCACA,8BACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,KACf,GACA,OACA,OACA,GACA,IACA,mCACA,mCACA;YACR,KAAK;gBACD,OAAO,IAAI,sBACP,oBAAA,eAAe,KACf,GACA,OACA,OACA,GACA,IACA,mCACA,8BACA;YACR,KAAK;YACL;gBACI,OAAO,IAAI,sBACP,oBAAA,eAAe,KACf,GACA,OACA,OACA,GACA,IACA,6BACA,4BACA;QACX;IACL;IAEc,sBAAA,yBAAd;QACI,OAAO,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,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,O,e,S,c;I,O;A;A,Q,uB,K;AAElC,IAAA,YAAA,QAAA;AAEA;;;CAGG,GACH,IAAA,uBAAA,WAAA,GAAA,SAAA,MAAA;IAA0C,UAAA,sBAAA;IAGtC;;;;;KAKG,GACH,SAAA,qBAAmB,MAAc,EAAE,SAAkB;QAArD,IAAA,QACI,OAAA,KAAA,IAAA,EAAM,cAAU,IAAA;QAEhB,MAAK,aAAa;Q,O;IACtB;IAQA,OAAA,eAAW,qBAAA,WAAA,UAAX;QANA;;;;;SAKG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA,EAxB0C,UAAA;AAA7B,QAAA,uBAAA;;;A;AETb,4DAA4D;AAC5D,kCAAkC;A,O,e,S,c;I,O;A;A,Q,e,K;AAElC;;;CAGG,GACH,IAAY;AAAZ,CAAA,SAAY,YAAY;IACpB;;KAEG,GACH,YAAA,CAAA,YAAA,CAAA,SAAA,GAAA,EAAA,GAAA;IAEA;;KAEG,GACH,YAAA,CAAA,YAAA,CAAA,WAAA,GAAA,EAAA,GAAA;AACJ,CAAA,EAVY,eAAA,QAAA,gBAAA,CAAA,QAAA,eAAY,CAAA,CAAA;;;A;AEPxB,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,O,e,S,c;I,O;A;A,Q,6B,K;AAElC,IAAA,YAAA,QAAA;AAEA;;;CAGG,GACH,IAAA,6BAAA,WAAA,GAAA,SAAA,MAAA;IAAgD,UAAA,4BAAA;IAG5C;;;;;;KAMG,GACH,SAAA,2BAAmB,MAA+B,EAAE,MAAe,EAAE,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AA;AAAhC,QAAA,0BAAA;;;A;AETb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,O,e,S,c;I,O;A;A,Q,0B,K;AAElC,IAAA,YAAA,QAAA;AAEA;;;CAGG,GACH,IAAA,0BAAA,WAAA,GAAA,SAAA,MAAA;IAA6C,UAAA,yBAAA;IAGzC;;;;;;;;;;;;;;KAcG,GACH,SAAA,wBAAmB,QAAiB,EAAE,QAAiB,EAAE,MAAqB,EAAE,IAAa,EACjF,QAAiB,EAAE,MAAe,EAAE,QAAiB,EAAE,2BAAoC,EAC3F,YAAqB,EAAE,IAAa,EAAE,UAA+B;QAFjF,IAAA,QAGI,OAAA,KAAA,IAAA,EAAM,UAAU,QAAQ,MAAM,UAAU,QAAQ,UAAU,6BAA6B,WAAW,cAAc,MAAM,eAAW,IAAA;QAEjI,MAAK,eAAe;Q,O;IACxB;IASA,OAAA,eAAW,wBAAA,WAAA,YAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA,EApC6C,UAAA;AAAhC,QAAA,0BAAA;;;A;AETb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,O,e,S,c;I,O;A;A,Q,iC,Q,6B,K;AAElC,gDAAgD;AAChD,IAAA,cAAA,QAAA;AAEA;;;CAGG,GACH,IAAA,6BAAA,WAAA,GAAA;IACI;;;KAGG,GACH,SAAA;QACI;IACJ;IAEA;;;;;;;KAOG,GACW,2BAAA,eAAd,SAA2B,GAAQ;QAC/B,YAAA,UAAU,YAAY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AA,MAAA;IAAwD,UAAA,oCAAA;IAAxD,SAAA;Q,O,W,Q,O,M,I,E,c,I;IACA;IAAA,OAAA;AAAA,EADwD,4BAAA;AAA3C,QAAA,qCAAA;;;A;AEPb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,O,e,S,c;I,O;A;A,Q,4B,K;AAElC,IAAA,YAAA,QAAA;AAOA;;;CAGG,GACH,IAAA,4BAAA,WAAA,GAAA,SAAA,MAAA;IAA+C,UAAA,2BAAA;IAK3C;;;;;;;KAOG,GACH,SAAA,0BAAmB,MAA0B,EAAE,YAAoB,EAChD,SAAgC,EAAE,MAAe,EAAE,SAAkB;QADxF,IAAA,QAEI,OAAA,KAAA,IAAA,EAAM,QAAQ,cAAU,IAAA;QAExB,MAAK,aAAa;QAClB,MAAK,mBAAmB;QACxB,MAAK,gBAAgB;Q,O;IACzB;IASA,OAAA,eAAW,0BAAA,WAAA,UAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAMD,OAAA,eAAW,0BAAA,WAAA,aAAX;QAJA;;;SAGG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IASD,OAAA,eAAW,0BAAA,WAAA,gBAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA,EAnD+C,UAAA;AAAlC,QAAA,4BAAA;;;A;AEdb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,O,e,S,c;I,O;A;A,Q,kC,K;AAElC,IAAA,YAAA,QAAA;AAEA;;;CAGG,GACH,IAAA,kCAAA,WAAA,GAAA,SAAA,MAAA;IAAqD,UAAA,iCAAA;IAGjD;;;;;;KAMG,GACH,SAAA,gCAAmB,MAAoC,EAAE,MAAe,EAAE,SAAkB;QAA5F,IAAA,QACI,OAAA,KAAA,IAAA,EAAM,QAAQ,cAAU,IAAA;QAExB,MAAK,aAAa;Q,O;IACtB;IASA,OAAA,eAAW,gCAAA,WAAA,UAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA,EA1BqD,UAAA;AAAxC,QAAA,kCAAA;;;A;AETb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,O,e,S,c;I,O;A;A,Q,gC,K;AAElC,IAAA,YAAA,QAAA;AAEA;;;CAGG,GACH,IAAA,gCAAA,WAAA,GAAA,SAAA,MAAA;IAAmD,UAAA,+BAAA;IAG/C;;;;;KAKG,GACH,SAAA,8BAAmB,MAAkC,EAAE,SAAkB;QAAzE,IAAA,QACI,OAAA,KAAA,IAAA,EAAM,cAAU,IAAA;QAEhB,MAAK,aAAa;Q,O;IACtB;IASA,OAAA,eAAW,8BAAA,WAAA,UAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA,EAzBmD,UAAA;AAAtC,QAAA,gCAAA;;;A;AETb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;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AA,aAAU,CAAA,CAAA;;;A;AEPtB,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,a,K;AAElC,IAAA,YAAA,QAAA;AAYA,IAAA,YAAA,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O,G;oB,K;wBACI,YAAA,UAAU,gBAAgB,IAAI,CAAC;wBAC/B,OAAA;4BAAA,EAAA,OAAA;4BAAM,IAAI,CAAC;yBAAoB;oB,K;wBAA/B,GAAA;wB,O;4B,E,Q;yB;gB;Y;Q;IACH;IAEe,WAAA,UAAA,qBAAhB;Q,O,U,I,E,K,G,K,G;Y,O,Y,I,E,S,E;gB,O,G;oB,K;wBACQ,IAAA,CAAA,IAAI,CAAC,UAAL,OAAA;4BAAA,EAAA,OAAA;4BAAA;yBAAA;wBACA,OAAA;4BAAA,EAAA,OAAA;4BAAM,IAAI,CAAC,SAAS;yBAAiB;oB,K;wBAArC,GAAA;wB,G,Q;oBAEJ,KAAA;wBAAA,OAAA;4BAAA,EAAA,QAAA;yBAAA;gB;Y;Q;IACH;IAEgB,WAAA,wBAAjB,SAAuC,UAA8B;QACjE,IAAM,kBAAkB,WAAW,YAAY,UAAA,WAAW,6BAA6B;QACvF,IAAM,iBAAiB,AAAC,mBAAmB,oBAAoB,KAC3D,IAAI,UAAA,uCAAuC,mBAC3C,IAAI,UAAA,6BACA;YACI,IAAM,qBAAqB,WAAW,YAAY,UAAA,WAAW,kCAAkC;YAC/F,OAAO,QAAQ,QAAQ;QAC3B,GACA;YACI,IAAM,qBAAqB,WAAW,YAAY,UAAA,WAAW,kCAAkC;YAC/F,OAAO,QAAQ,QAAQ;QAC3B;QAER,OAAO;IACX;IACJ,OAAA;AAAA;AAjNsB,QAAA,aAAA;;;A;AEnCtB,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,mB,K;AAElC,IAAA,YAAA,QAAA;AAWA,IAAA,YAAA,QAAA;AAEA,IAAA,cAAA,QAAA;AACA,IAAA,YAAA,QAAA;AAcA;;;CAGG,GACH,IAAA,mBAAA,WAAA,GAAA,SAAA,MAAA;IAAsC,UAAA,kBAAA;IAGlC;;;;;KAKG,GACH,SAAA,iBAAmB,YAA0B,EAAE,WAAyB;QAAxE,IAAA,QAAA,IAAA;QACI,IAAM,mBAAqC;QAC3C,YAAA,UAAU,YAAY,kBAAkB;QAExC,YAAA,UAAU,wBACN,iBAAiB,WAAW,YAAY,U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,cAAc,IAAI,CAAC;IACnD;IAEU,iBAAA,UAAA,0BAAV,SACI,cAA+B,EAC/B,iBAAqC,EACrC,WAAwB,EACxB,gBAAkC;QAClC,IAAM,aAA8B;QACpC,OAAO,IAAI,UAAA,wBAAwB,gBAAgB,mBAAmB,YAAY,kBAAkB,IAAI;IAC5G;IACJ,OAAA;AAAA,EAlQsC,UAAA;AAAzB,QAAA,mBAAA;;;A;AEnCb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,mB,K;AAElC,IAAA,YAAA,QAAA;AAWA,IAAA,YAAA,QAAA;AAEA,IAAA,cAAA,QAAA;AACA,IAAA,YAAA,QAAA;AAeA;;;CAGG,GACH,IAAA,mBAAA,WAAA,GAAA,SAAA,MAAA;IAAsC,UAAA,kBAAA;IAMlC;;;;;KAKG,GACH,SAAA,iBAAmB,YAA0B,EAAE,WAAyB;QAAxE,IAAA,QAAA,IAAA;QACI,YAAA,UAAU,uBAAuB,cAAc;QAC/C,IAAM,aAA+B;QACrC,YAAA,UAAU,uBAAuB,YAAY;QAE7C,QAAA,OAAA,KAAA,IAAA,EAAM,aAAa,WAAW,YAAY,IAAI,UAAA,8BAA0B,IAAA;QACxE,MAAK,mBAAmB,EAAE;QAC1B,MAAK,qBAAqB,CAAA;QAE1B,MAAK,+BAA+B;QACpC,MAAK,iBAAiB,WAAW;QAEjC,YAAA,UAAU,wBAAwB,MAAK,WAAW,YAAY,UAAA,WAAW,uCAAuC,UAAA,UAAU,CAAC,UAAA,WAAW,qCAAqC;Q,O;IAC/K;IAiCA,OAAA,eAAW,iBAAA,WAAA,6BAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,YAAA,UAAU,gBAAgB,IAAI,CAAC;YAE/B,OAAO,IAAI,CAAC,WAAW,YAAY,UAAA,WAAW;QAClD;Q,Y;Q,c;IAAC;IASD,OAAA,eAAW,iBAAA,WAAA,sBAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC,WAAW,YAAY,UAAA,WAAW;QAClD;QAEA;;;;;;;SAOG,GACH,KAAA,SAA8B,KAAa;YACvC,I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AC,cAAc,IAAI,CAAC,qBAAsB,cAAc;gBAAC,UAAU,QAAQ;aAAc;QAC/G;IACL;IACJ,OAAA;AAAA,EA3VsC,UAAA;AAAzB,QAAA,mBAAA;;;A;AEpCb,4DAA4D;AAC5D,kCAAkC;A,O,e,S,c;I,O;A;A,Q,mB,K;AAElC;;;CAGG,GACH,IAAY;AAAZ,CAAA,SAAY,gBAAgB;IAExB;;;KAGG,GACH,gBAAA,CAAA,gBAAA,CAAA,gCAAA,GAAA,EAAA,GAAA;IAEA;;;KAGG,GACH,gBAAA,CAAA,gBAAA,CAAA,4BAAA,GAAA,EAAA,GAAA;IAEA;;;KAGG,GACH,gBAAA,CAAA,gBAAA,CAAA,8BAAA,GAAA,EAAA,GAAA;AACJ,CAAA,EAnBY,mBAAA,QAAA,oBAAA,CAAA,QAAA,mBAAgB,CAAA,CAAA;;;A;AEP5B,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,wB,K;AAElC,IAAA,YAAA,QAAA;AAUA,IAAA,YAAA,QAAA;AAEA,IAAA,eAAA,QAAA;AACA,IAAA,cAAA,QAAA;AACA,IAAA,YAAA,QAAA;AAaA;;;CAGG,GACH,IAAA,wBAAA,WAAA,GAAA,SAAA,MAAA;IAA2C,UAAA,uBAAA;IAmCvC;;;;;;KAMG,GACH,SAAA,sBAAmB,YAAqC,EAAE,WAAyB,EAAE,iBAAsC;QAA3H,IAAA,QAAA,IAAA;QACI,IAAM,aAAa;QACnB,YAAA,UAAU,YAAY,YAAY;QAElC,QAAA,OAAA,KAAA,IAAA,EAAM,aAAa,WAAW,YAAY,qBAAqB,IAAI,UAAA,mCAA+B,IAAA;QAElG,MAAK,oCAAoC;QAEzC,IAAI,MAAK,WAAW,YAAY,UAAA,WAAW,0CAA0C,eAAe,WAChG,YAAA,UAAU,wBACN,MAAK,WAAW,YAAY,UAAA,WAAW,2CACvC,UAAA,UAAU,CAAC,UAAA,WAAW,yCAAyC;QAGvE,YAAA,UAAU,wBACN,MAAK,WAAW,YAAY,UAAA,WAAW,iDACvC,UAAA,UAAU,CAAC,UAAA,WAAW,+CAA+C;QAEzE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A,qBAAA,CAAA,YAAA,GAAA,EAAA,GAAA;AACJ,CAAA,EA9CY,wBAAA,QAAA,yBAAA,CAAA,QAAA,wBAAqB,CAAA,CAAA;;;A;AEPjC,EAAE;AACF,gDAAgD;AAChD,wGAAwG;AACxG,EAAE;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,O,e,S,c;I,O;A;A,Q,sB,K;AAEF,IAAA,YAAA,QAAA;AAEA;;;CAGG,GACH,IAAA,sBAAA,WAAA,GAAA,SAAA,MAAA;IAAyC,UAAA,qBAAA;IAAzC,SAAA;Q,O,W,Q,O,M,I,E,c,I;IACA;IAAA,OAAA;AAAA,EADyC,UAAA;AAA5B,QAAA,sBAAA;;;A;AEXb,EAAE;AACF,gDAAgD;AAChD,wGAAwG;AACxG,EAAE;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,O,e,S,c;I,O;A;A,Q,mB,K;AAEF,IAAA,YAAA,QAAA;AAEA;;;CAGG,GAEH,IAAA,mBAAA,WAAA,GAAA,SAAA,MAAA;IAAsC,UAAA,kBAAA;IAIlC;;;;KAIG,GACH,SAAA,iBAAmB,IAAY,EAAG,IAAY,EAAE,SAAkB;QAAlE,IAAA,QACI,OAAA,KAAA,IAAA,EAAM,cAAU,IAAA;QAChB,MAAK,iBAAiB;QACtB,MAAK,gBAAgB;Q,O;IACzB;IAEA,OAAA,eAAW,iBAAA,WAAA,cAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,iBAAA,WAAA,aAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IACL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AwB,QAAQ;QAE1C,IAAM,uBAA6C,IAAI,sBAAA;QACvD,qBAAqB,YAAY,UAAA,WAAW,yBAAyB,sBAAA,oBAAoB,YAAY;QACrG,qBAAqB,YAAY,UAAA,WAAW,4BAA4B;QACxE,qBAAqB,YAAY,UAAA,WAAW,6BAA6B;QACzE,qBAAqB,YAAY,UAAA,WAAW,gCAAgC;QAC5E,OAAO;IACX;IAEA;;;;;;;;;;;;;;KAcG,GACW,qBAAA,yBAAd,SAAqC,aAAqB,EAAE,kBAA0B,EAAE,MAAc;QAClG,YAAA,UAAU,wBAAwB,eAAe;QACjD,YAAA,UAAU,wBAAwB,oBAAoB;QACtD,YAAA,UAAU,wBAAwB,QAAQ;QAE1C,IAAM,uBAA6C,IAAI,sBAAA;QACvD,qBAAqB,YAAY,UAAA,WAAW,yBAAyB,sBAAA,oBAAoB,YAAY;QACrG,qBAAqB,YAAY,UAAA,WAAW,4BAA4B;QACxE,qBAAqB,YAAY,UAAA,WAAW,kCAAkC;QAC9E,qBAAqB,YAAY,UAAA,WAAW,gCAAgC;QAC5E,OAAO;IACX;IASA,OAAA,eAAW,qBAAA,WAAA,iBAAX;QAKA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC,YAAY,UAAA,WAAW;QACvC;QArBA;;;;;;SAMG,GACH,KAAA,SAAyB,KAAa;YAClC,YAAA,UAAU,wBAAwB,OAAO;YACzC,IAAI,CAAC,YAAY,UAAA,WAAW,4BAA4B;QAC5D;Q,Y;Q,c;IAAC;IAYL,OAAA;AAAA,EAlF0C,sBAAA;AAA7B,QAAA,uBAAA;;;A;AEXb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,yB,K;AAElC,IAAA,2BAAA,QAAA;AACA,IAAA,YAAA,QAAA;AAUA,IAAA,YAAA,QAAA;AAMA,IAAA,cAAA,QAAA;AAEA,IAAA,YAAA,QAAA;AAQA,IAAA,eAAA,QAAA;AAGA;;;CAGG,GACH,IAAA,yBAAA,WAAA,GAAA,SAAA,MAAA;IAA4C,UAAA,wBAAA;IAIxC;;;;;KAKG,GACH,SAAA,uBAAm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;oBACD,OAAO;gBACX,KAAK;oBACD,OAAO;gBACX;oBACI,+DAA+D;oBAC/D,OAAO,IAAI,CAAC,0BAA0B;YAC7C;QACL;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA;AAlCa,QAAA,4BAAA;;;A;AETb,uCAAuC;AACvC,kCAAkC;A,O,e,S,c;I,O;A;A,Q,yB,K;AAElC;;;CAGG,GACH,IAAY;AAAZ,CAAA,SAAY,sBAAsB;IAC9B;;KAEG,GACH,sBAAA,CAAA,sBAAA,CAAA,oBAAA,GAAA,EAAA,GAAA;AACJ,CAAA,EALY,yBAAA,QAAA,0BAAA,CAAA,QAAA,yBAAsB,CAAA,CAAA;;;A;AEPlC,uCAAuC;AACvC,kCAAkC;A,O,e,S,c;I,O;A;A,Q,kB,K;AAElC;;;CAGG,GACH,IAAY;AAAZ,CAAA,SAAY,eAAe;IACvB,eAAA,CAAA,eAAA,CAAA,SAAA,GAAA,EAAA,GAAA;IACA,eAAA,CAAA,eAAA,CAAA,UAAA,GAAA,EAAA,GAAA;IACA,eAAA,CAAA,eAAA,CAAA,MAAA,GAAA,EAAA,GAAA;AACJ,CAAA,EAJY,kBAAA,QAAA,mBAAA,CAAA,QAAA,kBAAe,CAAA,CAAA;;;A;AEP3B,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,kB,K;AAElC,IAAA,UAAA,QAAA;AACA,IAAA,YAAA,QAAA;AACA,IAAA,sBAAA,QAAA;AAGA;;;;CAIG,GACH,IAAA,kBAAA,WAAA,GAAA;IASI;;;;KAIG,GACH,SAAA,gBAAmB,WAA+B;QAZ1C,IAAA,CAAA,eAA6B;QAC7B,IAAA,CAAA,WAAqB;QAErB,IAAA,CAAA,wBAA6B;QAUjC,IAAI,gBAAgB,WAChB,cAAc,UAAA,kBAAkB;QAEpC,IAAI,CAAC,KAAK;IACd;IAEA;;;KAGG,GACI,gBAAA,UAAA,kBAAP,SAAuB,YAAyB,EAAE,EAAe,EAAE,GAA6B;QAC5F,IAAI;YACA,IAAI,CAAC;YACL,IAAM,YAAY,IAAI,CAAC,gBAAgB;YACvC,IAAM,iBAAiB,IAAI,aAAa,IAAI,CAAC,QAAQ,SAAS,UAAU;YACxE,eAAe,IAAI,IAAI,CAAC,SAAS;YACjC,eAAe,IAAI,WAAW,IAAI,CAAC,QAAQ;YAC3C,IAAI,CAAC,UAAU;YACf,IAAI,CAAC,CAAC,IACF;QAEP,EAAC,OAAO,GAAG;YACR,IAAI,CAAC,CAAC,KAC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BAAA;;;A;AEbb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E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4BAAM,IAAI,CAAC,QAAQ;yBAAK;oB,K;wBAAxB,GAAA;wB,O;4B,E,Q;yB;gB;Y;Q;IACH;IAES,mBAAA,UAAA,0BAAV,SAAkC,cAA+B,EAAE,iBAAqC,EAAE,WAAwB,EAAE,gBAAkC;QAClK,IAAM,YAA6B;QACnC,OAAO,IAAI,UAAA,uBAAuB,gBAAgB,mBAAmB,WAAW,kBAAkB,IAAI;IAC1G;IAEgB,mBAAA,UAAA,UAAhB,SAAwB,SAAkB;Q,O,U,I,E,K,G,K,G;Y,O,Y,I,E,S,E;gB,O,G;oB,K;wBACtC,IAAI,IAAI,CAAC,0BACL,OAAA;4BAAA,EAAA,QAAA;yBAAA;wBAGJ,IAAI,CAAC,2BAA2B;wBAE5B,IAAA,CAAA,WAAA,OAAA;4BAAA,EAAA,OAAA;4BAAA;yBAAA;wBACA,OAAA;4BAAA,EAAA,OAAA;4BAAM,OAAA,UAAM,QAAO,KAAA,IAAA,EAAC;yBAAU;oB,K;wBAA9B,GAAA;wB,G,Q;oB,K;wB,O;4B,E,Q;yB;gB;Y;Q;IAEP;IAES,mBAAA,UAAA,yBAAV,SAAiC,YAAiC;QAC9D,OAAO,IAAI,UAAA,iBAAiB,cAAc,IAAI,CAAC;IACnD;IAEQ,mBAAA,UAAA,YAAR,SAAkB,MAAqB,EAAE,aAA2B;QAChE,IAAM,WACF,IAAI,UAAA,mBACA,OAAO,KAAK,gBAAgB,UAAA,aAAa,UACzC,OAAO;QAEf,OAAQ;IACZ;IACJ,OAAA;AAAA,EA1MwC,UAAA;AAA3B,QAAA,qBAAA;;;A;AEpCb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,oB,K;AAElC,IAAA,YAAA,QAAA;AAWA,IAAA,cAAA,QAAA;AACA,IAAA,YAAA,QAAA;AAUA;;;;CAIG,GACH,IAAA,oBAAA,WAAA,GAAA,SAAA,MAAA;IAAuC,UAAA,mBAAA;IAInC;;;;;KAKG,GACH,SAAA,kBAAmB,YAA0B,EAAE,WAAwB;QAAvE,IAAA,QAAA,IAAA;QACI,YAAA,UAAU,uBAAuB,cAAc;QAC/C,IAAM,aAA+B;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gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,I,iB,A,I,I,I,C,kB;I,I,I,I,G,I,G,K,U,Q,I,I,I,K,S,C,E,C;I,I,I,I,M,I,I,G,I,G,I,I,I,I,I,I,S,C,E,E,I,G,K,E,Q,I,I,K,I,C,C,E,G,C,C,E;I,O;A;A,O,e,S,c;I,O;A;A,Q,mB,Q,e,K;AAElD,uCAAA,GAEA,IAAA,YAAA,QAAA;AAkBA,IAAA,YAAA,QAAA;A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;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,O,e,S,c;I,O;A;A,Q,kC,K;AAElD,IAAA,YAAA,QAAA;AAEA,IAAA,kCAAA,WAAA,GAAA,SAAA,MAAA;IAAqD,UAAA,iCAAA;IAGjD,SAAA,gCAAmB,cAAsB,EAAE,SAAkB;QAA7D,IAAA,QACI,OAAA,KAAA,IAAA,EAAM,cAAU,IAAA;QAChB,MAAK,qBAAqB;Q,O;IAC9B;IAGA,OAAA,eAAW,gCAAA,WAAA,kBAAX;QADA,iEAAA,GACA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA,EAZqD,UAAA;AAAxC,QAAA,kCAAA;;;A;AENb,4DAA4D;AAC5D,kCAAkC;AAClC,kDAAkD;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,O,e,S,c;I,O;A;A,Q,2C,K;AAElD,IAAA,YAAA,QAAA;AAIA,IAAA,2CAAA,WAAA,GAAA,SAAA,MAAA;IAA8D,UAAA,0CAAA;IAI1D,SAAA,yCAAmB,MAAgC,EAAE,YAA4B,EAAE,SAAkB;QAArG,IAAA,QACI,OAAA,KAAA,IAAA,EAAM,cAAU,IAAA;QAChB,MAAK,aAAa;QAClB,MAAK,kBAAkB;Q,O;IAC3B;IAEA,OAAA,eAAW,yCAAA,WAAA,UAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,yCAAA,WAAA,gBAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA,EAjB8D,UAAA;AAAjD,QAAA,2CAAA;;;A;AERb,4DAA4D;AAC5D,kCAAkC;AAClC,kDAAkD;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,O,e,S,c;I,O;A;A,Q,2C,K;AAElD,IAAA,8BAAA,QAAA;AAEA,IAAA,2CAAA,WAAA,GAAA,SAAA,MAAA;IAA8D,UAAA,0CAAA;IAA9D,SAAA;Q,O,W,Q,O,M,I,E,c,I;IACA;IAAA,OAAA;AAAA,EAD8D,4BAAA;AAAjD,QAAA,2CAAA;;;A;AENb,4DAA4D;AAC5D,kCAAkC;AAClC,kDAAkD;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,O,e,S,c;I,O;A;A,Q,mC,K;AAElD,IAAA,YAAA,QAAA;AAGA,IAAA,mCAAA,WAAA,GAAA,SAAA,MAAA;IAAsD,UAAA,kCAAA;IAGlD;;;;;;KAMG,GACH,SAAA,iCAAmB,MAAqC,EAAE,MAAe,EAAE,SAAkB;QAA7F,IAAA,QACI,OAAA,KAAA,IAAA,EAAM,QAAQ,cAAU,IAAA;QACxB,MAAK,aAAa;Q,O;IACtB;IAMA,OAAA,eAAW,iCAAA,WAAA,UAAX;QAJA;;;SAGG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA,EAtBsD,UAAA;AAAzC,QAAA,mCAAA;;;A;AEPb,4DAA4D;AAC5D,kCAAkC;AAClC,kDAAkD;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,O,e,S,c;I,O;A;A,Q,gC,K;AAIlD,IAAA,iCAAA,QAAA;AAGA,IAAA,gCAAA,WAAA,GAAA,SAAA,MAAA;IAAmD,UAAA,+BAAA;IAI/C,SAAA,8BAAmB,aAAqB,EACrB,YAA0B,EAC1B,gBAAyB,EACzB,QAAiB,EACjB,MAAqB,EACrB,IAAa,EACb,QAAiB,EACjB,MAAe,EACf,YAAqB,EACrB,IAAa,EACb,UAA+B;QAVlD,IAAA,QAWI,OAAA,KAAA,IAAA,EAAM,cAAc,UAAU,QAAQ,MAAM,UAAU,QAAQ,WAAW,WAAW,cAAc,MAAM,eAAW,IAAA;QACnH,MAAK,SAAS;QACd,MAAK,eAAe;Q,O;IACxB;IAKA,OAAA,eAAW,8BAAA,WAAA,iBAAX;QAHA;;SAEG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAKD,OAAA,eAAW,8BAAA,WAAA,gBAAX;QAHA;;SAEG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA,EAjCmD,+BAAA;AAAtC,QAAA,gCAAA;;;A;AETb,4DAA4D;AAC5D,kCAAkC;AAClC,kDAAkD;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,yB,Q,c,K;AAElD,uCAAA,GAEA,IAAA,YAAA,QAAA;AAKA,IAAA,4CAAA,QAAA;AACA,IAAA,YAAA,QAAA;AAMA,IAAA,cAAA,QAAA;AACA,IAAA,YAAA,QAAA;AAaA,IAAA,iBAAA,QAAA;AACA,IAAA,YAAA,QAAA;AAYA,IAAY;AAAZ,CAAA,SAAY,WAAW;IACnB,WAAA,CAAA,WAAA,CAAA,WAAA,GAAA,EAAA,GAAA;IAAU,WAAA,CAAA,WAAA,CAAA,aAAA,GAAA,EAAA,GAAA;IAAY,WAAA,CAAA,WAAA,CAAA,YAAA,GAAA,EAAA,GAAA;AAC1B,CAAA,EAFY,cAAA,QAAA,eAAA,CAAA,QAAA,cAAW,CAAA,CAAA;AAIvB,sFAAsF;AACtF,IAAA,oCAAA,WAAA,GAAA,SAAA,MAAA;IAAgD,UAAA,mCAAA;IAI5C,SAAA,kCAAmB,YAAqC,EAAE,WAAwB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,OACG,aAAa;oBAEjB;gBAEJ,KAAK;oBACD,IAAI,SAAS,KAAK;wBACd,WAAW;wBACX;oBACH,OAAM;wBACH,IAAI,aAAa,eAAe,MAC5B,aAAa,YAAY,CAAC,IAAI;wBAGlC,aAAa;wBACb,MAAM;oBACT;oBACD;gBAEJ;oBACI,WAAW;oBACX;YACP;QACJ;QAED,OAAO;IACX;IACJ,OAAA;AAAA;AAjEa,QAAA,cAAA;;;A;AERb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,0B,K;AAElC,IAAA,YAAA,QAAA;AAYA,IAAA,YAAA,QAAA;AAEA,IAAA,cAAA,QAAA;AACA,IAAA,YAAA,QAAA;AAYA;;;CAGG,GACH,IAAA,0BAAA,WAAA,GAAA,SAAA,MAAA;IAA6C,UAAA,yBAAA;IAGzC;;;;;KAKG,GACH,SAAA,wBAAmB,YAA0B,EAAE,WAAyB;QAAxE,IAAA,QAAA,IAAA;QACI,IAAM,mBAAqC;QAC3C,YAAA,UAAU,YAAY,kBAAkB;QAExC,YAAA,UAAU,wBACN,iBAAiB,WAAW,YAAY,UAAA,WAAW,uCACnD,UAAA,UAAU,CAAC,UAAA,WAAW,qCAAqC;QAE/D,QAAA,OAAA,KAAA,IAAA,EAAM,aAAa,iBAAiB,YAAY,IAAI,UAAA,+CAA2C,IAAA;QAC/F,MAAK,eAAe,YAAY,UAAA,WAAW,oDAAoD;QAC/F,MAAK,yBAAyB;Q,O;IAClC;IAEA;;;;;;KAMG,GACW,wBAAA,aAAd,SAAyB,YAA0B,EAAE,8BAA8D,EAAE,WAAyB;QAC1I,IAAM,mBAAqC;QAC3C,+BAA+B,WAAW,QAAQ,iBAAiB;QACnE,IAAM,aAAa,IAAI,wBAAwB,cAAc;QAC7D,OAAO;IACX;IAiCA,OAAA,eAAW,wBAAA,WAAA,cAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,YAAA,UAAU,gBAAgB,IAAI,CAAC;YAE/B,OAAO,IAAI,CAAC,WAAW,YAAY,UAAA,WAAW,oCAAoC;QACtF;Q,Y;Q,c;IAAC;IASD,OAAA,eAAW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A,2BAAwB,CAAA,CAAA;;;A;AEJpC,4DAA4D;AAC5D,kCAAkC;AAClC,kDAAkD;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C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AAA;;;A;AEpIb,4DAA4D;AAC5D,kCAAkC;AAClC,kDAAkD;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,O,e,S,c;I,O;A;A,Q,wC,K;AAElD,IAAA,8BAAA,QAAA;AAEA,IAAA,wCAAA,WAAA,GAAA,SAAA,MAAA;IAA2D,UAAA,uCAAA;IAA3D,SAAA;Q,O,W,Q,O,M,I,E,c,I;IACA;IAAA,OAAA;AAAA,EAD2D,4BAAA;AAA9C,QAAA,wCAAA;;;A;AENb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,qB,K;AAElC,IAAA,YAAA,QAAA;AACA,IAAA,YAAA,QAAA;AACA,IAAA,cAAA,QAAA;AACA,IAAA,YAAA,QAAA;AASA,IAAA,YAAA,QAAA;AAOA,IAAA,qBAAA,WAAA,GAAA;IAuEI;;;;KAIG,GACH,SAAA,mBAAmB,WAAyB;QACxC,IAAI,CAAC,kBAAkB;QACvB,IAAI,CAAC,iBAAiB,IAAI,UAAA;QAC1B,IAAI,CAAC,iBAAiB;QACtB,IAAI,CAAC,yBAAyB;IAClC;IASA,OAAA,eAAW,mBAAA,WAAA,6BAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,YAAA,UAAU,gBAAgB,IAAI,CAAC;YAE/B,OAAO,IAAI,CAAC,WAAW,YAAY,UAAA,WAAW;QAClD;Q,Y;Q,c;IAAC;IASD,OAAA,eAAW,mBAAA,WAAA,cAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAOD,OAAA,eAAW,mBAAA,WAAA,gBAAX;QALA;;;;SAIG,GACH,KAAA;YACI,OAAO,IAAI,CAAC,eAAe;QAC/B;Q,Y;Q,c;IAAC;IAOD,OAAA,eAAW,mBAAA,WAAA,cAAX;QALA;;;;SAIG,GACH,KAAA;YACI,OAAO,UAAA,WAAW,eAAe,IAAI,CAAC;QAC1C;Q,Y;Q,c;IAAC;IASD,OAAA,eAAW,mBAAA,WAAA,sBAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC,WAAW,YAAY,UAAA,WAAW;QAClD;QAEA;;;;;;SAMG,GACH,KAAA,SAA8B,KAAa;YACvC,YAAA,UAAU,wBAAwB,OAAO;YACzC,IAAI,CAAC,WAAW,YAAY,UAAA,WAAW,kCAAkC;QAC7E;Q,Y;Q,c;IAZC;IAcD;;KAEG,GACI,mBAAA,UAAA,mBAAP,SAAwB,OAAiB,EAAE,EAAa,EAAE,GAAc;QACpE,6BAAA,GACA,0DAA0D;QAC1D,4BAAA,GACA,IAAM,cAAc;QACpB,YAAA,UAAU,uBAAuB,UAAA,aAAa;QAE9C,yBAAyB;QACzB,uDAAuD;QACvD,IAAI,CAAC,iBAAiB,IAAI,UAAA,sBAAsB,QAAQ,QAAQ,IAAI,CAAC;QACrE,YAAA,UAAU,uBAAuB,IAAI,CAAC,gBAAgB;QACtD,IAAI,CAAC,eAAe,wBAAwB,IAAI;QAEhD,UAAA,0BAA0B,YAAY,6BAA6B,IAAI,CAAC,iBAAiB,IAAI;IACjG;IAEA;;;;;;;;KAQG,GACI,mBAAA,UAAA,yBAAP,SAA8B,EAAa,EAAE,GAAc;QACvD,IAAI,CAAC,eAAe,gCAAgC,IAAI;IAC5D;IAEA;;;;;;;;KAQG,GACI,mBAAA,UAAA,wBAAP,SAA6B,EAAa,EAAE,GAAc;QACtD,IAAI,CAAC,eAAe,+BAA+B,IAAI;IAC3D;IAEA;;KAEG,GACI,mBAAA,UAAA,oBAAP,SAAyB,EAAa,EAAE,GAAc;QAAtD,IAAA,QAAA,IAAA;QACI,IAAI,CAAC,eAAe;QACpB,2BAA2B;QAC3B,UAAA,0BAA0B,AAAC;YAA3B,OAAA,UAAA,OAAA,KAAA,GAAA,KAAA,GAAA;gBAAA,OAAA,YAAA,IAAA,EAAA,SAAA,EAAA;oBAAwD,OAAA;wBAAA,EAAA,QAAA;qBAAA;gBAAS;YAAA;QAAA,KAAK,IAAI;IAC9E;IAEA;;;;;KAKG,GACI,mBAAA,UAAA,QAAP,SAAa,EAAe,EAAE,OAAiC;QAC3D,YAAA,UAAU,gBAAgB,IAAI,CAAC;QAC/B,UAAA,0BAA0B,IAAI,CAAC,QAAQ,OAAO,IAAI;IACtD;IAEA;;;;;;KAMG,GACa,mBAAA,UAAA,UAAhB,SAAwB,SAAkB;Q,O,U,I,E,K,G,K,G;Y,O,Y,I,E,S,E;gB,O,G;oB,K;wBACtC,IAAI,IAAI,CAAC,wBACL,OAAA;4BAAA,EAAA,QAAA;yBAAA;wBAEA,IAAA,CAAA,CAAC,CAAC,IAAI,CAAC,gBAAP,OAAA;4BAAA,EAAA,OAAA;4BAAA;yBAAA;wBACA,OAAA;4BAAA,EAAA,OAAA;4BAAM,IAAI,CAAC,eAAe;yBAAO;oB,K;wBAAjC,GAAA;wBACA,IAAI,CAAC,iBAAiB;wB,G,Q;oB,K;wBAE1B,IAAI,WACA,IAAI,CAAC,yBAAyB;wB,O;4B,E,Q;yB;gB;Y;Q;IAErC;IACL,OAAA;AAAA;AAxOa,QAAA,qBAAA;;;A;AEtBb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,O,e,S,c;I,O;A;A,Q,kC,K;AAElC,IAAA,YAAA,QAAA;AAEA;;;CAGG,GACH,IAAA,kCAAA,WAAA,GAAA,SAAA,MAAA;IAAqD,UAAA,iCAAA;IAEjD;;;;;;;;;;;;;;;KAeG,GACH,SAAA,gCAAmB,QAAiB,EAAE,MAAqB,EAAE,IAAa,EACvD,QAAiB,EAAE,MAAe,EAAE,QAAiB,EACrD,2BAAoC,EAAE,SAAkB,EAAE,YAAqB,EAC/E,IAAa,EAAE,UAA+B;QAHjE,IAAA,QAII,OAAA,KAAA,IAAA,EAAM,UAAU,QAAQ,MAAM,UAAU,QAAQ,UAAU,6BAA6B,cAAc,MAAM,eAAW,IAAA;QACtH,MAAK,gBAAgB;Q,O;IACzB;IASA,OAAA,eAAW,gCAAA,WAAA,aAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAEL,OAAA;AAAA,EArCqD,UAAA;AAAxC,QAAA,kCAAA;;;A;AETb,uDAAA,GACA,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,mB,Q,oB,K;AAMlC,IAAA,YAAA,QAAA;AAcA,IAAA,YAAA,QAAA;AAQA,IAAA,oBAAA,QAAA;AACA,IAAA,sBAAA,QAAA;AACA,IAAA,sBAAA,QAAA;AAIA,IAAA,cAAA,QAAA;AACA,IAAA,YAAA,QAAA;AAmBA;;;;CAIG,GACH,IAAA,oBAAA,WAAA,GAAA;IAkHI;;;;;KAKG,GACH,SAAA,kBAAmB,YAA0B,EAAE,WAAyB;QACpE,IAAM,mBAAqC;QAC3C,YAAA,UAAU,YAAY,kBAAkB;QAExC,IAAI,gBAAgB;YAChB,IAAI,gBAAgB,WAChB,IAAI,CAAC,cAAc,AAAC,OAAO,WAAW,cAAe,YAAY,UAAA,YAAY;iBAE7E,IAAI,CAAC,cAAc;;QAI3B,IAAI,CAAC,iBAAiB,iBAAiB,WAAW;QAClD,IAAI,CAAC,eAAe;QACpB,IAAI,CAAC,mBAAmB;QACxB,IAAI,CAAC,wBAAwB,IAAI,UAAA;QACjC,IAAI,CAAC,wBAAwB,IAAI,UAAA;QACjC,IAAI,CAAC;IACT;IAlEA,OAAA,eAAW,kBAAA,WAAA,sBAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC,WAAW,YAAY,UAAA,WAAW;QAClD;QAEA;;;;;;SAMG,GACH,KAAA,SAA8B,KAAa;YACvC,YAAA,UAAU,wBAAwB,OAAO;YACzC,IAAI,CAAC,WAAW,YAAY,UAAA,WAAW,kCAAkC;QAC7E;Q,Y;Q,c;IAZC;IAqBD,OAAA,eAAW,kBAAA,WAAA,cAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IASD,OAAA,eAAW,kBAAA,WAAA,4BAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC,WAAW,YAAY,UAAA,WAAW,uDAAuD,UAAA;QACzG;Q,Y;Q,c;IAAC;IAgCD;;;;;;KAMG,GACW,kBAAA,aAAd,SAAyB,YAA0B,EAAE,8BAA8D,EAAE,WAAyB;QAC1I,IAAM,mBAAqC;QAC3C,+BAA+B,WAAW,QAAQ,iBAAiB;QACnE,OAAO,IAAI,kBAAkB,cAAc;IAC/C;IAEO,kBAAA,UAAA,YAAP,SAAiB,IAAY;Q,I;QACzB,IAAM,yBAAN,CAAA,KAAA,CAAA,GACI,EAAA,CAAC,QAAO,GAAG,oBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,mBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,oBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,oBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,oBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,oBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,wBACX,EAAA,CAAC,QAAO,GAAG,wBACX,EAAA,CAAC,QAAO,GAAG,uBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,uBACX,EAAA,CAAC,QAAO,GAAG,oBACX,EAAA,CAAC,QAAO,GAAG,wBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,mBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,uBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,mBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,oBACX,EAAA,CAAC,QAAO,GAAG,wBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,oBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,oBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,uBACX,EAAA,CAAC,QAAO,GAAG,wBACX,EAAA,CAAC,QAAO,GAAG,uBACX,EAAA,CAAC,QAAO,GAAG,oBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,wBACX,EAAA,CAAC,QAAO,GAAG,yBACX,EAAA,CAAC,QAAO,GAAG,oBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,mBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,SAAQ,GAAG,uBACZ,EAAA,CAAC,QAAO,GAAG,wBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,oBACX,EAAA,CAAC,QAAO,GAAG,mBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,oBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,yBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,oBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,wBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,2BACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,uBACX,EAAA,CAAC,QAAO,GAAG,0BACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,wBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,uBACX,EAAA,CAAC,QAAO,GAAG,yBACX,EAAA,CAAC,QAAO,GAAG,wBACX,EAAA,CAAC,QAAO,GAAG,yBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,wBACX,EAAA,CAAC,QAAO,GAAG,uBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,wBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,uBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,oBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,yBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,qBACX,EAAA,CAAC,QAAO,GAAG,mBACX,EAAA,CAAC,QAAO,GAAG,oBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,sBACX,EAAA,CAAC,QAAO,GAAG,wBACX,EAAA,CAAC,QAAO,GAAG,uBACX,EAAA,CAAC,QAAO,GAAG,yBACX,EAAA,CAAC,QAAO,GAAG,sBACd,EAAA;QAED,IAAI,WAAW,IAAI,CAAC,WAAW,YAAY,UAAA,WAAW,uCAAuC;QAC7F,IAAI,QAAQ,IAAI,CAAC,WAAW,YAAY,UAAA,WAAW,oCAAoC;QACvF,IAAI,OAAe,kBAAkB,UAAU;QAC/C,IAAI,IAAI,CAAC,0BACL,WAAW;aAEX,QAAQ,SAAS,sBAAsB,CAAC,SAAS;QAErD,IAAI,OACA,OAAO,kBAAgB,QAAK,OAAK,OAAI;QAEzC,OAAO,2KAAyK,WAAQ,OAAK,OAAI;QACjM,OAAO;IACX;IAEA;;;;;;;;;;KAUG,GACI,kBAAA,UAAA,iBAAP,SAAsB,IAAY,EAAE,EAAuC,EAAE,GAAyB,EAAE,MAAqE;QACzK,IAAI,CAAC,UAAU,MAAM,OAAO,IAAI,KAAK;IACzC;IAEA;;;;;;;;;;KAUG,GACI,kBAAA,UAAA,iBAAP,SAAsB,IAAY,EAAE,EAAuC,EAAE,GAAyB,EAAE,MAAqE;QACzK,IAAI,CAAC,UAAU,MAAM,MAAM,IAAI,KAAK;IACxC;IAEA;;;;;;;;;KASG,GACU,kBAAA,UAAA,iBAAb,SAA4B,MAAmB;QAAnB,IAAA,WAAA,KAAA,GAAA,SAAA;Q,O,U,I,E,K,G,K,G;Y,O,Y,I,E,S,E;gBACxB,OAAA;oBAAA,EAAA,QAAA;oBAAO,IAAI,CAAC,UAAU;iBAAO;Y;Q;IAChC;IAED;;;;;KAKG,GACI,kBAAA,UAAA,QAAP,SAAa,EAAe,EAAE,GAA6B;QACvD,YAAA,UAAU,gBAAgB,IAAI,CAAC;QAE/B,UAAA,0BAA0B,IAAI,CAAC,QAAQ,OAAO,IAAI;IACtD;IAMA,OAAA,eAAW,kBAAA,WAAA,gBAAX;QAJA;;;SAGG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAED;;;;;;;;;KASG,GACa,kBAAA,UAAA,UAAhB,SAAwB,SAAkB;Q,O,U,I,E,K,G,K,G;Y,O,Y,I,E,S,E;gB,O,G;oB,K;wBACtC,IAAI,IAAI,CAAC,cACL,OAAA;4BAAA,EAAA,QAAA;yBAAA;wBAGA,IAAA,CAAA,WAAA,OAAA;4BAAA,EAAA,OAAA;4BAAA;yBAAA;wBACI,IAAA,CAAA,IAAI,CAAC,aAAL,OAAA;4BAAA,EAAA,OAAA;4BAAA;yBAAA;wBACA,OAAA;4BAAA,EAAA,OAAA;4BAAM,IAAI,CAAC,YAAY;yBAAS;oB,K;wBAAhC,GAAA;wB,G,Q;oB,K;wBAIR,IAAI,CAAC,eAAe;wB,O;4B,E,Q;yB;gB;Y;Q;IACvB;IAED,EAAE;IACF,mHAAmH;IACnH,kBAAkB;IAClB,4BAA4B;IAC5B,mHAAmH;IACnH,EAAE;IACQ,kBAAA,UAAA,0BAAV,SAAkC,YAAiC;QAC/D,OAAO,IAAI,UAAA,kBACP,cACA,IAAI,CAAC;IACb;IAEA,gCAAgC;IACtB,kBAAA,UAAA,yBAAV,SACI,cAA+B,EAC/B,iBAA8C,EAC9C,WAAwB,EACxB,iBAAoC;QACpC,OAAO,IAAI,UAAA,qBAAqB,gBAAgB,mBAC5C,mBAAmB,IAAI,EAAE,IAAI,CAAC;IACtC;IAEU,kBAAA,UAAA,4BAAV;QAAA,IAAA,QAAA,IAAA;QAEI,IAAI,aAAa,AAAC,OAAO,WAAW,cAAe,YAAY;QAC/D,IAAI,SAAS;QACb,IAAI,YAAY;QAEhB,IAAI,OAAO,cAAc,aAAa;YAClC,aAAa,aAAa,MAAM,UAAU;YAC1C,SAAS,UAAU;YACnB,YAAY,UAAU;QACzB;QAED,IAAM,oBAAoB,IAAI,CAAC,wBAC3B,IAAI,UAAA,oBACA,IAAI,UAAA,QAAQ,IAAI,UAAA,GAAG,YAAY,QAAQ;QAE/C,IAAM,kBAAkB,IAAI,CAAC,eAAe,YAAY,UAAA,WAAW,6BAA6B;QAChG,IAAM,iBAAiB,AAAC,mBAAmB,oBAAoB,KAC3D,IAAI,UAAA,uCAAuC,mBAC3C,IAAI,UAAA,6BACA;YACI,IAAM,qBAAqB,MAAK,eAAe,YAAY,UAAA,WAAW,kCAAkC;YACxG,OAAO,QAAQ,QAAQ;QAC3B,GACA;YACI,IAAM,qBAAqB,MAAK,eAAe,YAAY,UAAA,WAAW,kCAAkC;YACxG,OAAO,QAAQ,QAAQ;QAC3B;QAER,IAAI,CAAC,cAAc,IAAI,CAAC,uBACpB,gBACA,IAAI,CAAC,uBACL,IAAI,CAAC,aACL;QAEJ,IAAI,CAAC,YAAY,oBAAoB,oBAAA,sBAAsB,gCACvD,UAAA,2BAA2B,CAAC,IAAI,CAAC,WAAW,YAAY,UAAA,WAAW,2CAA2C,WAAuD;QAGzK,IAAI,CAAC,kBAAkB,IAAI,UAAA,qBAAqB,mBAAmB;IACvE;IAEU,kBAAA,UAAA,YAAV,SAAoB,IAAY,EAAE,MAAe,EAAE,EAAuC,EAAE,GAAyB,EAAE,UAAyE;QAAhM,IAAA,QAAA,IAAA;QACI,IAAI;YACA,YAAA,UAAU,gBAAgB,IAAI,CAAC;YAC/B,IAAM,YAAY,UAAA;YAClB,IAAI,mBAAgB,KAAA;YACpB,IAAI,sBAAsB,UAAA,+BACtB,mBAAmB,IAAI,oBAAA,0BAA0B;iBAC9C,IAAI,sBAAsB,UAAA,uBAC7B,mBAAmB;iBAChB,IAAI,eAAe,WACtB,mBAAmB,IAAI,kBAAA,gBAAgB;iBAEvC,mBAAmB;YAEvB,IAAI,CAAC,sBAAsB,QAAQ,IAAI,iBAAiB,WAAW,MAAM,QAAQ,SAAC,CAAwB;gBACtG,MAAK,mBAAmB;gBACxB,IAAI,CAAC,CAAC,IACF,IAAI;oBACA,GAAG;gBACN,EAAC,OAAO,GAAG;oBACR,IAAI,CAAC,CAAC,KACF,IAAI;gBAEX;gBAEL,KAAK;gBACL,2BAAA,GACA,MAAK,eAAe,MAAM,YAAc;YAE5C,GAAG,SAAC,CAAS;gBACT,IAAI,CAAC,CAAC,KACF,IAAI;YAEZ,GAAG;YAEH,oCAAA,GACA,IAAI,CAAC,eAAe,MAAM,YAAc;QAE3C,EAAC,OAAO,OAAO;YACZ,IAAI,CAAC,CAAC;gBACF,IAAI,iBAAiB,OAAO;oBACxB,IAAM,aAAoB;oBAC1B,IAAI,WAAW,OAAO,OAAO,WAAW;gBAC3C,OACG,IAAI;;YAIZ,2BAA2B;YAC3B,2BAAA,GACA,IAAI,CAAC,QAAQ,MAAM,MAAM,YAAc;QAC1C;IACL;IAEgB,kBAAA,UAAA,YAAhB,SAA0B,MAAc;Q,O,U,I,E,K,G,K,G;Y,I,W,U;Y,O,Y,I,E,S,E;gB,O,G;oB,K;wBAC9B,YAAY,UAAA;wBACc,OAAA;4BAAA,EAAA,OAAA;4BAAM,IAAI,CAAC,gBAAgB,cAAc;yBAAU;oB,K;wBAA7E,WAA0B,GAAA;wBAChC,IAAI,SAAS,MAAM,MAAM,QAAQ,SAAS,OAAO;4BACzC,OAAO,SAAS;4BACpB,IAAI,CAAC,CAAC,UAAU,OAAO,SAAS,GAC5B,OAAO,KAAK,OAAO,SAAC,IAAwB;gCAAc,OAAA,CAAC,CAAC,KAAK,UAAU,KAAK,OAAO,kBAAkB,OAAO;4BAAtD;4BAE9D,OAAA;gCAAA,EAAA,QAAA;gCAAO,IAAI,UAAA,sBAAsB,WAAW,MAAM;6BAAU;wBAC/D,OACG,OAAA;4BAAA,EAAA,QAAA;4BAAO,IAAI,UAAA,sBAAsB,WAAW,WAAW,YAAU,SAAS,SAAM,OAAK,SAAS;yBAAa;wB,O;4B,E,Q;yB;gB;Y;Q;IAEnH;IAEgB,kBAAA,UAAA,eAAhB;Q,O,U,I,E,K,G,K,G;Y,I;Y,O,Y,I,E,S,E;gB,O,G;oB,K;wBACQ,IAAA,CAAA,CAAA,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAA,GAA5B,OAAA;4BAAA,EAAA,OAAA;4BAAA;yBAAA;wBACA,IAAI,CAAC,mBAAmB;wBACU,OAAA;4BAAA,EAAA,OAAA;4BAAM,IAAI,CAAC,sBAAsB;yBAAS;oB,K;wBAAtE,UAA4B,GAAA;wBAClC,OAAA;4BAAA,EAAA,QAAA;4BAAO,IAAI,CAAC,YAAY,MAAM,QAAQ,MAAM,QAAQ,QAAQ,QAAQ,WAAW,QAAQ,IAAI,QAAQ,KAAK,QAAQ;yBAAW;oB,K;wB,O;4B,E,Q;yB;gB;Y;Q;IAElI;IAEc,kBAAA,YAAf,SAAyB,IAAY;QACjC,OAAO,KAAK,QAAQ,MAAM,SACrB,QAAQ,MAAM,QACd,QAAQ,MAAM,QACd,QAAQ,MAAM,UACd,QAAQ,MAAM;IACvB;IACJ,OAAA;AAAA;AAxhBa,QAAA,oBAAA;AA0hBb,IAAA,mBAAA,WAAA,GAAA;IAQI,SAAA,iBAAmB,SAAiB,EAAE,IAAY,EAAE,MAAe,EAAE,EAAuC,EAAE,GAAyB,EAAE,UAA8B;QACnK,IAAI,CAAC,YAAY;QACjB,IAAI,CAAC,OAAO;QACZ,IAAI,CAAC,SAAS;QACd,IAAI,CAAC,KAAK;QACV,IAAI,CAAC,MAAM;QACX,IAAI,CAAC,aAAa;IACtB;IACJ,OAAA;AAAA;AAhBa,QAAA,mBAAA;;;A;AEvlBb,4DAA4D;AAC5D,kCAAkC;A,O,e,S,c;I,O;A;A,Q,kB,K;AAIlC;;;;CAIG,GACH,IAAA,kBAAA,WAAA,GAAA;IAMI;;;;;;;KAOG,GACH,SAAA,gBAAmB,QAAiB,EAAE,MAAqB,EAAE,YAAqB,EAAE,UAA+B;QAC/G,IAAI,CAAC,eAAe;QACpB,IAAI,CAAC,aAAa;QAClB,IAAI,CAAC,mBAAmB;QACxB,IAAI,CAAC,iBAAiB;IAC1B;IASA,OAAA,eAAW,gBAAA,WAAA,YAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IASD,OAAA,eAAW,gBAAA,WAAA,UAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IASD,OAAA,eAAW,gBAAA,WAAA,gBAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IASD,OAAA,eAAW,gBAAA,WAAA,cAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA;AAhEa,QAAA,kBAAA;;;A;AEVb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,O,e,S,c;I,O;A;A,Q,wB,K;AAElC,IAAA,YAAA,QAAA;AAMA;;;;CAIG,GACH,IAAA,wBAAA,WAAA,GAAA,SAAA,MAAA;IAA2C,UAAA,uBAAA;IAIvC;;;;;;;;;KASG,GACH,SAAA,sBAAmB,QAAiB,EAAE,MAAqB,EAAE,SAAuB,EACxE,YAAqB,EAAE,UAA+B,EAAE,aAAsB;QAD1F,IAAA,QAEI,OAAA,KAAA,IAAA,EAAM,UAAU,QAAQ,cAAc,eAAW,IAAA;QACjD,MAAK,gBAAgB;QACrB,MAAK,oBAAoB;Q,O;IAC7B;IASA,OAAA,eAAW,sBAAA,WAAA,aAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IASD,OAAA,eAAW,sBAAA,WAAA,iBAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA,EA1C2C,UAAA;AAA9B,QAAA,wBAAA;;;A;AEdb,4DAA4D;AAC5D,kCAAkC;A,O,e,S,c;I,O;A;A,Q,2B,K;AAIlC;;;;CAIG,GACH,IAAA,2BAAA,WAAA,GAAA;IAGI;;;;KAIG,GACH,SAAA,yBAAmB,MAA6B;QAC5C,IAAI,CAAC,aAAa;IACtB;IASA,OAAA,eAAW,yBAAA,WAAA,UAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA;AAtBa,QAAA,2BAAA;;;A;AEVb,4DAA4D;AAC5D,kCAAkC;A,O,e,S,c;I,O;A;A,Q,uC,K;AAIlC;;;;CAIG,GACH,IAAA,uCAAA,WAAA,GAAA;IAQI;;;;;;;;;KASG,GACH,SAAA,qCAAmB,WAAmB,EAAE,QAAgB,EAAE,IAAY,EAAE,UAAkB,EACvE,UAAkB,EAAE,YAAyC;QAC5E,IAAI,CAAC,kBAAkB;QACvB,IAAI,CAAC,eAAe;QACpB,IAAI,CAAC,WAAW;QAChB,IAAI,CAAC,iBAAiB;QACtB,IAAI,CAAC,iBAAiB;QACtB,IAAI,CAAC,mBAAmB;IAC5B;IASA,OAAA,eAAW,qCAAA,WAAA,eAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IASD,OAAA,eAAW,qCAAA,WAAA,YAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IASD,OAAA,eAAW,qCAAA,WAAA,QAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IASD,OAAA,eAAW,qCAAA,WAAA,cAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IASD,OAAA,eAAW,qCAAA,WAAA,cAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IASD,OAAA,eAAW,qCAAA,WAAA,gBAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA;AA7Fa,QAAA,uCAAA;;;A;AEVb,4DAA4D;AAC5D,kCAAkC;A,O,e,S,c;I,O;A;A,Q,mC,K;AAElC;;;;CAIG,GACH,IAAA,mCAAA,WAAA,GAAA;IAII;;;;;KAKG,GACH,SAAA,iCAAmB,WAAmB,EAAE,IAAY;QAChD,IAAI,CAAC,kBAAkB;QACvB,IAAI,CAAC,WAAW;IACpB;IASA,OAAA,eAAW,iCAAA,WAAA,eAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IASD,OAAA,eAAW,iCAAA,WAAA,QAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA;AApCa,QAAA,mCAAA;;;A;AERb,4DAA4D;AAC5D,kCAAkC;A,O,e,S,c;I,O;A;A,Q,iC,K;AAElC;;;;CAIG,GACH,IAAA,iCAAA,WAAA,GAAA;IAKI;;;;;;KAMG,GACH,SAAA,+BAAmB,WAAmB,EAAE,QAAgB,EAAE,SAAiB;QACvE,IAAI,CAAC,kBAAkB;QACvB,IAAI,CAAC,eAAe;QACpB,IAAI,CAAC,gBAAgB;IACzB;IASA,OAAA,eAAW,+BAAA,WAAA,eAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IASD,OAAA,eAAW,+BAAA,WAAA,YAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IASD,OAAA,eAAW,+BAAA,WAAA,aAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA;AAlDa,QAAA,iCAAA;;;A;AERb,4DAA4D;AAC5D,kCAAkC;A,O,e,S,c;I,O;A;A,Q,8B,K;AAElC;;;;CAIG,GACH,IAAY;AAAZ,CAAA,SAAY,2BAA2B;IACnC;;;KAGG,GACH,2BAAA,CAAA,OAAA,GAAA;IAEA;;;KAGG,GACH,2BAAA,CAAA,cAAA,GAAA;IAEA;;;KAGG,GACH,2BAAA,CAAA,WAAA,GAAA;AACJ,CAAA,EAlBY,8BAAA,QAAA,+BAAA,CAAA,QAAA,8BAA2B,CAAA,CAAA;;;A;AERvC,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,O,e,S,c;I,O;A;A,Q,wB,K;AAElC,IAAA,YAAA,QAAA;AAEA;;;;CAIG,GACH,IAAA,wBAAA,WAAA,GAAA,SAAA,MAAA;IAA2C,UAAA,uBAAA;IAGvC;;;;;KAKG,GACH,SAAA,sBAAmB,SAAiB,EAAE,IAAS,EAAE,YAAoB;QAArE,IAAA,QAAA,IAAA;QACI,IAAI,MAAM,QAAQ,OAAO;YACrB,QAAA,OAAA,KAAA,IAAA,EAAM,WAAW,UAAA,aAAa,qBAAqB,WAAW,IAAI,UAAA,yBAAqB,IAAA;YACvF,MAAK,aAAa,EAAE;YACpB,IAAmB,IAAA,KAAA,GAAA,SAAA,MAAA,KAAA,OAAA,QAAA,KAAM;gBAApB,IAAM,OAAI,MAAA,CAAA,GAAA;gBACX,MAAK,WAAW,KAAK,IAAI,UAAA,UAAU;YACtC;QACJ,OACG,QAAA,OAAA,KAAA,IAAA,EAAM,WAAW,UAAA,aAAa,UAAU,eAAe,eAAe,iCAAiC,IAAI,UAAA,yBAAqB,IAAA;Q,O;IAExI;IASA,OAAA,eAAW,sBAAA,WAAA,UAAX;QAPA;;;;;;SAMG,GACH,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA,EA/B2C,UAAA;AAA9B,QAAA,wBAAA;;;A;AEVb,4DAA4D;AAC5D,kCAAkC;A,O,e,S,c;I,O;A;A,Q,Y,Q,qB,Q,uB,K;AAElC;;;CAGG,GACH,IAAY;AAAZ,CAAA,SAAY,oBAAoB;IAE5B,mBAAA,GACA,oBAAA,CAAA,oBAAA,CAAA,UAAA,GAAA,EAAA,GAAA;IAEA,iBAAA,GACA,oBAAA,CAAA,oBAAA,CAAA,SAAA,GAAA,EAAA,GAAA;IAEA,eAAA,GACA,oBAAA,CAAA,oBAAA,CAAA,OAAA,GAAA,EAAA,GAAA;AACJ,CAAA,EAVY,uBAAA,QAAA,wBAAA,CAAA,QAAA,uBAAoB,CAAA,CAAA;AAYhC,IAAY;AAAZ,CAAA,SAAY,kBAAkB;IAC1B,kBAAA,CAAA,kBAAA,CAAA,eAAA,GAAA,EAAA,GAAA;IACA,kBAAA,CAAA,kBAAA,CAAA,iBAAA,GAAA,EAAA,GAAA;IACA,kBAAA,CAAA,kBAAA,CAAA,gBAAA,GAAA,EAAA,GAAA;IACA,kBAAA,CAAA,kBAAA,CAAA,kBAAA,GAAA,EAAA,GAAA;AACJ,CAAA,EALY,qBAAA,QAAA,sBAAA,CAAA,QAAA,qBAAkB,CAAA,CAAA;AAO9B;;;;CAIG,GACH,IAAA,YAAA,WAAA,GAAA;IAYI,SAAA,UAAmB,IAA8K;QAHzL,IAAA,CAAA,gBAA0B,EAAE;QAIhC,IAAI,CAAC,gBAAgB;QACrB,IAAI,CAAC,CAAC,MAAM;YACR,IAAI,CAAC,WAAW,KAAK;YACrB,IAAI,CAAC,aAAa,KAAK;YACvB,IAAI,CAAC,gBAAgB,KAAK;YAC1B,IAAI,CAAC,iBAAiB,KAAK;YAC3B,IAAI,CAAC,kBAAkB,KAAK;YAC5B,IAAI,CAAC,gBAAgB,KAAK;YAC1B,IAAI,CAAC,gBAAgB,KAAK,UAAU,SAAS,cAAc,mBAAmB,iBAAiB,mBAAmB;YAClH,IAAI,CAAC,aAAa,KAAK,WAAW,SAAS,qBAAqB,OAAO,KAAK,WAAW,WAAW,qBAAqB,SAAS,qBAAqB;YACrJ,IAAI,CAAC,CAAC,KAAK,aAAa,MAAM,QAAQ,KAAK,YACvC,IAAoB,IAAA,KAAA,GAAA,KAAA,KAAK,WAAL,KAAA,GAAA,QAAA,KAAgB;gBAA/B,IAAM,QAAK,EAAA,CAAA,GAAA;gBACZ,IAAI,CAAC,cAAc,KAAK;YAC3B;QAER;IACL;IAEA,OAAA,eAAW,UAAA,WAAA,QAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,UAAA,WAAA,UAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,UAAA,WAAA,aAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,UAAA,WAAA,eAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,UAAA,WAAA,aAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,UAAA,WAAA,cAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,UAAA,WAAA,UAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,UAAA,WAAA,aAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,UAAA,WAAA,aAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,UAAA,WAAA,aAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA;AAtEa,QAAA,YAAA;;;A;AE/Bb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,I;A,O,e,S,c;I,O;A;A,Q,0B,K;AAElC,IAAA,YAAA,QAAA;AACA,IAAA,YAAA,QAAA;AASA,IAAA,sBAAA,QAAA;AACA,IAAA,sBAAA,QAAA;AAEA,IAAM,kCAAkC;AAExC,IAAM,wBAAN,CAAA,KAAA,CAAA,GACI,EAAA,CAAC,oBAAA,eAAe,IAAG,GAAG,aACtB,EAAA,CAAC,oBAAA,eAAe,MAAK,GAAG,eACxB,EAAA,CAAC,oBAAA,eAAe,IAAG,GAAG,cACtB,EAAA,CAAC,oBAAA,eAAe,SAAQ,GAAG,aAC3B,EAAA,CAAC,oBAAA,eAAe,UAAS,GAAG,2BAC5B,EAAA,CAAC,oBAAA,eAAe,KAAI,GAAG,eACvB,EAAA,CAAC,oBAAA,eAAe,KAAI,GAAG,cAC1B,EAAA;AAED;;;;;;CAMG,GACH,IAAA,0BAAA,WAAA,GAAA;IAeI,SAAA,wBAAmB,kBAA2B;QATtC,IAAA,CAAA,sBAA+B;QAE/B,IAAA,CAAA,wBAAiC;QACjC,IAAA,CAAA,wBAAiC;QAIjC,IAAA,CAAA,oBAA4B;QAGhC,IAAI,CAAC,SAAS,qBAAqB,qBAAqB,UAAA;QACxD,IAAI,CAAC,eAAe;QACpB,IAAI,CAAC,eAAe;IACxB;IAEO,wBAAA,UAAA,KAAP;QACI,OAAO,IAAI,CAAC;IAChB;IAEO,wBAAA,UAAA,QAAP,SAAa,MAAmB,EAAE,EAAe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CP,IAAI,CAAC,aAAa,IAAI;wBAE1B,IAAI,CAAC,UAAU,UAAU;4BACrB,IAAI,CAAC,CAAC,MAAK,YACP,MAAK,WAAW;wBAExB;wBACI,IAAA,CAAA,CAAC,IAAI,CAAC,cAAN,OAAA;4BAAA,EAAA,OAAA;4BAAA;yBAAA;wBACA,OAAA;4BAAA,EAAA,OAAA;4BAAM,IAAI,CAAC,UAAU;yBAAM;oB,K;wBAA3B,GAAA;wB,G,Q;oB,K;wB,O;4B,E,Q;yB;gB;Y;Q;IAGX;IAEO,wBAAA,UAAA,eAAR;QACI,OAAQ,IAAI,CAAC,YAAY,IAAI,CAAC,qBAAqB,aAAc,IAAI,CAAC,gBAAgB,WAAW,KAC1F,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,yBAAyB,IAAI,CAAC,gBAAgB,eAAe;IAC5G;IAEQ,wBAAA,UAAA,wBAAR;QACI,OAAQ,IAAI,CAAC,qBAAqB,aAAa,CAAC,IAAI,CAAC,iBAAiB;IAC1E;IACJ,OAAA;AAAA;AA/Pa,QAAA,0BAAA;;;A;AEnCb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,O,e,S,c;I,O;A;A,Q,6C,K;AAElC,IAAA,8BAAA,QAAA;AAIA;;;CAGG,GACH,IAAA,6CAAA,WAAA,GAAA,SAAA,MAAA;IAAgE,UAAA,4CAAA;IAAhE,SAAA;Q,O,W,Q,O,M,I,E,c,I;IACA;IAAA,OAAA;AAAA,EADgE,4BAAA;AAAnD,QAAA,6CAAA;;;A;AEXb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;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,wBAAA;;;A;AErHb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,wB,K;AAElC,IAAA,YAAA,QAAA;AAEA,IAAA,YAAA,QAAA;AAkBA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,I;I;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,gC,K;AELb,IAAA,YAAA,QAAA;AAUA,IAAA,YAAA,QAAA;AAcA,IAAA,gCAAA,WAAA,GAAA,SAAA,MAAA;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OAAO;QACrB,OAAO,IAAI,kBAAkB;IACjC;IAEA,OAAA,eAAW,kBAAA,WAAA,qBAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC,sBAAsB;QACtC;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,kBAAA,WAAA,UAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC,sBAAsB;QACtC;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,kBAAA,WAAA,YAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC,sBAAsB;QACtC;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,kBAAA,WAAA,QAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC,sBAAsB;QACtC;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,kBAAA,WAAA,YAAX;QAAA,KAAA;Y,I;YACI,OAAA,AAAA,CAAA,KAAO,IAAI,CAAC,sBAAsB,eAAA,MAAe,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE;QACvD;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,kBAAA,WAAA,cAAX;QAAA,KAAA;Y,I;YACI,OAAA,AAAA,CAAA,KAAO,IAAI,CAAC,sBAAsB,eAAA,MAAe,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE;QACvD;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,kBAAA,WAAA,eAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC,sBAAsB;QACtC;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA;AAnDa,QAAA,oBAAA;;;A;AElBb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,+B,K;AAElC,IAAA,YAAA,QAAA;AAMA,IAAA,YAAA,QAAA;AAeA,IAAA,YAAA,QAAA;AAgBA,gDAAgD;AAChD,IAAA,+BAAA,WAAA,GAAA,SAAA,MAAA;IAAkD,UAAA,8BAAA;IAG9C,SAAA,6BACI,cAA+B,EAC/B,iBAAqC,EACrC,WAAyB,EACzB,gBAAkC,EAClC,qBAA4C;QALhD,IAAA,QAOI,OAAA,KAAA,IAAA,EAAM,gBAAgB,mBAAmB,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,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB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QACX;IACL;IACJ,OAAA;AAAA,EAzL6C,UAAA;AAAhC,QAAA,0BAAA;;;A;AEhCb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,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B,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C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2BAAA,GACH,EAAC,OAAA,IAAM,CAAA;QACX;IACL;IACJ,OAAA;AAAA,EA7Q6C,UAAA;AAAhC,QAAA,0BAAA;;;A;AElCb,4DAA4D;AAC5D,kCAAkC;AAClC,WAAW;A,O,e,S,c;I,O;A;A,Q,iB,K;AAqBX,IAAA,iBAAA,WAAA,GAAA;IAGI,SAAA,eAAoB,IAAY;QAC5B,IAAI,SAAS,IACT,IAAI,CAAC,qBAAqB,CAAA;aAE1B,IAAI,CAAC,qBAAqB,KAAK,MAAM;IAE7C;IAEc,eAAA,WAAd,SAAuB,IAAY;QAC/B,OAAO,IAAI,eAAe;IAC9B;IAEA,OAAA,eAAW,eAAA,WAAA,SAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC,mBAAmB;QACnC;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,eAAA,WAAA,oBAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC,mBAAmB;QACnC;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,eAAA,WAAA,YAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC,mBAAmB;QACnC;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA;AA1Ba,QAAA,iBAAA;;;A;AEvBb,4DAA4D;AAC5D,kCAAkC;AAClC,uCAAA,G,O,e,S,c;I,O;A;;;A;AEFA,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,iB,K;AAGlC,IAAA,YAAA,QAAA;AAQA,IAAA,sBAAA,QAAA;AAOA,IAAA,sCAAA,QAAA;AAEA,IAAA,iBAAA,WAAA,GAAA;IAuBI,SAAA,eAAmB,aAAqB;QAtBhC,IAAA,CAAA,iBAA0B;QAE1B,IAAA,CAAA,kBAAiC,IAAI;QAMrC,IAAA,CAAA,0BAAmC;QACnC,IAAA,CAAA,oBAA6B;QAC7B,IAAA,CAAA,oBAA6B;QAC7B,IAAA,CAAA,2BAAmC;QACnC,IAAA,CAAA,qBAA6B;QAC7B,IAAA,CAAA,yBAAkC;QAClC,IAAA,CAAA,gBAAwB;QACxB,IAAA,CAAA,2BAAmC;QACnC,IAAA,CAAA,kBAA0B;QAG1B,IAAA,CAAA,aAAsB;QACtB,IAAA,CAAA,yBAAiC;QAGrC,IAAI,CAAC,oBAAoB;QACzB,IAAI,CAAC,gBAAgB,UAAA;QACrB,IAAI,CAAC,kBAAkB,UAAA;QACvB,IAAI,CAAC,mBAAmB,IAAI,UAAA;QAE5B,mCAAmC;QACnC,IAAI,CAAC,iBAAiB;IAC1B;I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AoB,IAAI,CAAC;QAEhC,IAAI,cAAc,IAAI,CAAC,eAAe,MAAM,IAAI,CAAC,YAAY,QAAQ;YACjE,IAAM,eAAuC,EAAE;YAE/C,IAAI,CAAC,YAAY,QAAQ,SAAC,KAAa;gBACnC,aAAW,KAAK;oBACZ,MAAM;gBACT;YACL;YAEA,OAAO,SAAS;gBAAC;oBAAE,MAAM;oBAAW,OAAO;gBAAU;aAAG;QAC3D;QAED,OAAO;IACX;IACJ,OAAA;AAAA;AAnEa,QAAA,wBAAA;;;A;AEZb,4DAA4D;AAC5D,kCAAkC;A,O,e,S,c;I,O;A;;;A;AEDlC,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,uB,K;AAElC,IAAA,YAAA,QAAA;AAGA,IAAA,iBAAA,QAAA;AACA,IAAA,YAAA,QAAA;AAgBA,IAAA,sBAAA,QAAA;AAGA,IAAA,YAAA,QAAA;AAgBA,IAAA,kCAAA,QAAA;AACA,IAAA,YAAA,QAAA;AAcA,IAAA,4BAAA,QAAA;AACA,IAAA,qCAAA,QAAA;AAEA,IAAA,uBAAA,WAAA,GAAA,SAAA,MAAA;IAA0C,UAAA,sBAAA;IAgBtC,SAAA,qBACI,cAA+B,EAC/B,iBAAqC,EACrC,WAAyB,EACzB,gBAAkC,EAClC,sBAA8C;QALlD,IAAA,QAOI,OAAA,KAAA,IAAA,EAAM,gBAAgB,mBAAmB,aAAa,kBAAkB,2BAAuB,IAAA;QAE/F,MAAK,aAAa,IAAI,UAAA;QACtB,MAAK,6BAA6B;QAClC,MAAK,yBAAyB;YAAqB,OAAA,MAAK;QAAL;QACnD,MAAK,uBAAuB,IAAI,gCAAA;QAChC,MAAK,oBACD,SAAC,QAAyB,EAAE,eAAqD,EAAE,aAAkC;YACrH,OAAA,MAAK,WAAW,UAAU,iBAAiB;QAA3C;QACJ,MAAK,0BAA0B,SAAC,UAAgC;YAA2B,OAAA,MAAK,kBAAkB;QAAvB;QAC3F,MAAK,2BAA2B,SAAC,UAAuB;YAA2B,OAAA,MAAK,iBAAiB;QAAtB;QACnF,MAAK,qBAAqB;YAAqB,OAAA,MA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A4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,O,e,S,c;I,O;A;A,Q,+B,K;AAElC,IAAA,mBAAA,QAAA;AAIA,IAAA,+BAAA,WAAA,GAAA,SAAA,MAAA;IAAkD,UAAA,8BAAA;IAAlD,SAAA;Q,O,W,Q,O,M,I,E,c,I;IAqCA;IA3BI,OAAA,eAAkB,8BAAA,QAAlB;QAAA,KAAA;YACI,OAAO,6BAA6B;QACxC;Q,Y;Q,c;IAAC;IAED,OAAA,eAAkB,8BAAA,cAAlB;QAAA,KAAA;YACI,OAAO,6BAA6B;QACxC;Q,Y;Q,c;IAAC;IAED,OAAA,eAAkB,8BAAA,eAAlB;QAAA,KAAA;YACI,OAAO,6BAA6B;QACxC;Q,Y;Q,c;IAAC;IAED,OAAA,eAAkB,8BAAA,uBAAlB;QAAA,KAAA;YACI,OAAO,6BAA6B;QACxC;Q,Y;Q,c;IAAC;IAED,OAAA,eAAkB,8BAAA,YAAlB;QAAA,KAAA;YACI,OAAO,6BAA6B;QACxC;Q,Y;Q,c;IAAC;IAED,OAAA,eAAkB,8BAAA,iBAAlB;QAAA,KAAA;YACI,OAAO,6BAA6B;QACxC;Q,Y;Q,c;IAAC;IAED,OAAA,eAAkB,8BAAA,0BAAlB;QAAA,KAAA;YACI,OAAO,6BAA6B;QACxC;Q,Y;Q,c;IAAC;IAlCuB,6BAAA,WAAmB;IACnB,6BAAA,eAAuB;IACvB,6BAAA,iBAAyB;IACzB,6BAAA,0BAAkC;IAClC,6BAAA,kBAA0B;IAC1B,6BAAA,oBAA4B;IAC5B,6BAAA,6BAAuC;QAAC;QAAW;QAAU;QAAa;QAAQ;QAAS;QAA8B;QAAkB;QAAY;QAAgB;QAAqB;KAAY;IA6BpO,OAAA;AArCA,EAAkD,iBAAA;AAArC,QAAA,+BAAA;;;A;AERb,4DAA4D;AAC5D,kCAAkC;A,O,e,S,c;I,O;A;A,Q,iB,K;AA6BlC,IAAA,iBAAA,WAAA,GAAA;IAAA,SAAA,kBAoDA;IAlDI,OAAA,eAAkB,gBAAA,kBAAlB;QAAA,KAAA;YACI,OAAO,eAAe;QAC1B;Q,Y;Q,c;IAAC;IAED,OAAA,eAAkB,gBAAA,gBAAlB;QAAA,KAAA;YACI,OAAO,eAAe;QAC1B;Q,Y;Q,c;IAAC;IAED,OAAA,eAAkB,gBAAA,cAAlB;QAAA,KAAA;YACI,OAAO,eAAe;QAC1B;Q,Y;Q,c;IAAC;IAEuB,eAAA,4BAA6C;QACjE,SAAS;YACL,QAAQ;QACX;QACD,aAAa;QACb,SAAS;IACZ;IAEuB,eAAA,iBAAiC;QACrD,4BAA4B;QAC5B,+BAA+B;QAC/B,aAAa;QACb,uCAAuC;QACvC,2BAA2B;QAC3B,yBAAyB;QACzB,8BAA8B;QAC9B,6BAA6B;QAC7B,sBAAsB;QACtB,uBAAuB;IAC1B;IAEuB,eAAA,oBAAiC;QACrD,YAAY;QACZ,eAAe;QACf,aAAa;QACb,gBAAgB;QAChB,eAAe;QACf,cAAc;QACd,UAAU;QACV,WAAW;QACX,WAAW;QACX,QAAQ;QACR,cAAc;QACd,iBAAiB;QACjB,oBAAoB;QACpB,OAAO;IACV;IAEL,OAAA;AApDA;AAAa,QAAA,iBAAA;;;A;AE9Bb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,mC,Q,gC,K;AAElC,gDAAgD;AAChD,IAAA,YAAA,QAAA;AAOA,IAAA,YAAA,QAAA;AAMA,IAAA,cAAA,QAAA;AACA,IAAA,YAAA,QAAA;AAgBA,IAAA,kCAAA,QAAA;AACA,IAAA,+BAAA,QAAA;AAaA,IAAA,gCAAA,WAAA,GAAA;IAAA,SAAA,iCAIA;IAHkB,8BAAA,aAAd,SAAyB,YAA2B,EAAE,YAAqC,EAAE,WAAyB;QAClH,OAAO,IAAI,iCAAiC,cAAc,cAAc;IAC5E;IACJ,OAAA;AAAA;AAJa,QAAA,gCAAA;AAMb;;;CAGG,GACH,IAAA,mCAAA,WAAA,GAAA,SAAA,MAAA;IAAsD,UAAA,kCAAA;IAUlD,SAAA,iCAAmB,YAA2B,EAA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,wBAAP,SAA6B,OAA0B;QAEnD,IAAM,WAAW,IAAI,UAAA;QAErB,IAAI;YACA,IAAI,QAAQ,gBAAgB,UAAA,YAAY,MAAM;gBAC1C,IAAM,UAAU,KAAG,CAAA,QAAQ,WAAW,QAAQ,WAAW,EAAA;gBACzD,SAAS,QAAQ,IAAI,UAAA,oBAAoB,UAAA,YAAY,MAAM,SAAS,QAAQ;YAC/E;QACJ,EAAC,OAAO,GAAG;YACR,SAAS,OAAO,mCAAiC;QACpD;QAED,OAAO,SAAS;IACpB;IACJ,OAAA;AAAA;AAxCa,QAAA,wCAAA;;;A;AEfb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,O,e,S,c;I,O;A;A,Q,gC,K;AAElC,IAAA,YAAA,QAAA;AAEA,IAAA,gCAAA,WAAA,GAAA,SAAA,MAAA;IAAmD,UAAA,+BAAA;IAG/C,SAAA,8BACI,WAAwB,EACxB,IAAS,EACT,OAAmC,EACnC,EAAW;QAJf,IAAA,QAKQ,OAAA,KAAA,IAAA,EAAM,aAAa,MAAM,SAAS,OAAG,IAAA;QACrC,IAAM,OAAyB,KAAK,MAAM,MAAK;QAC/C,IAAI,KAAK,SAAS,WACd,MAAK,8BAA8B,KAAK;Q,O;IAEpD;IAEA,OAAA,eAAW,8BAAA,WAAA,2BAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA,EAlBmD,UAAA;AAAtC,QAAA,gCAAA;;;A;AELb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,6B,K;AAElC,IAAA,YAAA,QAAA;AAQA,IAAA,YAAA,QAAA;AASA,IAAA,YAAA,QAAA;AAOA,IAAA,kCAAA,QAAA;AACA,IAAA,+BA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GAAA,8BAAA,2BAAA,KAAA,4BAAA,QAAA,KAA2B;gBAAhD,IAAM,cAAW,2BAAA,CAAA,GAAA;gBAClB,aAAa,IAAI,YAAY,MAAM,YAAY;YAClD;QACJ;QAED,OAAO;IACX;IACJ,OAAA;AAAA,EAvgBgD,UAAA;AAAnC,QAAA,6BAAA;;;A;AEzDb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,6B,K;AAElC,IAAA,YAAA,QAAA;AAMA;;;CAGG,GACH,IAAA,6BAAA,WAAA,GAAA;IAOI,SAAA,2BAAmB,SAAiB;QAN5B,IAAA,CAAA,iBAA0B;QAC1B,IAAA,CAAA,kBAAiC,IAAI;QAMzC,IAAI,CAAC,gBAAgB;QACrB,IAAI,CAAC,gBAAgB,UAAA;QACrB,IAAI,CAAC,gCAAgC,IAAI,UAAA;IAC7C;IAEA,OAAA,eAAW,2BAAA,WAAA,aAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,2BAAA,WAAA,aAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,2BAAA,WAAA,qBAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC,8BAA8B;QAC9C;Q,Y;Q,c;IAAC;IAEM,2BAAA,UAAA,uBAAP,SAA4B,gBAAwB,EAAE,YAAoB;QACtE,IAAI,CAAC,gBAAgB;IACzB;IAEO,2BAAA,UAAA,kBAAP,SAAuB,OAAgB;QACnC,IAAI,SACA,IAAI,CAAC;IAEb;IAEO,2BAAA,UAAA,iCAAP,SAAsC,UAAkB;QACpD,IAAI,eAAe,KACf;aACG,IAAI,eAAe,KACtB,IAAI,CAAC;IAEb;IAEO,2BAAA,UAAA,2BAAP,SAAgC,qBAA8B;QAC1D,IAAI,CAAC,uBACD,IAAI,CAAC;aAEL,IAAI,CAAC,gBAAgB,UAAA;IAE7B;IAEa,2BAAA,UAAA,UAAb;Q,O,U,I,E,K,G,K,G;Y,I,I,I;Y,O,Y,I,E,S,E;gB,O,G;oB,K;wBACQ,IAAA,CAAA,CAAC,IAAI,CAAC,gBAAN,OAAA;4BAAA,EAAA,OAAA;4BAAA;yBAAA;wBACA,uEAAuE;wBACvE,IAAI,CAAC,iBAAiB;wBACuB,KAAA,GAApB,KAAA,IAAI,CAAC;wB,G,Q;oB,K;wBAAL,IAAA,CAAA,CAAA,KAAA,GAAA,MAAA,GAAA,OAAA;4BAAA,EAAA,OAAA;4BAAA;yBAAA;wBAAd,aAAA,EAAA,CAAA,GAAA;wBACP,OAAA;4BAAA,EAAA,OAAA;4BAAM,WAAW;yBAAQ;oB,K;wBAAzB,GAAA;wB,G,Q;oB,K;wBADqB;wB,O;4B,E,O;4B;yB;oB,K;wB,O;4B,E,Q;yB;gB;Y;Q;IAIhC;IAEO,2BAAA,UAAA,aAAR;IACI,EAAE;IACN;IAEJ,OAAA;AAAA;AAjEa,QAAA,6BAAA;;;A;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,O,e,S,c;I,O;A;A,Q,2C,Q,4B,Q,gC,Q,uB,Q,oB,Q,mB,K;AEbb,4DAA4D;AAC5D,kCAAkC;AAClC,uCAAA,GACA,IAAA,YAAA,QAAA;AAGA,IAAA,mBAAA,WAAA,GAAA,SAAA,MAAA;IAAsC,UAAA,kBAAA;IAGlC,SAAA,iBAAmB,OAAgB,EAAE,SAAkB;QAAvD,IAAA,QACI,OAAA,KAAA,IAAA,EAAM,cAAU,IAAA;QAEhB,MAAK,cAAc;Q,O;IACvB;IAEA,OAAA,eAAW,iBAAA,WAAA,WAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA,EAZsC,UAAA;AAAzB,QAAA,mBAAA;AAcb,IAAA,oBAAA,WAAA,GAAA,SAAA,MAAA;IAAuC,UAAA,mBAAA;IAGnC,SAAA,kBAAmB,QAAiB,EAAE,SAAkB;QAAxD,IAAA,QACI,OAAA,KAAA,IAAA,EAAM,cAAU,IAAA;QAEhB,MAAK,eAAe;Q,O;IACxB;IAEA,OAAA,eAAW,kBAAA,WAAA,WAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA,EAZuC,UAAA;AAA1B,QAAA,oBAAA;AAcb,IAAA,uBAAA,WAAA,GAAA,SAAA,MAAA;IAA0C,UAAA,sBAAA;IAGtC,SAAA,qBAAmB,WAAiC,E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BAAkB;IAC9C;IAEA,OAAA,eAAW,oBAAA,WAAA,gBAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC,iBAAiB;QACjC;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,oBAAA,WAAA,gBAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC,iBAAiB;QACjC;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,oBAAA,WAAA,MAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC,iBAAiB;QACjC;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,oBAAA,WAAA,YAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC,iBAAiB;QACjC;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,oBAAA,WAAA,YAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC,iBAAiB;QACjC;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,oBAAA,WAAA,iBAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC,iBAAiB;QACjC;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,oBAAA,WAAA,UAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC,iBAAiB;QACjC;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,oBAAA,WAAA,aAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC,iBAAiB;QACjC;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,oBAAA,WAAA,QAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC,iBAAiB;QACjC;Q,Y;Q,c;IAAC;IAEa,oBAAA,WAAd,SAAuB,IAAY;QAC/B,OAAO,IAAI,oBAAoB;IACnC;IAEJ,OAAA;AAAA;AAhDa,QAAA,sBAAA;;;A;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,wB,K;AEzFb,4DAA4D;AAC5D,kCAAkC;AAClC,IAAA,YAAA,QAAA;AAGA,IAAA,cAAA,QAAA;AACA,IAAA,YAAA,QAAA;AAgBA,IAAA,YAAA,QAAA;AAWA,IAAA,wBAAA,WAAA,GAAA,SAAA,MAAA;IAA2C,UAAA,uBAAA;IAavC;;;;;KAKG,GACH,SAAA,sBAAmB,uBA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AAA,UAAM,QAAO,KAAA,IAAA,EAAC;yBAAU;oB,K;wBAA9B,GAAA;wB,O;4B,E,Q;yB;gB;Y;Q;IACH;IAES,sBAAA,UAAA,yBAAV,SAAiC,YAAiC;QAC9D,OAAO,IAAI,UAAA,iBACP,cACA,IAAI,CAAC;IACb;IAEU,sBAAA,UAAA,0BAAV,SACI,cAA+B,EAC/B,iBAAqC,EACrC,WAAwB,EACxB,gBAAkC;QAClC,IAAM,aAA8B;QACpC,OAAO,IAAI,UAAA,+BAA+B,gBAAgB,mBAAmB,YAAY,kBAAkB,IAAI;IACnH;IACJ,OAAA;AAAA,EAjM2C,UAAA;AAA9B,QAAA,wBAAA;;;A;AEjCb,4DAA4D;AAC5D,kCAAkC;A,O,e,S,c;I,O;A;A,Q,yB,Q,e,K;AAIlC,IAAY;AAAZ,CAAA,SAAY,YAAY;IACpB,YAAA,CAAA,eAAA,GAAA;IACA,YAAA,CAAA,WAAA,GAAA;IACA,YAAA,CAAA,SAAA,GAAA;IACA,YAAA,CAAA,mBAAA,GAAA;IACA,YAAA,CAAA,aAAA,GAAA;AACJ,CAAA,EANY,eAAA,QAAA,gBAAA,CAAA,QAAA,eAAY,CAAA,CAAA;AA8BxB,IAAA,yBAAA,WAAA,GAAA;IAGI,SAAA,uBAAoB,IAAY;QAC5B,IAAI,CAAC,6BAA6B,KAAK,MAAM;IACjD;IAEc,uBAAA,WAAd,SAAuB,IAAY;QAC/B,OAAO,IAAI,uBAAuB;IACtC;IAEA,OAAA,eAAW,uBAAA,WAAA,YAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC,2BAA2B;QAC3C;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA;AAda,QAAA,yBAAA;;;A;AEnCb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,gB,K;AAElC,IAAA,YAAA,QAAA;AAOA,IAAA,sBAAA,QAAA;AACA,IAAA,2BAAA,QAAA;AACA,IAAA,yBAAA,QAAA;AACA,IAAA,oBAAA,QAAA;AAqBA,IAAA,gBAAA,WAAA,GAAA;IA0EI,SAAA;QAvBQ,IAAA,CAAA,iBAA0B;QAE1B,IAAA,CAAA,qBAA8B;QAC9B,IAAA,CAAA,uBAAgC;QAChC,IAAA,CAAA,oBAA4B;QAI5B,IAAA,CAAA,aAAsB;QAKtB,IAAA,CAAA,iBAAyB;QACzB,IAAA,CAAA,0BAAkC;QAClC,IAAA,CAAA,qBAA6B;QAC7B,IAAA,CAAA,8BAAsC;QAQ1C,IAAI,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;gBAC/B;YAER;QACJ;IACL;IAEQ,cAAA,UAAA,aAAR;QACI,IAAI,IAAI,CAAC,oBAAoB;YACzB,IAAI,CAAC,qBAAqB;YAC1B,IAAI,CAAC,uBAAuB;YAC5B,IAAI,CAAC,sBAAsB;YAC3B,IAAI,CAAC,aAAa;YAClB,IAAI,IAAI,CAAC,6BAA6B,WAAW;gBAC7C,IAAI,CAAC,yBAAyB;gBAC9B,IAAI,CAAC,2BAA2B;YACnC;QACJ;IACL;IAEc,cAAA,UAAA,yBAAd;Q,O,U,I,E,K,G,K,G;Y,I;Y,O,Y,I,E,S,E;gB,O,G;oB,K;wBACQ,IAAA,CAAA,IAAI,CAAC,sBAAL,OAAA;4BAAA,EAAA,OAAA;4BAAA;yBAAA;wBACA,IAAI,CAAC,oBAAoB,IAAI,YAAY,IAAI,CAAC;wB,G,Q;oB,K;wB,G,K,K;4B;4B;;4B;yB;wBAE1C,OAAA;4BAAA,EAAA,OAAA;4BAAM,IAAI,CAAC,sBAAsB,KAAK,IAAI,CAAC;yBAAkB;oB,K;wBAA7D,GAAA;wB,O;4B,E,O;4B;yB;oB,K;wB,M,G;wBAEA,IAAI,CAAC,oBAAoB,IAAI,YAAY;wB,O;4B,E,O;4B;yB;oB,K;wB,O;4B,E,Q;yB;gB;Y;Q;IAGpD;IAED;;;;KAIG,GACK,cAAA,UAAA,eAAR,SAAqB,GAAW;QAC5B,OAAO,IAAI,CAAC,YAAY,QAAQ,KAAK,MAAM,KAAK,IAAI,CAAC,YAAY,QAAQ,KAAK,MAAM;IACxF;IACJ,OAAA;AAAA;AAlSa,QAAA,gBAAA;;;A;AElCb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,uB,K;AAElC,IAAA,YAAA,QAAA;AAeA,IAAA,YAAA,QAAA;AAaA,IAAA,YAAA,QAAA;AAWA,IAAA,qCAAA,QAAA;AAEA,IAAA,uBAAA,WAAA,GAAA;IA0EI,SAAA,qBACI,cAA+B,EAC/B,iBAA8C,EAC9C,iBAAoC,EACpC,iBAAoC,EACpC,gBAAmC;QALvC,IAAA,QAAA,IAAA;QAlDU,IAAA,CAAA,gBAA4H;QAc5H,IAAA,CAAA,yBAAqC;QAErC,IAAA,CAAA,sBAAyD;QAEzD,IAAA,CAAA,2BAA8E;QAexF,yCAAyC;QACzC,yDAAyD;QACjD,IAAA,CAAA,qCAA2D;QAsB/D,IAAI,CAAC,gBACD,MAAM,IAAI,UAAA,kBAAkB;QAGhC,IAAI,CAAC,mBACD,MAAM,IAAI,U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C1B;IAEA,OAAA,eAAW,yBAAA,WAAA,cAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,yBAAA,WAAA,WAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA;AAlBa,QAAA,2BAAA;;;A;AENb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,2B,K;AAElC,IAAA,YAAA,QAAA;AACA,IAAA,YAAA,QAAA;AASA,IAAA,YAAA,QAAA;AAUA,IAAA,YAAA,QAAA;AASA,IAAA,qCAAA,QAAA;AAWA,gDAAgD;AAChD,IAAA,2BAAA,WAAA,GAAA,SAAA,MAAA;IAA8C,UAAA,0BAAA;IAM1C,SAAA,yBACI,cAA+B,EAC/B,iBAAqC,EACrC,WAAyB,EACzB,gBAAkC,EAClC,UAA6B;QALjC,IAAA,QAMI,OAAA,KAAA,IAAA,EAAM,gBAAgB,mBAAmB,aAAa,kBAAkB,eAAW,IAAA;QACnF,MAAK,wBAAwB;QAC7B,MAAK,yBAAyB;QAC9B,MAAK,mBAAmB,SAAC,KAA8B;YAAwC,OAAA,MAAK,qBAAqB;QAA1B;QAC/F,MAAK,6BAA6B;YAAqB,OAAA,MAAK;QAAL;Q,O;IAC3D;IAEU,yBAAA,UAAA,8BAAV,SAAsC,iBAA0C;QAE5E,IAAI,YAAqB;QAEzB,IAAM,cAAkC,IAAI,UAAA;QAC5C,IAAI,kBAAkB,gBAAgB,UAAA,YAAY,MAC9C,YAAY,YAAY,UAAA,WAAW,kCAAkC,kBAAkB;QAG3F,OAAQ,kBAAkB,KAAK;YAC3B,KAAK;gBACD,IAAM,WAA4B,KAAK,MAAM,kBAAkB;gBAC/D,IAAI,SAAM,KAAA;gBACV,IAAI,SAAS,OAAO,WAAW,kBAAkB,WAC7C,SAAS,IAAI,UAAA,yBACT,UACA,UAAA,aAAa,UACb,UAAA,sBAAsB,cACtB,SAAS,OAAO;qBAGpB,SAAS,IAAI,UAAA,yBACT,UACA,UAAA,aAAa;gBAGrB,IAA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B,O;4B,E,Q;yB;gB;Y;Q;IAEH;IAEa,yBAAA,UAAA,yBAAd,SAAqC,UAAuB,EAAE,OAAuB;Q,O,U,I,E,K,G,K,G;Y,I;Y,O,Y,I,E,S,E;gBAC3E,qBAAqB,KAAK,UAAU;gBAC1C,OAAA;oBAAA,EAAA,QAAA;oBAAO,WAAW,KAAK,IAAI,mCAAA,wBACvB,UAAA,YAAY,MACZ,mBACA,IAAI,CAAC,mBAAmB,WACxB,mCACA;iBAAoB;Y;Q;IAC3B;IAEO,yBAAA,UAAA,wBAAR,SAA8B,KAA8B;QACxD,OAAO;YACH,UAAU;gBACN,eAAe;gBACf,sBAAsB;YACzB;YACD,YAAY,MAAM;YAClB,UAAU,MAAM;QACnB;IACL;IACJ,OAAA;AAAA,EAlK8C,UAAA;AAAjC,QAAA,2BAAA;;;A;AE5Cb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,A;I,I,gB,S,C,E,C;Q,gB,O,kB,C;Y,W,E;Q,C,a,S,S,C,E,C;Y,E,Y;Q,K,S,C,E,C;Y,I,I,K,E,I,E,e,I,C,C,E,G,C,C,E;Q;Q,O,c,G;I;I,O,S,C,E,C;Q,c,G;Q,S;Y,I,C,c;Q;Q,E,Y,M,O,O,O,K,C,G,Y,E,W,I,I;I;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,yB,K;AAElC,IAAA,YAAA,QAAA;AACA,IAAA,YAAA,QAAA;AAUA,IAAA,YAAA,QAAA;AAcA,IAAA,YAAA,QAAA;AAYA,IAAA,qCAAA,QAAA;AAsBA,gDAAgD;AAChD,IAAA,yBAAA,WAAA,GAAA,SAAA,MAAA;IAA4C,UAAA,wBAAA;IAKxC,SAAA,uBACI,cAA+B,EAC/B,iBAAqC,EACrC,WAAyB,EACzB,gBAAkC,EAClC,UAA8B;QALlC,IAAA,QAMI,OAAA,KAAA,IAAA,EAAM,gBAAgB,mBAAmB,aAAa,kBAAkB,eAAW,IAAA;QAT/E,MAAA,kBAA+B,IAAI,UAAA;QAUvC,MAAK,yBAAyB;QAC9B,MAAK,6BAA6B;YAAqB,OAAA,MAAK;QAAL;Q,O;IAC3D;IAEA,OAAA,eAAW,uBAAA,WAAA,sBAAX;QAAA,KAAA,SAA8B,WAAyB;YACnD,IAAI,CAAC,yBAAyB;QAClC;Q,Y;Q,c;IAAC;IAES,uBAAA,UAAA,8BAAV,SAAsC,iBAA0C;QAE5E,IAAI,YAAqB;QAEzB,IAAM,cAAkC,IAAI,UAAA;QAC5C,IAAI,kBAAkB,gBAAgB,UAAA,YAAY,MAC9C,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Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,kB,K;AAElC,IAAA,YAAA,QAAA;AAKA,IAAA,YAAA,QAAA;AAqBA,IAAA,sBAAA,QAAA;AAEA,IAAA,kBAAA,WAAA,GAAA;IAgBI,SAAA,gBAAmB,IAAmB,EAAE,QAAiB,EAAE,aAAsB;QAZzE,IAAA,CAAA,cAAsD,CAAA;QAUtD,IAAA,CAAA,gBAAwB;QAG5B,IAAI,CAAC,SAAS,gBAAgB,gBAAgB,UAAA;QAC9C,IAAI,CAAC,aAAa,IAAI,UAAA;QACt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CX;YACL,GACC,MAAM;gBACH;YACJ;QACP,OACG,IAAI;YACA;QACH,EAAC,OAAO,KAAK;YACV,MAAM,IAAI,MAAM,yDAAuD;QAC1E;IAET;IAEO,YAAA,UAAA,wBAAP,SAA6B,OAAqB;QAC9C,IAAI,IAAI,CAAC,oBAAoB;YACzB,IAAI,IAAI,CAAC,mBAAmB,qBAAqB;gBAC7C,IAAI,CAAC,mBAAmB,oBAAoB,WAAW,QAAQ;gBAC/D,IAAI,CAAC,mBAAmB,sBAAsB;YACjD;YACD,IAAI,IAAI,CAAC,mBAAmB,QAAQ;gBAChC,IAAI,CAAC,mBAAmB,OAAO;gBAC/B,IAAI,IAAI,CAAC,wBACL,IAAI,CAAC,mBAAmB,OAAO,YAAY,QAAQ,SAAC,KAAuB;oBAAW,OAAA,MAAM;gBAAN;gBAE1F,IAAI,CAAC,mBAAmB,SAAS;YACpC;QACJ;IACL;IAEO,YAAA,UAAA,gBAAP,SAAqB,GAAW;QAC5B,IAAI,CAAC,4BAA4B;IACrC;IACJ,OAAA;AAAA;AA1Ia,QAAA,cAAA;;;A;AENb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,O,e,S,c;I,O;A;A,Q,sB,K;AAElC,IAAA,YAAA,QAAA;AAaA,IAAA,4BAAA,QAAA;AAEA,IAAA,sBAAA,WAAA,GAAA;IAQI,SAAA,oBACI,GAAW,EACX,eAA0C,EAC1C,OAAkC,EAClC,gBAA4C,EAC5C,SAAoB,EACpB,iBAAkC,EAClC,YAAqB;QADrB,IAAA,sBAAA,KAAA,GAAA,oBAAA;QARI,IAAA,CAAA,iBAA0B;QAW9B,IAAI,CAAC,KACD,MAAM,IAAI,UAAA,kBAAkB;QAGhC,IAAI,CAAC,kBACD,MAAM,IAAI,UAAA,kBAAkB;QAGhC,IAAI,CAAC,uBAAuB;QAE5B,IAAI,cAAc;QAClB,IAAI,IAAI;QAER,IAAI,iBAAiB;YACjB,IAAK,IAAM,aAAa,gBACpB,IAAI,WAAW;gBACX,eAAe,AAAC,AAAC,MAAM,KAAO,IAAI,QAAQ,SAAS,KAAO,MAAM;gBAEhE,IAAM,MAAM,mBAAmB;gBAC/B,eAAe;gBAEf,IAAI,MAAM,eAAe,CAAC,UAAU;gBACpC,IAAI,KAAK;oBACL,MAAM,mBAAmB;oBACzB,eAAe,MAAI;gBACtB;gBAED;YACH;QAER;QAED,IAAI,SAAS;YACT,IAAK,IAAM,cAAc,QACrB,IAAI,YAAY;gBACZ,eAAe,AAAC,AAAC,MAAM,KAAO,IAAI,QAAQ,SAAS,KAAO,MAAM;gBAChE,IAAM,MAAM,mBAAmB,OAAO,CAAC,WAAW;gBAClD,eAAkB,aAAU,MAAI;gBAChC;YACH;QAER;QAED,IAAI,CAAC,UAAU,MAAM;QACrB,IAAI,CAAC,SAAS,eAAe,eAAe,UAAA;QAE5C,IAAI,CAAC,+BAA+B,IAAI,0BAAA,wBACpC,IAAI,CAAC,SACL,IAAI,CAAC,IACL,IAAI,CAAC,sBACL,WACA,SACA;IACR;IAEa,oBAAA,UAAA,UAAb;Q,O,U,I,E,K,G,K,G;Y,O,Y,I,E,S,E;gB,O,G;oB,K;wBACI,IAAI,CAAC,iBAAiB;wBAElB,IAAA,CAAA,IAAI,CAAC,8BAAL,OAAA;4BAAA,EAAA,OAAA;4BAAA;yBAAA;wBACA,OAAA;4BAAA,EAAA,OAAA;4BAAM,IAAI,CAAC,6BAA6B;yBAAO;oB,K;wBAA/C,GAAA;wB,G,Q;oB,K;wB,O;4B,E,Q;yB;gB;Y;Q;IAEP;IAEM,oBAAA,UAAA,aAAP;QACI,OAAO,IAAI,CAAC;IAChB;IAEA,OAAA,eAAW,oBAAA,WAAA,MAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,oBAAA,WAAA,OAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAEM,oBAAA,UAAA,QAAP;QACI,OAAO,IAAI,CAAC,6BAA6B;IAC7C;IAEO,oBAAA,UAAA,OAAP;QACI,OAAO,IAAI,CAAC,6BAA6B;IAC7C;IAEO,oBAAA,UAAA,OAAP,SAAY,OAA0B;QAClC,OAAO,IAAI,CAAC,6BAA6B,KAAK;IAClD;IAEO,oBAAA,UAAA,OAAP;QACI,OAAO,IAAI,CAAC,6BAA6B;IAC7C;IAEA,OAAA,eAAW,oBAAA,WAAA,UAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC,6BAA6B;QAC7C;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA;AA/Ga,QAAA,sBAAA;;;;A;AElBb,4DAA4D;AAC5D,kCAAkC;A,I,W,A,I,I,I,C,Y;I,W,O,U,S,C;Q,I,I,G,I,G,I,U,Q,I,G,I;Y,I,S,C,E;Y,I,I,K,E,I,O,U,e,K,G,I,C,C,E,G,C,C,E;Q;Q,O;I;I,O,S,M,I,E;A;A,I,kB,A,I,I,I,C,mB,C,O,S,S,C,E,C,E,C,E,E;I,I,O,W,K;I,O,e,G,I;Q,Y;Q,K;Y,O,C,C,E;Q;I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,qB,A,I,I,I,C,sB,C,O,S,S,C,E,C;I,O,e,G,W;Q,Y;Q,O;I;A,I,S,C,E,C;I,C,C,U,G;A,C;A,I,e,A,I,I,I,C,gB,S,G;I,I,O,I,Y,O;I,I,S,C;I,I,O,M;Q,I,I,K,I,I,M,a,O,e,K,K,I,gB,Q,K;I;I,mB,Q;I,O;A;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,G,M,E,C,E;Q,O;Y,O,E,C,E,G,E,C,E,G,K;Y,M;Q;I;A;A,I,kB,A,I,I,I,C,mB,S,G;I,O,A,O,I,a,M;Q,W;I;A;A,O,e,S,c;I,O;A;A,Q,0B,K;AAMlC,IAAA,MAAA,aAAA,QAAA;AACA,IAAA,MAAA,aAAA,QAAA;AACA,IAAA,eAAA,gBAAA,QAAA;AACA,IAAA,sBAAA,gBAAA,QAAA;AAEA,IAAA,OAAA,gBAAA,QAAA;AACA,IAAA,gBAAA,QAAA;AACA,IAAA,YAAA,QAAA;AA6BA,IAAA,0BAAA,WAAA,GAAA;IAoBI,SAAA,wBACI,GAAW,EACX,YAAoB,EACpB,gBAA4C,EAC5C,SAAoB,EACpB,OAAkC,EAClC,iBAA0B;QAE1B,IAAI,CAAC,KACD,MAAM,IAAI,UAAA,kBAAkB;QAGhC,IAAI,CAAC,kBACD,MAAM,IAAI,UAAA,kBAAkB;QAGhC,IAAI,CAAC,YAAY;QACjB,IAAI,CAAC,uBAAuB,IAAI,UAAA;QAChC,IAAI,CAAC,mBAAmB;QACxB,IAAI,CAAC,uBAAuB;QAC5B,IAAI,CAAC,sBAAsB,UAAA,gBAAgB;QAC3C,IAAI,CAAC,UAAU;QACf,IAAI,CAAC,cAAc;QACnB,IAAI,CAAC,wBAAwB;QAE7B,uCAAuC;QACvC,IAAI,CAAC,WAAW,CAAC,cAAA,YAAY,aAAa,GAAG,IAAI,CAAC;QAElD,IAAI,CAAC,wBAAwB;IACjC;IAEA,OAAA,eAAW,wBAAA,WAAA,SAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAEM,wBAAA,UAAA,OAAP;QAAA,IAAA,QAAA,IAAA;QACI,IAAI,IAAI,CAAC,wBAAwB,UAAA,gBAAgB,cAC7C,OAAO,QAAQ,OAA+B,yCAAuC,IAAI,CAAC,sBAAmB;QAGjH,IAAI,IAAI,CAAC,iCACL,OAAO,IAAI,CAAC,gCAAgC;QAGhD,IAAI,CAAC,kCAAkC,IAAI,UAAA;QAC3C,IAAI,CAAC,mCAAmC,IAAI,UAAA;QAE5C,IAAI,CAAC,sBAAsB,UAAA,gBAAgB;QAE3C,IAAI;YAEA,IAAI,OAAO,cAAc,eAAe,CAAC,wBAAwB,mBAAmB;gBAChF,+BAA+B;gBAC/B,IAAI,CAAC,iCAAiC;gBAEtC,IAAI,CAAC,sBAAsB,IAAI,UAAU,IAAI,CAAC;YACjD,OAAM;gBACH,IAAM,UAA4B;oBAAE,SAAS,IAAI,CAAC;oBAAa,mBAAmB,IAAI,CAAC;gBAAqB;gBAC5G,oFAAoF;gBACpF,IAAI,CAAC,iCAAiC;gBAEtC,QAAQ,QAAQ,IAAI,CAAC;gBACrB,0FAA0F;gBAC1F,mFAAmF;gBACnF,IAAM,MAAM,IAAI,IAAI,IAAI,CAAC;gBACzB,IAAI,WAAmB,IAAI;gBAE3B,IAAI,AAAA,CAAA,aAAQ,QAAR,aAAQ,KAAA,IAAA,KAAA,IAAR,SAAU,mBAAiB,MAAO,QAClC,WAAW;qBACR,IAAI,AAAA,CAAA,aAAQ,QAAR,aAAQ,KAAA,IAAA,KAAA,IAAR,SAAU,mBAAiB,MAAO,OACzC,WAAW;gBAEf,sEAAsE;gBACrE,QAAQ,MAAc,WAAW;gBAClC,IAAI,CAAC,sBAAsB,IAAI,KAAA,QAAG,IAAI,CAAC,SAAS;YACnD;YAED,IAAI,CAAC,oBAAoB,aAAa;YACtC,IAAI,CAAC,4BAA4B,IAAI,UAAA;YACrC,IAAI,CAAC,yBAAyB,IAAI,UAAA;YAClC,IAAI,CAAC,uBAAuB,IAAI,UAAA;YAChC,IAAI,CAAC,mBAAmB,MAAM,SAAC,MAAc;gBACzC,UAAA,OAAO,SAAS,QAAQ,IAAI,UAAA,gBAAgB;YAChD;QACH,EAAC,OAAO,OAAO;YACZ,IAAI,CAAC,gCAAgC,QAAQ,IAAI,UAAA,uBAAuB,KAAK;YAC7E,OAAO,IAAI,CAAC,gCAAgC;QAC/C;QAED,IAAI,CAAC,QAAQ,IAAI,UAAA,qBAAqB,IAAI,CAAC,kBAAkB,IAAI,CAAC;QAElE,IAAI,CAAC,oBAAoB,SAAS;YAC9B,MAAK,iCAAiC,QAAQ,KAAK;gBAC/C,MAAK,sBAAsB,UAAA,gBAAgB;gBAC3C,MAAK,QAAQ,IAAI,UAAA,2BAA2B,MAAK;gBACjD,MAAK,gCAAgC,QAAQ,IAAI,UAAA,uBAAuB,KAAK;YACjF,GAAG,SAAC,KAAa;gBACb,MAAK,gCAAgC,OAAO;YAChD;QACJ;QAEA,IAAI,CAAC,oBAAoB,UAAU,SAAC,CAAwE;YACxG,MAAK,QAAQ,IAAI,UAAA,qBAAqB,MAAK,kBAAkB,EAAE,SAAS,EAAE;YAC1E,MAAK,wBAAwB,EAAE;QACnC;QAEA,IAAI,CAAC,oBAAoB,UAAU,SAAC,CAA8E;YAC9G,IAAI,MAAK,wBAAwB,UAAA,gBAAgB,YAAY;gBACzD,MAAK,sBAAsB,UAAA,gBAAgB;gBAC3C,wFAAwF;gBACxF,MAAK,gCAAgC,QAAQ,IAAI,UAAA,uBAAuB,EAAE,MAAM,EAAE,SAAS,MAAM,MAAK;YACzG,OAAM;gBACH,MAAK,sBAAsB,UAAA,gBAAgB;gBAC3C,MAAK,sBAAsB;gBAC3B,MAAK,QAAQ,IAAI,UAAA,sBAAsB,MAAK,kBAAkB,EAAE,MAAM,EAAE;YAC3E;YAED,MAAK,QAAQ,EAAE,MAAM,EAAE,QAAQ,MAAM,SAAC,MAAc;gBAChD,UAAA,OAAO,SAAS,QAAQ,IAAI,UAAA,gBAAgB;YAChD;QACJ;QAEA,IAAI,CAAC,oBAAoB,YAAY,SAAC,CAA0D;YAC5F,IAAM,sBAAsB,IAAI,OAAO;YACvC,IAAI,MAAK,wBAAwB,UAAA,gBAAgB,WAAW;gBACxD,IAAM,aAAW,IAAI,UAAA;gBACrB,6BAA6B;gBAC7B,MAAK,0BAA0B,mBAAmB,WAAS;gBAC3D,IAAI,EAAE,gBAAgB,aAAa;oBAC/B,IAAM,aAAa,IAAI,UAAA,oBAAoB,UAAA,YAAY,QAAQ,EAAE;oBACjE,MAAK,qBACA,oBAAoB,YACpB,KAAK,SAAC,iBAAoC;wBACvC,MAAK,QAAQ,IAAI,UAAA,+BAA+B,MAAK,kBAAkB,qBAAqB;wBAC5F,WAAS,QAAQ;oBACrB,GAAG,SAAC,KAAa;wBACb,2BAA2B;wBAC3B,WAAS,OAAO,2CAAyC;oBAC7D;gBACP,OAAM;oBACH,IAAM,aAAa,IAAI,UAAA,oBAAoB,UAAA,YAAY,MAAM,EAAE;oBAC/D,MAAK,qBACA,oBAAoB,YACpB,KAAK,SAAC,iBAAoC;wBACvC,MAAK,QAAQ,IAAI,UAAA,+BAA+B,MAAK,kBAAkB,qBAAqB;wBAC5F,WAAS,QAAQ;oBACrB,GAAG,SAAC,KAAa;wBACb,2BAA2B;wBAC3B,WAAS,OAAO,yCAAuC;oBAC3D;gBACP;YACJ;QACL;QAEA,OAAO,IAAI,CAAC,gCAAgC;IAChD;IAEO,wBAAA,UAAA,OAAP,SAAY,OAA0B;QAClC,IAAI,IAAI,CAAC,wBAAwB,UAAA,gBAAgB,WAC7C,OAAO,QAAQ,OAAO,0CAAwC,UAAA,eAAe,CAAC,IAAI,CAAC,oBAAoB,GAAA;QAG3G,IAAM,4BAA4B,IAAI,UAAA;QACtC,IAAM,sBAAsB,IAAI,UAAA;QAEhC,IAAI,CAAC,qBAAqB,mBAAmB,oBAAoB;QAEjE,IAAI,CAAC,qBACA,sBAAsB,SACtB,KAAK,SAAC,UAA+B;YAClC,oBAAoB,QAAQ;gBACxB,SAAS;gBACT,qBAAqB;gBACrB,oBAAoB;YACvB;QACL,GAAG,SAAC,KAAa;YACb,oBAAoB,OAAO,mCAAiC;QAChE;QAEJ,OAAO,0BAA0B;IACrC;IAEO,wBAAA,UAAA,OAAP;QACI,IAAI,IAAI,CAAC,wBAAwB,UAAA,gBAAgB,WAC7C,OAAO,QAAQ,OAA0B,0CAAwC,IAAI,CAAC,sBAAmB;QAG7G,OAAO,IAAI,CAAC,0BAA0B;IAC1C;IAEO,wBAAA,UAAA,QAAP,SAAa,MAAe;QACxB,IAAI,IAAI,CAAC,qBACL;YAAA,IAAI,IAAI,CAAC,wBAAwB,UAAA,gBAAgB,cAC7C,IAAI,CAAC,oBAAoB,MAAM,MAAM,SAAS,SAAS;QAC1D,OAED,OAAO,QAAQ;QAGnB,OAAO,IAAI,CAAC,uBAAuB;IACvC;IAEA,OAAA,eAAW,wBAAA,WAAA,UAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAEO,wBAAA,UAAA,iBAAR,SAAuB,QAAmB;QACtC,IAAI;YACA,mEAAmE;YACnE,IAAI,CAAC,UACD,OAAO,QAAQ;YAGnB,IAAI,CAAC,QAAQ,IAAI,UAAA,2BAA2B,IAAI,CAAC,kBAAkB,IAAI,OAAO,eAAe,SAAS;YAEtG,uIAAuI;YACvI,IAAI,IAAI,CAAC,iBACL,iEAAiE;YACjE,IAAI,CAAC,oBAAoB,KAAK,SAAS,oBAAoB;iBAE3D,OAAO,QAAQ,OAAO,+CAA+C,IAAI,CAAC,mBAAmB,MAAM,SAAS,QAAQ,KAAK,MAAM,IAAI,QAAQ;YAE/I,OAAO,QAAQ;QAElB,EAAC,OAAO,GAAG;YACR,OAAO,QAAQ,OAAO,2BAAyB;QAClD;IACL;IAEc,wBAAA,UAAA,UAAd,SAAsB,IAAY,EAAE,MAAc;Q,O,U,I,E,K,G,K,G;Y,I;Y,O,Y,I,E,S,E;gB,O,G;oB,K;wBACxC,cAAc,wBAAsB,OAAI,OAAK;wBACnD,IAAI,CAAC,sBAAsB,UAAA,gBAAgB;wBAC3C,IAAI,CAAC,uBAAuB;wBAC5B,OAAA;4BAAA,EAAA,OAAA;4BAAM,IAAI,CAAC,0BAA0B,gBAAgB;4BACjD,2BAA2B;4BAC3B,kLAAkL;4BACtL,GAAG;yBAAY;oB,K;wBAHf,GAAA;wBAKA,OAAA;4BAAA,EAAA,OAAA;4BAAM,IAAI,CAAC,qBAAqB,gBAAgB,SAAC,eAA0B;gCACvE,gBAAgB,mBAAmB,OAAO;4BAC9C,GAAG;yBAAY;oB,K;wBAFf,GAAA;wB,O;4B,E,Q;yB;gB;Y;Q;IAGH;IAEa,wBAAA,UAAA,mBAAd;Q,O,U,I,E,K,G,K,G;Y,I,Y,U;Y,O,Y,I,E,S,E;gB,O,G;oB,K;wBAEc,aAAiC,IAAI,CAAC,qBAAqB;wBACrC,OAAA;4BAAA,EAAA,OAAA;4BAAM;yBAAU;oB,K;wBAAtC,WAAsB,GAAA;wBAC5B,mEAAmE;wBACnE,IAAI,CAAC,UACD,OAAA;4BAAA,EAAA,QAAA;yBAAA;wB,G,Q;oB,K;wB,G,K,K;4B;4B;;4B;yB;wBAIA,OAAA;4BAAA,EAAA,OAAA;4BAAM,IAAI,CAAC,eAAe;yBAAS;oB,K;wBAAnC,GAAA;wBACA,SAAS,mBAAmB;wB,O;4B,E,O;4B;yB;oB,K;wB,c,G;wBAE5B,SAAS,mBAAmB,OAAO;wB,O;4B,E,O;4B;yB;oB,K;wB,O;4B,E,O;4B;yB;oB,K;wB,O;4B,E,Q;yB;gB;Y;Q;IAG9C;IAEO,wBAAA,UAAA,UAAR,SAAgB,KAAsB;QAClC,IAAI,CAAC,qBAAqB,QAAQ;QAClC,UAAA,OAAO,SAAS,QAAQ;IAC5B;IAEA,6DAA6D;IACrD,wBAAA,UAAA,WAAR;QACI,6DAA6D;QAC7D,IAAM,QAAkC,IAAI,aAAA,QAAM,MAAM,IAAI,CAAC;QAE7D,IAAI,IAAI,CAAC,cAAc,aACnB,IAAI,CAAC,UAAU,aAAa,aAC5B,IAAI,CAAC,UAAU,OAAO,GACtB,MAAM,YAAY,IAAI,CAAC;QAG3B,OAAO;IACX;IAEe,wBAAA,gBAAf,SAA6B,SAAoB;QAC7C,IAAM,mBAA2D;YAC7D,MAAM,UAAU;YAChB,MAAM,UAAU;QACnB;QAED,IAAI,CAAC,CAAC,UAAU,UACZ,iBAAiB,UAAU;YACvB,wBAAwB,WAAW,IAAI,OAAU,UAAU,WAAQ,MAAI,CAAA,AAAC,UAAU,aAAa,YAAa,KAAK,UAAU,QAAA,GAAY,SAAS;QACnJ;aAED,iBAAiB,UAAU,CAAA;QAG/B,iBAAiB,QAAQ,cAAc;QAEvC,IAAM,iBAAkC,IAAI,oBAAA,QAAgB;QAC5D,OAAO;IACX;IAEQ,wBAAA,UAAA,mBAAR,SAAyB,OAA4B,EAAE,OAA6B;QAChF,IAAI;QAEJ,UAAO,SAAA,SAAA,CAAA,GACA,UACA;YACC,aAAa;YACb,YAAY,QAAQ;QACvB;QAGL,IAAI,CAAC,CAAC,IAAI,CAAC,WAAW;YAClB,IAAM,iBAAkC,wBAAwB,cAAc,IAAI,CAAC;YACnF,IAAM,cAAyB;YAE/B,gBAAgB,IAAI,QAAoB,SAAC,OAAoC,EAAE,MAAuC;gBAClH,YAAU,SAAS,SAAS,SAAS,SAAC,KAAY,EAAE,MAAkB;oBAClE,IAAI,CAAC,CAAC,OACF,OAAO;yBAEP,QAAQ;gBAEhB;YACJ;QACH,OACG,IAAI,CAAC,CAAC,QAAQ,gBACV,gBAAgB,QAAQ,QAAQ,IAAI,QAAQ;aAE5C,gBAAgB,QAAQ,QAAQ,IAAI,QAAQ;QAIpD,OAAO;IACX;IAEA,OAAA,eAAY,wBAAA,WAAA,mBAAZ;QAAA,KAAA;YACI,OAAO,IAAI,CAAC,uBAAuB,IAAI,CAAC,oBAAoB,eAAe,IAAI,CAAC,oBAAoB;QACxG;Q,Y;Q,c;IAAC;IAnVa,wBAAA,oBAA6B;IAqV/C,OAAA;AAvWA;AAAa,QAAA,0BAAA;;;A;AE3Cb,4DAA4D;AAC5D,kCAAkC;A,O,e,S,c;I,O;A;A,Q,sB,K;AAQlC,IAAA,sBAAA,WAAA,GAAA;IAYI,SAAA,oBAAmB,WAA6B,EAAE,cAAsB;QAThE,IAAA,CAAA,cAA6B,EAAE;QAC/B,IAAA,CAAA,mBAA2B;QAC3B,IAAA,CAAA,uBAA+B;QAC/B,IAAA,CAAA,wBAAgC;QAChC,IAAA,CAAA,mBAA2B;QAC3B,IAAA,CAAA,oBAA4B;QAC5B,IAAA,CAAA,aAAsB;QACtB,IAAA,CAAA,4BAAoC;QAGxC,IAAI,CAAC,gBAAgB;QACrB,IAAI,CAAC,qBAAqB;IAC9B;IAEO,oBAAA,UAAA,KAAP;QACI,OAAO,IAAI,CAAC,cAAc;IAC9B;IAEA,oDAAoD;IACpD,8EAA8E;IAC9E,sFAAsF;IACtF,+DAA+D;IACxD,oBAAA,UAAA,OAAP;QAAA,IAAA,QAAA,IAAA;QACI,yCAAyC;QACzC,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,IAAI,CAAC,YAAY,WAAW,GAAG;YACpD,uCAAuC;YACvC,mCAAmC;YACnC,gEAAgE;YAChE,IAAM,eAAuB,IAAI,CAAC,mBAAmB,IAAI,CAAC;YAE1D,IAAI,cAAsB,KAAK,MAAM,eAAe,IAAI,CAAC,qBAAqB;YAC9E,IAAI,MAAO,cAAc,GACrB;YAGJ,IAAI,IAAY;YAEhB,MAAO,IAAI,IAAI,CAAC,YAAY,UAAU,eAAe,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,MAAM,OAAO,WAClF,eAAe,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,OAAO;YAGtD,IAAI,IAAI,IAAI,CAAC,YAAY,QAAQ;gBAC7B,IAAM,SAAsB,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,MAAM,OAAO,MAAM;gBAEnE,IAAI,CAAC,oBAAoB,AAAC,OAAO,aAAa,IAAI,CAAC,qBAAsB;gBAEzE,2DAA2D;gBAC3D,IAAI,MAAM,IAAI,CAAC,YAAY,SAAS,GAChC,IAAI,CAAC,aAAa;gBAGtB,OAAO,QAAQ,QAAmC;oBAC9C,QAAQ;oBACR,OAAO;oBACP,cAAc,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,MAAM;gBAC3C;YACJ;QACJ;QAED,OAAO,IAAI,CAAC,cAAc,OACrB,KAAK,SAAC,MAAiC;YACpC,IAAI,UAAU,OAAO,QAAQ;gBACzB,MAAK,YAAY,KAAK,IAAI,YAAY,QAAQ,MAAK,oBAAoB,MAAK;gBAC5E,MAAK,qBAAqB,OAAO,OAAO;YAC3C;YACD,OAAO;QACX;IACR;IAEO,oBAAA,UAAA,SAAP;QACI,IAAI,CAAC,cAAc;QACnB,OAAO,IAAI,CAAC,cAAc;IAC9B;IAEO,oBAAA,UAAA,SAAP;QACI,IAAI,IAAI,CAAC,eAAe,MAAM,IAAI,CAAC,YAAY,QAAQ;YACnD,IAAI,CAAC,aAAa;YAClB,IAAI,CAAC,mBAAmB,IAAI,CAAC;QAChC;IACL;IAEA,2EAA2E;IAC3E,2DAA2D;IAC3D,0DAA0D;IACnD,oBAAA,UAAA,gBAAP,SAAqB,MAAc;QAC/B,IAAI,IAAI,CAAC,gBAAgB,aAAa,IAAI,CAAC,YAAY,WAAW,GAC9D;QAGJ,IAAI,CAAC,uBAAuB;QAE5B,uCAAuC;QACvC,mCAAmC;QACnC,gEAAgE;QAChE,IAAM,eAAuB,SAAS,IAAI,CAAC;QAE3C,IAAI,cAAsB,KAAK,MAAM,eAAe,IAAI,CAAC,qBAAqB;QAE9E,IAAI,IAAY;QAEhB,MAAO,IAAI,IAAI,CAAC,YAAY,UAAU,eAAe,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,MAAM,OAAO,WAClF,eAAe,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,OAAO;QAEtD,IAAI,CAAC,wBAAwB,KAAK,MAAM,SAAU,AAAC,cAAc,IAAI,CAAC,qBAAsB;QAC5F,IAAI,CAAC,cAAc,IAAI,CAAC,YAAY,MAAM;IAC9C;IAEA,6DAA6D;IACtD,oBAAA,UAAA,mBAAP,SAAwB,MAAc;QAClC,IAAI,SAAS,IAAI,CAAC,yBAAyB,IAAI,CAAC,gBAAgB,WAC5D,OAAO;QAGX,IAAoB,IAAA,KAAA,GAAA,KAAA,IAAI,CAAC,aAAL,KAAA,GAAA,QAAA,KAAkB;YAAjC,IAAM,QAAK,EAAA,CAAA,GAAA;YACZ,IAAM,cAAsB,AAAC,MAAM,aAAa,IAAI,CAAC,qBAAsB;YAC3E,IAAM,YAAoB,cAAe,AAAC,MAAM,MAAM,OAAO,aAAa,IAAI,CAAC,qBAAsB;YAErG,IAAI,UAAU,eAAe,UAAU,WACnC,OAAO,MAAM,MAAM;QAE1B;QAED,OAAO;IACX;IACJ,OAAA;AAAA;AA/Ha,QAAA,sBAAA;AAiIb,0EAA0E;AAC1E,kFAAkF;AAClF,4BAA4B;AAC5B,IAAA,cAAA,WAAA,GAAA;IAKI,SAAA,YAAmB,KAAgC,EAAE,MAAc,EAAE,UAAkB;QACnF,IAAI,CAAC,QAAQ;QACb,IAAI,CAAC,SAAS;QACd,IAAI,CAAC,aAAa;IACtB;IACJ,OAAA;AAAA;;;A;AEvJA,4DAA4D;AAC5D,kCAAkC;A,O,e,S,c;I,O;A;A,Q,Y,K;AAGlC,IAAA,YAAA,QAAA;AAEA,IAAA,YAAA,WAAA,GAAA;IAMI,SAAA,UAAoB,aAAqB,EAAE,SAAiB,EAAE,aAAqB,EAAE,aAAqB;QACtG,IAAI,CAAC,oBAAoB;QACzB,IAAI,CAAC,gBAAgB;QACrB,IAAI,CAAC,oBAAoB;QACzB,IAAI,CAAC,oBAAoB;IAC7B;IAEc,UAAA,iBAAd,SAA6B,UAA8B;QACvD,OAAO,IAAI,UAAU,WAAW,YAAY,UAAA,WAAW,wCACnD,SAAS,WAAW,YAAY,UAAA,WAAW,oCAAoC,KAC/E,WAAW,YAAY,UAAA,WAAW,wCAClC,WAAW,YAAY,UAAA,WAAW;IAC1C;IAEc,UAAA,uBAAd,SAAmC,MAAwB;QACvD,OAAO,IAAI,CAAC,eAAe,OAAO;IACtC;IAEA,OAAA,eAAW,UAAA,WAAA,YAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,UAAA,WAAA,QAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,UAAA,WAAA,YAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IAED,OAAA,eAAW,UAAA,WAAA,YAAX;QAAA,KAAA;YACI,OAAO,IAAI,CAAC;QAChB;Q,Y;Q,c;IAAC;IACL,OAAA;AAAA;AAvCa,QAAA,YAAA;;;A;AENb,4DAA4D;AAC5D,kCAAkC;A,I,Y,A,I,I,I,C,a,S,O,E,U,E,C,E,S;I,S,M,K;Q,O,iB,I,Q,I,E,S,O;Y,Q;Q;I;I,O,I,C,K,C,I,O,C,E,S,O,E,M;Q,S,U,K;Y,I;gB,K,U,K;Y,E,O,G;gB,O;Y;Q;Q,S,S,K;Y,I;gB,K,S,C,Q,C;Y,E,O,G;gB,O;Y;Q;Q,S,K,M;Y,O,O,Q,O,S,M,O,O,K,W;Q;Q,K,A,C,Y,U,M,S,c,E,C,E;I;A;A,I,c,A,I,I,I,C,e,S,O,E,I;I,I,I;Q,O;Q,M;Y,I,C,C,E,G,G,M,C,C,E;Y,O,C,C,E;Q;Q,M,E;Q,K,E;I,G,G,G,G;I,O,I;Q,M,K;Q,S,K;Q,U,K;I,G,O,W,c,C,C,C,O,S,G;Q,O,I;I,C,G;I,S,K,C;Q,O,S,C;Y,O,K;gB;gB;a;Q;I;I,S,K,E;Q,I,G,M,I,U;Q,M,E,I;Y,I,I,G,K,C,I,E,C,E,G,I,C,C,S,G,E,C,E,G,C,C,Q,I,C,A,C,I,C,C,S,A,K,E,K,I,C,I,E,I,K,C,A,C,I,E,K,G,E,C,E,C,E,M,O;Y,I,I,G,G,K;gB,E,C,E,G;gB,E;a;Y,O,E,C,E;gB,K;gB,K;oB,I;oB;gB,K;oB,E;oB,O;wB,O,E,C,E;wB,M;oB;gB,K;oB,E;oB,I,E,C,E;oB,K;wB;qB;oB;gB,K;oB,K,E,I;oB,E,K;oB;gB;oB,I,C,C,I,E,M,I,E,S,K,C,C,E,S,E,A,K,C,E,C,E,K,K,E,C,E,K,C,G;wB,I;wB;oB;oB,I,E,C,E,K,K,C,C,K,E,C,E,G,C,C,E,I,E,C,E,G,C,C,E,G;wB,E,Q,E,C,E;wB;oB;oB,I,E,C,E,K,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,I;wB;oB;oB,I,K,E,Q,C,C,E,E;wB,E,Q,C,C,E;wB,E,I,K;wB;oB;oB,I,C,C,E,E,E,I;oB,E,K;oB;Y;Y,K,K,K,S;Q,E,O,G;Y,K;gB;gB;a;Y,I;Q,S;Y,I,I;Q;Q,I,E,C,E,G,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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-f40482dd3cec73f1.js","src/index3.ts","node_modules/xstate/dist/xstate.esm.js","node_modules/xstate/dist/actions-5943a9db.esm.js","node_modules/xstate/dev/dist/xstate-dev.esm.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","node_modules/speechstate/src/index.ts","node_modules/speechstate/src/speechstate.ts","node_modules/speechstate/src/tts.ts","node_modules/speechstate/src/getToken.ts","node_modules/web-speech-cognitive-services/lib/SpeechServices/TextToSpeech.js","node_modules/web-speech-cognitive-services/src/SpeechServices/TextToSpeech.js","node_modules/@babel/runtime/helpers/interopRequireDefault.js","node_modules/web-speech-cognitive-services/lib/SpeechServices/TextToSpeech/createSpeechSynthesisPonyfill.js","node_modules/web-speech-cognitive-services/src/SpeechServices/TextToSpeech/createSpeechSynthesisPonyfill.js","node_modules/@babel/runtime/regenerator/index.js","node_modules/@babel/runtime/helpers/regeneratorRuntime.js","node_modules/@babel/runtime/helpers/typeof.js","node_modules/@babel/runtime/helpers/asyncToGenerator.js","node_modules/@babel/runtime/helpers/classCallCheck.js","node_modules/@babel/runtime/helpers/createClass.js","node_modules/@babel/runtime/helpers/inherits.js","node_modules/@babel/runtime/helpers/setPrototypeOf.js","node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","node_modules/@babel/runtime/helpers/assertThisInitialized.js","node_modules/@babel/runtime/helpers/getPrototypeOf.js","node_modules/event-target-shim/es5.js","node_modules/process/browser.js","node_modules/@babel/runtime/helpers/toConsumableArray.js","node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","node_modules/@babel/runtime/helpers/arrayLikeToArray.js","node_modules/@babel/runtime/helpers/iterableToArray.js","node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","node_modules/@babel/runtime/helpers/nonIterableSpread.js","node_modules/@babel/runtime/helpers/set.js","node_modules/@babel/runtime/helpers/superPropBase.js","node_modules/@babel/runtime/helpers/defineProperty.js","node_modules/@babel/runtime/helpers/get.js","node_modules/@babel/runtime/helpers/wrapNativeSuper.js","node_modules/@babel/runtime/helpers/isNativeFunction.js","node_modules/@babel/runtime/helpers/construct.js","node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js","node_modules/p-defer-es5/lib/esm/index.mjs","node_modules/@babel/runtime-corejs3/core-js-stable/promise.js","node_modules/core-js-pure/stable/promise/index.js","node_modules/core-js-pure/es/promise/index.js","node_modules/core-js-pure/modules/es.aggregate-error.js","node_modules/core-js-pure/modules/es.aggregate-error.constructor.js","node_modules/core-js-pure/internals/export.js","node_modules/core-js-pure/internals/global.js","node_modules/core-js-pure/internals/function-apply.js","node_modules/core-js-pure/internals/function-bind-native.js","node_modules/core-js-pure/internals/fails.js","node_modules/core-js-pure/internals/function-uncurry-this-clause.js","node_modules/core-js-pure/internals/classof-raw.js","node_modules/core-js-pure/internals/function-uncurry-this.js","node_modules/core-js-pure/internals/is-callable.js","node_modules/core-js-pure/internals/document-all.js","node_modules/core-js-pure/internals/object-get-own-property-descriptor.js","node_modules/core-js-pure/internals/descriptors.js","node_modules/core-js-pure/internals/function-call.js","node_modules/core-js-pure/internals/object-property-is-enumerable.js","node_modules/core-js-pure/internals/create-property-descriptor.js","node_modules/core-js-pure/internals/to-indexed-object.js","node_modules/core-js-pure/internals/indexed-object.js","node_modules/core-js-pure/internals/require-object-coercible.js","node_modules/core-js-pure/internals/is-null-or-undefined.js","node_modules/core-js-pure/internals/to-property-key.js","node_modules/core-js-pure/internals/to-primitive.js","node_modules/core-js-pure/internals/is-object.js","node_modules/core-js-pure/internals/is-symbol.js","node_modules/core-js-pure/internals/get-built-in.js","node_modules/core-js-pure/internals/path.js","node_modules/core-js-pure/internals/object-is-prototype-of.js","node_modules/core-js-pure/internals/use-symbol-as-uid.js","node_modules/core-js-pure/internals/symbol-constructor-detection.js","node_modules/core-js-pure/internals/engine-v8-version.js","node_modules/core-js-pure/internals/engine-user-agent.js","node_modules/core-js-pure/internals/get-method.js","node_modules/core-js-pure/internals/a-callable.js","node_modules/core-js-pure/internals/try-to-string.js","node_modules/core-js-pure/internals/ordinary-to-primitive.js","node_modules/core-js-pure/internals/well-known-symbol.js","node_modules/core-js-pure/internals/shared.js","node_modules/core-js-pure/internals/is-pure.js","node_modules/core-js-pure/internals/shared-store.js","node_modules/core-js-pure/internals/define-global-property.js","node_modules/core-js-pure/internals/has-own-property.js","node_modules/core-js-pure/internals/to-object.js","node_modules/core-js-pure/internals/uid.js","node_modules/core-js-pure/internals/ie8-dom-define.js","node_modules/core-js-pure/internals/document-create-element.js","node_modules/core-js-pure/internals/is-forced.js","node_modules/core-js-pure/internals/function-bind-context.js","node_modules/core-js-pure/internals/create-non-enumerable-property.js","node_modules/core-js-pure/internals/object-define-property.js","node_modules/core-js-pure/internals/v8-prototype-define-bug.js","node_modules/core-js-pure/internals/an-object.js","node_modules/core-js-pure/internals/object-get-prototype-of.js","node_modules/core-js-pure/internals/shared-key.js","node_modules/core-js-pure/internals/correct-prototype-getter.js","node_modules/core-js-pure/internals/object-set-prototype-of.js","node_modules/core-js-pure/internals/function-uncurry-this-accessor.js","node_modules/core-js-pure/internals/a-possible-prototype.js","node_modules/core-js-pure/internals/copy-constructor-properties.js","node_modules/core-js-pure/internals/own-keys.js","node_modules/core-js-pure/internals/object-get-own-property-names.js","node_modules/core-js-pure/internals/object-keys-internal.js","node_modules/core-js-pure/internals/array-includes.js","node_modules/core-js-pure/internals/to-absolute-index.js","node_modules/core-js-pure/internals/to-integer-or-infinity.js","node_modules/core-js-pure/internals/math-trunc.js","node_modules/core-js-pure/internals/length-of-array-like.js","node_modules/core-js-pure/internals/to-length.js","node_modules/core-js-pure/internals/hidden-keys.js","node_modules/core-js-pure/internals/enum-bug-keys.js","node_modules/core-js-pure/internals/object-get-own-property-symbols.js","node_modules/core-js-pure/internals/object-create.js","node_modules/core-js-pure/internals/object-define-properties.js","node_modules/core-js-pure/internals/object-keys.js","node_modules/core-js-pure/internals/html.js","node_modules/core-js-pure/internals/install-error-cause.js","node_modules/core-js-pure/internals/error-stack-install.js","node_modules/core-js-pure/internals/error-stack-clear.js","node_modules/core-js-pure/internals/error-stack-installable.js","node_modules/core-js-pure/internals/iterate.js","node_modules/core-js-pure/internals/is-array-iterator-method.js","node_modules/core-js-pure/internals/iterators.js","node_modules/core-js-pure/internals/get-iterator.js","node_modules/core-js-pure/internals/get-iterator-method.js","node_modules/core-js-pure/internals/classof.js","node_modules/core-js-pure/internals/to-string-tag-support.js","node_modules/core-js-pure/internals/iterator-close.js","node_modules/core-js-pure/internals/normalize-string-argument.js","node_modules/core-js-pure/internals/to-string.js","node_modules/core-js-pure/modules/es.array.iterator.js","node_modules/core-js-pure/internals/add-to-unscopables.js","node_modules/core-js-pure/internals/internal-state.js","node_modules/core-js-pure/internals/weak-map-basic-detection.js","node_modules/core-js-pure/internals/iterator-define.js","node_modules/core-js-pure/internals/function-name.js","node_modules/core-js-pure/internals/iterator-create-constructor.js","node_modules/core-js-pure/internals/iterators-core.js","node_modules/core-js-pure/internals/define-built-in.js","node_modules/core-js-pure/internals/set-to-string-tag.js","node_modules/core-js-pure/internals/object-to-string.js","node_modules/core-js-pure/internals/create-iter-result-object.js","node_modules/core-js-pure/modules/es.object.to-string.js","node_modules/core-js-pure/modules/es.promise.js","node_modules/core-js-pure/modules/es.promise.constructor.js","node_modules/core-js-pure/internals/engine-is-node.js","node_modules/core-js-pure/internals/set-species.js","node_modules/core-js-pure/internals/define-built-in-accessor.js","node_modules/core-js-pure/internals/an-instance.js","node_modules/core-js-pure/internals/species-constructor.js","node_modules/core-js-pure/internals/a-constructor.js","node_modules/core-js-pure/internals/is-constructor.js","node_modules/core-js-pure/internals/inspect-source.js","node_modules/core-js-pure/internals/task.js","node_modules/core-js-pure/internals/array-slice.js","node_modules/core-js-pure/internals/validate-arguments-length.js","node_modules/core-js-pure/internals/engine-is-ios.js","node_modules/core-js-pure/internals/microtask.js","node_modules/core-js-pure/internals/queue.js","node_modules/core-js-pure/internals/engine-is-ios-pebble.js","node_modules/core-js-pure/internals/engine-is-webos-webkit.js","node_modules/core-js-pure/internals/host-report-errors.js","node_modules/core-js-pure/internals/perform.js","node_modules/core-js-pure/internals/promise-native-constructor.js","node_modules/core-js-pure/internals/promise-constructor-detection.js","node_modules/core-js-pure/internals/engine-is-browser.js","node_modules/core-js-pure/internals/engine-is-deno.js","node_modules/core-js-pure/internals/new-promise-capability.js","node_modules/core-js-pure/modules/es.promise.all.js","node_modules/core-js-pure/internals/promise-statics-incorrect-iteration.js","node_modules/core-js-pure/internals/check-correctness-of-iteration.js","node_modules/core-js-pure/modules/es.promise.catch.js","node_modules/core-js-pure/modules/es.promise.race.js","node_modules/core-js-pure/modules/es.promise.reject.js","node_modules/core-js-pure/modules/es.promise.resolve.js","node_modules/core-js-pure/internals/promise-resolve.js","node_modules/core-js-pure/modules/es.promise.all-settled.js","node_modules/core-js-pure/modules/es.promise.any.js","node_modules/core-js-pure/modules/es.promise.finally.js","node_modules/core-js-pure/modules/es.string.iterator.js","node_modules/core-js-pure/internals/string-multibyte.js","node_modules/core-js-pure/modules/web.dom-collections.iterator.js","node_modules/core-js-pure/internals/dom-iterables.js","node_modules/on-error-resume-next/lib/index.js","node_modules/web-speech-cognitive-services/lib/SpeechServices/TextToSpeech/AudioContextQueue.js","node_modules/web-speech-cognitive-services/src/SpeechServices/TextToSpeech/AudioContextQueue.js","node_modules/memoize-one/dist/memoize-one.esm.js","node_modules/web-speech-cognitive-services/lib/SpeechServices/TextToSpeech/AudioContextConsumer.js","node_modules/web-speech-cognitive-services/src/SpeechServices/TextToSpeech/AudioContextConsumer.js","node_modules/web-speech-cognitive-services/lib/SpeechServices/TextToSpeech/fetchCustomVoices.js","node_modules/web-speech-cognitive-services/src/SpeechServices/TextToSpeech/fetchCustomVoices.js","node_modules/web-speech-cognitive-services/lib/SpeechServices/TextToSpeech/SpeechSynthesisVoice.js","node_modules/web-speech-cognitive-services/src/SpeechServices/TextToSpeech/SpeechSynthesisVoice.js","node_modules/web-speech-cognitive-services/lib/SpeechServices/TextToSpeech/fetchVoices.js","node_modules/web-speech-cognitive-services/src/SpeechServices/TextToSpeech/fetchVoices.js","node_modules/web-speech-cognitive-services/lib/SpeechServices/patchOptions.js","node_modules/web-speech-cognitive-services/src/SpeechServices/patchOptions.js","node_modules/@babel/runtime/helpers/objectWithoutProperties.js","node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","node_modules/web-speech-cognitive-services/lib/SpeechServices/resolveFunctionOrReturnValue.js","node_modules/web-speech-cognitive-services/src/SpeechServices/resolveFunctionOrReturnValue.js","node_modules/web-speech-cognitive-services/lib/SpeechServices/TextToSpeech/SpeechSynthesisEvent.js","node_modules/web-speech-cognitive-services/src/SpeechServices/TextToSpeech/SpeechSynthesisEvent.js","node_modules/web-speech-cognitive-services/lib/SpeechServices/TextToSpeech/SpeechSynthesisUtterance.js","node_modules/web-speech-cognitive-services/src/SpeechServices/TextToSpeech/SpeechSynthesisUtterance.js","node_modules/event-as-promise/lib/index.js","node_modules/event-as-promise/src/index.js","node_modules/event-as-promise/lib/external/p-defer.js","node_modules/event-as-promise/src/external/p-defer.js","node_modules/web-speech-cognitive-services/lib/SpeechServices/TextToSpeech/fetchSpeechData.js","node_modules/web-speech-cognitive-services/src/SpeechServices/TextToSpeech/fetchSpeechData.js","node_modules/base64-arraybuffer/dist/base64-arraybuffer.es5.js","node_modules/src/index.ts","node_modules/web-speech-cognitive-services/lib/SpeechServices/TextToSpeech/buildSSML.js","node_modules/web-speech-cognitive-services/src/SpeechServices/TextToSpeech/buildSSML.js","node_modules/web-speech-cognitive-services/lib/SpeechServices/TextToSpeech/isSSML.js","node_modules/web-speech-cognitive-services/src/SpeechServices/TextToSpeech/isSSML.js","node_modules/web-speech-cognitive-services/lib/SpeechServices/TextToSpeech/subscribeEvent.js","node_modules/web-speech-cognitive-services/src/SpeechServices/TextToSpeech/subscribeEvent.js","node_modules/speechstate/src/asr.ts","node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechToText.js","node_modules/web-speech-cognitive-services/src/SpeechServices/SpeechToText.js","node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechToText/createSpeechRecognitionPonyfill.js","node_modules/web-speech-cognitive-services/src/SpeechServices/SpeechToText/createSpeechRecognitionPonyfill.js","node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechToText/cognitiveServiceEventResultToWebSpeechRecognitionResultList.js","node_modules/web-speech-cognitive-services/src/SpeechServices/SpeechToText/cognitiveServiceEventResultToWebSpeechRecognitionResultList.js","node_modules/web-speech-cognitive-services/lib/Util/arrayToMap.js","node_modules/web-speech-cognitive-services/src/Util/arrayToMap.js","node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechSDK.js","node_modules/web-speech-cognitive-services/src/SpeechServices/SpeechSDK.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/microsoft.cognitiveservices.speech.sdk.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/microsoft.cognitiveservices.speech.sdk.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/Exports.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/Exports.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/ConsoleLoggingListener.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ConsoleLoggingListener.ts","node_modules/@parcel/node-resolver-core/lib/_empty.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/LogLevel.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/LogLevel.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Exports.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/AudioSourceEvents.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/AudioSourceEvents.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/PlatformEvent.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/PlatformEvent.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Guid.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Guid.ts","node_modules/uuid/dist/esm-browser/index.js","node_modules/uuid/dist/esm-browser/v1.js","node_modules/uuid/dist/esm-browser/rng.js","node_modules/uuid/dist/esm-browser/stringify.js","node_modules/uuid/dist/esm-browser/validate.js","node_modules/uuid/dist/esm-browser/regex.js","node_modules/uuid/dist/esm-browser/v3.js","node_modules/uuid/dist/esm-browser/v35.js","node_modules/uuid/dist/esm-browser/parse.js","node_modules/uuid/dist/esm-browser/md5.js","node_modules/uuid/dist/esm-browser/v4.js","node_modules/uuid/dist/esm-browser/native.js","node_modules/uuid/dist/esm-browser/v5.js","node_modules/uuid/dist/esm-browser/sha1.js","node_modules/uuid/dist/esm-browser/nil.js","node_modules/uuid/dist/esm-browser/version.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/ConnectionEvents.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionEvents.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/ConnectionMessage.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionMessage.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Error.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Error.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/ConnectionOpenResponse.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionOpenResponse.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/DeferralMap.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/DeferralMap.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/DialogEvents.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/DialogEvents.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Events.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Events.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/EventSource.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/EventSource.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/IAudioSource.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/IAudioSource.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/IConnection.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/IConnection.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/IDetachable.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/IDetachable.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/IDictionary.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/IDictionary.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/IDisposable.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/IDisposable.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/IEventSource.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/IEventSource.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/IErrorMessages.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/IErrorMessages.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/ITimer.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ITimer.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/IWebsocketMessageFormatter.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/IWebsocketMessageFormatter.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/List.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/List.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Promise.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Promise.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Queue.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Queue.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/RawWebsocketMessage.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/RawWebsocketMessage.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/RiffPcmEncoder.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/RiffPcmEncoder.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Stream.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Stream.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationStatus.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationStatus.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/ChunkedArrayBufferStream.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ChunkedArrayBufferStream.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/IAudioDestination.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/IAudioDestination.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Timeout.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Timeout.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/OCSPEvents.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/OCSPEvents.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/BackgroundError.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/BackgroundError.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Contracts.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Contracts.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/IRecorder.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/IRecorder.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/MicAudioSource.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/MicAudioSource.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/Exports.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/CognitiveSubscriptionKeyAuthentication.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/CognitiveSubscriptionKeyAuthentication.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/HeaderNames.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/HeaderNames.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/IAuthentication.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IAuthentication.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/CognitiveTokenAuthentication.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/CognitiveTokenAuthentication.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/IConnectionFactory.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IConnectionFactory.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ISynthesisConnectionFactory.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ISynthesisConnectionFactory.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/IntentConnectionFactory.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IntentConnectionFactory.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Exports.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioConfig.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioConfig.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioFileWriter.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioFileWriter.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioInputStream.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioInputStream.ts","node_modules/buffer/index.js","node_modules/base64-js/index.js","node_modules/ieee754/index.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioStreamFormat.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioStreamFormat.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioOutputStream.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioOutputStream.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioOutputFormat.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioOutputFormat.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechSynthesisOutputFormat.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisOutputFormat.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/CancellationReason.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationReason.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/PullAudioInputStreamCallback.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/PullAudioInputStreamCallback.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/PushAudioOutputStreamCallback.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/PushAudioOutputStreamCallback.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/KeywordRecognitionModel.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/KeywordRecognitionModel.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SessionEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SessionEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/RecognitionEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/RecognitionEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/OutputFormat.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/OutputFormat.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/IntentRecognitionEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/RecognitionResult.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/RecognitionResult.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechRecognitionResult.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionResult.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/IntentRecognitionResult.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionResult.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/LanguageUnderstandingModel.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/LanguageUnderstandingModel.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechRecognitionEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechRecognitionCanceledEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionCanceledEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/CancellationEventArgsBase.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationEventArgsBase.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationRecognitionEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationSynthesisEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationSynthesisEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationRecognitionResult.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionResult.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationSynthesisResult.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationSynthesisResult.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/ResultReason.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ResultReason.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechConfig.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechConfig.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechTranslationConfig.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechTranslationConfig.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/PropertyCollection.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PropertyCollection.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/PropertyId.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PropertyId.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Recognizer.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Recognizer.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechRecognizer.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognizer.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/IntentRecognizer.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognizer.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/VoiceProfileType.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileType.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationRecognizer.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognizer.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Connection.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Connection.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/ConnectionMessage.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionMessage.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Translations.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Translations.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/NoMatchReason.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/NoMatchReason.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/NoMatchDetails.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/NoMatchDetails.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationRecognitionCanceledEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionCanceledEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/IntentRecognitionCanceledEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionCanceledEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/CancellationDetailsBase.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationDetailsBase.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/CancellationDetails.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationDetails.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/CancellationErrorCodes.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationErrorCodes.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/ConnectionEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/ServiceEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ServiceEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/PhraseListGrammar.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PhraseListGrammar.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/DialogServiceConfig.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/DialogServiceConfig.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/BotFrameworkConfig.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/BotFrameworkConfig.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/CustomCommandsConfig.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CustomCommandsConfig.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/DialogServiceConnector.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/DialogServiceConnector.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/DialogConnectorFactory.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogConnectorFactory.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ConnectionFactoryBase.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConnectionFactoryBase.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/QueryParameterNames.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/QueryParameterNames.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/ActivityReceivedEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ActivityReceivedEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TurnStatusReceivedEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TurnStatusReceivedEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/TurnStatusPayload.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TurnStatusPayload.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/ServicePropertyChannel.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ServicePropertyChannel.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/ProfanityOption.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ProfanityOption.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/BaseAudioPlayer.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/BaseAudioPlayer.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/ConnectionMessageEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionMessageEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/VoiceProfile.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfile.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/VoiceProfileEnrollmentResult.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileEnrollmentResult.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/VoiceProfileResult.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileResult.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/VoiceProfilePhraseResult.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfilePhraseResult.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/VoiceProfileClient.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileClient.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeakerRecognizer.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerRecognizer.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeakerIdentificationModel.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerIdentificationModel.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeakerVerificationModel.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerVerificationModel.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/AutoDetectSourceLanguageConfig.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AutoDetectSourceLanguageConfig.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/LanguageIdMode.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/LanguageIdMode.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/AutoDetectSourceLanguageResult.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AutoDetectSourceLanguageResult.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SourceLanguageConfig.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SourceLanguageConfig.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeakerRecognitionResult.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerRecognitionResult.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/Exports.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Exports.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/Conversation.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Conversation.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/ConversationCommon.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationCommon.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/ConversationExpirationEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationExpirationEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/ConversationParticipantsChangedEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationParticipantsChangedEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/ConversationTranslationCanceledEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationCanceledEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/ConversationTranslationEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/ConversationTranslationResult.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationResult.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/ConversationTranslator.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslator.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationTranslatorConnectionFactory.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorConnectionFactory.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/StringUtils.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/StringUtils.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/ConversationTranscriber.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranscriber.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/IParticipant.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/IParticipant.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/ParticipantChangedReason.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ParticipantChangedReason.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/Meeting.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Meeting.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/MeetingTranscriptionCanceledEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/MeetingTranscriptionCanceledEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/MeetingTranscriber.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/MeetingTranscriber.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/ConversationTranscriptionResult.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranscriptionResult.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechSynthesizer.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesizer.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SynthesisResult.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SynthesisResult.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechSynthesisResult.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisResult.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechSynthesisEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechSynthesisWordBoundaryEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisWordBoundaryEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechSynthesisBookmarkEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisBookmarkEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechSynthesisVisemeEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisVisemeEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechSynthesisBoundaryType.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisBoundaryType.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SynthesisVoicesResult.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SynthesisVoicesResult.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/VoiceInfo.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceInfo.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/SpeakerAudioDestination.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/SpeakerAudioDestination.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/ConversationTranscriptionCanceledEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConversationTranscriptionCanceledEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/MeetingTranscriptionCanceledEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/MeetingTranscriptionCanceledEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/PronunciationAssessmentGradingSystem.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentGradingSystem.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/PronunciationAssessmentGranularity.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentGranularity.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/PronunciationAssessmentConfig.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentConfig.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/PronunciationAssessmentResult.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentResult.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Diagnostics.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Diagnostics.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeakerRecognitionConnectionFactory.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeakerRecognitionConnectionFactory.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/RecognitionEvents.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RecognitionEvents.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceRecognizerBase.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ServiceRecognizerBase.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechConnectionMessage.Internal.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechConnectionMessage.Internal.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ConversationServiceRecognizer.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationServiceRecognizer.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/RecognizerConfig.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RecognizerConfig.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechServiceInterfaces.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechServiceInterfaces.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/WebsocketMessageFormatter.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/WebsocketMessageFormatter.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechConnectionFactory.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechConnectionFactory.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ConversationTranscriberConnectionFactory.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationTranscriberConnectionFactory.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranscriberConnectionFactory.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranscriberConnectionFactory.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationConnectionFactory.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationConnectionFactory.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechSynthesisConnectionFactory.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechSynthesisConnectionFactory.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/EnumTranslation.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/EnumTranslation.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/Enums.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/Enums.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/TranslationSynthesisEnd.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationSynthesisEnd.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/TranslationHypothesis.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationHypothesis.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/TranslationPhrase.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationPhrase.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationServiceRecognizer.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationServiceRecognizer.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/SpeechDetected.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechDetected.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/SpeechHypothesis.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechHypothesis.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/SpeechKeyword.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechKeyword.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechServiceRecognizer.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechServiceRecognizer.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ConversationTranscriptionServiceRecognizer.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationTranscriptionServiceRecognizer.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranscriptionServiceRecognizer.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranscriptionServiceRecognizer.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/DetailedSpeechPhrase.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/DetailedSpeechPhrase.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/SimpleSpeechPhrase.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SimpleSpeechPhrase.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/AddedLmIntent.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/AddedLmIntent.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/IntentServiceRecognizer.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IntentServiceRecognizer.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/IntentResponse.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/IntentResponse.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/SpeakerResponse.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeakerResponse.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/RequestSession.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RequestSession.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceTelemetryListener.Internal.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ServiceTelemetryListener.Internal.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechContext.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechContext.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/DynamicGrammarBuilder.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DynamicGrammarBuilder.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/DynamicGrammarInterfaces.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DynamicGrammarInterfaces.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/DialogServiceAdapter.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceAdapter.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/DialogServiceTurnStateManager.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceTurnStateManager.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/DialogServiceTurnState.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceTurnState.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/ActivityResponsePayload.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/ActivityResponsePayload.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/AgentConfig.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/AgentConfig.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/Exports.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/Exports.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationManager.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationManager.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationConnectionConfig.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionConfig.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/RestConfigBase.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/RestConfigBase.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationTranslatorRecognizer.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorRecognizer.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationConnectionFactory.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionFactory.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationWebsocketMessageFormatter.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationWebsocketMessageFormatter.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationConnectionMessage.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionMessage.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationServiceAdapter.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationServiceAdapter.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationRequestSession.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationRequestSession.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationTranslatorEventArgs.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorEventArgs.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationTranslatorInterfaces.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorInterfaces.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/Exports.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/Exports.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/CommandResponsePayload.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/CommandResponsePayload.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/ParticipantResponsePayload.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/ParticipantResponsePayload.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/TranslationResponsePayload.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/TranslationResponsePayload.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/TranscriberRecognizer.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/TranscriberRecognizer.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/SynthesisAudioMetadata.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SynthesisAudioMetadata.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SynthesisTurn.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisTurn.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SynthesisAdapterBase.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisAdapterBase.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SynthesisEvents.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisEvents.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SynthesisRestAdapter.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisRestAdapter.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SynthesizerConfig.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesizerConfig.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SynthesisContext.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisContext.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeakerRecognitionConfig.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeakerRecognitionConfig.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeakerServiceRecognizer.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeakerServiceRecognizer.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/VoiceServiceRecognizer.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/VoiceServiceRecognizer.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/FileAudioSource.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/FileAudioSource.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/PCMRecorder.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/PCMRecorder.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/WebsocketConnection.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/WebsocketConnection.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/WebsocketMessageAdapter.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/WebsocketMessageAdapter.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/ReplayableAudioNode.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ReplayableAudioNode.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/ProxyInfo.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ProxyInfo.ts","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/RestMessageAdapter.js","node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/RestMessageAdapter.ts","node_modules/bent/src/browser.js","node_modules/bent/src/core.js","node_modules/web-speech-cognitive-services/lib/Util/createPromiseQueue.js","node_modules/web-speech-cognitive-services/src/Util/createPromiseQueue.js","node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechToText/SpeechGrammarList.js","node_modules/web-speech-cognitive-services/src/SpeechServices/SpeechToText/SpeechGrammarList.js","node_modules/speechstate/src/types.ts"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";module.bundle.HMR_BUNDLE_ID = \"d4b6bdaaaefad6ae\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets /*: {|[string]: boolean|} */, assetsToDispose /*: Array<[ParcelRequire, string]> */, assetsToAccept /*: Array<[ParcelRequire, string]> */;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\nfunction getPort() {\n  return HMR_PORT || location.port;\n}\n\n// eslint-disable-next-line no-redeclare\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');\n\n  // Web extension context\n  var extCtx = typeof chrome === 'undefined' ? typeof browser === 'undefined' ? null : browser : chrome;\n\n  // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n  var supportsSourceURL = false;\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  }\n\n  // $FlowFixMe\n  ws.onmessage = async function (event /*: {data: string, ...} */) {\n    checkedAssets = {} /*: {|[string]: boolean|} */;\n    assetsToAccept = [];\n    assetsToDispose = [];\n    var data /*: HMRMessage */ = JSON.parse(event.data);\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);\n\n      // Handle HMR Update\n      let handled = assets.every(asset => {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n      if (handled) {\n        console.clear();\n\n        // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n        if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n        }\n        await hmrApplyUpdates(assets);\n\n        // Dispose all old assets.\n        let processedAssets = {} /*: {|[string]: boolean|} */;\n        for (let i = 0; i < assetsToDispose.length; i++) {\n          let id = assetsToDispose[i][1];\n          if (!processedAssets[id]) {\n            hmrDispose(assetsToDispose[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n\n        // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n        processedAssets = {};\n        for (let i = 0; i < assetsToAccept.length; i++) {\n          let id = assetsToAccept[i][1];\n          if (!processedAssets[id]) {\n            hmrAccept(assetsToAccept[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n      } else fullReload();\n    }\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      for (let ansiDiagnostic of data.diagnostics.ansi) {\n        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n      }\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html);\n        // $FlowFixMe\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\nfunction fullReload() {\n  if ('reload' in location) {\n    location.reload();\n  } else if (extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  }\n}\nfunction getParents(bundle, id) /*: Array<[ParcelRequire, string]> */{\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n  var parents = [];\n  var k, d, dep;\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n  return parents;\n}\nfunction updateLink(link) {\n  var href = link.getAttribute('href');\n  if (!href) {\n    return;\n  }\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n  newLink.setAttribute('href',\n  // $FlowFixMe\n  href.split('?')[0] + '?' + Date.now());\n  // $FlowFixMe\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href /*: string */ = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n    cssTimeout = null;\n  }, 50);\n}\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n      return new Promise((resolve, reject) => {\n        var _document$head;\n        script.onload = () => resolve(script);\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 ? void 0 : _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension bugfix for Chromium\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {\n            if (typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n              extCtx.runtime.reload();\n              return;\n            }\n            asset.url = extCtx.runtime.getURL('/__parcel_hmr_proxy__?url=' + encodeURIComponent(asset.url + '?t=' + Date.now()));\n            return hmrDownload(asset);\n          }\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n          (_document$head2 = document.head) === null || _document$head2 === void 0 ? void 0 : _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\nfunction hmrApply(bundle /*: ParcelRequire */, asset /*:  HMRAsset */) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      }\n\n      // $FlowFixMe\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    }\n\n    // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n    delete modules[id];\n    delete bundle.cache[id];\n\n    // Now delete the orphans.\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\nfunction hmrAcceptCheck(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  }\n\n  // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n      parents.push(...p);\n    }\n  }\n  return accepted;\n}\nfunction hmrAcceptCheckOne(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n  if (checkedAssets[id]) {\n    return true;\n  }\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToDispose.push([bundle, id]);\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n}\nfunction hmrDispose(bundle /*: ParcelRequire */, id /*: string */) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n  delete bundle.cache[id];\n}\nfunction hmrAccept(bundle /*: ParcelRequire */, id /*: string */) {\n  // Execute the module.\n  bundle(id);\n\n  // Run the accept callbacks in the new version of the module.\n  var cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        assetsToAlsoAccept.forEach(function (a) {\n          hmrDispose(a[0], a[1]);\n        });\n\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n}","import { fromPromise, createMachine, createActor, assign } from \"xstate\";\nimport { speechstate, Settings, Hypothesis } from \"speechstate\";\n\n\n\n\nconst azureCredentials = {\n  endpoint:\n    \"https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken\",\n  key: \"7acaf819fba24847b9cc341042eea53e\",\n};\n\nconst settings: Settings = {\n  azureCredentials: azureCredentials,\n  asrDefaultCompleteTimeout: 0,\n  locale: \"en-US\",\n  asrDefaultNoInputTimeout: 10000,\n  ttsDefaultVoice: \"en-GB-RyanNeural\",\n};\n\ninterface DMContext {\n  spstRef?: any;\n  lastResult?: Hypothesis[];\n}\n\n// helper functions\nconst say =\n  (text: string) =>\n  ({ context }) => {\n    context.spstRef.send({\n      type: \"SPEAK\",\n      value: { utterance: text },\n    });\n  };\nconst listen =\n  () =>\n  ({ context }) =>\n    context.spstRef.send({\n      type: \"LISTEN\",\n    });\n\n    let animationInterval; \n\n    let repeatingInterval_taste;\n    let repeatingInterval_kind;\n    let repeatingInterval_alc;\n    let repeatingInterval_info;\n    let repeatingInterval_beer;\n    let repeatingInterval_final;\n\n\n    function animateFaceBasedOnSegment(segment) {\n      // Check segment content and adjust animation speed\n\n      // First method of dynamically lipsyncing with absolute values\n      let speed;\n      if (segment === ',') {\n          speed = 300; // Slower for comma\n      } else if (segment === ';') {\n          speed = 500; // Even slower for semicolon\n      } else if (['.', '!', '?'].includes(segment)) {\n          speed = 700; // Much slower for terminal punctuation\n      } else {\n          speed = 100; // Base speed for words\n      }\n  \n      return new Promise<void>((resolve) => {\n        let leftEye = document.getElementById('left-eye');\n        let rightEye = document.getElementById('right-eye');\n        let mouthTop = document.getElementById('mouth-top');\n        let mouthBottom = document.getElementById('mouth-bottom');\n      \n        // Checking if SVG elements are correctly fetched\n        if (!leftEye || !rightEye || !mouthTop || !mouthBottom) {\n          console.error(\"SVG elements not found. Check if they exist in the DOM with the correct IDs\");\n          return; \n        }\n\n        leftEye.setAttribute('cx', '70');\n        leftEye.setAttribute('cy', '80');\n        leftEye.setAttribute('r', '16');\n        \n        rightEye.setAttribute('cx', '130');\n        rightEye.setAttribute('cy', '80');\n        rightEye.setAttribute('r', '13');\n\n          let isMouthOpen = false;\n          const animationInterval = setInterval(() => {\n              if (isMouthOpen) {\n                  mouthTop.setAttribute('d', 'M 60,140 L 140,140');\n                  mouthBottom.setAttribute('d', 'M 60,140 L 140,140');\n              } else {\n                mouthTop.setAttribute('d', 'M 60,145 Q 100,125 140,145');\n                mouthBottom.setAttribute('d', 'M 60,145 Q 100,165 140,145');\n                \n                mouthTop.style.fill = '#fff';\n                mouthBottom.style.fill = '#fff';\n              }\n              isMouthOpen = !isMouthOpen;\n          }, speed);\n  \n          // Stop this animation segment after double its speed (to ensure both open and close happen)\n          setTimeout(() => {\n              clearInterval(animationInterval);\n              resolve();\n          }, speed * 2);\n      });\n  }\n  \n  async function animateFaceBasedOnUtterance(utterance) {\n      // Split utterance into segments based on spaces and punctuation\n      let mouthTop = document.getElementById('mouth-top');\n      let mouthBottom = document.getElementById('mouth-bottom');\n      const segments = utterance.split(/([,;.!?]|\\s+)/).filter(segment => segment.trim() !== '');\n  \n      for (const segment of segments) {\n          await animateFaceBasedOnSegment(segment);\n      }\n      console.log(\"Resseting to neutral\")\n      // Reset to neutral face at the end\n      mouthTop.setAttribute('d', 'M 60,138 Q 100,155 140,138');\n      mouthBottom.setAttribute('d', 'M 60,138 Q 100,155 140,138');\n\n      mouthTop.style.fill = '#fff0';\n      mouthBottom.style.fill = '#fff0';\n  }\n\n\n\n\n    function animateFaceBasedOnHarcoded(utterance) {\n      console.log(\"Function animateFaceBasedOnUtterance called with utterance:\", utterance);\n\n\n\n\n      let leftEye = document.getElementById('left-eye');\n      let rightEye = document.getElementById('right-eye');\n      let mouthTop = document.getElementById('mouth-top');\n      let mouthBottom = document.getElementById('mouth-bottom');\n    \n      // Checking if SVG elements are correctly fetched\n      if (!leftEye || !rightEye || !mouthTop || !mouthBottom) {\n        console.error(\"SVG elements not found. Check if they exist in the DOM with the correct IDs\");\n        return; \n      }\n\n        // Clear any existing animation interval\n      if (animationInterval) {\n        clearInterval(animationInterval);\n      }\n    \n      if (utterance.includes('Hmm...')) {\n        console.log(\"Utterance contains 'Hmm...'\");\n        // Adjust animation for \"Hmm...\"\n\n        leftEye.setAttribute('cx', '80');\n        leftEye.setAttribute('cy', '66');\n        leftEye.setAttribute('r', '19');\n        \n        rightEye.setAttribute('cx', '136');\n        rightEye.setAttribute('cy', '74');\n        rightEye.setAttribute('r', '18');\n        \n        mouthTop.setAttribute('d', 'M 80,140 Q 130,150 120,150'); \n        mouthBottom.setAttribute('d', 'M 80,140 Q 130,150 120,150');\n\n      } else if (utterance.includes('Let me think...')) {\n        console.log(\"Utterance contains 'Let me think...'\");\n    \n\n    \n        // Set initial animation position for the eyes\n        leftEye.setAttribute('cx', '80');\n        leftEye.setAttribute('cy', '66');\n        leftEye.setAttribute('r', '19');\n        \n        rightEye.setAttribute('cx', '136');\n        rightEye.setAttribute('cy', '74');\n        rightEye.setAttribute('r', '18');\n\n\n\n                // Count specific punctuation marks\n        let commas = (utterance.match(/,/g) || []).length;\n        let semicolons = (utterance.match(/;/g) || []).length;\n        let periods = (utterance.match(/\\./g) || []).length;\n\n        // Base speed\n        let speed = 200;\n\n        // The other method of dynamically lipsyncing with relative values\n        if (commas > 0) {\n            speed += 50; // Slightly slower for commas\n        }\n        if (semicolons > 0) {\n            speed += 100; // Even slower for semicolons\n        }\n        if (periods > 0) {\n            speed += 150; // Much slower for periods\n        }\n\n        let isMouthOpen = false;\n        animationInterval = setInterval(() => {\n          if (isMouthOpen) {\n            mouthTop.setAttribute('d', 'M 60,140 L 140,140');\n            mouthBottom.setAttribute('d', 'M 60,140 L 140,140');\n          } else {\n            mouthTop.setAttribute('d', 'M 60,145 Q 100,125 140,145');\n            mouthBottom.setAttribute('d', 'M 60,145 Q 100,165 140,145');\n            \n            mouthTop.style.fill = '#fff';\n            mouthBottom.style.fill = '#fff';\n          }\n          isMouthOpen = !isMouthOpen;\n        }, speed);  // Adjusted speed based on punctuation\n\n        // Calculate the utterance duration\n        let utteranceDuration = utterance.length * 82;  //multiplier set after trial and error\n\n        setTimeout(() => {\n          clearInterval(animationInterval);\n          // Set mouth to static position after the animation is over\n          mouthTop.setAttribute('d', 'M 60,138 Q 100,155 140,138');\n          mouthBottom.setAttribute('d', 'M 60,138 Q 100,155 140,138');\n        \n          mouthTop.style.fill = '#fff0';\n          mouthBottom.style.fill = '#fff0';\n\n      }, utteranceDuration);\n  }\n\n      }\n\n    \n    // defining the slots\nconst extractEntities = (utterance) => {\n  const entities = {\n    kind: null,\n    taste: null,\n    alc: null,\n  };\n\n  const words = utterance.split(/[\\s.,;:!?]+/);\n\n  // hardcoding the slot detection criteria\n  words.forEach((word, index) => {\n    if ([\"ipa\", \"lager\", \"ale\", \"pilsner\", \"dark\", \"white\", \"brown\", \"porter\", 'stout'].includes(word)) {\n      entities.kind = word;\n    }\n    if ([\"sour\", \"sweet\", \"bready\", \"bitter\", \"fruity\", \"coffee\", \"chocolate\", \"chocolatey\"].includes(word)) {\n      entities.taste = word;\n    }\n    if ([\"strong\", \"weak\", \"average\",\"medium\",\"low\", \"high\",\"normal\"].includes(word)) {\n      entities.alc = word;\n    }\n  });\n\n  return entities;\n};\n\n\n\n\n\n\nasync function fetchFromChatGPT(prompt: string, max_tokens: number) {\n  const myHeaders = new Headers();\n  myHeaders.append(\n    \"Authorization\",\n    \"Bearer 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\",  \n  );\n  myHeaders.append(\"Content-Type\", \"application/json\");\n\n  const customInstruction = \"You are a Cicerone, please talk only about beer and beer related facts while steering the conversation towards the subject of beer\";\n  \n  const raw = JSON.stringify({\n    model: \"gpt-4\",\n    messages: [\n      {\n        role: \"system\",\n        content: customInstruction,\n      },\n      {\n        role: \"user\",\n        content: prompt,\n      },\n    ],\n    temperature: 0,\n    max_tokens: max_tokens,\n  });\n\n  const response = fetch(\"https://api.openai.com/v1/chat/completions\", {\n    method: \"POST\",\n    headers: myHeaders,\n    body: raw,\n    redirect: \"follow\",\n  })\n    .then((response) => response.json())\n    .then((response) => response.choices[0].message.content);\n\n  return response;\n}\n\n\n// machine\nconst dmMachine = createMachine(\n  {\n    /** @xstate-layout N4IgpgJg5mDOIC5QCcD2qAuA6AIgSwEMAbVKAVzAFkCA7AmZLABWTAAcDWBiAQQGUASgBUhfAPoCAojxwBNANoAGALqJQbVLDwY8qGmpAAPRACYAzIqwAOK4pOKAnGasBGJ1YcAaEAE9ELgHYzaw8zF1sAVhcAFgCHAF947zRMXEIScipaejBGATACCB8sAHFWMB0aKC4+JmkAaTEAYQB5SiYAGUkhSSVVJBANLR09A2MEMwjorADY6OiHADYHRSCzAO8-BGjFRenFCJtzIIippcTk9Gx8YlIKajoGLHzC4p5YAGsxOgBbMC4pK0SgA5ACSfEkOD6BiG2l0+gG4wCMSwURMDgCixcZhM4TMm0QOwilgCUQiTmJrmiJguIBS13Sdyyj1yzwKRSwAAlUAB3Jq0UGcsBENg1Oo8RqtdpdHrQgawkYI0DjFyKMzBRYmAIBEzUlxucwuAnbRRWRYzWzYzUmRZmaJWWn0tK3TIPHJ5dnFABiZGQGAAFrkxKCaABHMh4ZA+MUNZptTrdXoqGGaOGjRH+RwRLD2dHIlzmZa643zMJYU2LRaOPb5hJJOlXZ0Ze7ZJ4vDlCkX5NgFDAxiVx6WJuXqVOKsaIBy4nMHaKLQ4uCI4xZWEtL83OcmTIJmqaOxs3ZvM91s15Yd4fAGSIFgiFQ5PysfwicIKwbXyEiLmhzRJfYoIBFYhz7qkh5Mm6baemyPYENgADGgZwR8eBVFwI6DE+6bKogOKWDYdiOM4bjOF4H6voo0w-pWqo-oc5IgQyLotiyHpnt2vZYAhYBISh1TyC4-SjsMz4ZhMFghAR7jER4xrYisWArpMtrYlMVjOAxTbga2rLtsU7GwZxiHIah8gmIJGHCVhRg4TsEn2FJ7ikVsuJfgpgFYg4hyzEuGlga62msRy+nwUZvFoWY5kKiJ2EIDE1JYOqZpqlYJgRHE5KybY0zzgWuJLClxI0vWTp+cxJ66dBHEAGYVAhvFiMZEBYBAsEEA1KEQGIXq1f6vFYCQhRhRAehgFgKEAG6oB8o0lYy-ksaeQXsNVPX1Y1zWte1NCdd1GB1VU-WoINVQIBNqBwbB8J9OhUVWSqijYlgU7Ijai5qXsJiyQ9li7LqmqAQ4MSpb5c1lZBbHLQZNV7b1VRbU1LUYG1jVdatB0DRAYW5GgjBsEQsFVagyA-Fgs1Mce4NLTB2DQ-tUDwxtSPw6jMN9RjvGnTQk0XYq10PkJaZKtZsXRDiCXOFWzipelTn+IEVgJYoqzzFMFi-hEIPkxBOlQcFWC07D9PrWQGAYLktBwWAwVrR1pOQ5UfH8xZgsvss2UpcucR4jJZEODYOZYpW72iyuRWXKBoMUzrEPU-raNG7bJtm8gFtW-bNvbXb1NhYYsBI2bWAEFVycABQWErACUXBk0e2uBXp9tx6zcPG6b5s0Jb1st7brDZ1UN2YUL4wLNmqURLiStfqSb6LMaNgOG54TInEpqpXW4eMbXAWLQ3sewAQPjw-2krxjKSaRYPL4xGLiWSwVMtffMqJviYNqJQEBwBJrW8LRVesG-VJGedRqIzakAs2LM6aHWOtUYaNBRpnWmqTA8kc6470qlDeOYhwEgM2jgyBhtoGYxOmdHmV0VAD0skPTMmIsC-jCEBVYVZSSfTIouTy5Y0pRCnNEfU+ozDfy0r-XWjcAFwxwYzMBBBgEELZkdYh1RsZEywHjAmRMSY1yEeVERscxH0wkaA7B0iIG7SgezEhXNzqXT0HzC+VCr7zBMOLJKUs0qeVlrFKsCszB7FsEEHYWpZiCPmtomOK1m76OMaNJO7dO7p3EVErOvYwqUJdqJUkAQZxqSAh-TyERZJpWCKlSsLC-a2i1MEsG0cqbhLpkY4BWAYkpw7mnPukSGm92SahXO+dRpF1LpMSu1cUFa23n-URWCJFNNTl3dpBdOmXX7k7W61CECnCcUsSYDgMQ2HJEuWScwFKVmUlaL8K5KlR3rhg7A+9D44OPoOBMsplmX1EjEd8Wxy7mm+i9CiqVqQOmKiMn+oSamYIiWIYgcFJGQqIHBWR6N5FDRGmNSxSDNEhMprvWphtYXQsMVChFUAiEc1IdYmgtiUz2LeasYIz1TTOAepiakxpUqLiempHxmJHB2DDg2COozhFhPBXUqFMLCWmMIeYxRyAcYqPxhgQmxNkECpBVi65TdRVwvFXColJKLHc3JZSx81KYrXycbfZK0t3GsvWNMLZlZHI7HVBctB4zdFYLFdMlpsy8VJMWY7OxaSYqkndq-KwpZx4kVtWYBebKlxcp2S6oFqqtHqv-p67V3q4ltL9Qsh2XAemwT6cXXIZdiSKCrhiqpVyM0Qq9W3ZpOaun0zFfm3iqTxyiS-Bs205IdlAU8viMir9bLURXNPICSlXVjJ0RxW5eKHlSieefKlwbhYFg+Thec2YnCAx2LaO1gKN6aUxdU4oIZCYEMkZKuRMCuBwIQWimawK03nqwJe1A17QG3sRTAzmhreYUJeaa4WLkikVu4UrHYHj7CrFRLiVUQQlYYlFjOoVHJP3ftar+4l0quBKNxgqpVGjX1nquVhyVN7476qgABqxQHlCduimBxcEHJ5uGg44VlgRMlvzCAsakexojodBRemgV6qPZtaS2-1BbmN3X8GpfYs43EHq8rJP2fHdTmBnrGxYmJRPqsoz1RpjaZnxOJe27pedi2F1LcgEuFbK3DNTeR9BJmYZmeThZtpcmO0gfXSqSs0w9TbOpDiX8rCtjhH9raUWsb7Qf3WMe-lm831XJYHAMANAHZiAAEJgFyEu0+w5AtdpirqHUdC1SAR2AcTU0RWV-PLL+D2Lgg6vyM++i8BWivICvDecEkIFOrJMGpJxHWnCqnmB-ACzXdjlkCOEGI2J7CVm61cwrQZP0wpQpJmj+HH2osmuisjNb0HbeQMGCTqA9u3b1dK+jZCbHAaDRV4WyIFbjZWLsbUWVAjGnVK-Ohc5TjbJXPqdeaXT0XYqldm7hN7sHYibRgjsrlGqMVeolV6X3Pw-64ju7hj9tftw7R57Rq3tro+0icIOYPBKwM4BCigOyJ2icOWDEGJdhhA-hGzbl3Ce7ek760n-mTLlZY+MWNC8KLUmVvqKItot1iTVJwjwosedBD2ILgnO3bvediTJgNYhxfWeqEWgu-Sy31Zc9Wy5QuDdI9F5Zs3huLejZfLmIH9hQsrm2TYeYpo9dQQXaTkrQ5nnvel5mXUCkvxuE1FEWIqv1T2joZWckjgh0+JEymvHcOoKUCJmAK7keV1e7eTsULpo6srExMiJr7P1guCwEvFYdozQqVD2eL0KFiB9eK4CFoIJhv3hj4phA6I8K2HskRdwb41y-msNqNw7jx6A17xyfvdAiBD+u5+h9KLEEvrc0XvvA-98I8-ZTxjVfKu7G8dqOwkxbCA12CWfTClEMMPCD+VLB3N1KCXfQfG-W7dHOVLHEjXHWHR3CqUA6-YXW7O-chJjKXKfLEbMO0LxIPNKG0NcU0GYcIckNSGINUbfb0K-A-InCvM+B-YWLAhKOcU0PAnUWeMiOcencbT+UkA4XTSgrARAmgo-WoWMZdeggSGnWPBAJgnA1giNfAjgrYUsNvCsNEFWZYaHJ0EoAAVVBGYByA6HkUgC4CaA6FBCaHqAYPGDzAtALEkntFOGUMJFsAViAgM1WAOB-BDwL1KH0I-ToDgh0HGn+H4GEFEAkGkDkBsNMDUgUgen7RSgAgemNCiGcASlOBDhtDNF4Q0j0IMJ4GCLwFCI-QgCIH+BEHED4CEB4GEBGwwNWTCCcUxGSKcHRDoh-DSPnCKV2GJE1FtAxD5R0ICKKJCNGlBHKLCMEDEBqLqJ6An2kKn2aJmFDjiBxE8kHWby2CyMyQbzkntDfEMz8IKPPGKNKL4BgmMmqDEIHAkLK0nyaILFWLaI2M6O2MQC-HV0SwOESk8jiHyNGPONGg6DwGARoDChHzHzvFiImCXDoQNFtEcFsC0LSIWAVkcDnDNCxFFgF1pBoFQAgDgAMHpCWNWQAFo0pjRyTzAnptltkLBlhdkKk-DSpLkySXxySPFbQEpX4pw-kzQZ8NZWTUFt4ssOBWAOT0lot-BiQFI2t1Rnpr51hKCpSYpY0gdlgf9dQlZzAnBRYv4RTBUxNShygHY1SN11gSxedUQfEDNnpyRYhBDetfgwALTxhThsxylMQDNCp5gjROCbT1xrRp5YtBDuQ+QBROw2B3TEA3xphZhSQYgUpA9RZrSeTgzX5QybBBCfQ-RAxD8wwIwoxYyEApwF5wsDNAh1sHoPjtgdhMkI0whx5lgqzADzt4CoJozgpSzMQLVUpikEtnBVxOD0j29qRuFYg3BsRnTPhSzsRFtWDYgPBwg+iZTthdRQtkRY1pytlBCeyTUgs5Y6z-oZg1RsQCxPJxsBEjS1V309YuIeIqh5zNQeMDhURtlwhmdBjzB9yJkIVGpSzZccx1lVQGtp5MRjRkRsw7AqxZsnA4ggg-yPUALbZDEUZcNSzZsQLx4wKp4vIXDYpP4asjhatfo1JkKcUM4EZNoMLDskVnzDzadCQOEx4J5wKCLZI4oZg+db591xtKKRVcVW4fMfU3dAKmKZDsK2K8LfSZ4547BmCPBDh0RDRFxBKaYsERLjdfV1oLdSyE0cw9SQsUymFjQyknoDRVhOivwNLNVhLE5zMxLc11o85UA2BZleyPByxkt7QYgVhXARytgLLAYpw0pVQ7TVg7KF0JKBZmLYpFxsDHSl5Wdfwvppw7RW9xsP4phTg7K9F6kzYsLXJNl+1AJB19k2Fy5yx7AAdY0lx2zz9OzhVNKIUDE8EokiUDKKIno+1tlyq9lh0YsPoatnBWjX5yQkLbyMt0E606l2qmZ8FydpUDLx5eqtkB1BrZIdQF52CV4cQ+EOt8rJlElXdc0cFurKI+rNqh1ZIxrmDW9MRGUWzjq2rTqnLm1TcJF9LJKp8txmCodTQmEqQClkRLLeF5xdSyRGrC9mqwVWr5r3rRLPq8sJE3KPLLNSygI29yQ9gvCSknBQa29+K8b1gwroqD5Cq3TfrVkCwMiFSfxSwclZIqwNwxrlgcQ2VfxXqtU4IsLKx1qyrdlbqR1dhvk3oqxyRFworpr8c50hL6oxUCVdVMKaaXwU9Bb+rhbKrnIdhvEtNJh7A7VDST02TgCWr7LFbtVlb4VlqGKoADLNRNabqdbTAR4ZhcRfEP5X4sCebcUG1kaTc8soUDKURSqtaKqhrTA2NnFtQYNdSjrZaL94bLa4YA6dK3c21Ma1bu0MQfKqQmV+DDgY09ieVzBnA7TFg-arboUzqW0-V0bPKc6YoI05dktP4eFAqS6npHBcpeEG9hTTbRSMNsUDIF0Q7m6N1R1WtqQdQ-p6EAznJx4+M9gsRMQVgJz88h7jTjMHtJV5yvwFYwsfxzBdRx5trHo-ZsbdRftCJBDPMEJqMIkXyOs6E8oT7Itz7RbXJW9Y1VhvaWTt67yKM97TMf16KYEXy9g3718Isz71zcRRYFIfw1YcjZhAh77QGvM66A0X7zRj64GotMoHoEp9QJyr6o1B6YczbZ0zwH7-Qjcm0g6+ofq4qZCOs3xM8VhDRIgThNMgIQheM4ggJPSbygGZqKp6HGHfNZNG7s62Gp8DR9a7Q4g8wVgOt+HswbAhG-ZPSfIk64bigstYAcs8srtSy+SFZZh7R5hYgVx4tmt6c587TPaFcYa4DzaORetzHJ7bCDMikVzvocoVHHH3DX9CkPZWjBDwDCZ5zP92c7AF52svtYgDh1KDHPHigYnidNpScurfHZS6z1Rqsay5xfxyzhiOzMmsBsnkcycIGFELG7AgdymENlLtk0oUSt7qHh6TTamcG8tScD6in9RMkYgvElx1YNsMnaGOR+mPrmG4Zzd5HnZ4rdMZhtQLBAg9g7SbAgctniCeitQwL0RonkCXcFmxdDc5G2ksLOdRZX5sqJ0tx9mSHkQjnkRdTtCqnZnihw9bssb5wNnSD7Gh0gqcJ1RggdRAIwKR5EHBCS9WAfGFHaaz62muFx5ClUp9nYgnpSxftAgMQqGgDfmhDqDkXVn2GcQ1xDgjlT7yrlZ5xczyXznUBiq28yGpgbQdqei6zfwghiCsybAsQ1RvmmrqnJiKjJBtosafEcxwgsSoc-Y2cVCsQj7+7tlxsbQBKTj9CLHF7CQdQ1D9Q9gP9LzKnUhTimAjCTCIBez1z7QiD08e0kjdhASDCQwCBgSsbVcoh2U+F682Ntl3WzjxjSzlg0T1deFFwtcsRIWQ2xiSiJipj5yVXPiFgKzeFRXWy9xdXCjgSsBLiChrjQ6NQlxcaSJqw6zwdvlEodNBlRZiXGxTjE3SjQTwTeJS2E8HVK2lhq2FgSQ7R+XymI1AVEggA */\n    id: \"root\",\n    type: \"parallel\",\n    states: {\n      DialogueManager: {\n        initial: \"Prepare\",\n        states: {\n          Prepare: {\n            on: { ASRTTS_READY: \"Ready\" },\n            entry: [\n              assign({\n                spstRef: ({ spawn }) => {\n                  return spawn(speechstate, {\n                    input: {\n                      settings: settings,\n                    },\n                  });\n                },\n              }),\n            ],\n          },\n          Ready: {\n            initial: \"Greeting\",\n            states: {\n              Greeting: {\n                entry: \"speak.greeting\",\n                on: { SPEAK_COMPLETE: [{ target: \"Ask_name\",\n                actions: assign({kind: null, taste:null, alc:null })},\n              ] },\n              },\n\n              Ask_name: {\n                entry: listen(),\n                on: {\n                  RECOGNISED: {\n                    target: \"HowCanIHelp\",\n                    actions: [\n                      ({ event }) => console.log(event),\n                      assign({\n                        name: ({ event }) => {\n\n                          // Checking if event.value is an array and has at least one element\n\n                          if (Array.isArray(event.value) && event.value.length > 0) {\n\n                            // Getting the utterance from the first element of the array\n                            const utterance = event.value[0].utterance;\n\n                            // Checking if it's a string before proceeding\n                            if (typeof utterance === 'string') {\n\n                              // Splitting by space and take the last word as the name\n\n                              const words = utterance.split(' ');\n                              return words[words.length - 1];\n                            } else {\n                              console.error('Unexpected utterance type:', typeof utterance);\n                              return '';  \n                            }\n                          } else {\n                            console.error('Unexpected event value:', event.value);\n                            return '';  \n                          }\n                        },\n                      }),\n                    ],\n                  },\n                },\n              },\n\n              HowCanIHelp: {\n\n                entry: ({ context }) => {\n                  animateFaceBasedOnUtterance(`Pleased to make your acquaintance ${context.name}! What sort of beer would you like?`),\n                  context.spstRef.send({\n                    type: \"SPEAK\",\n                    value: {\n                      utterance: `Pleased to make your acquaintance ${context.name}! What sort of beer would you like?`\n                    }\n                  });\n                },\n                on: { SPEAK_COMPLETE: \"Ask\" },\n              },\n\n              Further_Inquiry: {\n\n                entry: ({ context }) => {\n                  animateFaceBasedOnUtterance(`Alright ${context.name}! What other beer would you like?`),\n                  context.spstRef.send({\n                    type: \"SPEAK\",\n                    value: {\n                      utterance: `Alright ${context.name}! What other beer would you like?`\n                    }\n                  });\n                },\n                on: { SPEAK_COMPLETE: \"Ask\" },\n              },\n\n              HelpRepeat: {\n\n                entry:  ({ context }) => {say(\"I couldn't find what you were looking for, please ask for something else?\"),\n                animateFaceBasedOnUtterance(`I couldn't find what you were looking for, please ask for something else?`) },\n                on: { SPEAK_COMPLETE: \"Ask\" },\n              },\n\n              Ask: {\n                entry: listen(),\n                on: {\n                  SPEAK_COMPLETE: {actions: [listen(),]\n\n                  },\n                  RECOGNISED: {\n                    target: \"Repeat\",\n                    actions: [\n                      ({ event }) => console.log(event),\n                      assign({\n                        lastResult: ({ event }) => event.value,\n                      }),\n                    ],\n                  },\n                  \n                },\n              },\n\n              Repeat: {\n                    initial: 'checking',\n                    states: {\n                      checking: {\n                        entry: ({ context }) => {\n                          const entities = extractEntities(context.lastResult[0].utterance.toLowerCase());\n                          context.request = context.lastResult[0].utterance.toLowerCase()\n                          console.log(context.lastResult[0].utterance);\n                          \n                          // updating the context with extracted entities\n                          context.kind = entities.kind || context.kind;\n                          context.taste = entities.taste || context.taste;\n                          context.alc = entities.alc || context.alc;\n                          \n                      \n                          console.log(context.kind, context.taste, context.alc);\n                        },\n                        always: [\n                          {\n                            target: 'fetching_kind',\n                            guard: ({ context }) => !context.kind,\n                          },\n                          {\n                            target: 'fetching_taste',\n                            guard: ({ context }) => !context.taste,\n                          },\n                          {\n                            target: 'fetching_alc',\n                            guard: ({ context }) => !context.alc,\n                          },\n                          {\n                            target: '#root.DialogueManager.Ready.Info_Fetch',\n                            guard: ({ context }) => context.kind && context.taste && context.alc,\n                          },\n                        ],\n                      },\n                      fetching_kind: {\n                        initial: 'loading',\n                        states: {\n                          loading: {\n                            entry: [\n                              'startUtteranceRepeating_kind',\n                              ({ context }) => {\n                                console.log(\"Loading state activated for kind!\"); // Add this line\n                                context.isLoading_kind = true;\n                              },\n                            ],\n                            \n                            exit: 'stopUtteranceRepeating_kind',\n                      \n                            invoke: {\n                              src: fromPromise(async ({ input }) => {\n                                // Constructing the prompt string based on the received input \n                              const max_tokens = 100; \n\n                              \n                              const prompt = `Use a couple filler sounds and filler words. Comment on choosing a beer with this characteristic ${input.request}. Ask what sort of brew type would they like their beer to have. Do not use more than 50 words and only suggest a couple of beer types from this list: \"ipa\", \"lager\", \"ale\", \"pilsner\", \"dark\", \"white\", \"brown\", \"porter\" or 'stout'`;\n                              \n                              \n                              const response = await fetchFromChatGPT(prompt, max_tokens);\n                      \n                              try {\n                                  console.log('Type of GPT Response:', typeof response);\n                                  return response;\n                              } catch (error) {\n                                  console.error('Parsing Error:', error, 'Invalid output:', response);\n                                  throw error; \n                              }\n                                              }),\n                                              \n                              onDone: {\n                                \n                                target: '#root.DialogueManager.Ready.Repeat.say_kind',\n                                actions: [\n\n                                  ({ event }) => console.log(event.output),\n                                  assign({\n                                    kind_quote: ({ event }) => {\n                                      return event.output.replace(/\\*/g, '');\n                                    },\n                                    isLoading_kind: false\n                                  })\n                                ]\n                              },\n                              onError: {\n                                target: '#root.DialogueManager.Ready.HelpRepeat',\n                                actions: assign({\n                                  errorMessage: ({ event }) => {\n                                    return event.data;\n                                  }\n                                })\n                              },\n                              input: ({ context, event }) => ({\n                                request: context.request\n                              })\n                            }\n                          },\n                      \n                          \n                        }\n                      },\n                      say_kind: {\n                      \n                        entry: ({ context }) => {\n                          animateFaceBasedOnUtterance(`${context.kind_quote}`),\n                          context.spstRef.send({\n                            type: \"SPEAK\",\n                            value: {\n                              utterance: `${context.kind_quote}`\n                            }\n                          });\n                        },\n                        on: { SPEAK_COMPLETE: \"#root.DialogueManager.Ready.Ask\" },\n                      },\n                      fetching_taste: {\n                        initial: 'loading',\n                        states: {\n                          loading: {\n                            entry: [\n                              'startUtteranceRepeating_taste',\n                              ({ context }) => {\n                                console.log(\"Loading state activated for taste!\");\n                                context.isLoading_taste = true;\n                              },\n                            ],\n                            \n                            exit: 'stopUtteranceRepeating_taste',\n                      \n                            invoke: {\n                              src: fromPromise(async ({ input }) => {\n                                \n                              const max_tokens = 100; \n                              \n                              \n                              const prompt = `Use a couple filler sounds and filler words. Do not use more than 65 words. Comment on choosing a beer with this characteristic ${input.request}. Ask how would they like their beer to taste. Only suggest a couple of flavors from this list: \"sour\", \"sweet\", \"bitter\", \"fruity\", \"coffee-like\" or \"chocolate\"`;\n                              \n                              \n                              const response = await fetchFromChatGPT(prompt, max_tokens);\n                  \n                              try {\n                                  console.log('Type of GPT Response:', typeof response);\n                                  return response;\n                              } catch (error) {\n                                  console.error('Parsing Error:', error, 'Invalid output:', response);\n                                  throw error; \n                              }\n                                              }),\n                              onDone: {\n                                target: '#root.DialogueManager.Ready.Repeat.say_taste',\n                                actions: [\n                                  ({ event }) => console.log(event.output),\n                                  assign({\n                                    taste_quote: ({ event }) => {\n                                      return event.output.replace(/\\*/g, '');\n                                    },\n                                    isLoading_taste: false\n                                  })\n                                ]\n                              },\n                              onError: {\n                                target: '#root.DialogueManager.Ready.HelpRepeat',\n                                actions: assign({\n                                  errorMessage: ({ event }) => {\n                                    return event.data;\n                                  }\n                                })\n                              },\n                              input: ({ context, event }) => ({\n                                request: context.request\n                              })\n                            }\n                          },\n                      \n                          \n                        }\n                      },\n                      say_taste: {\n                      \n                        entry: ({ context }) => {\n                          animateFaceBasedOnUtterance(`${context.taste_quote}`),\n                          context.spstRef.send({\n                            type: \"SPEAK\",\n                            value: {\n                              utterance: `${context.taste_quote}`\n                            }\n                          });\n                        },\n                        on: { SPEAK_COMPLETE: \"#root.DialogueManager.Ready.Ask\" },\n                      },\n                      fetching_alc: {\n                        initial: 'loading',\n                        states: {\n                          loading: {\n                            entry: [\n                              'startUtteranceRepeating_alc',\n                              ({ context }) => {\n                                console.log(\"Loading state activated for alc!\"); \n                                context.isLoading_alc = true;\n                              },\n                            ],\n                            \n                            exit: 'stopUtteranceRepeating_alc',\n                      \n                            invoke: {\n                              src: fromPromise(async ({ input }) => {\n                                \n                              const max_tokens = 100; \n                              \n                              \n                              const prompt = `Use a couple filler sounds and filler words. Do not use more than 65 words. Comment on choosing a beer with this characteristic ${input.request}. Ask what alcohol concentration would they like their beer to have. Only suggest a few relevant words from this list: \"strong\", \"weak\", \"average\"`;\n                              \n                              \n                              const response = await fetchFromChatGPT(prompt, max_tokens);\n                      \n                              try {\n                                  console.log('Type of GPT Response:', typeof response);\n                                  return response;\n                              } catch (error) {\n                                  console.error('Parsing Error:', error, 'Invalid output:', response);\n                                  throw error; \n                              }\n                                              }),\n                              onDone: {\n                                \n                                target: '#root.DialogueManager.Ready.Repeat.say_alc',\n                                actions: [\n                                  'forciblyStopSpeech',\n                                  ({ event }) => console.log(event.output),\n                                  assign({\n                                    alc_quote: ({ event }) => {\n                                      return event.output.replace(/\\*/g, '');\n                                    },\n                                    isLoading_alc: false\n                                  })\n                                ]\n                              },\n                              onError: {\n                                target: '#root.DialogueManager.Ready.HelpRepeat',\n                                actions: assign({\n                                  errorMessage: ({ event }) => {\n                                    return event.data;\n                                  }\n                                })\n                              },\n                              input: ({ context, event }) => ({\n                                request: context.request\n                              })\n                            }\n                          },\n                      \n                          \n                        }\n                      },\n                      say_alc: {\n\n                        entry: ({ context }) => {\n                          animateFaceBasedOnUtterance(`${context.alc_quote}`),\n                          context.spstRef.send({\n                            type: \"SPEAK\",\n                            value: {\n                              utterance: `${context.alc_quote}`\n                            }\n                          });\n                        },\n                        on: { SPEAK_COMPLETE: \"#root.DialogueManager.Ready.Ask\" },\n                      },\n                    },\n\n              },\n\n              Info_Fetch: {\n                initial: 'loading',\n                states: {\n                  loading: {\n                    entry: [\n                      'startUtteranceRepeating_info',\n                      ({ context }) => {\n                        console.log(\"Loading state activated for info!\"); \n                        context.isLoading = true;\n                      },\n                    ],\n                    \n                    exit: 'stopUtteranceRepeating_info',\n              \n                    invoke: {\n                      src: fromPromise(async ({ input }) => {\n                        \n                      const max_tokens = 400; \n                      //console.log(input.alc)\n              \n                      const prompt = `Format the answer strictly in JSON. Please provide details about some beers that match the following criteria: taste as ${input.taste}, alcohol content as ${input.alc}, and type as ${input.kind}? I am interested in learning about the flavor notes, the manufacturer, and especially the origin of such beers. Could you list at least 3 examples? Please format the answer strictly in JSON with only the \"beer\" objects in an array`;\n              \n              \n                      const response = await fetchFromChatGPT(prompt, max_tokens);\n              \n                      try {\n                          console.log('Type of GPT Response:', typeof response);\n                          return response;\n                      } catch (error) {\n                          console.error('Parsing Error:', error, 'Invalid JSON:', response);\n                          throw error; \n                      }\n                              }),\n                      onDone: {\n                        \n                        target: '#root.DialogueManager.Ready.Presenting_Beer',\n                        actions:['forciblyStopSpeech',\n                          ({ event }) => console.log(JSON.parse(event.output)),\n                          assign({\n                          beer1: ({ event }) => {\n                            console.log('Event:', event); \n                            return JSON.parse(event.output);\n                          },\n                          isLoading: false,\n                        })]\n                      },\n                      onError: {\n                        target: '#root.DialogueManager.Ready.HelpRepeat',\n                        actions: assign({\n                            errorMessage: ({ event }) => {\n                                event.data\n                            console.log(event.data)\n                            }\n                          })\n                      },\n                      input: ({ context, event }) => ({\n\n                        taste: context.taste,\n                        alc: context.alc,\n                        kind: context.kind,\n                                }),\n                    }\n                  },\n              \n\n                }\n              },\n\n              Presenting_Beer: {\n                entry: ({ context }) => {\n                  animateFaceBasedOnUtterance(`In that case, I would say, I believe that ${context.beer1.beers[0].name} um ${context.beer1.beers[1].name} and ahh, ${context.beer1.beers[2].name} would most likely suit your taste. Would you, by any chance, like to know more about any of them?`),\n                  context.spstRef.send({\n                    type: \"SPEAK\",\n                    value: {\n                      utterance: `In that case, I would say, I believe that ${context.beer1.beers[0].name} um ${context.beer1.beers[1].name} and ahh, ${context.beer1.beers[2].name} would most likely suit your taste. Would you, by any chance, like to know more about any of them?`\n                    }\n                  });\n                },\n                on: {\n                  SPEAK_COMPLETE: \"Ask_Beer\"\n                }\n              },\n\n              Ask_Beer: {\n                entry: listen(),\n                on: {\n                  SPEAK_COMPLETE: {actions: [listen(),]\n\n                  },\n                  RECOGNISED: {\n                    target: \"Beer_Info\",\n                    actions: [\n                      ({ event }) => console.log(event),\n                      assign({\n                        lastResult_beer: ({ event }) => event.value,\n                      }),\n                    ],\n                  },\n                },\n              },\n\n              Beer_Info: {\n                initial: 'loading',\n                states: {\n                  loading: {\n                    entry: [\n                      'startUtteranceRepeating_beer',\n                      ({ context }) => {\n                        console.log(\"Loading state activated for beer!\"); \n                      },\n\n              \n                    ],\n\n                    \n                    exit: 'stopUtteranceRepeating_beer',\n              \n                    invoke: {\n                      src: fromPromise(async ({ input }) => {\n                        const max_tokens = 200;\n              \n                        const prompt = `The beers are the following: the first one is ${input.type1}, the second one is ${input.type2}, the third one is ${input.type3}. Use no more than 50 words per description.\n                        Please do not exceed 55 words when describing each of them and use 5 filler words or sounds per beer description. This is what you must do: ${input.user}. Do not describe if not asked. Use a couple filler sounds and filler words.`;\n                        \n                        \n                        const response = await fetchFromChatGPT(prompt, max_tokens);\n              \n                        try {\n                            console.log('Type of GPT Response:', typeof response);\n                            return response;\n                        } catch (error) {\n                            console.error('Parsing Error:', error, 'Invalid output:', response);\n                            throw error; \n                        }\n                    }),\n                      onDone: {\n                        target: '#root.DialogueManager.Ready.say_info',\n                        actions:[({ event }) => console.log(event.output),\n                            assign({\n                            info_quote: ({ event }) => {\n                              console.log('Event:', event); \n                              return event.output.replace(/\\*/g, '');\n                            },\n              \n                          })]\n                      },\n                      onError: {\n                        target: '#root.DialogueManager.Ready.HelpRepeat',\n                        actions: assign({\n                            errorMessage: ({ event }) => {\n                                event.data\n                            console.log(event.data)\n                            }\n                          })\n                      },\n                      input: ({ context, event }) => ({\n\n                        type1: context.beer1.beers[0].name,\n                        type2: context.beer1.beers[1].name,\n                        type3: context.beer1.beers[2].name,\n                        beer1: context.beer1,\n                        user: context.lastResult_beer[0].utterance.toLowerCase()\n                                }),\n                    }\n                  },\n              \n\n                }\n              },\n              \n\n              say_info: {\n              \n                entry: ({ context }) => {\n                  animateFaceBasedOnUtterance(`${context.info_quote}`),\n                  context.spstRef.send({\n                    type: \"SPEAK\",\n                    value: {\n                      utterance: `${context.info_quote}... Would you be interested in anything else then?`\n                    }\n                  });\n                },\n                on: { SPEAK_COMPLETE: [\n                  {\n                      target: \"MoreBeer\",\n                      actions: assign({kind: null, taste:null, alc:null }),\n                      \n                  },\n                ] },\n              },\n\n              // Placeholder state, without it for some reason, the state machines just skips any following state\n              MoreBeer: {\n                entry: ({ context }) => {\n                  console.log(\"entering more beer\")\n\n                  console.log(\"Animating more beer\")\n                  context.spstRef.send({\n                    type: \"SPEAK\",\n                    value: {\n                      utterance: \"Would you be interested in anything else then?\"\n                    }\n                  });\n                  \n                },\n\n                on: { SPEAK_COMPLETE: {\n                  target: \"Final_Beer\",\n                }, },\n              },\n\n              Final_Beer: {\n                entry: listen(),\n                on: {\n                  RECOGNISED: {\n                    target: \"Final_Beer_Info\",\n                    actions: [\n                      ({ event }) => console.log(event),\n                      assign({\n                        lastResult_beer: ({ event }) => event.value[0].utterance,\n                      }),\n                    ],\n                  },\n                },\n              },\n\n              Final_Beer_Info: {\n                initial: 'loading',\n                states: {\n                  loading: {\n                    entry: [\n\n                      ({ context }) => {\n                        console.log(\"Loading state activated for final!\"); \n                      },\n                    ],\n                    \n              \n                    invoke: {\n                      src: fromPromise(async ({ input }) => {\n  \n                        const max_tokens = 75; \n                        console.log(input.lastResult_beer)\n              \n                        const prompt = `Based on the previous user input: ${input.lastResult_beer}, if the user expressed disinterest, respond with a phrase containing \"Glad to have been of service\". Otherwise, if the user asked a question or showed interest, answer their question and express your willingness to recommend a new beer. Please limit your response to 50 words.`;\n              \n              \n                        const response = await fetchFromChatGPT(prompt, max_tokens);\n              \n                        try {\n                            console.log('Type of GPT Response:', typeof response);\n                            return response;\n                        } catch (error) {\n                            console.error('Parsing Error:', error, 'Invalid output:', response);\n                            throw error; \n                        }\n                              }),\n                      onDone: {\n                        target: '#root.DialogueManager.Ready.Final_info',\n                        actions: [\n                  \n                          assign({\n                            last_resp: ({ event }) => {\n                              console.log('Event:', event); \n                              return event.output.replace(/\\*/g, '');\n                            },\n              \n                          }),\n                          \n\n                          ({ event }) => console.log(event.output),\n                      ],\n                      },\n                      onError: {\n                        target: '#root.DialogueManager.Ready.HelpRepeat',\n                        actions: assign({\n                            errorMessage: ({ event }) => {\n                                event.data\n                            console.log(event.data)\n                            }\n                          })\n                      },\n                      input: ({ context, event }) => ({\n\n                        lastResult_beer: context.lastResult_beer,\n                  \n                                }),\n                    \n\n                    }\n                  },\n                }\n              },\n              Final_info: {\n              \n                entry: ({ context }) => {\n                  animateFaceBasedOnUtterance(`${context.info_quote}`),\n                  context.spstRef.send({\n                    type: \"SPEAK\",\n                    value: {\n                      utterance: `${context.last_resp}`\n                    }\n                  });\n                },\n                on: { SPEAK_COMPLETE: [\n                  {\n                    target:\"#root.DialogueManager.Ready.IdleEnd\",\n                    guard: ({ context })=> context.last_resp.includes(\"Glad to have been of service\")\n                  },\n                  {\n                    target:\"#root.DialogueManager.Ready.Further_Inquiry\",\n              \n                  },\n              \n                  ] },\n              },\n              \n\n              IdleEnd: {}\n            },\n          },\n        },\n      },\n      GUI: {\n        initial: \"PageLoaded\",\n        states: {\n          PageLoaded: {\n            entry: \"gui.PageLoaded\",\n            on: { CLICK: { target: \"Inactive\", actions: \"prepare\" } },\n          },\n          Inactive: { entry: \"gui.Inactive\", on: { ASRTTS_READY: \"Active\" } },\n          Active: {\n            initial: \"Idle\",\n            states: {\n              Idle: {\n                entry: \"gui.Idle\",\n                on: { TTS_STARTED: \"Speaking\", ASR_STARTED: \"Listening\" },\n              },\n              Speaking: {\n                entry: \"gui.Speaking\",\n                on: { SPEAK_COMPLETE: \"Idle\" },\n              },\n              Listening: { entry: \"gui.Listening\", on: { RECOGNISED: \"Idle\" } },\n            },\n          },\n        },\n      },\n    }, \n    \n  },\n  \n  {\n    // custom actions\n    //\n    actions: {\n      forciblyStopSpeech: ({context}) => {\n\n          console.log('Stopping voice...');\n          context.spstRef.send({ type: \"STOP\" });\n\n      },\n\n      startUtteranceRepeating_taste: ({ context }) => {\n        repeatingInterval_taste = setInterval(() => {\n          context.spstRef.send({\n            type: 'SPEAK', value: { utterance: 'Hmm...'} \n          });\n          console.log('Hmm...');\n          animateFaceBasedOnHarcoded('Hmm...');\n        }, 2000);\n      },\n      stopUtteranceRepeating_taste: ({ context }) => {\n        console.log('Stopping voice...');\n        context.spstRef.send({ type: \"STOP\" });\n        clearInterval(repeatingInterval_taste);\n      },\n      startUtteranceRepeating_kind: ({ context }) => {\n        repeatingInterval_kind = setInterval(() => {\n          context.spstRef.send({\n            type: 'SPEAK', value: { utterance: 'Let me think...'} \n          });\n          console.log('Hmm...');\n          animateFaceBasedOnHarcoded('Let me think...');\n        }, 3000);\n      },\n      stopUtteranceRepeating_kind: ({ context }) => {\n        console.log('Stopping voice...');\n        context.spstRef.send({ type: \"STOP\" });\n        clearInterval(repeatingInterval_kind);\n      },\n      startUtteranceRepeating_alc: ({ context }) => {\n        repeatingInterval_alc = setInterval(() => {\n          context.spstRef.send({\n            type: 'SPEAK', value: { utterance: 'Let me think...'} \n          });\n          console.log('Hmm...');\n          animateFaceBasedOnHarcoded('Let me think...');\n        }, 3000);\n      },\n      stopUtteranceRepeating_alc: ({ context }) => {\n        console.log('Stopping voice...');\n        context.spstRef.send({ type: \"STOP\" });\n        clearInterval(repeatingInterval_alc);\n      },\n      startUtteranceRepeating_info: ({ context }) => {\n        repeatingInterval_info = setInterval(() => {\n          context.spstRef.send({\n            type: 'SPEAK', value: { utterance: 'Let me think...'} \n          });\n          console.log('Let me think...');\n          animateFaceBasedOnHarcoded('Let me think...');\n        }, 5000);\n      },\n      stopUtteranceRepeating_info: ({ context }) => {\n        context.spstRef.send({ type: \"STOP\" });\n        clearInterval(repeatingInterval_info);\n      },\n      startUtteranceRepeating_beer: ({ context }) => {\n        repeatingInterval_beer = setInterval(() => {\n          context.spstRef.send({\n            type: 'SPEAK', value: { utterance: 'Let me think...'} \n          });\n          console.log('Let me think...');\n          animateFaceBasedOnHarcoded('Let me think...');\n        }, 3000);\n      },\n      stopUtteranceRepeating_beer: ({ context }) => {\n        context.spstRef.send({ type: \"STOP\" });\n        clearInterval(repeatingInterval_beer);\n      },\n\n      // Not using them because it would be redundant due to the low loading time and simple query\n      startUtteranceRepeating_final: ({ context }) => {\n        repeatingInterval_final = setInterval(() => {\n          context.spstRef.send({\n            type: 'SPEAK', value: { utterance: 'Hmm...'} \n          });\n          console.log('Hmm...');\n          animateFaceBasedOnHarcoded('Hmm...');\n        }, 3000);\n      },\n      stopUtteranceRepeating_final: ({ context }) => {\n        context.spstRef.send({ type: \"STOP\" });\n        clearInterval(repeatingInterval_final);\n      },\n\n\n      prepare: ({ context }) =>\n        context.spstRef.send({\n          type: \"PREPARE\",\n        }),\n\n\n      \"speak.greeting\": ({ context }) => {\n        context.spstRef.send({\n          type: \"SPEAK\",\n          value: { utterance: \"Hi I'm Pim! And today I will be your guide into the world of beers! Now, before we start, may please know your name?\" },\n        });\n        animateFaceBasedOnUtterance(\"Hi I'm Pim! And today I will be your guide into the world of beers! Now, before we start, may please know your name?\");\n      },\n\n      \"gui.PageLoaded\": ({}) => {\n        document.getElementById(\"button\").innerText = \"Click to start!\";\n      },\n      \"gui.Inactive\": ({}) => {\n        document.getElementById(\"button\").innerText = \"Inactive\";\n      },\n      \"gui.Idle\": ({}) => {\n        document.getElementById(\"button\").innerText = \"Idle\";\n      },\n      \"gui.Speaking\": ({}) => {\n        document.getElementById(\"button\").innerText = \"Speaking...\";\n      },\n      \"gui.Listening\": ({}) => {\n        document.getElementById(\"button\").innerText = \"Listening...\";\n      },\n    },\n  },\n);\n\nconst actor = createActor(dmMachine).start();\n\n\nexport default actor;\ndocument.getElementById(\"button\").onclick = () => actor.send({ type: \"CLICK\" });\n\nactor.subscribe((state) => {\n  console.log(state.value);\n});\n","import { S as STATE_DELIMITER, m as mapValues, t as toArray, f as formatTransitions, a as toTransitionConfigArray, b as formatTransition, N as NULL_EVENT, c as memo, e as evaluateGuard, d as flatten, g as createInvokeId, h as getDelayedTransitions, i as formatInitialTransition, j as getCandidates, k as toInvokeConfig, l as getConfiguration, n as getStateNodes, r as resolveStateValue, o as isInFinalState, p as State, q as isErrorEvent, s as cloneState, u as macrostep, v as transitionNode, w as getInitialConfiguration, x as resolveActionsAndContext, y as assign, z as createInitEvent, A as microstep, B as isAtomicStateNode, C as isStateId, D as getStateNodeByPath, E as getPersistedState, F as resolveReferencedActor, G as createActor, H as matchesState } from './actions-5943a9db.esm.js';\nexport { M as Actor, O as ActorStatus, a7 as ConstantPrefix, P as InterpreterStatus, a8 as SpecialTargets, p as State, a5 as and, y as assign, R as cancel, T as choose, G as createActor, Q as doneInvoke, K as forwardTo, a0 as fromCallback, a1 as fromEventObservable, $ as fromObservable, _ as fromPromise, a2 as fromTransition, n as getStateNodes, L as interpret, U as log, H as matchesState, a4 as not, a6 as or, Y as pathToStateValue, V as pure, W as raise, J as sendParent, I as sendTo, a3 as stateIn, X as stop, Z as toObserver } from './actions-5943a9db.esm.js';\nimport '../dev/dist/xstate-dev.esm.js';\n\nconst EMPTY_OBJECT = {};\nconst toSerializableActon = action => {\n  if (typeof action === 'string') {\n    return {\n      type: action\n    };\n  }\n  if (typeof action === 'function') {\n    if ('resolve' in action) {\n      return {\n        type: action.type\n      };\n    }\n    return {\n      type: action.name\n    };\n  }\n  return action;\n};\nclass StateNode {\n  /**\n   * The relative key of the state node, which represents its location in the overall state value.\n   */\n\n  /**\n   * The unique ID of the state node.\n   */\n\n  /**\n   * The type of this state node:\n   *\n   *  - `'atomic'` - no child state nodes\n   *  - `'compound'` - nested child state nodes (XOR)\n   *  - `'parallel'` - orthogonal nested child state nodes (AND)\n   *  - `'history'` - history state node\n   *  - `'final'` - final state node\n   */\n\n  /**\n   * The string path from the root machine node to this node.\n   */\n\n  /**\n   * The child state nodes.\n   */\n\n  /**\n   * The type of history on this state node. Can be:\n   *\n   *  - `'shallow'` - recalls only top-level historical state value\n   *  - `'deep'` - recalls historical state value at all levels\n   */\n\n  /**\n   * The action(s) to be executed upon entering the state node.\n   */\n\n  /**\n   * The action(s) to be executed upon exiting the state node.\n   */\n\n  /**\n   * The parent state node.\n   */\n\n  /**\n   * The root machine node.\n   */\n\n  /**\n   * The meta data associated with this state node, which will be returned in State instances.\n   */\n\n  /**\n   * The output data sent with the \"done.state._id_\" event if this is a final state node.\n   */\n\n  /**\n   * The order this state node appears. Corresponds to the implicit document order.\n   */\n\n  constructor(\n  /**\n   * The raw config used to create the machine.\n   */\n  config, options) {\n    this.config = config;\n    this.key = void 0;\n    this.id = void 0;\n    this.type = void 0;\n    this.path = void 0;\n    this.states = void 0;\n    this.history = void 0;\n    this.entry = void 0;\n    this.exit = void 0;\n    this.parent = void 0;\n    this.machine = void 0;\n    this.meta = void 0;\n    this.output = void 0;\n    this.order = -1;\n    this.description = void 0;\n    this.tags = [];\n    this.transitions = void 0;\n    this.always = void 0;\n    this.parent = options._parent;\n    this.key = options._key;\n    this.machine = options._machine;\n    this.path = this.parent ? this.parent.path.concat(this.key) : [];\n    this.id = this.config.id || [this.machine.id, ...this.path].join(STATE_DELIMITER);\n    this.type = this.config.type || (this.config.states && Object.keys(this.config.states).length ? 'compound' : this.config.history ? 'history' : 'atomic');\n    this.description = this.config.description;\n    this.order = this.machine.idMap.size;\n    this.machine.idMap.set(this.id, this);\n    this.states = this.config.states ? mapValues(this.config.states, (stateConfig, key) => {\n      const stateNode = new StateNode(stateConfig, {\n        _parent: this,\n        _key: key,\n        _machine: this.machine\n      });\n      return stateNode;\n    }) : EMPTY_OBJECT;\n    if (this.type === 'compound' && !this.config.initial) {\n      throw new Error(`No initial state specified for compound state node \"#${this.id}\". Try adding { initial: \"${Object.keys(this.states)[0]}\" } to the state config.`);\n    }\n\n    // History config\n    this.history = this.config.history === true ? 'shallow' : this.config.history || false;\n    this.entry = toArray(this.config.entry).slice();\n    this.exit = toArray(this.config.exit).slice();\n    this.meta = this.config.meta;\n    this.output = this.type === 'final' ? this.config.output : undefined;\n    this.tags = toArray(config.tags).slice();\n  }\n  _initialize() {\n    this.transitions = formatTransitions(this);\n    if (this.config.always) {\n      this.always = toTransitionConfigArray(this.config.always).map(t => formatTransition(this, NULL_EVENT, t));\n    }\n    Object.keys(this.states).forEach(key => {\n      this.states[key]._initialize();\n    });\n  }\n\n  /**\n   * The well-structured state node definition.\n   */\n  get definition() {\n    return {\n      id: this.id,\n      key: this.key,\n      version: this.machine.version,\n      type: this.type,\n      initial: this.initial ? {\n        target: this.initial.target,\n        source: this,\n        actions: this.initial.actions.map(toSerializableActon),\n        eventType: null,\n        reenter: false,\n        toJSON: () => ({\n          target: this.initial.target.map(t => `#${t.id}`),\n          source: `#${this.id}`,\n          actions: this.initial.actions.map(toSerializableActon),\n          eventType: null\n        })\n      } : undefined,\n      history: this.history,\n      states: mapValues(this.states, state => {\n        return state.definition;\n      }),\n      on: this.on,\n      transitions: [...this.transitions.values()].flat().map(t => ({\n        ...t,\n        actions: t.actions.map(toSerializableActon)\n      })),\n      entry: this.entry.map(toSerializableActon),\n      exit: this.exit.map(toSerializableActon),\n      meta: this.meta,\n      order: this.order || -1,\n      output: this.output,\n      invoke: this.invoke,\n      description: this.description,\n      tags: this.tags\n    };\n  }\n  toJSON() {\n    return this.definition;\n  }\n\n  /**\n   * The logic invoked as actors by this state node.\n   */\n  get invoke() {\n    return memo(this, 'invoke', () => toArray(this.config.invoke).map((invocable, i) => {\n      const generatedId = createInvokeId(this.id, i);\n      const invokeConfig = toInvokeConfig(invocable, generatedId);\n      const resolvedId = invokeConfig.id || generatedId;\n      const src = invokeConfig.src;\n      const {\n        systemId\n      } = invokeConfig;\n\n      // TODO: resolving should not happen here\n      const resolvedSrc = typeof src === 'string' ? src : !('type' in src) ? resolvedId : src;\n      if (!this.machine.implementations.actors[resolvedId] && typeof src !== 'string' && !('type' in src)) {\n        this.machine.implementations.actors = {\n          ...this.machine.implementations.actors,\n          // TODO: this should accept `src` as-is\n          [resolvedId]: src\n        };\n      }\n      return {\n        ...invokeConfig,\n        src: resolvedSrc,\n        id: resolvedId,\n        systemId: systemId,\n        toJSON() {\n          const {\n            onDone,\n            onError,\n            ...invokeDefValues\n          } = invokeConfig;\n          return {\n            ...invokeDefValues,\n            type: 'xstate.invoke',\n            src: resolvedSrc,\n            id: resolvedId\n          };\n        }\n      };\n    }));\n  }\n\n  /**\n   * The mapping of events to transitions.\n   */\n  get on() {\n    return memo(this, 'on', () => {\n      const transitions = this.transitions;\n      return [...transitions].flatMap(([descriptor, t]) => t.map(t => [descriptor, t])).reduce((map, [descriptor, transition]) => {\n        map[descriptor] = map[descriptor] || [];\n        map[descriptor].push(transition);\n        return map;\n      }, {});\n    });\n  }\n  get after() {\n    return memo(this, 'delayedTransitions', () => getDelayedTransitions(this));\n  }\n  get initial() {\n    return memo(this, 'initial', () => formatInitialTransition(this, this.config.initial || []));\n  }\n  next(state, event) {\n    const eventType = event.type;\n    const actions = [];\n    let selectedTransition;\n    const candidates = memo(this, `candidates-${eventType}`, () => getCandidates(this, eventType));\n    for (const candidate of candidates) {\n      const {\n        guard\n      } = candidate;\n      const resolvedContext = state.context;\n      let guardPassed = false;\n      try {\n        guardPassed = !guard || evaluateGuard(guard, resolvedContext, event, state);\n      } catch (err) {\n        const guardType = typeof guard === 'string' ? guard : typeof guard === 'object' ? guard.type : undefined;\n        throw new Error(`Unable to evaluate guard ${guardType ? `'${guardType}' ` : ''}in transition for event '${eventType}' in state node '${this.id}':\\n${err.message}`);\n      }\n      if (guardPassed) {\n        actions.push(...candidate.actions);\n        selectedTransition = candidate;\n        break;\n      }\n    }\n    return selectedTransition ? [selectedTransition] : undefined;\n  }\n\n  /**\n   * The target state value of the history state node, if it exists. This represents the\n   * default state value to transition to if no history value exists yet.\n   */\n  get target() {\n    if (this.type === 'history') {\n      const historyConfig = this.config;\n      return historyConfig.target;\n    }\n    return undefined;\n  }\n\n  /**\n   * All the state node IDs of this state node and its descendant state nodes.\n   */\n  get stateIds() {\n    const childStateIds = flatten(Object.keys(this.states).map(stateKey => {\n      return this.states[stateKey].stateIds;\n    }));\n    return [this.id].concat(childStateIds);\n  }\n\n  /**\n   * All the event types accepted by this state node and its descendants.\n   */\n  get events() {\n    return memo(this, 'events', () => {\n      const {\n        states\n      } = this;\n      const events = new Set(this.ownEvents);\n      if (states) {\n        for (const stateId of Object.keys(states)) {\n          const state = states[stateId];\n          if (state.states) {\n            for (const event of state.events) {\n              events.add(`${event}`);\n            }\n          }\n        }\n      }\n      return Array.from(events);\n    });\n  }\n\n  /**\n   * All the events that have transitions directly from this state node.\n   *\n   * Excludes any inert events.\n   */\n  get ownEvents() {\n    const events = new Set([...this.transitions.keys()].filter(descriptor => {\n      return this.transitions.get(descriptor).some(transition => !(!transition.target && !transition.actions.length && !transition.reenter));\n    }));\n    return Array.from(events);\n  }\n}\n\nconst STATE_IDENTIFIER = '#';\nclass StateMachine {\n  /**\n   * The machine's own version.\n   */\n\n  constructor(\n  /**\n   * The raw config used to create the machine.\n   */\n  config, implementations) {\n    this.config = config;\n    this.version = void 0;\n    this.implementations = void 0;\n    this.types = void 0;\n    this.__xstatenode = true;\n    this.idMap = new Map();\n    this.root = void 0;\n    this.id = void 0;\n    this.states = void 0;\n    this.events = void 0;\n    this.__TContext = void 0;\n    this.__TEvent = void 0;\n    this.__TActor = void 0;\n    this.__TAction = void 0;\n    this.__TGuard = void 0;\n    this.__TDelay = void 0;\n    this.__TTag = void 0;\n    this.__TInput = void 0;\n    this.__TOutput = void 0;\n    this.__TResolvedTypesMeta = void 0;\n    this.id = config.id || '(machine)';\n    this.implementations = {\n      actors: implementations?.actors ?? {},\n      actions: implementations?.actions ?? {},\n      delays: implementations?.delays ?? {},\n      guards: implementations?.guards ?? {}\n    };\n    this.version = this.config.version;\n    this.types = this.config.types ?? {};\n    this.transition = this.transition.bind(this);\n    this.root = new StateNode(config, {\n      _key: this.id,\n      _machine: this\n    });\n    this.root._initialize();\n    this.states = this.root.states; // TODO: remove!\n    this.events = this.root.events;\n  }\n\n  /**\n   * Clones this state machine with the provided implementations\n   * and merges the `context` (if provided).\n   *\n   * @param implementations Options (`actions`, `guards`, `actors`, `delays`, `context`)\n   *  to recursively merge with the existing options.\n   *\n   * @returns A new `StateMachine` instance with the provided implementations.\n   */\n  provide(implementations) {\n    const {\n      actions,\n      guards,\n      actors,\n      delays\n    } = this.implementations;\n    return new StateMachine(this.config, {\n      actions: {\n        ...actions,\n        ...implementations.actions\n      },\n      guards: {\n        ...guards,\n        ...implementations.guards\n      },\n      actors: {\n        ...actors,\n        ...implementations.actors\n      },\n      delays: {\n        ...delays,\n        ...implementations.delays\n      }\n    });\n  }\n\n  /**\n   * Resolves the given `state` to a new `State` instance relative to this machine.\n   *\n   * This ensures that `.nextEvents` represent the correct values.\n   *\n   * @param state The state to resolve\n   */\n  resolveState(state) {\n    const configurationSet = getConfiguration(getStateNodes(this.root, state.value));\n    const configuration = Array.from(configurationSet);\n    return this.createState({\n      ...state,\n      value: resolveStateValue(this.root, state.value),\n      configuration,\n      done: isInFinalState(configuration)\n    });\n  }\n  resolveStateValue(stateValue, ...[context]) {\n    const resolvedStateValue = resolveStateValue(this.root, stateValue);\n    return this.resolveState(State.from(resolvedStateValue, context, this));\n  }\n\n  /**\n   * Determines the next state given the current `state` and received `event`.\n   * Calculates a full macrostep from all microsteps.\n   *\n   * @param state The current State instance or state value\n   * @param event The received event\n   */\n  transition(state, event, actorCtx) {\n    // TODO: handle error events in a better way\n    if (isErrorEvent(event) && !state.nextEvents.some(nextEvent => nextEvent === event.type)) {\n      return cloneState(state, {\n        error: event.data\n      });\n    }\n    const {\n      state: nextState\n    } = macrostep(state, event, actorCtx);\n    return nextState;\n  }\n\n  /**\n   * Determines the next state given the current `state` and `event`.\n   * Calculates a microstep.\n   *\n   * @param state The current state\n   * @param event The received event\n   */\n  microstep(state, event, actorCtx) {\n    return macrostep(state, event, actorCtx).microstates;\n  }\n  getTransitionData(state, event) {\n    return transitionNode(this.root, state.value, state, event) || [];\n  }\n\n  /**\n   * The initial state _before_ evaluating any microsteps.\n   * This \"pre-initial\" state is provided to initial actions executed in the initial state.\n   */\n  getPreInitialState(actorCtx, initEvent) {\n    const {\n      context\n    } = this.config;\n    const preInitial = this.resolveState(this.createState({\n      value: {},\n      // TODO: this is computed in state constructor\n      context: typeof context !== 'function' && context ? context : {},\n      meta: undefined,\n      configuration: getInitialConfiguration(this.root),\n      children: {}\n    }));\n    if (typeof context === 'function') {\n      const assignment = ({\n        spawn,\n        event\n      }) => context({\n        spawn,\n        input: event.input\n      });\n      return resolveActionsAndContext([assign(assignment)], initEvent, preInitial, actorCtx);\n    }\n    return preInitial;\n  }\n\n  /**\n   * Returns the initial `State` instance, with reference to `self` as an `ActorRef`.\n   */\n  getInitialState(actorCtx, input) {\n    const initEvent = createInitEvent(input); // TODO: fix;\n\n    const preInitialState = this.getPreInitialState(actorCtx, initEvent);\n    const nextState = microstep([{\n      target: [...preInitialState.configuration].filter(isAtomicStateNode),\n      source: this.root,\n      reenter: true,\n      actions: [],\n      eventType: null,\n      toJSON: null // TODO: fix\n    }], preInitialState, actorCtx, initEvent, true);\n    const {\n      state: macroState\n    } = macrostep(nextState, initEvent, actorCtx);\n    return macroState;\n  }\n  start(state) {\n    Object.values(state.children).forEach(child => {\n      if (child.status === 0) {\n        child.start?.();\n      }\n    });\n  }\n  getStateNodeById(stateId) {\n    const fullPath = stateId.split(STATE_DELIMITER);\n    const relativePath = fullPath.slice(1);\n    const resolvedStateId = isStateId(fullPath[0]) ? fullPath[0].slice(STATE_IDENTIFIER.length) : fullPath[0];\n    const stateNode = this.idMap.get(resolvedStateId);\n    if (!stateNode) {\n      throw new Error(`Child state node '#${resolvedStateId}' does not exist on machine '${this.id}'`);\n    }\n    return getStateNodeByPath(stateNode, relativePath);\n  }\n  get definition() {\n    return this.root.definition;\n  }\n  toJSON() {\n    return this.definition;\n  }\n  getPersistedState(state) {\n    return getPersistedState(state);\n  }\n  createState(stateConfig) {\n    return stateConfig instanceof State ? stateConfig : new State(stateConfig, this);\n  }\n  getStatus(state) {\n    return state.error ? {\n      status: 'error',\n      data: state.error\n    } : state.done ? {\n      status: 'done',\n      data: state.output\n    } : {\n      status: 'active'\n    };\n  }\n  restoreState(state, _actorCtx) {\n    const children = {};\n    Object.keys(state.children).forEach(actorId => {\n      const actorData = state.children[actorId];\n      const childState = actorData.state;\n      const src = actorData.src;\n      const logic = src ? resolveReferencedActor(this.implementations.actors[src])?.src : undefined;\n      if (!logic) {\n        return;\n      }\n      const actorState = logic.restoreState?.(childState, _actorCtx);\n      const actorRef = createActor(logic, {\n        id: actorId,\n        state: actorState\n      });\n      children[actorId] = actorRef;\n    });\n    const restoredState = this.createState(new State({\n      ...state,\n      children\n    }, this));\n\n    // TODO: DRY this up\n    restoredState.configuration.forEach(stateNode => {\n      if (stateNode.invoke) {\n        stateNode.invoke.forEach(invokeConfig => {\n          const {\n            id,\n            src\n          } = invokeConfig;\n          if (children[id]) {\n            return;\n          }\n          const referenced = resolveReferencedActor(this.implementations.actors[src]);\n          if (referenced) {\n            const actorRef = createActor(referenced.src, {\n              id,\n              parent: _actorCtx?.self,\n              input: 'input' in invokeConfig ? invokeConfig.input : referenced.input\n            });\n            children[id] = actorRef;\n          }\n        });\n      }\n    });\n    return restoredState;\n  }\n\n  /**@deprecated an internal property acting as a \"phantom\" type, not meant to be used at runtime */\n}\n\nfunction createMachine(config, implementations) {\n  return new StateMachine(config, implementations);\n}\n\nfunction mapState(stateMap, stateId) {\n  let foundStateId;\n  for (const mappedStateId of Object.keys(stateMap)) {\n    if (matchesState(mappedStateId, stateId) && (!foundStateId || stateId.length > foundStateId.length)) {\n      foundStateId = mappedStateId;\n    }\n  }\n  return stateMap[foundStateId];\n}\n\nclass SimulatedClock {\n  constructor() {\n    this.timeouts = new Map();\n    this._now = 0;\n    this._id = 0;\n  }\n  now() {\n    return this._now;\n  }\n  getId() {\n    return this._id++;\n  }\n  setTimeout(fn, timeout) {\n    const id = this.getId();\n    this.timeouts.set(id, {\n      start: this.now(),\n      timeout,\n      fn\n    });\n    return id;\n  }\n  clearTimeout(id) {\n    this.timeouts.delete(id);\n  }\n  set(time) {\n    if (this._now > time) {\n      throw new Error('Unable to travel back in time');\n    }\n    this._now = time;\n    this.flushTimeouts();\n  }\n  flushTimeouts() {\n    [...this.timeouts].sort(([_idA, timeoutA], [_idB, timeoutB]) => {\n      const endA = timeoutA.start + timeoutA.timeout;\n      const endB = timeoutB.start + timeoutB.timeout;\n      return endB > endA ? -1 : 1;\n    }).forEach(([id, timeout]) => {\n      if (this.now() - timeout.start >= timeout.timeout) {\n        this.timeouts.delete(id);\n        timeout.fn.call(null);\n      }\n    });\n  }\n  increment(ms) {\n    this._now += ms;\n    this.flushTimeouts();\n  }\n}\n\nconst defaultWaitForOptions = {\n  timeout: 10_000 // 10 seconds\n};\n\n/**\n * Subscribes to an actor ref and waits for its emitted value to satisfy\n * a predicate, and then resolves with that value.\n * Will throw if the desired state is not reached after a timeout\n * (defaults to 10 seconds).\n *\n * @example\n * ```js\n * const state = await waitFor(someService, state => {\n *   return state.hasTag('loaded');\n * });\n *\n * state.hasTag('loaded'); // true\n * ```\n *\n * @param actorRef The actor ref to subscribe to\n * @param predicate Determines if a value matches the condition to wait for\n * @param options\n * @returns A promise that eventually resolves to the emitted value\n * that matches the condition\n */\nfunction waitFor(actorRef, predicate, options) {\n  const resolvedOptions = {\n    ...defaultWaitForOptions,\n    ...options\n  };\n  return new Promise((res, rej) => {\n    let done = false;\n    const handle = resolvedOptions.timeout === Infinity ? undefined : setTimeout(() => {\n      sub.unsubscribe();\n      rej(new Error(`Timeout of ${resolvedOptions.timeout} ms exceeded`));\n    }, resolvedOptions.timeout);\n    const dispose = () => {\n      clearTimeout(handle);\n      done = true;\n      sub?.unsubscribe();\n    };\n    function checkEmitted(emitted) {\n      if (predicate(emitted)) {\n        dispose();\n        res(emitted);\n      }\n    }\n    let sub; // avoid TDZ when disposing synchronously\n\n    // See if the current snapshot already matches the predicate\n    checkEmitted(actorRef.getSnapshot());\n    if (done) {\n      return;\n    }\n    sub = actorRef.subscribe({\n      next: checkEmitted,\n      error: err => {\n        dispose();\n        rej(err);\n      },\n      complete: () => {\n        dispose();\n        rej(new Error(`Actor terminated without satisfying predicate`));\n      }\n    });\n    if (done) {\n      sub.unsubscribe();\n    }\n  });\n}\n\nexport { SimulatedClock, StateMachine, StateNode, createMachine, mapState, waitFor };\n","import { devToolsAdapter } from '../dev/dist/xstate-dev.esm.js';\n\n/**\n * `T | unknown` reduces to `unknown` and that can be problematic when it comes to contextual typing.\n * It especially is a problem when the union has a function member, like here:\n *\n * ```ts\n * declare function test(cbOrVal: ((arg: number) => unknown) | unknown): void;\n * test((arg) => {}) // oops, implicit any\n * ```\n *\n * This type can be used to avoid this problem. This union represents the same value space as `unknown`.\n */\n\n// https://github.com/microsoft/TypeScript/issues/23182#issuecomment-379091887\n\n/**\n * The full definition of an event, with a string `type`.\n */\n\n// TODO: do not accept machines without all implementations\n// we should also accept a raw machine as actor logic here\n// or just make machine actor logic\n\n/**\n * The string or object representing the state value relative to the parent state node.\n *\n * - For a child atomic state node, this is a string, e.g., `\"pending\"`.\n * - For complex state nodes, this is an object, e.g., `{ success: \"someChildState\" }`.\n */\n\n// TODO: remove once TS fixes this type-widening issue\n\n// TODO: possibly refactor this somehow, use even a simpler type, and maybe even make `machine.options` private or something\n\nlet ConstantPrefix = /*#__PURE__*/function (ConstantPrefix) {\n  ConstantPrefix[\"After\"] = \"xstate.after\";\n  ConstantPrefix[\"DoneState\"] = \"done.state\";\n  ConstantPrefix[\"DoneInvoke\"] = \"done.invoke\";\n  ConstantPrefix[\"ErrorExecution\"] = \"error.execution\";\n  ConstantPrefix[\"ErrorCommunication\"] = \"error.communication\";\n  ConstantPrefix[\"ErrorPlatform\"] = \"error.platform\";\n  ConstantPrefix[\"ErrorCustom\"] = \"xstate.error\";\n  return ConstantPrefix;\n}({});\nlet SpecialTargets = /*#__PURE__*/function (SpecialTargets) {\n  SpecialTargets[\"Parent\"] = \"#_parent\";\n  SpecialTargets[\"Internal\"] = \"#_internal\";\n  return SpecialTargets;\n}({});\n\nconst after$1 = ConstantPrefix.After;\nconst doneState = ConstantPrefix.DoneState;\nconst errorExecution = ConstantPrefix.ErrorExecution;\nconst errorPlatform = ConstantPrefix.ErrorPlatform;\nconst error$1 = ConstantPrefix.ErrorCustom;\n\nvar constantPrefixes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  after: after$1,\n  doneState: doneState,\n  errorExecution: errorExecution,\n  errorPlatform: errorPlatform,\n  error: error$1\n});\n\nconst STATE_DELIMITER = '.';\nconst TARGETLESS_KEY = '';\nconst NULL_EVENT = '';\nconst STATE_IDENTIFIER = '#';\nconst WILDCARD = '*';\nconst INIT_TYPE = 'xstate.init';\n\nfunction resolve$8(actorContext, state, args, {\n  to,\n  event: eventOrExpr,\n  id,\n  delay\n}) {\n  const delaysMap = state.machine.implementations.delays;\n  if (typeof eventOrExpr === 'string') {\n    throw new Error(`Only event objects may be used with sendTo; use sendTo({ type: \"${eventOrExpr}\" }) instead`);\n  }\n  const resolvedEvent = typeof eventOrExpr === 'function' ? eventOrExpr(args) : eventOrExpr;\n  let resolvedDelay;\n  if (typeof delay === 'string') {\n    const configDelay = delaysMap && delaysMap[delay];\n    resolvedDelay = typeof configDelay === 'function' ? configDelay(args) : configDelay;\n  } else {\n    resolvedDelay = typeof delay === 'function' ? delay(args) : delay;\n  }\n  const resolvedTarget = typeof to === 'function' ? to(args) : to;\n  let targetActorRef;\n  if (typeof resolvedTarget === 'string') {\n    if (resolvedTarget === SpecialTargets.Parent) {\n      targetActorRef = actorContext?.self._parent;\n    } else if (resolvedTarget === SpecialTargets.Internal) {\n      targetActorRef = actorContext?.self;\n    } else if (resolvedTarget.startsWith('#_')) {\n      // SCXML compatibility: https://www.w3.org/TR/scxml/#SCXMLEventProcessor\n      // #_invokeid. If the target is the special term '#_invokeid', where invokeid is the invokeid of an SCXML session that the sending session has created by <invoke>, the Processor must add the event to the external queue of that session.\n      targetActorRef = state.children[resolvedTarget.slice(2)];\n    } else {\n      targetActorRef = state.children[resolvedTarget];\n    }\n    if (!targetActorRef) {\n      throw new Error(`Unable to send event to actor '${resolvedTarget}' from machine '${state.machine.id}'.`);\n    }\n  } else {\n    targetActorRef = resolvedTarget || actorContext?.self;\n  }\n  return [state, {\n    to: targetActorRef,\n    event: resolvedEvent,\n    id,\n    delay: resolvedDelay\n  }];\n}\nfunction execute$5(actorContext, params) {\n  if (typeof params.delay === 'number') {\n    actorContext.self.delaySend(params);\n    return;\n  }\n  const {\n    to,\n    event\n  } = params;\n  actorContext.defer(() => {\n    to.send(event.type === error$1 ? {\n      type: `${error(actorContext.self.id)}`,\n      data: event.data\n    } : event);\n  });\n}\n\n/**\n * Sends an event to an actor.\n *\n * @param actor The `ActorRef` to send the event to.\n * @param event The event to send, or an expression that evaluates to the event to send\n * @param options Send action options\n *  - `id` - The unique send event identifier (used with `cancel()`).\n *  - `delay` - The number of milliseconds to delay the sending of the event.\n */\nfunction sendTo(to, eventOrExpr, options) {\n  function sendTo(_) {\n  }\n  sendTo.type = 'xstate.sendTo';\n  sendTo.to = to;\n  sendTo.event = eventOrExpr;\n  sendTo.id = options?.id;\n  sendTo.delay = options?.delay;\n  sendTo.resolve = resolve$8;\n  sendTo.execute = execute$5;\n  return sendTo;\n}\n\n/**\n * Sends an event to this machine's parent.\n *\n * @param event The event to send to the parent machine.\n * @param options Options to pass into the send event.\n */\nfunction sendParent(event, options) {\n  return sendTo(SpecialTargets.Parent, event, options);\n}\n/**\n * Forwards (sends) an event to a specified service.\n *\n * @param target The target service to forward the event to.\n * @param options Options to pass into the send action creator.\n */\nfunction forwardTo(target, options) {\n  return sendTo(target, ({\n    event\n  }) => event, options);\n}\n\n/**\n * Escalates an error by sending it as an event to this machine's parent.\n *\n * @param errorData The error data to send, or the expression function that\n * takes in the `context`, `event`, and `meta`, and returns the error data to send.\n * @param options Options to pass into the send action creator.\n */\nfunction escalate(errorData, options) {\n  return sendParent(arg => {\n    return {\n      type: error$1,\n      data: typeof errorData === 'function' ? errorData(arg) : errorData\n    };\n  }, options);\n}\n\nconst cache = new WeakMap();\nfunction memo(object, key, fn) {\n  let memoizedData = cache.get(object);\n  if (!memoizedData) {\n    memoizedData = {\n      [key]: fn()\n    };\n    cache.set(object, memoizedData);\n  } else if (!(key in memoizedData)) {\n    memoizedData[key] = fn();\n  }\n  return memoizedData[key];\n}\n\nfunction resolve$7(_, state, actionArgs, {\n  sendId\n}) {\n  const resolvedSendId = typeof sendId === 'function' ? sendId(actionArgs) : sendId;\n  return [state, resolvedSendId];\n}\nfunction execute$4(actorContext, resolvedSendId) {\n  actorContext.self.cancel(resolvedSendId);\n}\n\n/**\n * Cancels an in-flight `send(...)` action. A canceled sent action will not\n * be executed, nor will its event be sent, unless it has already been sent\n * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).\n *\n * @param sendId The `id` of the `send(...)` action to cancel.\n */\nfunction cancel(sendId) {\n  function cancel(_) {\n  }\n  cancel.type = 'xstate.cancel';\n  cancel.sendId = sendId;\n  cancel.resolve = resolve$7;\n  cancel.execute = execute$4;\n  return cancel;\n}\n\nclass Mailbox {\n  constructor(_process) {\n    this._process = _process;\n    this._active = false;\n    this._current = null;\n    this._last = null;\n  }\n  start() {\n    this._active = true;\n    this.flush();\n  }\n  clear() {\n    // we can't set _current to null because we might be currently processing\n    // and enqueue following clear shouldnt start processing the enqueued item immediately\n    if (this._current) {\n      this._current.next = null;\n      this._last = this._current;\n    }\n  }\n\n  // TODO: rethink this design\n  prepend(event) {\n    if (!this._current) {\n      this.enqueue(event);\n      return;\n    }\n\n    // we know that something is already queued up\n    // so the mailbox is already flushing or it's inactive\n    // therefore the only thing that we need to do is to reassign `this._current`\n    this._current = {\n      value: event,\n      next: this._current\n    };\n  }\n  enqueue(event) {\n    const enqueued = {\n      value: event,\n      next: null\n    };\n    if (this._current) {\n      this._last.next = enqueued;\n      this._last = enqueued;\n      return;\n    }\n    this._current = enqueued;\n    this._last = enqueued;\n    if (this._active) {\n      this.flush();\n    }\n  }\n  flush() {\n    while (this._current) {\n      // atm the given _process is responsible for implementing proper try/catch handling\n      // we assume here that this won't throw in a way that can affect this mailbox\n      const consumed = this._current;\n      this._process(consumed.value);\n      // something could have been prepended in the meantime\n      // so we need to be defensive here to avoid skipping over a prepended item\n      if (consumed === this._current) {\n        this._current = this._current.next;\n      }\n    }\n    this._last = null;\n  }\n}\n\nconst symbolObservable = (() => typeof Symbol === 'function' && Symbol.observable || '@@observable')();\n\n/**\n * Returns actor logic from a transition function and its initial state.\n *\n * A transition function is a function that takes the current state and an event and returns the next state.\n *\n * @param transition The transition function that returns the next state given the current state and event.\n * @param initialState The initial state of the transition function.\n * @returns Actor logic\n */\nfunction fromTransition(transition, initialState) {\n  return {\n    config: transition,\n    transition: (state, event, actorContext) => {\n      return transition(state, event, actorContext);\n    },\n    getInitialState: (_, input) => {\n      return typeof initialState === 'function' ? initialState({\n        input\n      }) : initialState;\n    },\n    getSnapshot: state => state,\n    getPersistedState: state => state,\n    restoreState: state => state\n  };\n}\n\nfunction matchesState(parentStateId, childStateId) {\n  const parentStateValue = toStateValue(parentStateId);\n  const childStateValue = toStateValue(childStateId);\n  if (typeof childStateValue === 'string') {\n    if (typeof parentStateValue === 'string') {\n      return childStateValue === parentStateValue;\n    }\n\n    // Parent more specific than child\n    return false;\n  }\n  if (typeof parentStateValue === 'string') {\n    return parentStateValue in childStateValue;\n  }\n  return Object.keys(parentStateValue).every(key => {\n    if (!(key in childStateValue)) {\n      return false;\n    }\n    return matchesState(parentStateValue[key], childStateValue[key]);\n  });\n}\nfunction toStatePath(stateId) {\n  try {\n    if (isArray(stateId)) {\n      return stateId;\n    }\n    return stateId.toString().split(STATE_DELIMITER);\n  } catch (e) {\n    throw new Error(`'${stateId}' is not a valid state path.`);\n  }\n}\nfunction isStateLike(state) {\n  return typeof state === 'object' && 'value' in state && 'context' in state && 'event' in state;\n}\nfunction toStateValue(stateValue) {\n  if (isStateLike(stateValue)) {\n    return stateValue.value;\n  }\n  if (isArray(stateValue)) {\n    return pathToStateValue(stateValue);\n  }\n  if (typeof stateValue !== 'string') {\n    return stateValue;\n  }\n  const statePath = toStatePath(stateValue);\n  return pathToStateValue(statePath);\n}\nfunction pathToStateValue(statePath) {\n  if (statePath.length === 1) {\n    return statePath[0];\n  }\n  const value = {};\n  let marker = value;\n  for (let i = 0; i < statePath.length - 1; i++) {\n    if (i === statePath.length - 2) {\n      marker[statePath[i]] = statePath[i + 1];\n    } else {\n      const previous = marker;\n      marker = {};\n      previous[statePath[i]] = marker;\n    }\n  }\n  return value;\n}\nfunction mapValues(collection, iteratee) {\n  const result = {};\n  const collectionKeys = Object.keys(collection);\n  for (let i = 0; i < collectionKeys.length; i++) {\n    const key = collectionKeys[i];\n    result[key] = iteratee(collection[key], key, collection, i);\n  }\n  return result;\n}\nfunction flatten(array) {\n  return [].concat(...array);\n}\nfunction toArrayStrict(value) {\n  if (isArray(value)) {\n    return value;\n  }\n  return [value];\n}\nfunction toArray(value) {\n  if (value === undefined) {\n    return [];\n  }\n  return toArrayStrict(value);\n}\nfunction mapContext(mapper, context, event, self) {\n  if (typeof mapper === 'function') {\n    return mapper({\n      context,\n      event,\n      self\n    });\n  }\n  return mapper;\n}\nfunction isPromiseLike(value) {\n  if (value instanceof Promise) {\n    return true;\n  }\n  // Check if shape matches the Promise/A+ specification for a \"thenable\".\n  if (value !== null && (typeof value === 'function' || typeof value === 'object') && typeof value.then === 'function') {\n    return true;\n  }\n  return false;\n}\nfunction isArray(value) {\n  return Array.isArray(value);\n}\nfunction isErrorEvent(event) {\n  return typeof event.type === 'string' && (event.type === errorExecution || event.type.startsWith(errorPlatform));\n}\nfunction toTransitionConfigArray(configLike) {\n  return toArrayStrict(configLike).map(transitionLike => {\n    if (typeof transitionLike === 'undefined' || typeof transitionLike === 'string') {\n      return {\n        target: transitionLike\n      };\n    }\n    return transitionLike;\n  });\n}\nfunction normalizeTarget(target) {\n  if (target === undefined || target === TARGETLESS_KEY) {\n    return undefined;\n  }\n  return toArray(target);\n}\nfunction toInvokeConfig(invocable, id) {\n  if (typeof invocable === 'object') {\n    if ('src' in invocable) {\n      return invocable;\n    }\n    if ('transition' in invocable) {\n      return {\n        id,\n        src: invocable\n      };\n    }\n  }\n  return {\n    id,\n    src: invocable\n  };\n}\nfunction toObserver(nextHandler, errorHandler, completionHandler) {\n  const isObserver = typeof nextHandler === 'object';\n  const self = isObserver ? nextHandler : undefined;\n  return {\n    next: (isObserver ? nextHandler.next : nextHandler)?.bind(self),\n    error: (isObserver ? nextHandler.error : errorHandler)?.bind(self),\n    complete: (isObserver ? nextHandler.complete : completionHandler)?.bind(self)\n  };\n}\nfunction createInvokeId(stateNodeId, index) {\n  return `${stateNodeId}:invocation[${index}]`;\n}\nfunction resolveReferencedActor(referenced) {\n  return referenced ? 'transition' in referenced ? {\n    src: referenced,\n    input: undefined\n  } : referenced : undefined;\n}\n\nfunction fromCallback(invokeCallback) {\n  return {\n    config: invokeCallback,\n    start: (_state, {\n      self\n    }) => {\n      self.send({\n        type: startSignalType\n      });\n    },\n    transition: (state, event, {\n      self,\n      id,\n      system\n    }) => {\n      if (event.type === startSignalType) {\n        const sendBack = eventForParent => {\n          if (state.canceled) {\n            return;\n          }\n          self._parent?.send(eventForParent);\n        };\n        const receive = newListener => {\n          state.receivers.add(newListener);\n        };\n        state.dispose = invokeCallback({\n          input: state.input,\n          system,\n          self: self,\n          sendBack,\n          receive\n        });\n        if (isPromiseLike(state.dispose)) {\n          state.dispose.then(resolved => {\n            self._parent?.send(doneInvoke(id, resolved));\n            state.canceled = true;\n          }, errorData => {\n            state.canceled = true;\n            self._parent?.send(error(id, errorData));\n          });\n        }\n        return state;\n      }\n      if (event.type === stopSignalType) {\n        state.canceled = true;\n        if (typeof state.dispose === 'function') {\n          state.dispose();\n        }\n        return state;\n      }\n      if (isSignal(event)) {\n        // TODO: unrecognized signal\n        return state;\n      }\n      state.receivers.forEach(receiver => receiver(event));\n      return state;\n    },\n    getInitialState: (_, input) => {\n      return {\n        canceled: false,\n        receivers: new Set(),\n        dispose: undefined,\n        input\n      };\n    },\n    getSnapshot: () => undefined,\n    getPersistedState: ({\n      input,\n      canceled\n    }) => ({\n      input,\n      canceled\n    })\n  };\n}\n\nfunction fromObservable(observableCreator) {\n  const nextEventType = '$$xstate.next';\n  const errorEventType = '$$xstate.error';\n  const completeEventType = '$$xstate.complete';\n  return {\n    config: observableCreator,\n    transition: (state, event, {\n      self,\n      id,\n      defer\n    }) => {\n      if (state.status !== 'active') {\n        return state;\n      }\n      switch (event.type) {\n        case nextEventType:\n          // match the exact timing of events sent by machines\n          // send actions are not executed immediately\n          defer(() => {\n            self._parent?.send({\n              type: `xstate.snapshot.${id}`,\n              data: event.data\n            });\n          });\n          return {\n            ...state,\n            data: event.data\n          };\n        case errorEventType:\n          return {\n            ...state,\n            status: 'error',\n            input: undefined,\n            data: event.data,\n            // TODO: if we keep this as `data` we should reflect this in the type\n            subscription: undefined\n          };\n        case completeEventType:\n          return {\n            ...state,\n            status: 'done',\n            input: undefined,\n            subscription: undefined\n          };\n        case stopSignalType:\n          state.subscription.unsubscribe();\n          return {\n            ...state,\n            status: 'canceled',\n            input: undefined,\n            subscription: undefined\n          };\n        default:\n          return state;\n      }\n    },\n    getInitialState: (_, input) => {\n      return {\n        subscription: undefined,\n        status: 'active',\n        data: undefined,\n        input\n      };\n    },\n    start: (state, {\n      self,\n      system\n    }) => {\n      if (state.status === 'done') {\n        // Do not restart a completed observable\n        return;\n      }\n      state.subscription = observableCreator({\n        input: state.input,\n        system,\n        self\n      }).subscribe({\n        next: value => {\n          self.send({\n            type: nextEventType,\n            data: value\n          });\n        },\n        error: err => {\n          self.send({\n            type: errorEventType,\n            data: err\n          });\n        },\n        complete: () => {\n          self.send({\n            type: completeEventType\n          });\n        }\n      });\n    },\n    getSnapshot: state => state.data,\n    getPersistedState: ({\n      status,\n      data,\n      input\n    }) => ({\n      status,\n      data,\n      input\n    }),\n    getStatus: state => state,\n    restoreState: state => ({\n      ...state,\n      subscription: undefined\n    })\n  };\n}\n\n/**\n * Creates event observable logic that listens to an observable\n * that delivers event objects.\n *\n *\n * @param lazyObservable A function that creates an observable\n * @returns Event observable logic\n */\n\nfunction fromEventObservable(lazyObservable) {\n  const errorEventType = '$$xstate.error';\n  const completeEventType = '$$xstate.complete';\n\n  // TODO: event types\n  return {\n    config: lazyObservable,\n    transition: (state, event) => {\n      if (state.status !== 'active') {\n        return state;\n      }\n      switch (event.type) {\n        case errorEventType:\n          return {\n            ...state,\n            status: 'error',\n            input: undefined,\n            data: event.data,\n            // TODO: if we keep this as `data` we should reflect this in the type\n            subscription: undefined\n          };\n        case completeEventType:\n          return {\n            ...state,\n            status: 'done',\n            input: undefined,\n            subscription: undefined\n          };\n        case stopSignalType:\n          state.subscription.unsubscribe();\n          return {\n            ...state,\n            status: 'canceled',\n            input: undefined,\n            subscription: undefined\n          };\n        default:\n          return state;\n      }\n    },\n    getInitialState: (_, input) => {\n      return {\n        subscription: undefined,\n        status: 'active',\n        data: undefined,\n        input\n      };\n    },\n    start: (state, {\n      self,\n      system\n    }) => {\n      if (state.status === 'done') {\n        // Do not restart a completed observable\n        return;\n      }\n      state.subscription = lazyObservable({\n        input: state.input,\n        system,\n        self\n      }).subscribe({\n        next: value => {\n          self._parent?.send(value);\n        },\n        error: err => {\n          self.send({\n            type: errorEventType,\n            data: err\n          });\n        },\n        complete: () => {\n          self.send({\n            type: completeEventType\n          });\n        }\n      });\n    },\n    getSnapshot: _ => undefined,\n    getPersistedState: ({\n      status,\n      data,\n      input\n    }) => ({\n      status,\n      data,\n      input\n    }),\n    getStatus: state => state,\n    restoreState: state => ({\n      ...state,\n      subscription: undefined\n    })\n  };\n}\n\nconst resolveEventType = '$$xstate.resolve';\nconst rejectEventType = '$$xstate.reject';\nfunction fromPromise(\n// TODO: add types\npromiseCreator) {\n  // TODO: add event types\n  const logic = {\n    config: promiseCreator,\n    transition: (state, event) => {\n      if (state.status !== 'active') {\n        return state;\n      }\n      switch (event.type) {\n        case resolveEventType:\n          return {\n            ...state,\n            status: 'done',\n            data: event.data,\n            input: undefined\n          };\n        case rejectEventType:\n          return {\n            ...state,\n            status: 'error',\n            data: event.data,\n            // TODO: if we keep this as `data` we should reflect this in the type\n            input: undefined\n          };\n        case stopSignalType:\n          return {\n            ...state,\n            status: 'canceled',\n            input: undefined\n          };\n        default:\n          return state;\n      }\n    },\n    start: (state, {\n      self,\n      system\n    }) => {\n      // TODO: determine how to allow customizing this so that promises\n      // can be restarted if necessary\n      if (state.status !== 'active') {\n        return;\n      }\n      const resolvedPromise = Promise.resolve(promiseCreator({\n        input: state.input,\n        system,\n        self\n      }));\n      resolvedPromise.then(response => {\n        // TODO: remove this condition once dead letter queue lands\n        if (self._state.status !== 'active') {\n          return;\n        }\n        self.send({\n          type: resolveEventType,\n          data: response\n        });\n      }, errorData => {\n        // TODO: remove this condition once dead letter queue lands\n        if (self._state.status !== 'active') {\n          return;\n        }\n        self.send({\n          type: rejectEventType,\n          data: errorData\n        });\n      });\n    },\n    getInitialState: (_, input) => {\n      return {\n        status: 'active',\n        data: undefined,\n        input\n      };\n    },\n    getSnapshot: state => state.data,\n    getStatus: state => state,\n    getPersistedState: state => state,\n    restoreState: state => state\n  };\n  return logic;\n}\n\nconst startSignalType = 'xstate.init';\nconst stopSignalType = 'xstate.stop';\nconst startSignal = {\n  type: 'xstate.init'\n};\nconst stopSignal = {\n  type: 'xstate.stop'\n};\n/**\n * An object that expresses the actor logic in reaction to received events,\n * as well as an optionally emitted stream of values.\n *\n * @template TReceived The received event\n * @template TSnapshot The emitted value\n */\n\nfunction isSignal(event) {\n  return event.type === startSignalType || event.type === stopSignalType;\n}\nfunction isActorRef(item) {\n  return !!item && typeof item === 'object' && typeof item.send === 'function';\n}\n\n// TODO: refactor the return type, this could be written in a better way\n// but it's best to avoid unneccessary breaking changes now\n// @deprecated use `interpret(actorLogic)` instead\nfunction toActorRef(actorRefLike) {\n  return {\n    subscribe: () => ({\n      unsubscribe: () => void 0\n    }),\n    id: 'anonymous',\n    sessionId: '',\n    getSnapshot: () => undefined,\n    // TODO: this isn't safe\n    [symbolObservable]: function () {\n      return this;\n    },\n    status: ActorStatus.Running,\n    stop: () => void 0,\n    ...actorRefLike\n  };\n}\nconst emptyLogic = fromTransition(_ => undefined, undefined);\nfunction createEmptyActor() {\n  return createActor(emptyLogic);\n}\n\n/**\n * This function makes sure that unhandled errors are thrown in a separate macrotask.\n * It allows those errors to be detected by global error handlers and reported to bug tracking services\n * without interrupting our own stack of execution.\n *\n * @param err error to be thrown\n */\nfunction reportUnhandledError(err) {\n  setTimeout(() => {\n    throw err;\n  });\n}\n\nfunction createSystem() {\n  let sessionIdCounter = 0;\n  const children = new Map();\n  const keyedActors = new Map();\n  const reverseKeyedActors = new WeakMap();\n  const system = {\n    _bookId: () => `x:${sessionIdCounter++}`,\n    _register: (sessionId, actorRef) => {\n      children.set(sessionId, actorRef);\n      return sessionId;\n    },\n    _unregister: actorRef => {\n      children.delete(actorRef.sessionId);\n      const systemId = reverseKeyedActors.get(actorRef);\n      if (systemId !== undefined) {\n        keyedActors.delete(systemId);\n        reverseKeyedActors.delete(actorRef);\n      }\n    },\n    get: systemId => {\n      return keyedActors.get(systemId);\n    },\n    _set: (systemId, actorRef) => {\n      const existing = keyedActors.get(systemId);\n      if (existing && existing !== actorRef) {\n        throw new Error(`Actor with system ID '${systemId}' already exists.`);\n      }\n      keyedActors.set(systemId, actorRef);\n      reverseKeyedActors.set(actorRef, systemId);\n    }\n  };\n  return system;\n}\n\nlet ActorStatus = /*#__PURE__*/function (ActorStatus) {\n  ActorStatus[ActorStatus[\"NotStarted\"] = 0] = \"NotStarted\";\n  ActorStatus[ActorStatus[\"Running\"] = 1] = \"Running\";\n  ActorStatus[ActorStatus[\"Stopped\"] = 2] = \"Stopped\";\n  return ActorStatus;\n}({});\n\n/**\n * @deprecated Use `ActorStatus` instead.\n */\nconst InterpreterStatus = ActorStatus;\nconst defaultOptions = {\n  deferEvents: true,\n  clock: {\n    setTimeout: (fn, ms) => {\n      return setTimeout(fn, ms);\n    },\n    clearTimeout: id => {\n      return clearTimeout(id);\n    }\n  },\n  logger: console.log.bind(console),\n  devTools: false\n};\nclass Actor {\n  /**\n   * The current internal state of the actor.\n   */\n\n  /**\n   * The clock that is responsible for setting and clearing timeouts, such as delayed events and transitions.\n   */\n\n  /**\n   * The unique identifier for this actor relative to its parent.\n   */\n\n  /**\n   * Whether the service is started.\n   */\n\n  // Actor Ref\n\n  // TODO: add typings for system\n\n  /**\n   * The globally unique process ID for this invocation.\n   */\n\n  /**\n   * Creates a new actor instance for the given logic with the provided options, if any.\n   *\n   * @param logic The logic to create an actor from\n   * @param options Actor options\n   */\n  constructor(logic, options) {\n    this.logic = logic;\n    this._state = void 0;\n    this.clock = void 0;\n    this.options = void 0;\n    this.id = void 0;\n    this.mailbox = new Mailbox(this._process.bind(this));\n    this.delayedEventsMap = {};\n    this.observers = new Set();\n    this.logger = void 0;\n    this.status = ActorStatus.NotStarted;\n    this._parent = void 0;\n    this.ref = void 0;\n    this._actorContext = void 0;\n    this._systemId = void 0;\n    this.sessionId = void 0;\n    this.system = void 0;\n    this._doneEvent = void 0;\n    this.src = void 0;\n    this._deferred = [];\n    const resolvedOptions = {\n      ...defaultOptions,\n      ...options\n    };\n    const {\n      clock,\n      logger,\n      parent,\n      id,\n      systemId\n    } = resolvedOptions;\n    const self = this;\n    this.system = parent?.system ?? createSystem();\n    if (systemId) {\n      this._systemId = systemId;\n      this.system._set(systemId, this);\n    }\n    this.sessionId = this.system._bookId();\n    this.id = id ?? this.sessionId;\n    this.logger = logger;\n    this.clock = clock;\n    this._parent = parent;\n    this.options = resolvedOptions;\n    this.src = resolvedOptions.src;\n    this.ref = this;\n    this._actorContext = {\n      self,\n      id: this.id,\n      sessionId: this.sessionId,\n      logger: this.logger,\n      defer: fn => {\n        this._deferred.push(fn);\n      },\n      system: this.system,\n      stopChild: child => {\n        if (child._parent !== this) {\n          throw new Error(`Cannot stop child actor ${child.id} of ${this.id} because it is not a child`);\n        }\n        child._stop();\n      }\n    };\n\n    // Ensure that the send method is bound to this Actor instance\n    // if destructured\n    this.send = this.send.bind(this);\n    this._initState();\n  }\n  _initState() {\n    this._state = this.options.state ? this.logic.restoreState ? this.logic.restoreState(this.options.state, this._actorContext) : this.options.state : this.logic.getInitialState(this._actorContext, this.options?.input);\n  }\n\n  // array of functions to defer\n\n  update(state) {\n    // Update state\n    this._state = state;\n    const snapshot = this.getSnapshot();\n\n    // Execute deferred effects\n    let deferredFn;\n    while (deferredFn = this._deferred.shift()) {\n      deferredFn();\n    }\n    for (const observer of this.observers) {\n      // TODO: should observers be notified in case of the error?\n      try {\n        observer.next?.(snapshot);\n      } catch (err) {\n        reportUnhandledError(err);\n      }\n    }\n    const status = this.logic.getStatus?.(state);\n    switch (status?.status) {\n      case 'done':\n        this._stopProcedure();\n        this._complete();\n        this._doneEvent = doneInvoke(this.id, status.data);\n        this._parent?.send(this._doneEvent);\n        break;\n      case 'error':\n        this._stopProcedure();\n        this._error(status.data);\n        this._parent?.send(error(this.id, status.data));\n        break;\n    }\n  }\n  subscribe(nextListenerOrObserver, errorListener, completeListener) {\n    const observer = toObserver(nextListenerOrObserver, errorListener, completeListener);\n    if (this.status !== ActorStatus.Stopped) {\n      this.observers.add(observer);\n    } else {\n      try {\n        observer.complete?.();\n      } catch (err) {\n        reportUnhandledError(err);\n      }\n    }\n    return {\n      unsubscribe: () => {\n        this.observers.delete(observer);\n      }\n    };\n  }\n\n  /**\n   * Starts the Actor from the initial state\n   */\n  start() {\n    if (this.status === ActorStatus.Running) {\n      // Do not restart the service if it is already started\n      return this;\n    }\n    this.system._register(this.sessionId, this);\n    if (this._systemId) {\n      this.system._set(this._systemId, this);\n    }\n    this.status = ActorStatus.Running;\n    const status = this.logic.getStatus?.(this._state);\n    switch (status?.status) {\n      case 'done':\n        // a state machine can be \"done\" upon intialization (it could reach a final state using initial microsteps)\n        // we still need to complete observers, flush deferreds etc\n        this.update(this._state);\n      // fallthrough\n      case 'error':\n        // TODO: rethink cleanup of observers, mailbox, etc\n        return this;\n    }\n    if (this.logic.start) {\n      try {\n        this.logic.start(this._state, this._actorContext);\n      } catch (err) {\n        this._stopProcedure();\n        this._error(err);\n        this._parent?.send(error(this.id, err));\n        return this;\n      }\n    }\n\n    // TODO: this notifies all subscribers but usually this is redundant\n    // there is no real change happening here\n    // we need to rethink if this needs to be refactored\n    this.update(this._state);\n    if (this.options.devTools) {\n      this.attachDevTools();\n    }\n    this.mailbox.start();\n    return this;\n  }\n  _process(event) {\n    // TODO: reexamine what happens when an action (or a guard or smth) throws\n    let nextState;\n    let caughtError;\n    try {\n      nextState = this.logic.transition(this._state, event, this._actorContext);\n    } catch (err) {\n      // we wrap it in a box so we can rethrow it later even if falsy value gets caught here\n      caughtError = {\n        err\n      };\n    }\n    if (caughtError) {\n      const {\n        err\n      } = caughtError;\n      this._stopProcedure();\n      this._error(err);\n      this._parent?.send(error(this.id, err));\n      return;\n    }\n    this.update(nextState);\n    if (event.type === stopSignalType) {\n      this._stopProcedure();\n      this._complete();\n    }\n  }\n  _stop() {\n    if (this.status === ActorStatus.Stopped) {\n      return this;\n    }\n    this.mailbox.clear();\n    if (this.status === ActorStatus.NotStarted) {\n      this.status = ActorStatus.Stopped;\n      return this;\n    }\n    this.mailbox.enqueue({\n      type: stopSignalType\n    });\n    return this;\n  }\n\n  /**\n   * Stops the Actor and unsubscribe all listeners.\n   */\n  stop() {\n    if (this._parent) {\n      throw new Error('A non-root actor cannot be stopped directly.');\n    }\n    return this._stop();\n  }\n  _complete() {\n    for (const observer of this.observers) {\n      try {\n        observer.complete?.();\n      } catch (err) {\n        reportUnhandledError(err);\n      }\n    }\n    this.observers.clear();\n  }\n  _error(err) {\n    if (!this.observers.size) {\n      if (!this._parent) {\n        reportUnhandledError(err);\n      }\n      return;\n    }\n    let reportError = false;\n    for (const observer of this.observers) {\n      const errorListener = observer.error;\n      reportError ||= !errorListener;\n      try {\n        errorListener?.(err);\n      } catch (err2) {\n        reportUnhandledError(err2);\n      }\n    }\n    this.observers.clear();\n    if (reportError) {\n      reportUnhandledError(err);\n    }\n  }\n  _stopProcedure() {\n    if (this.status !== ActorStatus.Running) {\n      // Actor already stopped; do nothing\n      return this;\n    }\n\n    // Cancel all delayed events\n    for (const key of Object.keys(this.delayedEventsMap)) {\n      this.clock.clearTimeout(this.delayedEventsMap[key]);\n    }\n\n    // TODO: mailbox.reset\n    this.mailbox.clear();\n    // TODO: after `stop` we must prepare ourselves for receiving events again\n    // events sent *after* stop signal must be queued\n    // it seems like this should be the common behavior for all of our consumers\n    // so perhaps this should be unified somehow for all of them\n    this.mailbox = new Mailbox(this._process.bind(this));\n    this.status = ActorStatus.Stopped;\n    this.system._unregister(this);\n    return this;\n  }\n\n  /**\n   * Sends an event to the running Actor to trigger a transition.\n   *\n   * @param event The event to send\n   */\n  send(event) {\n    if (typeof event === 'string') {\n      throw new Error(`Only event objects may be sent to actors; use .send({ type: \"${event}\" }) instead`);\n    }\n    if (this.status === ActorStatus.Stopped) {\n      return;\n    }\n    if (this.status !== ActorStatus.Running && !this.options.deferEvents) {\n      throw new Error(`Event \"${event.type}\" was sent to uninitialized actor \"${this.id\n      // tslint:disable-next-line:max-line-length\n      }\". Make sure .start() is called for this actor, or set { deferEvents: true } in the actor options.\\nEvent: ${JSON.stringify(event)}`);\n    }\n    this.mailbox.enqueue(event);\n  }\n\n  // TODO: make private (and figure out a way to do this within the machine)\n  delaySend({\n    event,\n    id,\n    delay,\n    to\n  }) {\n    const timerId = this.clock.setTimeout(() => {\n      if (to) {\n        to.send(event);\n      } else {\n        this.send(event);\n      }\n    }, delay);\n\n    // TODO: consider the rehydration story here\n    if (id) {\n      this.delayedEventsMap[id] = timerId;\n    }\n  }\n\n  // TODO: make private (and figure out a way to do this within the machine)\n  cancel(sendId) {\n    this.clock.clearTimeout(this.delayedEventsMap[sendId]);\n    delete this.delayedEventsMap[sendId];\n  }\n  attachDevTools() {\n    const {\n      devTools\n    } = this.options;\n    if (devTools) {\n      const resolvedDevToolsAdapter = typeof devTools === 'function' ? devTools : devToolsAdapter;\n      resolvedDevToolsAdapter(this);\n    }\n  }\n  toJSON() {\n    return {\n      id: this.id\n    };\n  }\n  getPersistedState() {\n    return this.logic.getPersistedState?.(this._state);\n  }\n  [symbolObservable]() {\n    return this;\n  }\n  getSnapshot() {\n    return this.logic.getSnapshot ? this.logic.getSnapshot(this._state) : this._state;\n  }\n}\n\n/**\n * Creates a new `ActorRef` instance for the given machine with the provided options, if any.\n *\n * @param machine The machine to create an actor from\n * @param options `ActorRef` options\n */\n\nfunction createActor(logic, options) {\n  const interpreter = new Actor(logic, options);\n  return interpreter;\n}\n\n/**\n * Creates a new Interpreter instance for the given machine with the provided options, if any.\n *\n * @deprecated Use `createActor` instead\n */\nconst interpret = createActor;\n\n/**\n * @deprecated Use `Actor` instead.\n */\n\nfunction resolve$6(actorContext, state, actionArgs, {\n  id,\n  systemId,\n  src,\n  input\n}) {\n  const referenced = resolveReferencedActor(state.machine.implementations.actors[src]);\n  let actorRef;\n  if (referenced) {\n    // TODO: inline `input: undefined` should win over the referenced one\n    const configuredInput = input || referenced.input;\n    actorRef = createActor(referenced.src, {\n      id,\n      src,\n      parent: actorContext?.self,\n      systemId,\n      input: typeof configuredInput === 'function' ? configuredInput({\n        context: state.context,\n        event: actionArgs.event,\n        self: actorContext?.self\n      }) : configuredInput\n    });\n  }\n  return [cloneState(state, {\n    children: {\n      ...state.children,\n      [id]: actorRef\n    }\n  }), {\n    id,\n    actorRef\n  }];\n}\nfunction execute$3(actorContext, {\n  id,\n  actorRef\n}) {\n  if (!actorRef) {\n    return;\n  }\n  actorContext.defer(() => {\n    if (actorRef.status === ActorStatus.Stopped) {\n      return;\n    }\n    try {\n      actorRef.start?.();\n    } catch (err) {\n      actorContext.self.send(error(id, err));\n      return;\n    }\n  });\n}\nfunction invoke({\n  id,\n  systemId,\n  src,\n  input\n}) {\n  function invoke(_) {\n  }\n  invoke.type = 'xstate.invoke';\n  invoke.id = id;\n  invoke.systemId = systemId;\n  invoke.src = src;\n  invoke.input = input;\n  invoke.resolve = resolve$6;\n  invoke.execute = execute$3;\n  return invoke;\n}\n\nfunction checkStateIn(state, _, {\n  stateValue\n}) {\n  if (typeof stateValue === 'string' && isStateId(stateValue)) {\n    return state.configuration.some(sn => sn.id === stateValue.slice(1));\n  }\n  return state.matches(stateValue);\n}\nfunction stateIn(stateValue) {\n  function stateIn(_) {\n    return false;\n  }\n  stateIn.check = checkStateIn;\n  stateIn.stateValue = stateValue;\n  return stateIn;\n}\nfunction checkNot(state, {\n  context,\n  event\n}, {\n  guards\n}) {\n  return !evaluateGuard(guards[0], context, event, state);\n}\nfunction not(guard) {\n  function not(_) {\n    return false;\n  }\n  not.check = checkNot;\n  not.guards = [guard];\n  return not;\n}\nfunction checkAnd(state, {\n  context,\n  event\n}, {\n  guards\n}) {\n  return guards.every(guard => evaluateGuard(guard, context, event, state));\n}\nfunction and(guards) {\n  function and(_) {\n    return false;\n  }\n  and.check = checkAnd;\n  and.guards = guards;\n  return and;\n}\nfunction checkOr(state, {\n  context,\n  event\n}, {\n  guards\n}) {\n  return guards.some(guard => evaluateGuard(guard, context, event, state));\n}\nfunction or(guards) {\n  function or(_) {\n    return false;\n  }\n  or.check = checkOr;\n  or.guards = guards;\n  return or;\n}\n\n// TODO: throw on cycles (depth check should be enough)\nfunction evaluateGuard(guard, context, event, state) {\n  const {\n    machine\n  } = state;\n  const isInline = typeof guard === 'function';\n  const resolved = isInline ? guard : machine.implementations.guards[typeof guard === 'string' ? guard : guard.type];\n  if (!isInline && !resolved) {\n    throw new Error(`Guard '${typeof guard === 'string' ? guard : guard.type}' is not implemented.'.`);\n  }\n  if (typeof resolved !== 'function') {\n    return evaluateGuard(resolved, context, event, state);\n  }\n  const guardArgs = {\n    context,\n    event,\n    guard: isInline ? undefined : typeof guard === 'string' ? {\n      type: guard\n    } : guard\n  };\n  if (!('check' in resolved)) {\n    // the existing type of `.guards` assumes non-nullable `TExpressionGuard`\n    // inline guards expect `TExpressionGuard` to be set to `undefined`\n    // it's fine to cast this here, our logic makes sure that we call those 2 \"variants\" correctly\n    return resolved(guardArgs);\n  }\n  const builtinGuard = resolved;\n  return builtinGuard.check(state, guardArgs, resolved // this holds all params\n  );\n}\n\nfunction getOutput(configuration, context, event, self) {\n  const machine = configuration[0].machine;\n  const finalChildStateNode = configuration.find(stateNode => stateNode.type === 'final' && stateNode.parent === machine.root);\n  return finalChildStateNode && finalChildStateNode.output ? mapContext(finalChildStateNode.output, context, event, self) : undefined;\n}\nconst isAtomicStateNode = stateNode => stateNode.type === 'atomic' || stateNode.type === 'final';\nfunction getChildren(stateNode) {\n  return Object.values(stateNode.states).filter(sn => sn.type !== 'history');\n}\nfunction getProperAncestors(stateNode, toStateNode) {\n  const ancestors = [];\n\n  // add all ancestors\n  let m = stateNode.parent;\n  while (m && m !== toStateNode) {\n    ancestors.push(m);\n    m = m.parent;\n  }\n  return ancestors;\n}\nfunction getConfiguration(stateNodes) {\n  const configuration = new Set(stateNodes);\n  const configurationSet = new Set(stateNodes);\n  const adjList = getAdjList(configurationSet);\n\n  // add descendants\n  for (const s of configuration) {\n    // if previously active, add existing child nodes\n    if (s.type === 'compound' && (!adjList.get(s) || !adjList.get(s).length)) {\n      getInitialStateNodes(s).forEach(sn => configurationSet.add(sn));\n    } else {\n      if (s.type === 'parallel') {\n        for (const child of getChildren(s)) {\n          if (child.type === 'history') {\n            continue;\n          }\n          if (!configurationSet.has(child)) {\n            for (const initialStateNode of getInitialStateNodes(child)) {\n              configurationSet.add(initialStateNode);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // add all ancestors\n  for (const s of configurationSet) {\n    let m = s.parent;\n    while (m) {\n      configurationSet.add(m);\n      m = m.parent;\n    }\n  }\n  return configurationSet;\n}\nfunction getValueFromAdj(baseNode, adjList) {\n  const childStateNodes = adjList.get(baseNode);\n  if (!childStateNodes) {\n    return {}; // todo: fix?\n  }\n\n  if (baseNode.type === 'compound') {\n    const childStateNode = childStateNodes[0];\n    if (childStateNode) {\n      if (isAtomicStateNode(childStateNode)) {\n        return childStateNode.key;\n      }\n    } else {\n      return {};\n    }\n  }\n  const stateValue = {};\n  for (const childStateNode of childStateNodes) {\n    stateValue[childStateNode.key] = getValueFromAdj(childStateNode, adjList);\n  }\n  return stateValue;\n}\nfunction getAdjList(configuration) {\n  const adjList = new Map();\n  for (const s of configuration) {\n    if (!adjList.has(s)) {\n      adjList.set(s, []);\n    }\n    if (s.parent) {\n      if (!adjList.has(s.parent)) {\n        adjList.set(s.parent, []);\n      }\n      adjList.get(s.parent).push(s);\n    }\n  }\n  return adjList;\n}\nfunction getStateValue(rootNode, configuration) {\n  const config = getConfiguration(configuration);\n  return getValueFromAdj(rootNode, getAdjList(config));\n}\nfunction isInFinalState(configuration, stateNode = configuration[0].machine.root) {\n  if (stateNode.type === 'compound') {\n    return getChildren(stateNode).some(s => s.type === 'final' && configuration.includes(s));\n  }\n  if (stateNode.type === 'parallel') {\n    return getChildren(stateNode).every(sn => isInFinalState(configuration, sn));\n  }\n  return false;\n}\nconst isStateId = str => str[0] === STATE_IDENTIFIER;\nfunction getCandidates(stateNode, receivedEventType) {\n  const candidates = stateNode.transitions.get(receivedEventType) || [...stateNode.transitions.keys()].filter(descriptor => {\n    // check if transition is a wildcard transition,\n    // which matches any non-transient events\n    if (descriptor === WILDCARD) {\n      return true;\n    }\n    if (!descriptor.endsWith('.*')) {\n      return false;\n    }\n    const partialEventTokens = descriptor.split('.');\n    const eventTokens = receivedEventType.split('.');\n    for (let tokenIndex = 0; tokenIndex < partialEventTokens.length; tokenIndex++) {\n      const partialEventToken = partialEventTokens[tokenIndex];\n      const eventToken = eventTokens[tokenIndex];\n      if (partialEventToken === '*') {\n        const isLastToken = tokenIndex === partialEventTokens.length - 1;\n        return isLastToken;\n      }\n      if (partialEventToken !== eventToken) {\n        return false;\n      }\n    }\n    return true;\n  }).sort((a, b) => b.length - a.length).flatMap(key => stateNode.transitions.get(key));\n  return candidates;\n}\n\n/**\n * All delayed transitions from the config.\n */\nfunction getDelayedTransitions(stateNode) {\n  const afterConfig = stateNode.config.after;\n  if (!afterConfig) {\n    return [];\n  }\n  const mutateEntryExit = (delay, i) => {\n    const delayRef = typeof delay === 'function' ? `${stateNode.id}:delay[${i}]` : delay;\n    const eventType = after(delayRef, stateNode.id);\n    stateNode.entry.push(raise({\n      type: eventType\n    }, {\n      id: eventType,\n      delay\n    }));\n    stateNode.exit.push(cancel(eventType));\n    return eventType;\n  };\n  const delayedTransitions = isArray(afterConfig) ? afterConfig.map((transition, i) => {\n    const eventType = mutateEntryExit(transition.delay, i);\n    return {\n      ...transition,\n      event: eventType\n    };\n  }) : Object.keys(afterConfig).flatMap((delay, i) => {\n    const configTransition = afterConfig[delay];\n    const resolvedTransition = typeof configTransition === 'string' ? {\n      target: configTransition\n    } : configTransition;\n    const resolvedDelay = !isNaN(+delay) ? +delay : delay;\n    const eventType = mutateEntryExit(resolvedDelay, i);\n    return toArray(resolvedTransition).map(transition => ({\n      ...transition,\n      event: eventType,\n      delay: resolvedDelay\n    }));\n  });\n  return delayedTransitions.map(delayedTransition => {\n    const {\n      delay\n    } = delayedTransition;\n    return {\n      ...formatTransition(stateNode, delayedTransition.event, delayedTransition),\n      delay\n    };\n  });\n}\nfunction formatTransition(stateNode, descriptor, transitionConfig) {\n  const normalizedTarget = normalizeTarget(transitionConfig.target);\n  const reenter = transitionConfig.reenter ?? false;\n  const target = resolveTarget(stateNode, normalizedTarget);\n  const transition = {\n    ...transitionConfig,\n    actions: toArray(transitionConfig.actions),\n    guard: transitionConfig.guard,\n    target,\n    source: stateNode,\n    reenter,\n    eventType: descriptor,\n    toJSON: () => ({\n      ...transition,\n      source: `#${stateNode.id}`,\n      target: target ? target.map(t => `#${t.id}`) : undefined\n    })\n  };\n  return transition;\n}\nfunction formatTransitions(stateNode) {\n  const transitions = new Map();\n  if (stateNode.config.on) {\n    for (const descriptor of Object.keys(stateNode.config.on)) {\n      if (descriptor === NULL_EVENT) {\n        throw new Error('Null events (\"\") cannot be specified as a transition key. Use `always: { ... }` instead.');\n      }\n      const transitionsConfig = stateNode.config.on[descriptor];\n      transitions.set(descriptor, toTransitionConfigArray(transitionsConfig).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n  }\n  if (stateNode.config.onDone) {\n    const descriptor = String(done(stateNode.id));\n    transitions.set(descriptor, toTransitionConfigArray(stateNode.config.onDone).map(t => formatTransition(stateNode, descriptor, t)));\n  }\n  for (const invokeDef of stateNode.invoke) {\n    if (invokeDef.onDone) {\n      const descriptor = `done.invoke.${invokeDef.id}`;\n      transitions.set(descriptor, toTransitionConfigArray(invokeDef.onDone).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n    if (invokeDef.onError) {\n      const descriptor = `error.platform.${invokeDef.id}`;\n      transitions.set(descriptor, toTransitionConfigArray(invokeDef.onError).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n    if (invokeDef.onSnapshot) {\n      const descriptor = `xstate.snapshot.${invokeDef.id}`;\n      transitions.set(descriptor, toTransitionConfigArray(invokeDef.onSnapshot).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n  }\n  for (const delayedTransition of stateNode.after) {\n    let existing = transitions.get(delayedTransition.eventType);\n    if (!existing) {\n      existing = [];\n      transitions.set(delayedTransition.eventType, existing);\n    }\n    existing.push(delayedTransition);\n  }\n  return transitions;\n}\nfunction formatInitialTransition(stateNode, _target) {\n  if (typeof _target === 'string' || isArray(_target)) {\n    const targets = toArray(_target).map(t => {\n      // Resolve state string keys (which represent children)\n      // to their state node\n      const descStateNode = typeof t === 'string' ? isStateId(t) ? stateNode.machine.getStateNodeById(t) : stateNode.states[t] : t;\n      if (!descStateNode) {\n        throw new Error(`Initial state node \"${t}\" not found on parent state node #${stateNode.id}`);\n      }\n      if (!isDescendant(descStateNode, stateNode)) {\n        throw new Error(`Invalid initial target: state node #${descStateNode.id} is not a descendant of #${stateNode.id}`);\n      }\n      return descStateNode;\n    });\n    const resolvedTarget = resolveTarget(stateNode, targets);\n    const transition = {\n      source: stateNode,\n      actions: [],\n      eventType: null,\n      reenter: false,\n      target: resolvedTarget,\n      toJSON: () => ({\n        ...transition,\n        source: `#${stateNode.id}`,\n        target: resolvedTarget ? resolvedTarget.map(t => `#${t.id}`) : undefined\n      })\n    };\n    return transition;\n  }\n  return formatTransition(stateNode, '__INITIAL__', {\n    target: toArray(_target.target).map(t => {\n      if (typeof t === 'string') {\n        return isStateId(t) ? t : `${STATE_DELIMITER}${t}`;\n      }\n      return t;\n    }),\n    actions: _target.actions\n  });\n}\nfunction resolveTarget(stateNode, targets) {\n  if (targets === undefined) {\n    // an undefined target signals that the state node should not transition from that state when receiving that event\n    return undefined;\n  }\n  return targets.map(target => {\n    if (typeof target !== 'string') {\n      return target;\n    }\n    if (isStateId(target)) {\n      return stateNode.machine.getStateNodeById(target);\n    }\n    const isInternalTarget = target[0] === STATE_DELIMITER;\n    // If internal target is defined on machine,\n    // do not include machine key on target\n    if (isInternalTarget && !stateNode.parent) {\n      return getStateNodeByPath(stateNode, target.slice(1));\n    }\n    const resolvedTarget = isInternalTarget ? stateNode.key + target : target;\n    if (stateNode.parent) {\n      try {\n        const targetStateNode = getStateNodeByPath(stateNode.parent, resolvedTarget);\n        return targetStateNode;\n      } catch (err) {\n        throw new Error(`Invalid transition definition for state node '${stateNode.id}':\\n${err.message}`);\n      }\n    } else {\n      throw new Error(`Invalid target: \"${target}\" is not a valid target from the root node. Did you mean \".${target}\"?`);\n    }\n  });\n}\nfunction resolveHistoryTarget(stateNode) {\n  const normalizedTarget = normalizeTarget(stateNode.target);\n  if (!normalizedTarget) {\n    return stateNode.parent.initial.target;\n  }\n  return normalizedTarget.map(t => typeof t === 'string' ? getStateNodeByPath(stateNode.parent, t) : t);\n}\nfunction isHistoryNode(stateNode) {\n  return stateNode.type === 'history';\n}\nfunction getInitialStateNodes(stateNode) {\n  const set = new Set();\n  function iter(descStateNode) {\n    if (set.has(descStateNode)) {\n      return;\n    }\n    set.add(descStateNode);\n    if (descStateNode.type === 'compound') {\n      for (const targetStateNode of descStateNode.initial.target) {\n        for (const a of getProperAncestors(targetStateNode, stateNode)) {\n          set.add(a);\n        }\n        iter(targetStateNode);\n      }\n    } else if (descStateNode.type === 'parallel') {\n      for (const child of getChildren(descStateNode)) {\n        iter(child);\n      }\n    }\n  }\n  iter(stateNode);\n  return [...set];\n}\n/**\n * Returns the child state node from its relative `stateKey`, or throws.\n */\nfunction getStateNode(stateNode, stateKey) {\n  if (isStateId(stateKey)) {\n    return stateNode.machine.getStateNodeById(stateKey);\n  }\n  if (!stateNode.states) {\n    throw new Error(`Unable to retrieve child state '${stateKey}' from '${stateNode.id}'; no child states exist.`);\n  }\n  const result = stateNode.states[stateKey];\n  if (!result) {\n    throw new Error(`Child state '${stateKey}' does not exist on '${stateNode.id}'`);\n  }\n  return result;\n}\n\n/**\n * Returns the relative state node from the given `statePath`, or throws.\n *\n * @param statePath The string or string array relative path to the state node.\n */\nfunction getStateNodeByPath(stateNode, statePath) {\n  if (typeof statePath === 'string' && isStateId(statePath)) {\n    try {\n      return stateNode.machine.getStateNodeById(statePath);\n    } catch (e) {\n      // try individual paths\n      // throw e;\n    }\n  }\n  const arrayStatePath = toStatePath(statePath).slice();\n  let currentStateNode = stateNode;\n  while (arrayStatePath.length) {\n    const key = arrayStatePath.shift();\n    if (!key.length) {\n      break;\n    }\n    currentStateNode = getStateNode(currentStateNode, key);\n  }\n  return currentStateNode;\n}\n\n/**\n * Returns the state nodes represented by the current state value.\n *\n * @param state The state value or State instance\n */\nfunction getStateNodes(stateNode, state) {\n  const stateValue = state instanceof State ? state.value : toStateValue(state);\n  if (typeof stateValue === 'string') {\n    return [stateNode, stateNode.states[stateValue]];\n  }\n  const childStateKeys = Object.keys(stateValue);\n  const childStateNodes = childStateKeys.map(subStateKey => getStateNode(stateNode, subStateKey)).filter(Boolean);\n  return [stateNode.machine.root, stateNode].concat(childStateNodes, childStateKeys.reduce((allSubStateNodes, subStateKey) => {\n    const subStateNode = getStateNode(stateNode, subStateKey);\n    if (!subStateNode) {\n      return allSubStateNodes;\n    }\n    const subStateNodes = getStateNodes(subStateNode, stateValue[subStateKey]);\n    return allSubStateNodes.concat(subStateNodes);\n  }, []));\n}\nfunction transitionAtomicNode(stateNode, stateValue, state, event) {\n  const childStateNode = getStateNode(stateNode, stateValue);\n  const next = childStateNode.next(state, event);\n  if (!next || !next.length) {\n    return stateNode.next(state, event);\n  }\n  return next;\n}\nfunction transitionCompoundNode(stateNode, stateValue, state, event) {\n  const subStateKeys = Object.keys(stateValue);\n  const childStateNode = getStateNode(stateNode, subStateKeys[0]);\n  const next = transitionNode(childStateNode, stateValue[subStateKeys[0]], state, event);\n  if (!next || !next.length) {\n    return stateNode.next(state, event);\n  }\n  return next;\n}\nfunction transitionParallelNode(stateNode, stateValue, state, event) {\n  const allInnerTransitions = [];\n  for (const subStateKey of Object.keys(stateValue)) {\n    const subStateValue = stateValue[subStateKey];\n    if (!subStateValue) {\n      continue;\n    }\n    const subStateNode = getStateNode(stateNode, subStateKey);\n    const innerTransitions = transitionNode(subStateNode, subStateValue, state, event);\n    if (innerTransitions) {\n      allInnerTransitions.push(...innerTransitions);\n    }\n  }\n  if (!allInnerTransitions.length) {\n    return stateNode.next(state, event);\n  }\n  return allInnerTransitions;\n}\nfunction transitionNode(stateNode, stateValue, state, event) {\n  // leaf node\n  if (typeof stateValue === 'string') {\n    return transitionAtomicNode(stateNode, stateValue, state, event);\n  }\n\n  // compound node\n  if (Object.keys(stateValue).length === 1) {\n    return transitionCompoundNode(stateNode, stateValue, state, event);\n  }\n\n  // parallel node\n  return transitionParallelNode(stateNode, stateValue, state, event);\n}\nfunction getHistoryNodes(stateNode) {\n  return Object.keys(stateNode.states).map(key => stateNode.states[key]).filter(sn => sn.type === 'history');\n}\nfunction isDescendant(childStateNode, parentStateNode) {\n  let marker = childStateNode;\n  while (marker.parent && marker.parent !== parentStateNode) {\n    marker = marker.parent;\n  }\n  return marker.parent === parentStateNode;\n}\nfunction getPathFromRootToNode(stateNode) {\n  const path = [];\n  let marker = stateNode.parent;\n  while (marker) {\n    path.unshift(marker);\n    marker = marker.parent;\n  }\n  return path;\n}\nfunction hasIntersection(s1, s2) {\n  const set1 = new Set(s1);\n  const set2 = new Set(s2);\n  for (const item of set1) {\n    if (set2.has(item)) {\n      return true;\n    }\n  }\n  for (const item of set2) {\n    if (set1.has(item)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction removeConflictingTransitions(enabledTransitions, configuration, historyValue) {\n  const filteredTransitions = new Set();\n  for (const t1 of enabledTransitions) {\n    let t1Preempted = false;\n    const transitionsToRemove = new Set();\n    for (const t2 of filteredTransitions) {\n      if (hasIntersection(computeExitSet([t1], configuration, historyValue), computeExitSet([t2], configuration, historyValue))) {\n        if (isDescendant(t1.source, t2.source)) {\n          transitionsToRemove.add(t2);\n        } else {\n          t1Preempted = true;\n          break;\n        }\n      }\n    }\n    if (!t1Preempted) {\n      for (const t3 of transitionsToRemove) {\n        filteredTransitions.delete(t3);\n      }\n      filteredTransitions.add(t1);\n    }\n  }\n  return Array.from(filteredTransitions);\n}\nfunction findLCCA(stateNodes) {\n  const [head] = stateNodes;\n  let current = getPathFromRootToNode(head);\n  let candidates = [];\n  for (const stateNode of stateNodes) {\n    const path = getPathFromRootToNode(stateNode);\n    candidates = current.filter(sn => path.includes(sn));\n    current = candidates;\n    candidates = [];\n  }\n  return current[current.length - 1];\n}\nfunction getEffectiveTargetStates(transition, historyValue) {\n  if (!transition.target) {\n    return [];\n  }\n  const targets = new Set();\n  for (const targetNode of transition.target) {\n    if (isHistoryNode(targetNode)) {\n      if (historyValue[targetNode.id]) {\n        for (const node of historyValue[targetNode.id]) {\n          targets.add(node);\n        }\n      } else {\n        for (const node of getEffectiveTargetStates({\n          target: resolveHistoryTarget(targetNode)\n        }, historyValue)) {\n          targets.add(node);\n        }\n      }\n    } else {\n      targets.add(targetNode);\n    }\n  }\n  return [...targets];\n}\nfunction getTransitionDomain(transition, historyValue) {\n  const targetStates = getEffectiveTargetStates(transition, historyValue);\n  if (!targetStates) {\n    return null;\n  }\n  if (!transition.reenter && transition.source.type !== 'parallel' && targetStates.every(targetStateNode => isDescendant(targetStateNode, transition.source))) {\n    return transition.source;\n  }\n  const lcca = findLCCA(targetStates.concat(transition.source));\n  return lcca;\n}\nfunction computeExitSet(transitions, configuration, historyValue) {\n  const statesToExit = new Set();\n  for (const t of transitions) {\n    if (t.target?.length) {\n      const domain = getTransitionDomain(t, historyValue);\n      for (const stateNode of configuration) {\n        if (isDescendant(stateNode, domain)) {\n          statesToExit.add(stateNode);\n        }\n      }\n    }\n  }\n  return [...statesToExit];\n}\n\n/**\n * https://www.w3.org/TR/scxml/#microstepProcedure\n *\n * @private\n * @param transitions\n * @param currentState\n * @param mutConfiguration\n */\n\nfunction microstep(transitions, currentState, actorCtx, event, isInitial) {\n  const mutConfiguration = new Set(currentState.configuration);\n  if (!transitions.length) {\n    return currentState;\n  }\n  const microstate = microstepProcedure(transitions, currentState, mutConfiguration, event, actorCtx, isInitial);\n  return cloneState(microstate, {\n    value: {} // TODO: make optional\n  });\n}\n\nfunction microstepProcedure(transitions, currentState, mutConfiguration, event, actorCtx, isInitial) {\n  const actions = [];\n  const historyValue = {\n    ...currentState.historyValue\n  };\n  const filteredTransitions = removeConflictingTransitions(transitions, mutConfiguration, historyValue);\n  const internalQueue = [...currentState._internalQueue];\n\n  // Exit states\n  if (!isInitial) {\n    exitStates(filteredTransitions, mutConfiguration, historyValue, actions);\n  }\n\n  // Execute transition content\n  actions.push(...filteredTransitions.flatMap(t => t.actions));\n\n  // Enter states\n  enterStates(event, filteredTransitions, mutConfiguration, actions, internalQueue, currentState, historyValue, isInitial, actorCtx);\n  const nextConfiguration = [...mutConfiguration];\n  const done = isInFinalState(nextConfiguration);\n  if (done) {\n    const finalActions = nextConfiguration.sort((a, b) => b.order - a.order).flatMap(state => state.exit);\n    actions.push(...finalActions);\n  }\n  try {\n    const nextState = resolveActionsAndContext(actions, event, currentState, actorCtx);\n    const output = done ? getOutput(nextConfiguration, nextState.context, event, actorCtx.self) : undefined;\n    internalQueue.push(...nextState._internalQueue);\n    return cloneState(currentState, {\n      configuration: nextConfiguration,\n      historyValue,\n      _internalQueue: internalQueue,\n      context: nextState.context,\n      done,\n      output,\n      children: nextState.children\n    });\n  } catch (e) {\n    // TODO: Refactor this once proper error handling is implemented.\n    // See https://github.com/statelyai/rfcs/pull/4\n    throw e;\n  }\n}\nfunction enterStates(event, filteredTransitions, mutConfiguration, actions, internalQueue, currentState, historyValue, isInitial, actorContext) {\n  const statesToEnter = new Set();\n  const statesForDefaultEntry = new Set();\n  computeEntrySet(filteredTransitions, historyValue, statesForDefaultEntry, statesToEnter);\n\n  // In the initial state, the root state node is \"entered\".\n  if (isInitial) {\n    statesForDefaultEntry.add(currentState.machine.root);\n  }\n  for (const stateNodeToEnter of [...statesToEnter].sort((a, b) => a.order - b.order)) {\n    mutConfiguration.add(stateNodeToEnter);\n    for (const invokeDef of stateNodeToEnter.invoke) {\n      actions.push(invoke(invokeDef));\n    }\n\n    // Add entry actions\n    actions.push(...stateNodeToEnter.entry);\n    if (statesForDefaultEntry.has(stateNodeToEnter)) {\n      for (const stateNode of statesForDefaultEntry) {\n        const initialActions = stateNode.initial.actions;\n        actions.push(...initialActions);\n      }\n    }\n    if (stateNodeToEnter.type === 'final') {\n      const parent = stateNodeToEnter.parent;\n      if (!parent.parent) {\n        continue;\n      }\n      internalQueue.push(done(parent.id, stateNodeToEnter.output ? mapContext(stateNodeToEnter.output, currentState.context, event, actorContext.self) : undefined));\n      if (parent.parent) {\n        const grandparent = parent.parent;\n        if (grandparent.type === 'parallel') {\n          if (getChildren(grandparent).every(parentNode => isInFinalState([...mutConfiguration], parentNode))) {\n            internalQueue.push(done(grandparent.id));\n          }\n        }\n      }\n    }\n  }\n}\nfunction computeEntrySet(transitions, historyValue, statesForDefaultEntry, statesToEnter) {\n  for (const t of transitions) {\n    for (const s of t.target || []) {\n      addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);\n    }\n    const ancestor = getTransitionDomain(t, historyValue);\n    const targetStates = getEffectiveTargetStates(t, historyValue);\n    for (const s of targetStates) {\n      addAncestorStatesToEnter(s, ancestor, statesToEnter, historyValue, statesForDefaultEntry);\n    }\n  }\n}\nfunction addDescendantStatesToEnter(stateNode, historyValue, statesForDefaultEntry, statesToEnter) {\n  if (isHistoryNode(stateNode)) {\n    if (historyValue[stateNode.id]) {\n      const historyStateNodes = historyValue[stateNode.id];\n      for (const s of historyStateNodes) {\n        addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);\n      }\n      for (const s of historyStateNodes) {\n        addAncestorStatesToEnter(s, stateNode.parent, statesToEnter, historyValue, statesForDefaultEntry);\n        for (const stateForDefaultEntry of statesForDefaultEntry) {\n          statesForDefaultEntry.add(stateForDefaultEntry);\n        }\n      }\n    } else {\n      const targets = resolveHistoryTarget(stateNode);\n      for (const s of targets) {\n        addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);\n      }\n      for (const s of targets) {\n        addAncestorStatesToEnter(s, stateNode, statesToEnter, historyValue, statesForDefaultEntry);\n        for (const stateForDefaultEntry of statesForDefaultEntry) {\n          statesForDefaultEntry.add(stateForDefaultEntry);\n        }\n      }\n    }\n  } else {\n    statesToEnter.add(stateNode);\n    if (stateNode.type === 'compound') {\n      statesForDefaultEntry.add(stateNode);\n      const initialStates = stateNode.initial.target;\n      for (const initialState of initialStates) {\n        addDescendantStatesToEnter(initialState, historyValue, statesForDefaultEntry, statesToEnter);\n      }\n      for (const initialState of initialStates) {\n        addAncestorStatesToEnter(initialState, stateNode, statesToEnter, historyValue, statesForDefaultEntry);\n      }\n    } else {\n      if (stateNode.type === 'parallel') {\n        for (const child of getChildren(stateNode).filter(sn => !isHistoryNode(sn))) {\n          if (![...statesToEnter].some(s => isDescendant(s, child))) {\n            addDescendantStatesToEnter(child, historyValue, statesForDefaultEntry, statesToEnter);\n          }\n        }\n      }\n    }\n  }\n}\nfunction addAncestorStatesToEnter(stateNode, toStateNode, statesToEnter, historyValue, statesForDefaultEntry) {\n  const properAncestors = getProperAncestors(stateNode, toStateNode);\n  for (const anc of properAncestors) {\n    statesToEnter.add(anc);\n    if (anc.type === 'parallel') {\n      for (const child of getChildren(anc).filter(sn => !isHistoryNode(sn))) {\n        if (![...statesToEnter].some(s => isDescendant(s, child))) {\n          addDescendantStatesToEnter(child, historyValue, statesForDefaultEntry, statesToEnter);\n        }\n      }\n    }\n  }\n}\nfunction exitStates(transitions, mutConfiguration, historyValue, actions) {\n  const statesToExit = computeExitSet(transitions, mutConfiguration, historyValue);\n  statesToExit.sort((a, b) => b.order - a.order);\n\n  // From SCXML algorithm: https://www.w3.org/TR/scxml/#exitStates\n  for (const exitStateNode of statesToExit) {\n    for (const historyNode of getHistoryNodes(exitStateNode)) {\n      let predicate;\n      if (historyNode.history === 'deep') {\n        predicate = sn => isAtomicStateNode(sn) && isDescendant(sn, exitStateNode);\n      } else {\n        predicate = sn => {\n          return sn.parent === exitStateNode;\n        };\n      }\n      historyValue[historyNode.id] = Array.from(mutConfiguration).filter(predicate);\n    }\n  }\n  for (const s of statesToExit) {\n    actions.push(...s.exit, ...s.invoke.map(def => stop(def.id)));\n    mutConfiguration.delete(s);\n  }\n}\nfunction resolveActionsAndContext(actions, event, currentState, actorCtx) {\n  const {\n    machine\n  } = currentState;\n  // TODO: this `cloneState` is really just a hack to prevent infinite loops\n  // we need to take another look at how internal queue is managed\n  let intermediateState = cloneState(currentState, {\n    _internalQueue: []\n  });\n  for (const action of actions) {\n    const isInline = typeof action === 'function';\n    const resolved = isInline ? action :\n    // the existing type of `.actions` assumes non-nullable `TExpressionAction`\n    // it's fine to cast this here to get a common type and lack of errors in the rest of the code\n    // our logic below makes sure that we call those 2 \"variants\" correctly\n    machine.implementations.actions[typeof action === 'string' ? action : action.type];\n    if (!resolved) {\n      continue;\n    }\n    const actionArgs = {\n      context: intermediateState.context,\n      event,\n      self: actorCtx?.self,\n      system: actorCtx?.system,\n      action: isInline ? undefined : typeof action === 'string' ? {\n        type: action\n      } : action\n    };\n    if (!('resolve' in resolved)) {\n      if (actorCtx?.self.status === ActorStatus.Running) {\n        resolved(actionArgs);\n      } else {\n        actorCtx?.defer(() => resolved(actionArgs));\n      }\n      continue;\n    }\n    const builtinAction = resolved;\n    const [nextState, params, actions] = builtinAction.resolve(actorCtx, intermediateState, actionArgs, resolved // this holds all params\n    );\n\n    intermediateState = nextState;\n    if ('execute' in resolved) {\n      if (actorCtx?.self.status === ActorStatus.Running) {\n        builtinAction.execute(actorCtx, params);\n      } else {\n        actorCtx?.defer(builtinAction.execute.bind(null, actorCtx, params));\n      }\n    }\n    if (actions) {\n      intermediateState = resolveActionsAndContext(actions, event, intermediateState, actorCtx);\n    }\n  }\n  return intermediateState;\n}\nfunction macrostep(state, event, actorCtx) {\n  let nextState = state;\n  const states = [];\n\n  // Handle stop event\n  if (event.type === stopSignalType) {\n    nextState = stopStep(event, nextState, actorCtx);\n    states.push(nextState);\n    return {\n      state: nextState,\n      microstates: states\n    };\n  }\n  let nextEvent = event;\n\n  // Assume the state is at rest (no raised events)\n  // Determine the next state based on the next microstep\n  if (nextEvent.type !== INIT_TYPE) {\n    const transitions = selectTransitions(nextEvent, nextState);\n    nextState = microstep(transitions, state, actorCtx, nextEvent, false);\n    states.push(nextState);\n  }\n  while (!nextState.done) {\n    let enabledTransitions = selectEventlessTransitions(nextState, nextEvent);\n    if (!enabledTransitions.length) {\n      if (!nextState._internalQueue.length) {\n        break;\n      } else {\n        nextEvent = nextState._internalQueue[0];\n        const transitions = selectTransitions(nextEvent, nextState);\n        nextState = microstep(transitions, nextState, actorCtx, nextEvent, false);\n        nextState._internalQueue.shift();\n        states.push(nextState);\n      }\n    } else {\n      nextState = microstep(enabledTransitions, nextState, actorCtx, nextEvent, false);\n      states.push(nextState);\n    }\n  }\n  if (nextState.done) {\n    // Perform the stop step to ensure that child actors are stopped\n    stopStep(nextEvent, nextState, actorCtx);\n  }\n  return {\n    state: nextState,\n    microstates: states\n  };\n}\nfunction stopStep(event, nextState, actorCtx) {\n  const actions = [];\n  for (const stateNode of nextState.configuration.sort((a, b) => b.order - a.order)) {\n    actions.push(...stateNode.exit);\n  }\n  for (const child of Object.values(nextState.children)) {\n    actions.push(stop(child));\n  }\n  return resolveActionsAndContext(actions, event, nextState, actorCtx);\n}\nfunction selectTransitions(event, nextState) {\n  return nextState.machine.getTransitionData(nextState, event);\n}\nfunction selectEventlessTransitions(nextState, event) {\n  const enabledTransitionSet = new Set();\n  const atomicStates = nextState.configuration.filter(isAtomicStateNode);\n  for (const stateNode of atomicStates) {\n    loop: for (const s of [stateNode].concat(getProperAncestors(stateNode, null))) {\n      if (!s.always) {\n        continue;\n      }\n      for (const transition of s.always) {\n        if (transition.guard === undefined || evaluateGuard(transition.guard, nextState.context, event, nextState)) {\n          enabledTransitionSet.add(transition);\n          break loop;\n        }\n      }\n    }\n  }\n  return removeConflictingTransitions(Array.from(enabledTransitionSet), new Set(nextState.configuration), nextState.historyValue);\n}\n\n/**\n * Resolves a partial state value with its full representation in the state node's machine.\n *\n * @param stateValue The partial state value to resolve.\n */\nfunction resolveStateValue(rootNode, stateValue) {\n  const configuration = getConfiguration(getStateNodes(rootNode, stateValue));\n  return getStateValue(rootNode, [...configuration]);\n}\nfunction getInitialConfiguration(rootNode) {\n  const configuration = [];\n  const initialTransition = rootNode.initial;\n  const statesToEnter = new Set();\n  const statesForDefaultEntry = new Set([rootNode]);\n  computeEntrySet([initialTransition], {}, statesForDefaultEntry, statesToEnter);\n  for (const stateNodeToEnter of [...statesToEnter].sort((a, b) => a.order - b.order)) {\n    configuration.push(stateNodeToEnter);\n  }\n  return configuration;\n}\n\nclass State {\n  /**\n   * Indicates whether the state is a final state.\n   */\n\n  /**\n   * The output data of the top-level finite state.\n   */\n\n  /**\n   * The enabled state nodes representative of the state value.\n   */\n\n  /**\n   * An object mapping actor names to spawned/invoked actors.\n   */\n\n  /**\n   * Creates a new State instance for the given `stateValue` and `context`.\n   * @param stateValue\n   * @param context\n   */\n  static from(stateValue, context = {}, machine) {\n    if (stateValue instanceof State) {\n      if (stateValue.context !== context) {\n        return new State({\n          value: stateValue.value,\n          context,\n          meta: {},\n          configuration: [],\n          // TODO: fix,\n          children: {}\n        }, machine);\n      }\n      return stateValue;\n    }\n    const configuration = getConfiguration(getStateNodes(machine.root, stateValue));\n    return new State({\n      value: stateValue,\n      context,\n      meta: undefined,\n      configuration: Array.from(configuration),\n      children: {}\n    }, machine);\n  }\n\n  /**\n   * Creates a new `State` instance that represents the current state of a running machine.\n   *\n   * @param config\n   */\n  constructor(config, machine) {\n    this.machine = machine;\n    this.tags = void 0;\n    this.value = void 0;\n    this.done = void 0;\n    this.output = void 0;\n    this.error = void 0;\n    this.context = void 0;\n    this.historyValue = {};\n    this._internalQueue = void 0;\n    this.configuration = void 0;\n    this.children = void 0;\n    this.context = config.context;\n    this._internalQueue = config._internalQueue ?? [];\n    this.historyValue = config.historyValue || {};\n    this.matches = this.matches.bind(this);\n    this.toStrings = this.toStrings.bind(this);\n    this.configuration = config.configuration ?? Array.from(getConfiguration(getStateNodes(machine.root, config.value)));\n    this.children = config.children;\n    this.value = getStateValue(machine.root, this.configuration);\n    this.tags = new Set(flatten(this.configuration.map(sn => sn.tags)));\n    this.done = config.done ?? false;\n    this.output = config.output;\n    this.error = config.error;\n  }\n\n  /**\n   * Returns an array of all the string leaf state node paths.\n   * @param stateValue\n   * @param delimiter The character(s) that separate each subpath in the string state node path.\n   */\n  toStrings(stateValue = this.value) {\n    if (typeof stateValue === 'string') {\n      return [stateValue];\n    }\n    const valueKeys = Object.keys(stateValue);\n    return valueKeys.concat(...valueKeys.map(key => this.toStrings(stateValue[key]).map(s => key + STATE_DELIMITER + s)));\n  }\n  toJSON() {\n    const {\n      configuration,\n      tags,\n      machine,\n      ...jsonValues\n    } = this;\n    return {\n      ...jsonValues,\n      tags: Array.from(tags),\n      meta: this.meta\n    };\n  }\n\n  /**\n   * Whether the current state value is a subset of the given parent state value.\n   * @param parentStateValue\n   */\n  matches(parentStateValue) {\n    return matchesState(parentStateValue, this.value);\n  }\n\n  /**\n   * Whether the current state configuration has a state node with the specified `tag`.\n   * @param tag\n   */\n  hasTag(tag) {\n    return this.tags.has(tag);\n  }\n\n  /**\n   * Determines whether sending the `event` will cause a non-forbidden transition\n   * to be selected, even if the transitions have no actions nor\n   * change the state value.\n   *\n   * @param event The event to test\n   * @returns Whether the event will cause a transition\n   */\n  can(event) {\n    const transitionData = this.machine.getTransitionData(this, event);\n    return !!transitionData?.length &&\n    // Check that at least one transition is not forbidden\n    transitionData.some(t => t.target !== undefined || t.actions.length);\n  }\n\n  /**\n   * The next events that will cause a transition from the current state.\n   */\n  get nextEvents() {\n    return memo(this, 'nextEvents', () => {\n      return [...new Set(flatten([...this.configuration.map(sn => sn.ownEvents)]))];\n    });\n  }\n  get meta() {\n    return this.configuration.reduce((acc, stateNode) => {\n      if (stateNode.meta !== undefined) {\n        acc[stateNode.id] = stateNode.meta;\n      }\n      return acc;\n    }, {});\n  }\n}\nfunction cloneState(state, config = {}) {\n  return new State({\n    ...state,\n    ...config\n  }, state.machine);\n}\nfunction getPersistedState(state) {\n  const {\n    configuration,\n    tags,\n    machine,\n    children,\n    ...jsonValues\n  } = state;\n  const childrenJson = {};\n  for (const id in children) {\n    childrenJson[id] = {\n      state: children[id].getPersistedState?.(),\n      src: children[id].src\n    };\n  }\n  return {\n    ...jsonValues,\n    children: childrenJson\n  };\n}\n\nfunction resolve$5(_, state, args, {\n  actorRef\n}) {\n  const actorRefOrString = typeof actorRef === 'function' ? actorRef(args) : actorRef;\n  const resolvedActorRef = typeof actorRefOrString === 'string' ? state.children[actorRefOrString] : actorRefOrString;\n  let children = state.children;\n  if (resolvedActorRef) {\n    children = {\n      ...children\n    };\n    delete children[resolvedActorRef.id];\n  }\n  return [cloneState(state, {\n    children\n  }), resolvedActorRef];\n}\nfunction execute$2(actorContext, actorRef) {\n  if (!actorRef) {\n    return;\n  }\n  if (actorRef.status !== ActorStatus.Running) {\n    actorContext.stopChild(actorRef);\n    return;\n  }\n  // TODO: recheck why this one has to be deferred\n  actorContext.defer(() => {\n    actorContext.stopChild(actorRef);\n  });\n}\n\n/**\n * Stops an actor.\n *\n * @param actorRef The actor to stop.\n */\n\nfunction stop(actorRef) {\n  function stop(_) {\n  }\n  stop.type = 'xstate.stop';\n  stop.actorRef = actorRef;\n  stop.resolve = resolve$5;\n  stop.execute = execute$2;\n  return stop;\n}\n\nfunction resolve$4(_, state, actionArgs, {\n  value,\n  label\n}) {\n  return [state, {\n    value: typeof value === 'function' ? value(actionArgs) : value,\n    label\n  }];\n}\nfunction execute$1({\n  logger\n}, {\n  value,\n  label\n}) {\n  if (label) {\n    logger(label, value);\n  } else {\n    logger(value);\n  }\n}\n\n/**\n *\n * @param expr The expression function to evaluate which will be logged.\n *  Takes in 2 arguments:\n *  - `ctx` - the current state context\n *  - `event` - the event that caused this action to be executed.\n * @param label The label to give to the logged expression.\n */\nfunction log(value = ({\n  context,\n  event\n}) => ({\n  context,\n  event\n}), label) {\n  function log(_) {\n  }\n  log.type = 'xstate.log';\n  log.value = value;\n  log.label = label;\n  log.resolve = resolve$4;\n  log.execute = execute$1;\n  return log;\n}\n\nfunction createSpawner(actorContext, {\n  machine,\n  context\n}, event, spawnedChildren) {\n  const spawn = (src, options = {}) => {\n    const {\n      systemId\n    } = options;\n    if (typeof src === 'string') {\n      const referenced = resolveReferencedActor(machine.implementations.actors[src]);\n      if (!referenced) {\n        throw new Error(`Actor logic '${src}' not implemented in machine '${machine.id}'`);\n      }\n      const input = 'input' in options ? options.input : referenced.input;\n\n      // TODO: this should also receive `src`\n      const actor = createActor(referenced.src, {\n        id: options.id,\n        parent: actorContext.self,\n        input: typeof input === 'function' ? input({\n          context,\n          event,\n          self: actorContext.self\n        }) : input,\n        systemId\n      });\n      spawnedChildren[actor.id] = actor;\n      return actor;\n    } else {\n      // TODO: this should also receive `src`\n      return createActor(src, {\n        id: options.id,\n        parent: actorContext.self,\n        input: options.input,\n        systemId\n      });\n    }\n  };\n  return (src, options) => {\n    const actorRef = spawn(src, options); // TODO: fix types\n    spawnedChildren[actorRef.id] = actorRef;\n    actorContext.defer(() => {\n      if (actorRef.status === ActorStatus.Stopped) {\n        return;\n      }\n      try {\n        actorRef.start?.();\n      } catch (err) {\n        actorContext.self.send(error(actorRef.id, err));\n        return;\n      }\n    });\n    return actorRef;\n  };\n}\n\nfunction resolve$3(actorContext, state, actionArgs, {\n  assignment\n}) {\n  if (!state.context) {\n    throw new Error('Cannot assign to undefined `context`. Ensure that `context` is defined in the machine config.');\n  }\n  const spawnedChildren = {};\n  const assignArgs = {\n    context: state.context,\n    event: actionArgs.event,\n    action: actionArgs.action,\n    spawn: createSpawner(actorContext, state, actionArgs.event, spawnedChildren),\n    self: actorContext?.self,\n    system: actorContext?.system\n  };\n  let partialUpdate = {};\n  if (typeof assignment === 'function') {\n    partialUpdate = assignment(assignArgs);\n  } else {\n    for (const key of Object.keys(assignment)) {\n      const propAssignment = assignment[key];\n      partialUpdate[key] = typeof propAssignment === 'function' ? propAssignment(assignArgs) : propAssignment;\n    }\n  }\n  const updatedContext = Object.assign({}, state.context, partialUpdate);\n  return [cloneState(state, {\n    context: updatedContext,\n    children: Object.keys(spawnedChildren).length ? {\n      ...state.children,\n      ...spawnedChildren\n    } : state.children\n  })];\n}\n\n/**\n * Updates the current context of the machine.\n *\n * @param assignment An object that represents the partial context to update.\n */\nfunction assign(assignment) {\n  function assign(_) {\n  }\n  assign.type = 'xstate.assign';\n  assign.assignment = assignment;\n  assign.resolve = resolve$3;\n  return assign;\n}\n\nfunction resolve$2(_, state, args, {\n  event: eventOrExpr,\n  id,\n  delay\n}) {\n  const delaysMap = state.machine.implementations.delays;\n  if (typeof eventOrExpr === 'string') {\n    throw new Error(`Only event objects may be used with raise; use raise({ type: \"${eventOrExpr}\" }) instead`);\n  }\n  const resolvedEvent = typeof eventOrExpr === 'function' ? eventOrExpr(args) : eventOrExpr;\n  let resolvedDelay;\n  if (typeof delay === 'string') {\n    const configDelay = delaysMap && delaysMap[delay];\n    resolvedDelay = typeof configDelay === 'function' ? configDelay(args) : configDelay;\n  } else {\n    resolvedDelay = typeof delay === 'function' ? delay(args) : delay;\n  }\n  return [typeof resolvedDelay !== 'number' ? cloneState(state, {\n    _internalQueue: state._internalQueue.concat(resolvedEvent)\n  }) : state, {\n    event: resolvedEvent,\n    id,\n    delay: resolvedDelay\n  }];\n}\nfunction execute(actorContext, params) {\n  if (typeof params.delay === 'number') {\n    actorContext.self.delaySend(params);\n    return;\n  }\n}\n\n/**\n * Raises an event. This places the event in the internal event queue, so that\n * the event is immediately consumed by the machine in the current step.\n *\n * @param eventType The event to raise.\n */\n\nfunction raise(eventOrExpr, options) {\n  function raise(_) {\n  }\n  raise.type = 'xstate.raise';\n  raise.event = eventOrExpr;\n  raise.id = options?.id;\n  raise.delay = options?.delay;\n  raise.resolve = resolve$2;\n  raise.execute = execute;\n  return raise;\n}\n\nfunction resolve$1(_, state, actionArgs, {\n  branches\n}) {\n  const matchedActions = branches.find(condition => {\n    return !condition.guard || evaluateGuard(condition.guard, state.context, actionArgs.event, state);\n  })?.actions;\n  return [state, undefined, toArray(matchedActions)];\n}\nfunction choose(branches) {\n  function choose(_) {\n  }\n  choose.type = 'xstate.choose';\n  choose.branches = branches;\n  choose.resolve = resolve$1;\n  return choose;\n}\n\nfunction resolve(_, state, args, {\n  get\n}) {\n  return [state, undefined, toArray(get({\n    context: args.context,\n    event: args.event\n  }))];\n}\nfunction pure(getActions) {\n  function pure(_) {\n  }\n  pure.type = 'xstate.pure';\n  pure.get = getActions;\n  pure.resolve = resolve;\n  return pure;\n}\n\n/**\n * Returns an event type that represents an implicit event that\n * is sent after the specified `delay`.\n *\n * @param delayRef The delay in milliseconds\n * @param id The state node ID where this event is handled\n */\nfunction after(delayRef, id) {\n  const idSuffix = id ? `#${id}` : '';\n  return `${ConstantPrefix.After}(${delayRef})${idSuffix}`;\n}\n\n/**\n * Returns an event that represents that a final state node\n * has been reached in the parent state node.\n *\n * @param id The final state node's parent state node `id`\n * @param output The data to pass into the event\n */\nfunction done(id, output) {\n  const type = `${ConstantPrefix.DoneState}.${id}`;\n  const eventObject = {\n    type,\n    output\n  };\n  eventObject.toString = () => type;\n  return eventObject;\n}\n\n/**\n * Returns an event that represents that an invoked service has terminated.\n *\n * An invoked service is terminated when it has reached a top-level final state node,\n * but not when it is canceled.\n *\n * @param invokeId The invoked service ID\n * @param output The data to pass into the event\n */\nfunction doneInvoke(invokeId, output) {\n  const type = `${ConstantPrefix.DoneInvoke}.${invokeId}`;\n  const eventObject = {\n    type,\n    output\n  };\n  eventObject.toString = () => type;\n  return eventObject;\n}\nfunction error(id, data) {\n  const type = `${ConstantPrefix.ErrorPlatform}.${id}`;\n  const eventObject = {\n    type,\n    data\n  };\n  eventObject.toString = () => type;\n  return eventObject;\n}\nfunction createInitEvent(input) {\n  return {\n    type: INIT_TYPE,\n    input\n  };\n}\n\nexport { fromObservable as $, microstep as A, isAtomicStateNode as B, isStateId as C, getStateNodeByPath as D, getPersistedState as E, resolveReferencedActor as F, createActor as G, matchesState as H, sendTo as I, sendParent as J, forwardTo as K, interpret as L, Actor as M, NULL_EVENT as N, ActorStatus as O, InterpreterStatus as P, doneInvoke as Q, cancel as R, STATE_DELIMITER as S, choose as T, log as U, pure as V, raise as W, stop as X, pathToStateValue as Y, toObserver as Z, fromPromise as _, toTransitionConfigArray as a, fromCallback as a0, fromEventObservable as a1, fromTransition as a2, stateIn as a3, not as a4, and as a5, or as a6, ConstantPrefix as a7, SpecialTargets as a8, startSignalType as a9, stopSignalType as aa, startSignal as ab, stopSignal as ac, isSignal as ad, isActorRef as ae, toActorRef as af, createEmptyActor as ag, constantPrefixes as ah, after as ai, done as aj, error as ak, escalate as al, formatTransition as b, memo as c, flatten as d, evaluateGuard as e, formatTransitions as f, createInvokeId as g, getDelayedTransitions as h, formatInitialTransition as i, getCandidates as j, toInvokeConfig as k, getConfiguration as l, mapValues as m, getStateNodes as n, isInFinalState as o, State as p, isErrorEvent as q, resolveStateValue as r, cloneState as s, toArray as t, macrostep as u, transitionNode as v, getInitialConfiguration as w, resolveActionsAndContext as x, assign as y, createInitEvent as z };\n","// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\nfunction getGlobal() {\n  if (typeof globalThis !== 'undefined') {\n    return globalThis;\n  }\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n}\nfunction getDevTools() {\n  const w = getGlobal();\n  if (!!w.__xstate__) {\n    return w.__xstate__;\n  }\n  return undefined;\n}\nfunction registerService(service) {\n  if (typeof window === 'undefined') {\n    return;\n  }\n  const devTools = getDevTools();\n  if (devTools) {\n    devTools.register(service);\n  }\n}\nconst devToolsAdapter = service => {\n  if (typeof window === 'undefined') {\n    return;\n  }\n  const devTools = getDevTools();\n  if (devTools) {\n    devTools.register(service);\n  }\n};\n\nexport { devToolsAdapter, getGlobal, registerService };\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","export { speechstate } from \"./speechstate\";\nexport {\n  AzureCredentials,\n  Settings,\n  Hypothesis,\n  Agenda,\n  RecogniseParameters,\n} from \"./types\";\n","import { createMachine, assign, fromPromise, sendParent } from \"xstate\";\nimport { ttsMachine } from \"./tts\";\nimport { asrMachine } from \"./asr\";\n\nimport { Settings, Agenda, Hypothesis } from \"./types\";\ninterface SSContext {\n  settings: Settings;\n  audioContext?: AudioContext;\n  asrRef?: any;\n  ttsRef?: any;\n}\n\ntype SSEvent =\n  | { type: \"PREPARE\" }\n  | { type: \"CONTROL\" }\n  | { type: \"STOP\" }\n  | { type: \"SPEAK\"; value: Agenda }\n  | { type: \"TTS_READY\" }\n  | { type: \"TTS_STARTED\" }\n  | { type: \"TTS_ERROR\" }\n  | { type: \"SPEAK_COMPLETE\" }\n  | { type: \"ASR_READY\" }\n  | { type: \"LISTEN\" } // TODO parameters!\n  | { type: \"ASR_STARTED\" }\n  | { type: \"ASR_NOINPUT\" }\n  | { type: \"RECOGNISED\"; value: Hypothesis[] };\n\nconst speechstate = createMachine(\n  {\n    types: {\n      context: {} as SSContext,\n      events: {} as SSEvent,\n    },\n    context: ({ input }) => ({\n      settings: input.settings,\n    }),\n    id: \"speechstate\",\n    type: \"parallel\",\n    states: {\n      asrTtsSpawner: {\n        initial: \"idle\",\n        states: {\n          idle: { on: { PREPARE: \"createAudioContext\" } },\n          createAudioContext: {\n            invoke: {\n              id: \"createAudioContext\",\n              src: \"audioContext\",\n              onDone: {\n                target: \"spawn\",\n                actions: assign({ audioContext: ({ event }) => event.output }),\n              },\n            },\n          },\n          spawn: {\n            entry: [\n              assign({\n                ttsRef: ({ context, spawn }) => {\n                  return spawn(ttsMachine, {\n                    input: {\n                      ttsDefaultVoice: context.settings.ttsDefaultVoice,\n                      audioContext: context.audioContext,\n                      azureCredentials: context.settings.azureCredentials,\n                    },\n                  });\n                },\n              }),\n              assign({\n                asrRef: ({ context, spawn }) => {\n                  return spawn(asrMachine, {\n                    input: {\n                      asrDefaultCompleteTimeout:\n                        context.settings.asrDefaultCompleteTimeout,\n                      asrDefaultNoInputTimeout:\n                        context.settings.asrDefaultNoInputTimeout,\n                      locale: context.settings.locale,\n                      audioContext: context.audioContext,\n                      azureCredentials: context.settings.azureCredentials,\n                    },\n                  });\n                },\n              }),\n            ],\n            after: {\n              300000: {\n                target: \"spawn\",\n              },\n            },\n          },\n        },\n      },\n      asrTtsManager: {\n        initial: \"initialize\",\n        on: {\n          TTS_READY: {\n            actions: () => console.debug(\"[TTS→SpSt] TTS_READY\"),\n            target: \".preReady\",\n          },\n          ASR_READY: {\n            actions: () => console.debug(\"[ASR→SpSt] ASR_READY\"),\n            target: \".preReady\",\n          },\n          // ASR_ERROR not implemented\n          TTS_ERROR: {\n            actions: () => console.error(\"[TTS→SpSt] TTS_ERROR\"),\n            target: \".fail\",\n          },\n          ASR_NOINPUT: {\n            actions: [\n              () => console.debug(\"[ASR→SpSt] NOINPUT\"),\n              sendParent({ type: \"ASR_NOINPUT\" }),\n            ],\n            target: \".ready\",\n          },\n        },\n        states: {\n          initialize: {},\n          preReady: {\n            on: {\n              TTS_READY: {\n                actions: () => console.debug(\"[TTS→SpSt] TTS_READY\"),\n                target: \"ready\",\n              },\n              ASR_READY: {\n                actions: () => console.debug(\"[ASR→SpSt] ASR_READY\"),\n                target: \"ready\",\n              },\n            },\n          },\n          ready: {\n            initial: \"idle\",\n            entry: [\n              () => console.debug(\"[SpSt] All ready\"),\n              sendParent({ type: \"ASRTTS_READY\" }),\n            ],\n            states: {\n              idle: {\n                on: {\n                  LISTEN: { target: \"waitForRecogniser\" },\n                  SPEAK: [\n                    {\n                      target: \"speaking\",\n                    },\n                  ],\n                },\n              },\n              speaking: {\n                entry: [\n                  ({ event }) =>\n                    console.debug(\"[SpSt→TTS] SPEAK\", (event as any).value),\n                  ({ context, event }) =>\n                    context.ttsRef.send({\n                      type: \"SPEAK\",\n                      value: (event as any).value,\n                    }),\n                ],\n                on: {\n                  CONTROL: {\n                    actions: [\n                      () => console.debug(\"[SpSt→TTS] CONTROL\"),\n                      ({ context }) =>\n                        context.ttsRef.send({\n                          type: \"CONTROL\",\n                        }),\n                    ],\n                  },\n                  STOP: {\n                    actions: [\n                      () => console.debug(\"[SpSt→TTS] STOP\"),\n                      ({ context }) =>\n                        context.ttsRef.send({\n                          type: \"STOP\",\n                        }),\n                    ],\n                  },\n                  TTS_STARTED: {\n                    actions: [\n                      () => console.debug(\"[TTS→SpSt] TTS_STARTED\"),\n                      sendParent({ type: \"TTS_STARTED\" }),\n                    ],\n                  },\n                  SPEAK_COMPLETE: {\n                    target: \"idle\",\n                    actions: [\n                      () => console.debug(\"[TTS→SpSt] SPEAK_COMPLETE\"),\n                      sendParent({ type: \"SPEAK_COMPLETE\" }),\n                    ],\n                  },\n                },\n              },\n              waitForRecogniser: {\n                entry: [\n                  ({ event }) =>\n                    console.debug(\"[SpSt→ASR] START\", (event as any).value),\n                  ({ context, event }) =>\n                    context.asrRef.send({\n                      type: \"START\",\n                      value: (event as any).value,\n                    }),\n                ],\n                on: {\n                  ASR_STARTED: {\n                    target: \"recognising\",\n                    actions: [\n                      () => console.debug(\"[ASR→SpSt] ASR_STARTED\"),\n                      sendParent({ type: \"ASR_STARTED\" }),\n                    ],\n                  },\n                },\n              },\n              recognising: {\n                on: {\n                  CONTROL: {\n                    actions: [\n                      () => console.debug(\"[SpSt→ASR] CONTROL\"),\n                      ({ context }) =>\n                        context.asrRef.send({\n                          type: \"CONTROL\",\n                        }),\n                    ],\n                  },\n                  RECOGNISED: {\n                    actions: [\n                      ({ event }) =>\n                        console.debug(\n                          \"[ASR→SpSt] RECOGNISED\",\n                          (event as any).value,\n                        ),\n                      sendParent(({ event }) => ({\n                        type: \"RECOGNISED\",\n                        value: (event as any).value,\n                      })),\n                    ],\n                    target: \"idle\",\n                  },\n                },\n              },\n            },\n          },\n          fail: {},\n        },\n      },\n    },\n  },\n  {\n    actors: {\n      audioContext: fromPromise(() => {\n        const audioContext = new ((window as any).AudioContext ||\n          (window as any).webkitAudioContext)();\n        navigator.mediaDevices\n          .getUserMedia({ audio: true })\n          .then(function (stream) {\n            audioContext.createMediaStreamSource(stream);\n          });\n        return audioContext;\n      }),\n    },\n    actions: {\n      //   logRecResult: ({ event }) => {\n      //     console.log(\"U>\", (event as any).value[0][\"utterance\"], {\n      //       confidence: (event as any).value[0][\"confidence\"],\n      //     });\n      //   },\n      //   logAgenda: ({ context, event }) => {\n      //     console.log(\"S>\", (event as any).value, {\n      //       passivity: `${context.tdmPassivity ?? \"∞\"} ms`,\n      //       speechCompleteTimeout: `${\n      //         context.tdmSpeechCompleteTimeout ||\n      //         context.settings.completeTimeout\n      //       } ms`,\n      //     });\n      //   },\n    },\n  },\n);\n\nexport { speechstate };\n","import { createMachine, sendParent, assign, fromCallback } from \"xstate\";\n\nimport { getToken } from \"./getToken\";\nimport createSpeechSynthesisPonyfill from \"web-speech-cognitive-services/lib/SpeechServices/TextToSpeech\";\nconst REGION = \"northeurope\";\n\nimport { AzureCredentials, Agenda } from \"./types\";\n\ninterface MySpeechSynthesisUtterance extends SpeechSynthesisUtterance {\n  new (s: string);\n}\n\ninterface TTSContext {\n  audioContext: AudioContext;\n  azureCredentials: string | AzureCredentials;\n  azureAuthorizationToken?: string;\n  ttsDefaultVoice: string;\n  ttsLexicon?: string;\n  wsaTTS?: SpeechSynthesis;\n  wsaVoice?: SpeechSynthesisVoice;\n  wsaUtt?: MySpeechSynthesisUtterance;\n  agenda?: Agenda;\n}\n\ntype TTSEvent =\n  | { type: \"PREPARE\" }\n  | { type: \"CONTROL\" }\n  | { type: \"STOP\" }\n  | {\n      type: \"READY\";\n      value: {\n        wsaTTS: SpeechSynthesis;\n        wsaUtt: MySpeechSynthesisUtterance;\n      };\n    }\n  | { type: \"ERROR\" }\n  | { type: \"SPEAK\"; value: Agenda }\n  | { type: \"TTS_STARTED\" }\n  | { type: \"SPEAK_COMPLETE\" };\n\nexport const ttsMachine = createMachine(\n  {\n    id: \"tts\",\n    types: {\n      context: {} as TTSContext,\n      events: {} as TTSEvent,\n    },\n    context: ({ input }) => ({\n      ttsDefaultVoice: input.ttsDefaultVoice || \"en-US-DavisNeural\",\n      audioContext: input.audioContext,\n      azureCredentials: input.azureCredentials,\n    }),\n\n    initial: \"GetToken\",\n    on: {\n      READY: {\n        target: \".Ready\",\n        actions: [\n          assign({\n            wsaTTS: ({ event }) => event.value.wsaTTS,\n            wsaUtt: ({ event }) => event.value.wsaUtt,\n          }),\n          sendParent({ type: \"TTS_READY\" }),\n        ],\n      },\n      ERROR: { actions: sendParent({ type: \"TTS_ERROR\" }) },\n    },\n    states: {\n      Ready: {\n        on: {\n          SPEAK: {\n            target: \"Speaking\",\n            actions: assign({ agenda: ({ event }) => event.value }),\n          },\n        },\n      },\n      Fail: {},\n      GetToken: {\n        invoke: {\n          id: \"getAuthorizationToken\",\n          input: ({ context }) => ({\n            credentials: context.azureCredentials,\n          }),\n          src: \"getToken\",\n          onDone: {\n            target: \"Ponyfill\",\n            actions: [\n              assign(({ event }) => {\n                return { azureAuthorizationToken: event.output };\n              }),\n            ],\n          },\n          onError: {\n            actions: ({ event }) =>\n              console.error(\"[TTS] getToken error\", event),\n            target: \"Fail\",\n          },\n        },\n      },\n      Ponyfill: {\n        invoke: {\n          id: \"ponyTTS\",\n          src: \"ponyfill\",\n          input: ({ context }) => ({\n            audioContext: context.audioContext,\n            azureAuthorizationToken: context.azureAuthorizationToken,\n          }),\n        },\n      },\n      Speaking: {\n        initial: \"Go\",\n        on: {\n          STOP: {\n            target: \"Ready\",\n          },\n          TTS_STARTED: {\n            actions: sendParent({ type: \"TTS_STARTED\" }),\n          },\n          SPEAK_COMPLETE: {\n            target: \"Ready\",\n          },\n        },\n        exit: sendParent({ type: \"SPEAK_COMPLETE\" }),\n        states: {\n          Go: {\n            invoke: {\n              src: \"start\",\n              input: ({ context }) => ({\n                wsaTTS: context.wsaTTS,\n                wsaUtt: context.wsaUtt,\n                ttsLexicon: context.ttsLexicon,\n                voice: context.agenda.voice || context.ttsDefaultVoice,\n                streamURL: context.agenda.streamURL,\n                utterance: context.agenda.utterance,\n              }),\n            },\n            on: {\n              CONTROL: \"Paused\",\n            },\n            exit: \"ttsStop\",\n          },\n          Paused: {\n            on: {\n              CONTROL: \"Go\",\n            },\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      ttsStop: ({ context }) => {\n        context.wsaTTS!.cancel();\n      },\n    },\n    actors: {\n      getToken: getToken,\n      ponyfill: fromCallback(({ sendBack, input }) => {\n        const ponyfill = createSpeechSynthesisPonyfill({\n          audioContext: (input as any).audioContext,\n          credentials: {\n            region: REGION, // TODO\n            authorizationToken: (input as any).azureAuthorizationToken,\n          },\n        });\n        const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\n        const tts = speechSynthesis;\n        const ttsUtterance = SpeechSynthesisUtterance;\n        tts.addEventListener(\"voiceschanged\", () => {\n          const voices = tts.getVoices();\n          if (voices.length > 0) {\n            console.debug(\"[TTS] READY\");\n            sendBack({\n              type: \"READY\",\n              value: { wsaTTS: tts, wsaUtt: ttsUtterance },\n            });\n          } else {\n            console.error(\"[TTS] No voices available\");\n            sendBack({ type: \"ERROR\" });\n          }\n        });\n      }),\n      start: fromCallback(({ sendBack, input }) => {\n        if ([\"\", \" \"].includes((input as any).utterance)) {\n          console.debug(\"[TTS] SPEAK: \", (input as any).utterance);\n          (input as any).wsaTTS.speak(\"\");\n        } else {\n          console.debug(\"[TTS] SPEAK: \", (input as any).utterance);\n          const content = wrapSSML(\n            (input as any).utterance,\n            (input as any).voice,\n            (input as any).ttsLexicon,\n            1,\n          ); // todo speech rate;\n          const utterance = new (input as any).wsaUtt!(content);\n          utterance.addEventListener(\"start\", () => {\n            sendBack({ type: \"TTS_STARTED\" });\n            console.debug(\"[TTS] TTS_STARTED\");\n          });\n          utterance.addEventListener(\"end\", () => {\n            sendBack({ type: \"SPEAK_COMPLETE\" });\n            console.debug(\"[TTS] SPEAK_COMPLETE\");\n          });\n\n          (input as any).wsaTTS.speak(utterance);\n        }\n      }),\n    },\n  },\n);\n\nconst wrapSSML = (\n  text: string,\n  voice: string,\n  lexicon: string,\n  speechRate: number,\n): string => {\n  let content = `<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:mstts=\"http://www.w3.org/2001/mstts\" xml:lang=\"en-US\"><voice name=\"${voice}\">`;\n  if (lexicon) {\n    content = content + `<lexicon uri=\"${lexicon}\"/>`;\n  }\n  content =\n    content +\n    `<prosody rate=\"${speechRate}\">` +\n    `${text}</prosody></voice></speak>`;\n  return content;\n};\n","import { fromPromise } from \"xstate\";\n\nexport const getToken = fromPromise(async ({ input }: { input: any }) => {\n  if (typeof input.credentials === \"string\") {\n    return fetch(new Request(input.credentials)).then((data) => data.text());\n  } else {\n    return fetch(\n      new Request(input.credentials.endpoint, {\n        method: \"POST\",\n        headers: {\n          \"Ocp-Apim-Subscription-Key\": input.credentials.key,\n        },\n      }),\n    ).then((data) => data.text());\n  }\n});\n",null,"import createSpeechSynthesisPonyfill from './TextToSpeech/createSpeechSynthesisPonyfill';\n\nexport default createSpeechSynthesisPonyfill;\n","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",null,"/* eslint class-methods-use-this: 0 */\n\nimport { EventTarget, getEventAttributeValue, setEventAttributeValue } from 'event-target-shim/es5';\nimport createDeferred from 'p-defer-es5';\nimport onErrorResumeNext from 'on-error-resume-next';\n\nimport AudioContextQueue from './AudioContextQueue';\nimport fetchCustomVoices from './fetchCustomVoices';\nimport fetchVoices from './fetchVoices';\nimport patchOptions from '../patchOptions';\nimport SpeechSynthesisEvent from './SpeechSynthesisEvent';\nimport SpeechSynthesisUtterance from './SpeechSynthesisUtterance';\n\n// Supported output format can be found at https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/rest-text-to-speech#audio-outputs\nconst DEFAULT_OUTPUT_FORMAT = 'audio-24khz-160kbitrate-mono-mp3';\nconst EMPTY_ARRAY = [];\n\nexport default options => {\n  const {\n    audioContext,\n    fetchCredentials,\n    ponyfill = {\n      AudioContext: window.AudioContext || window.webkitAudioContext\n    },\n    speechSynthesisDeploymentId,\n    speechSynthesisOutputFormat = DEFAULT_OUTPUT_FORMAT\n  } = patchOptions(options);\n\n  if (!audioContext && !ponyfill.AudioContext) {\n    console.warn(\n      'web-speech-cognitive-services: This browser does not support Web Audio and it will not work with Cognitive Services Speech Services.'\n    );\n\n    return {};\n  }\n\n  class SpeechSynthesis extends EventTarget {\n    constructor() {\n      super();\n\n      this.queue = new AudioContextQueue({ audioContext, ponyfill });\n\n      this.updateVoices();\n    }\n\n    cancel() {\n      this.queue.stop();\n    }\n\n    getVoices() {\n      return EMPTY_ARRAY;\n    }\n\n    get onvoiceschanged() {\n      return getEventAttributeValue(this, 'voiceschanged');\n    }\n\n    set onvoiceschanged(value) {\n      setEventAttributeValue(this, 'voiceschanged', value);\n    }\n\n    pause() {\n      this.queue.pause();\n    }\n\n    resume() {\n      this.queue.resume();\n    }\n\n    speak(utterance) {\n      if (!(utterance instanceof SpeechSynthesisUtterance)) {\n        throw new Error('invalid utterance');\n      }\n\n      const { reject, resolve, promise } = createDeferred();\n      const handleError = ({ error: errorCode, message }) => {\n        const error = new Error(errorCode);\n\n        error.stack = message;\n\n        reject(error);\n      };\n\n      utterance.addEventListener('end', resolve);\n      utterance.addEventListener('error', handleError);\n\n      utterance.preload({\n        deploymentId: speechSynthesisDeploymentId,\n        fetchCredentials,\n        outputFormat: speechSynthesisOutputFormat\n      });\n\n      this.queue.push(utterance);\n\n      return promise.finally(() => {\n        utterance.removeEventListener('end', resolve);\n        utterance.removeEventListener('error', handleError);\n      });\n    }\n\n    get speaking() {\n      return this.queue.speaking;\n    }\n\n    async updateVoices() {\n      const { customVoiceHostname, region, speechSynthesisHostname, subscriptionKey } = await fetchCredentials();\n\n      if (speechSynthesisDeploymentId) {\n        if (subscriptionKey) {\n          console.warn(\n            'web-speech-cognitive-services: Listing of custom voice models are only available when using subscription key.'\n          );\n\n          await onErrorResumeNext(async () => {\n            const voices = await fetchCustomVoices({\n              customVoiceHostname,\n              deploymentId: speechSynthesisDeploymentId,\n              region,\n              speechSynthesisHostname,\n              subscriptionKey\n            });\n\n            this.getVoices = () => voices;\n          });\n        }\n      } else {\n        // If fetch voice list failed, we will not emit \"voiceschanged\" event.\n        // In the spec, there is no \"error\" event.\n\n        await onErrorResumeNext(async () => {\n          const voices = await fetchVoices(await fetchCredentials());\n\n          this.getVoices = () => voices;\n        });\n      }\n\n      this.dispatchEvent(new SpeechSynthesisEvent('voiceschanged'));\n    }\n  }\n\n  return {\n    speechSynthesis: new SpeechSynthesis(),\n    SpeechSynthesisEvent,\n    SpeechSynthesisUtterance\n  };\n};\n","// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","var _typeof = require(\"./typeof.js\")[\"default\"];\n\nfunction _regeneratorRuntime() {\n  \"use strict\";\n  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n\n  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return exports;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  var exports = {},\n      Op = Object.prototype,\n      hasOwn = Op.hasOwnProperty,\n      $Symbol = \"function\" == typeof Symbol ? Symbol : {},\n      iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n      asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n      toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    return Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n        generator = Object.create(protoGenerator.prototype),\n        context = new Context(tryLocsList || []);\n    return generator._invoke = function (innerFn, self, context) {\n      var state = \"suspendedStart\";\n      return function (method, arg) {\n        if (\"executing\" === state) throw new Error(\"Generator is already running\");\n\n        if (\"completed\" === state) {\n          if (\"throw\" === method) throw arg;\n          return doneResult();\n        }\n\n        for (context.method = method, context.arg = arg;;) {\n          var delegate = context.delegate;\n\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n\n          if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n            if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n            context.dispatchException(context.arg);\n          } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n          state = \"executing\";\n          var record = tryCatch(innerFn, self, context);\n\n          if (\"normal\" === record.type) {\n            if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n            return {\n              value: record.arg,\n              done: context.done\n            };\n          }\n\n          \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n        }\n      };\n    }(innerFn, self, context), generator;\n  }\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {}\n\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf,\n      NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n            value = result.value;\n        return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n\n      reject(record.arg);\n    }\n\n    var previousPromise;\n\n    this._invoke = function (method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    };\n  }\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (undefined === method) {\n      if (context.delegate = null, \"throw\" === context.method) {\n        if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel;\n        context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n  }\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          for (; ++i < iterable.length;) {\n            if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n          }\n\n          return next.value = undefined, next.done = !0, next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    return {\n      next: doneResult\n    };\n  }\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = Promise);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    return keys.reverse(), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {\n        \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n      }\n    },\n    stop: function stop() {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) throw exception;\n      var context = this;\n\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n            record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n              hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      }\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}\n\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\n\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\n\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');\nvar _set = require('@babel/runtime/helpers/set');\nvar _get = require('@babel/runtime/helpers/get');\nvar _assertThisInitialized = require('@babel/runtime/helpers/assertThisInitialized');\nvar _inherits = require('@babel/runtime/helpers/inherits');\nvar _possibleConstructorReturn = require('@babel/runtime/helpers/possibleConstructorReturn');\nvar _getPrototypeOf = require('@babel/runtime/helpers/getPrototypeOf');\nvar _wrapNativeSuper = require('@babel/runtime/helpers/wrapNativeSuper');\nvar _defineProperty = require('@babel/runtime/helpers/defineProperty');\nvar _classCallCheck = require('@babel/runtime/helpers/classCallCheck');\nvar _createClass = require('@babel/runtime/helpers/createClass');\nvar _typeof = require('@babel/runtime/helpers/typeof');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);\nvar _set__default = /*#__PURE__*/_interopDefaultLegacy(_set);\nvar _get__default = /*#__PURE__*/_interopDefaultLegacy(_get);\nvar _assertThisInitialized__default = /*#__PURE__*/_interopDefaultLegacy(_assertThisInitialized);\nvar _inherits__default = /*#__PURE__*/_interopDefaultLegacy(_inherits);\nvar _possibleConstructorReturn__default = /*#__PURE__*/_interopDefaultLegacy(_possibleConstructorReturn);\nvar _getPrototypeOf__default = /*#__PURE__*/_interopDefaultLegacy(_getPrototypeOf);\nvar _wrapNativeSuper__default = /*#__PURE__*/_interopDefaultLegacy(_wrapNativeSuper);\nvar _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);\nvar _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy(_classCallCheck);\nvar _createClass__default = /*#__PURE__*/_interopDefaultLegacy(_createClass);\nvar _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * Assert a condition.\n * @param condition The condition that it should satisfy.\n * @param message The error message.\n * @param args The arguments for replacing placeholders in the message.\n */\nfunction assertType(condition, message) {\n  if (!condition) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    throw new TypeError(format(message, args));\n  }\n}\n/**\n * Convert a text and arguments to one string.\n * @param message The formating text\n * @param args The arguments.\n */\n\n\nfunction format(message, args) {\n  var i = 0;\n  return message.replace(/%[os]/g, function () {\n    return anyToString(args[i++]);\n  });\n}\n/**\n * Convert a value to a string representation.\n * @param x The value to get the string representation.\n */\n\n\nfunction anyToString(x) {\n  if (_typeof__default['default'](x) !== \"object\" || x === null) {\n    return String(x);\n  }\n\n  return Object.prototype.toString.call(x);\n}\n\nvar currentErrorHandler;\n/**\n * Set the error handler.\n * @param value The error handler to set.\n */\n\nfunction setErrorHandler(value) {\n  assertType(typeof value === \"function\" || value === undefined, \"The error handler must be a function or undefined, but got %o.\", value);\n  currentErrorHandler = value;\n}\n/**\n * Print a error message.\n * @param maybeError The error object.\n */\n\n\nfunction reportError(maybeError) {\n  try {\n    var error = maybeError instanceof Error ? maybeError : new Error(anyToString(maybeError)); // Call the user-defined error handler if exists.\n\n    if (currentErrorHandler) {\n      currentErrorHandler(error);\n      return;\n    } // Dispatch an `error` event if this is on a browser.\n\n\n    if (typeof dispatchEvent === \"function\" && typeof ErrorEvent === \"function\") {\n      dispatchEvent(new ErrorEvent(\"error\", {\n        error: error,\n        message: error.message\n      }));\n    } // Emit an `uncaughtException` event if this is on Node.js.\n    //istanbul ignore else\n    else if (typeof process !== \"undefined\" && typeof process.emit === \"function\") {\n        process.emit(\"uncaughtException\", error);\n        return;\n      } // Otherwise, print the error.\n\n\n    console.error(error);\n  } catch (_a) {// ignore.\n  }\n}\n/**\n * The global object.\n */\n//istanbul ignore next\n\n\nvar Global = typeof window !== \"undefined\" ? window : typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : typeof globalThis !== \"undefined\" ? globalThis : undefined;\nvar currentWarnHandler;\n/**\n * Set the warning handler.\n * @param value The warning handler to set.\n */\n\nfunction setWarningHandler(value) {\n  assertType(typeof value === \"function\" || value === undefined, \"The warning handler must be a function or undefined, but got %o.\", value);\n  currentWarnHandler = value;\n}\n/**\n * The warning information.\n */\n\n\nvar Warning = /*#__PURE__*/function () {\n  function Warning(code, message) {\n    _classCallCheck__default['default'](this, Warning);\n\n    this.code = code;\n    this.message = message;\n  }\n  /**\n   * Report this warning.\n   * @param args The arguments of the warning.\n   */\n\n\n  _createClass__default['default'](Warning, [{\n    key: \"warn\",\n    value: function warn() {\n      var _a;\n\n      try {\n        var _console;\n\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        // Call the user-defined warning handler if exists.\n        if (currentWarnHandler) {\n          currentWarnHandler(_objectSpread(_objectSpread({}, this), {}, {\n            args: args\n          }));\n          return;\n        } // Otherwise, print the warning.\n\n\n        var stack = ((_a = new Error().stack) !== null && _a !== void 0 ? _a : \"\").replace(/^(?:(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+?\\n){2}/g, \"\\n\");\n\n        (_console = console).warn.apply(_console, [this.message].concat(args, [stack]));\n      } catch (_b) {// Ignore.\n      }\n    }\n  }]);\n\n  return Warning;\n}();\n\nvar InitEventWasCalledWhileDispatching = new Warning(\"W01\", \"Unable to initialize event under dispatching.\");\nvar FalsyWasAssignedToCancelBubble = new Warning(\"W02\", \"Assigning any falsy value to 'cancelBubble' property has no effect.\");\nvar TruthyWasAssignedToReturnValue = new Warning(\"W03\", \"Assigning any truthy value to 'returnValue' property has no effect.\");\nvar NonCancelableEventWasCanceled = new Warning(\"W04\", \"Unable to preventDefault on non-cancelable events.\");\nvar CanceledInPassiveListener = new Warning(\"W05\", \"Unable to preventDefault inside passive event listener invocation.\");\nvar EventListenerWasDuplicated = new Warning(\"W06\", \"An event listener wasn't added because it has been added already: %o, %o\");\nvar OptionWasIgnored = new Warning(\"W07\", \"The %o option value was abandoned because the event listener wasn't added as duplicated.\");\nvar InvalidEventListener = new Warning(\"W08\", \"The 'callback' argument must be a function or an object that has 'handleEvent' method: %o\");\nvar InvalidAttributeHandler = new Warning(\"W09\", \"Event attribute handler must be a function: %o\");\n/*eslint-disable class-methods-use-this */\n\n/**\n * An implementation of `Event` interface, that wraps a given event object.\n * `EventTarget` shim can control the internal state of this `Event` objects.\n * @see https://dom.spec.whatwg.org/#event\n */\n\nvar Event = /*#__PURE__*/function () {\n  _createClass__default['default'](Event, null, [{\n    key: \"NONE\",\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-none\n     */\n    get: function get() {\n      return NONE;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-capturing_phase\n     */\n\n  }, {\n    key: \"CAPTURING_PHASE\",\n    get: function get() {\n      return CAPTURING_PHASE;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-at_target\n     */\n\n  }, {\n    key: \"AT_TARGET\",\n    get: function get() {\n      return AT_TARGET;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-bubbling_phase\n     */\n\n  }, {\n    key: \"BUBBLING_PHASE\",\n    get: function get() {\n      return BUBBLING_PHASE;\n    }\n    /**\n     * Initialize this event instance.\n     * @param type The type of this event.\n     * @param eventInitDict Options to initialize.\n     * @see https://dom.spec.whatwg.org/#dom-event-event\n     */\n\n  }]);\n\n  function Event(type, eventInitDict) {\n    _classCallCheck__default['default'](this, Event);\n\n    Object.defineProperty(this, \"isTrusted\", {\n      value: false,\n      enumerable: true\n    });\n    var opts = eventInitDict !== null && eventInitDict !== void 0 ? eventInitDict : {};\n    internalDataMap.set(this, {\n      type: String(type),\n      bubbles: Boolean(opts.bubbles),\n      cancelable: Boolean(opts.cancelable),\n      composed: Boolean(opts.composed),\n      target: null,\n      currentTarget: null,\n      stopPropagationFlag: false,\n      stopImmediatePropagationFlag: false,\n      canceledFlag: false,\n      inPassiveListenerFlag: false,\n      dispatchFlag: false,\n      timeStamp: Date.now()\n    });\n  }\n  /**\n   * The type of this event.\n   * @see https://dom.spec.whatwg.org/#dom-event-type\n   */\n\n\n  _createClass__default['default'](Event, [{\n    key: \"composedPath\",\n\n    /**\n     * The event target of the current dispatching.\n     * This doesn't support node tree.\n     * @see https://dom.spec.whatwg.org/#dom-event-composedpath\n     */\n    value: function composedPath() {\n      var currentTarget = $(this).currentTarget;\n\n      if (currentTarget) {\n        return [currentTarget];\n      }\n\n      return [];\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-none\n     */\n\n  }, {\n    key: \"stopPropagation\",\n\n    /**\n     * Stop event bubbling.\n     * Because this shim doesn't support node tree, this merely changes the `cancelBubble` property value.\n     * @see https://dom.spec.whatwg.org/#dom-event-stoppropagation\n     */\n    value: function stopPropagation() {\n      $(this).stopPropagationFlag = true;\n    }\n    /**\n     * `true` if event bubbling was stopped.\n     * @deprecated\n     * @see https://dom.spec.whatwg.org/#dom-event-cancelbubble\n     */\n\n  }, {\n    key: \"stopImmediatePropagation\",\n\n    /**\n     * Stop event bubbling and subsequent event listener callings.\n     * @see https://dom.spec.whatwg.org/#dom-event-stopimmediatepropagation\n     */\n    value: function stopImmediatePropagation() {\n      var data = $(this);\n      data.stopPropagationFlag = data.stopImmediatePropagationFlag = true;\n    }\n    /**\n     * `true` if this event will bubble.\n     * @see https://dom.spec.whatwg.org/#dom-event-bubbles\n     */\n\n  }, {\n    key: \"preventDefault\",\n\n    /**\n     * Cancel the default behavior.\n     * @see https://dom.spec.whatwg.org/#dom-event-preventdefault\n     */\n    value: function preventDefault() {\n      setCancelFlag($(this));\n    }\n    /**\n     * `true` if the default behavior was canceled.\n     * @see https://dom.spec.whatwg.org/#dom-event-defaultprevented\n     */\n\n  }, {\n    key: \"initEvent\",\n\n    /**\n     * @deprecated Don't use this method. The constructor did initialization.\n     */\n    value: function initEvent(type) {\n      var bubbles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var cancelable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var data = $(this);\n\n      if (data.dispatchFlag) {\n        InitEventWasCalledWhileDispatching.warn();\n        return;\n      }\n\n      internalDataMap.set(this, _objectSpread(_objectSpread({}, data), {}, {\n        type: String(type),\n        bubbles: Boolean(bubbles),\n        cancelable: Boolean(cancelable),\n        target: null,\n        currentTarget: null,\n        stopPropagationFlag: false,\n        stopImmediatePropagationFlag: false,\n        canceledFlag: false\n      }));\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return $(this).type;\n    }\n    /**\n     * The event target of the current dispatching.\n     * @see https://dom.spec.whatwg.org/#dom-event-target\n     */\n\n  }, {\n    key: \"target\",\n    get: function get() {\n      return $(this).target;\n    }\n    /**\n     * The event target of the current dispatching.\n     * @deprecated Use the `target` property instead.\n     * @see https://dom.spec.whatwg.org/#dom-event-srcelement\n     */\n\n  }, {\n    key: \"srcElement\",\n    get: function get() {\n      return $(this).target;\n    }\n    /**\n     * The event target of the current dispatching.\n     * @see https://dom.spec.whatwg.org/#dom-event-currenttarget\n     */\n\n  }, {\n    key: \"currentTarget\",\n    get: function get() {\n      return $(this).currentTarget;\n    }\n  }, {\n    key: \"NONE\",\n    get: function get() {\n      return NONE;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-capturing_phase\n     */\n\n  }, {\n    key: \"CAPTURING_PHASE\",\n    get: function get() {\n      return CAPTURING_PHASE;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-at_target\n     */\n\n  }, {\n    key: \"AT_TARGET\",\n    get: function get() {\n      return AT_TARGET;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-bubbling_phase\n     */\n\n  }, {\n    key: \"BUBBLING_PHASE\",\n    get: function get() {\n      return BUBBLING_PHASE;\n    }\n    /**\n     * The current event phase.\n     * @see https://dom.spec.whatwg.org/#dom-event-eventphase\n     */\n\n  }, {\n    key: \"eventPhase\",\n    get: function get() {\n      return $(this).dispatchFlag ? 2 : 0;\n    }\n  }, {\n    key: \"cancelBubble\",\n    get: function get() {\n      return $(this).stopPropagationFlag;\n    }\n    /**\n     * Stop event bubbling if `true` is set.\n     * @deprecated Use the `stopPropagation()` method instead.\n     * @see https://dom.spec.whatwg.org/#dom-event-cancelbubble\n     */\n    ,\n    set: function set(value) {\n      if (value) {\n        $(this).stopPropagationFlag = true;\n      } else {\n        FalsyWasAssignedToCancelBubble.warn();\n      }\n    }\n  }, {\n    key: \"bubbles\",\n    get: function get() {\n      return $(this).bubbles;\n    }\n    /**\n     * `true` if this event can be canceled by the `preventDefault()` method.\n     * @see https://dom.spec.whatwg.org/#dom-event-cancelable\n     */\n\n  }, {\n    key: \"cancelable\",\n    get: function get() {\n      return $(this).cancelable;\n    }\n    /**\n     * `true` if the default behavior will act.\n     * @deprecated Use the `defaultPrevented` proeprty instead.\n     * @see https://dom.spec.whatwg.org/#dom-event-returnvalue\n     */\n\n  }, {\n    key: \"returnValue\",\n    get: function get() {\n      return !$(this).canceledFlag;\n    }\n    /**\n     * Cancel the default behavior if `false` is set.\n     * @deprecated Use the `preventDefault()` method instead.\n     * @see https://dom.spec.whatwg.org/#dom-event-returnvalue\n     */\n    ,\n    set: function set(value) {\n      if (!value) {\n        setCancelFlag($(this));\n      } else {\n        TruthyWasAssignedToReturnValue.warn();\n      }\n    }\n  }, {\n    key: \"defaultPrevented\",\n    get: function get() {\n      return $(this).canceledFlag;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-composed\n     */\n\n  }, {\n    key: \"composed\",\n    get: function get() {\n      return $(this).composed;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-istrusted\n     */\n    //istanbul ignore next\n\n  }, {\n    key: \"isTrusted\",\n    get: function get() {\n      return false;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-timestamp\n     */\n\n  }, {\n    key: \"timeStamp\",\n    get: function get() {\n      return $(this).timeStamp;\n    }\n  }]);\n\n  return Event;\n}(); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nvar NONE = 0;\nvar CAPTURING_PHASE = 1;\nvar AT_TARGET = 2;\nvar BUBBLING_PHASE = 3;\n/**\n * Private data for event wrappers.\n */\n\nvar internalDataMap = new WeakMap();\n/**\n * Get private data.\n * @param event The event object to get private data.\n * @param name The variable name to report.\n * @returns The private data of the event.\n */\n\nfunction $(event) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"this\";\n  var retv = internalDataMap.get(event);\n  assertType(retv != null, \"'%s' must be an object that Event constructor created, but got another one: %o\", name, event);\n  return retv;\n}\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data private data.\n */\n\n\nfunction setCancelFlag(data) {\n  if (data.inPassiveListenerFlag) {\n    CanceledInPassiveListener.warn();\n    return;\n  }\n\n  if (!data.cancelable) {\n    NonCancelableEventWasCanceled.warn();\n    return;\n  }\n\n  data.canceledFlag = true;\n} // Set enumerable\n\n\nObject.defineProperty(Event, \"NONE\", {\n  enumerable: true\n});\nObject.defineProperty(Event, \"CAPTURING_PHASE\", {\n  enumerable: true\n});\nObject.defineProperty(Event, \"AT_TARGET\", {\n  enumerable: true\n});\nObject.defineProperty(Event, \"BUBBLING_PHASE\", {\n  enumerable: true\n});\nvar keys = Object.getOwnPropertyNames(Event.prototype);\n\nfor (var i = 0; i < keys.length; ++i) {\n  if (keys[i] === \"constructor\") {\n    continue;\n  }\n\n  Object.defineProperty(Event.prototype, keys[i], {\n    enumerable: true\n  });\n} // Ensure `event instanceof window.Event` is `true`.\n\n\nif (typeof Global !== \"undefined\" && typeof Global.Event !== \"undefined\") {\n  Object.setPrototypeOf(Event.prototype, Global.Event.prototype);\n}\n/**\n * Create a new InvalidStateError instance.\n * @param message The error message.\n */\n\n\nfunction createInvalidStateError(message) {\n  if (Global.DOMException) {\n    return new Global.DOMException(message, \"InvalidStateError\");\n  }\n\n  if (DOMException == null) {\n    DOMException = /*#__PURE__*/function (_Error) {\n      _inherits__default['default'](DOMException, _Error);\n\n      var _super = _createSuper(DOMException);\n\n      function DOMException(msg) {\n        var _this;\n\n        _classCallCheck__default['default'](this, DOMException);\n\n        _this = _super.call(this, msg);\n\n        if (Error.captureStackTrace) {\n          Error.captureStackTrace(_assertThisInitialized__default['default'](_this), DOMException);\n        }\n\n        return _this;\n      } // eslint-disable-next-line class-methods-use-this\n\n\n      _createClass__default['default'](DOMException, [{\n        key: \"code\",\n        get: function get() {\n          return 11;\n        } // eslint-disable-next-line class-methods-use-this\n\n      }, {\n        key: \"name\",\n        get: function get() {\n          return \"InvalidStateError\";\n        }\n      }]);\n\n      return DOMException;\n    }( /*#__PURE__*/_wrapNativeSuper__default['default'](Error));\n\n    Object.defineProperties(DOMException.prototype, {\n      code: {\n        enumerable: true\n      },\n      name: {\n        enumerable: true\n      }\n    });\n    defineErrorCodeProperties(DOMException);\n    defineErrorCodeProperties(DOMException.prototype);\n  }\n\n  return new DOMException(message);\n} //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nvar DOMException;\nvar ErrorCodeMap = {\n  INDEX_SIZE_ERR: 1,\n  DOMSTRING_SIZE_ERR: 2,\n  HIERARCHY_REQUEST_ERR: 3,\n  WRONG_DOCUMENT_ERR: 4,\n  INVALID_CHARACTER_ERR: 5,\n  NO_DATA_ALLOWED_ERR: 6,\n  NO_MODIFICATION_ALLOWED_ERR: 7,\n  NOT_FOUND_ERR: 8,\n  NOT_SUPPORTED_ERR: 9,\n  INUSE_ATTRIBUTE_ERR: 10,\n  INVALID_STATE_ERR: 11,\n  SYNTAX_ERR: 12,\n  INVALID_MODIFICATION_ERR: 13,\n  NAMESPACE_ERR: 14,\n  INVALID_ACCESS_ERR: 15,\n  VALIDATION_ERR: 16,\n  TYPE_MISMATCH_ERR: 17,\n  SECURITY_ERR: 18,\n  NETWORK_ERR: 19,\n  ABORT_ERR: 20,\n  URL_MISMATCH_ERR: 21,\n  QUOTA_EXCEEDED_ERR: 22,\n  TIMEOUT_ERR: 23,\n  INVALID_NODE_TYPE_ERR: 24,\n  DATA_CLONE_ERR: 25\n};\n\nfunction defineErrorCodeProperties(obj) {\n  var keys = Object.keys(ErrorCodeMap);\n\n  var _loop = function _loop(_i) {\n    var key = keys[_i];\n    var value = ErrorCodeMap[key];\n    Object.defineProperty(obj, key, {\n      get: function get() {\n        return value;\n      },\n      configurable: true,\n      enumerable: true\n    });\n  };\n\n  for (var _i = 0; _i < keys.length; ++_i) {\n    _loop(_i);\n  }\n}\n/**\n * An implementation of `Event` interface, that wraps a given event object.\n * This class controls the internal state of `Event`.\n * @see https://dom.spec.whatwg.org/#interface-event\n */\n\n\nvar EventWrapper = /*#__PURE__*/function (_Event) {\n  _inherits__default['default'](EventWrapper, _Event);\n\n  var _super2 = _createSuper(EventWrapper);\n\n  _createClass__default['default'](EventWrapper, null, [{\n    key: \"wrap\",\n\n    /**\n     * Wrap a given event object to control states.\n     * @param event The event-like object to wrap.\n     */\n    value: function wrap(event) {\n      return new (getWrapperClassOf(event))(event);\n    }\n  }]);\n\n  function EventWrapper(event) {\n    var _thisSuper, _thisSuper2, _this2;\n\n    _classCallCheck__default['default'](this, EventWrapper);\n\n    _this2 = _super2.call(this, event.type, {\n      bubbles: event.bubbles,\n      cancelable: event.cancelable,\n      composed: event.composed\n    });\n\n    if (event.cancelBubble) {\n      _get__default['default']((_thisSuper = _assertThisInitialized__default['default'](_this2), _getPrototypeOf__default['default'](EventWrapper.prototype)), \"stopPropagation\", _thisSuper).call(_thisSuper);\n    }\n\n    if (event.defaultPrevented) {\n      _get__default['default']((_thisSuper2 = _assertThisInitialized__default['default'](_this2), _getPrototypeOf__default['default'](EventWrapper.prototype)), \"preventDefault\", _thisSuper2).call(_thisSuper2);\n    }\n\n    internalDataMap$1.set(_assertThisInitialized__default['default'](_this2), {\n      original: event\n    }); // Define accessors\n\n    var keys = Object.keys(event);\n\n    for (var _i2 = 0; _i2 < keys.length; ++_i2) {\n      var key = keys[_i2];\n\n      if (!(key in _assertThisInitialized__default['default'](_this2))) {\n        Object.defineProperty(_assertThisInitialized__default['default'](_this2), key, defineRedirectDescriptor(event, key));\n      }\n    }\n\n    return _this2;\n  }\n\n  _createClass__default['default'](EventWrapper, [{\n    key: \"stopPropagation\",\n    value: function stopPropagation() {\n      _get__default['default'](_getPrototypeOf__default['default'](EventWrapper.prototype), \"stopPropagation\", this).call(this);\n\n      var _$$ = $$1(this),\n          original = _$$.original;\n\n      if (\"stopPropagation\" in original) {\n        original.stopPropagation();\n      }\n    }\n  }, {\n    key: \"stopImmediatePropagation\",\n    value: function stopImmediatePropagation() {\n      _get__default['default'](_getPrototypeOf__default['default'](EventWrapper.prototype), \"stopImmediatePropagation\", this).call(this);\n\n      var _$$2 = $$1(this),\n          original = _$$2.original;\n\n      if (\"stopImmediatePropagation\" in original) {\n        original.stopImmediatePropagation();\n      }\n    }\n  }, {\n    key: \"preventDefault\",\n    value: function preventDefault() {\n      _get__default['default'](_getPrototypeOf__default['default'](EventWrapper.prototype), \"preventDefault\", this).call(this);\n\n      var _$$3 = $$1(this),\n          original = _$$3.original;\n\n      if (\"preventDefault\" in original) {\n        original.preventDefault();\n      }\n    }\n  }, {\n    key: \"cancelBubble\",\n    get: function get() {\n      return _get__default['default'](_getPrototypeOf__default['default'](EventWrapper.prototype), \"cancelBubble\", this);\n    },\n    set: function set(value) {\n      _set__default['default'](_getPrototypeOf__default['default'](EventWrapper.prototype), \"cancelBubble\", value, this, true);\n\n      var _$$4 = $$1(this),\n          original = _$$4.original;\n\n      if (\"cancelBubble\" in original) {\n        original.cancelBubble = value;\n      }\n    }\n  }, {\n    key: \"returnValue\",\n    get: function get() {\n      return _get__default['default'](_getPrototypeOf__default['default'](EventWrapper.prototype), \"returnValue\", this);\n    },\n    set: function set(value) {\n      _set__default['default'](_getPrototypeOf__default['default'](EventWrapper.prototype), \"returnValue\", value, this, true);\n\n      var _$$5 = $$1(this),\n          original = _$$5.original;\n\n      if (\"returnValue\" in original) {\n        original.returnValue = value;\n      }\n    }\n  }, {\n    key: \"timeStamp\",\n    get: function get() {\n      var _$$6 = $$1(this),\n          original = _$$6.original;\n\n      if (\"timeStamp\" in original) {\n        return original.timeStamp;\n      }\n\n      return _get__default['default'](_getPrototypeOf__default['default'](EventWrapper.prototype), \"timeStamp\", this);\n    }\n  }]);\n\n  return EventWrapper;\n}(Event);\n/**\n * Private data for event wrappers.\n */\n\n\nvar internalDataMap$1 = new WeakMap();\n/**\n * Get private data.\n * @param event The event object to get private data.\n * @returns The private data of the event.\n */\n\nfunction $$1(event) {\n  var retv = internalDataMap$1.get(event);\n  assertType(retv != null, \"'this' is expected an Event object, but got\", event);\n  return retv;\n}\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */\n\n\nvar wrapperClassCache = new WeakMap(); // Make association for wrappers.\n\nwrapperClassCache.set(Object.prototype, EventWrapper);\n\nif (typeof Global !== \"undefined\" && typeof Global.Event !== \"undefined\") {\n  wrapperClassCache.set(Global.Event.prototype, EventWrapper);\n}\n/**\n * Get the wrapper class of a given prototype.\n * @param originalEvent The event object to wrap.\n */\n\n\nfunction getWrapperClassOf(originalEvent) {\n  var prototype = Object.getPrototypeOf(originalEvent);\n\n  if (prototype == null) {\n    return EventWrapper;\n  }\n\n  var wrapper = wrapperClassCache.get(prototype);\n\n  if (wrapper == null) {\n    wrapper = defineWrapper(getWrapperClassOf(prototype), prototype);\n    wrapperClassCache.set(prototype, wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Define new wrapper class.\n * @param BaseEventWrapper The base wrapper class.\n * @param originalPrototype The prototype of the original event.\n */\n\n\nfunction defineWrapper(BaseEventWrapper, originalPrototype) {\n  var CustomEventWrapper = /*#__PURE__*/function (_BaseEventWrapper) {\n    _inherits__default['default'](CustomEventWrapper, _BaseEventWrapper);\n\n    var _super3 = _createSuper(CustomEventWrapper);\n\n    function CustomEventWrapper() {\n      _classCallCheck__default['default'](this, CustomEventWrapper);\n\n      return _super3.apply(this, arguments);\n    }\n\n    return CustomEventWrapper;\n  }(BaseEventWrapper);\n\n  var keys = Object.keys(originalPrototype);\n\n  for (var _i3 = 0; _i3 < keys.length; ++_i3) {\n    Object.defineProperty(CustomEventWrapper.prototype, keys[_i3], defineRedirectDescriptor(originalPrototype, keys[_i3]));\n  }\n\n  return CustomEventWrapper;\n}\n/**\n * Get the property descriptor to redirect a given property.\n */\n\n\nfunction defineRedirectDescriptor(obj, key) {\n  var d = Object.getOwnPropertyDescriptor(obj, key);\n  return {\n    get: function get() {\n      var original = $$1(this).original;\n      var value = original[key];\n\n      if (typeof value === \"function\") {\n        return value.bind(original);\n      }\n\n      return value;\n    },\n    set: function set(value) {\n      var original = $$1(this).original;\n      original[key] = value;\n    },\n    configurable: d.configurable,\n    enumerable: d.enumerable\n  };\n}\n/**\n * Create a new listener.\n * @param callback The callback function.\n * @param capture The capture flag.\n * @param passive The passive flag.\n * @param once The once flag.\n * @param signal The abort signal.\n * @param signalListener The abort event listener for the abort signal.\n */\n\n\nfunction createListener(callback, capture, passive, once, signal, signalListener) {\n  return {\n    callback: callback,\n    flags: (capture ? 1\n    /* Capture */\n    : 0) | (passive ? 2\n    /* Passive */\n    : 0) | (once ? 4\n    /* Once */\n    : 0),\n    signal: signal,\n    signalListener: signalListener\n  };\n}\n/**\n * Set the `removed` flag to the given listener.\n * @param listener The listener to check.\n */\n\n\nfunction setRemoved(listener) {\n  listener.flags |= 8\n  /* Removed */\n  ;\n}\n/**\n * Check if the given listener has the `capture` flag or not.\n * @param listener The listener to check.\n */\n\n\nfunction isCapture(listener) {\n  return (listener.flags & 1\n  /* Capture */\n  ) === 1\n  /* Capture */\n  ;\n}\n/**\n * Check if the given listener has the `passive` flag or not.\n * @param listener The listener to check.\n */\n\n\nfunction isPassive(listener) {\n  return (listener.flags & 2\n  /* Passive */\n  ) === 2\n  /* Passive */\n  ;\n}\n/**\n * Check if the given listener has the `once` flag or not.\n * @param listener The listener to check.\n */\n\n\nfunction isOnce(listener) {\n  return (listener.flags & 4\n  /* Once */\n  ) === 4\n  /* Once */\n  ;\n}\n/**\n * Check if the given listener has the `removed` flag or not.\n * @param listener The listener to check.\n */\n\n\nfunction isRemoved(listener) {\n  return (listener.flags & 8\n  /* Removed */\n  ) === 8\n  /* Removed */\n  ;\n}\n/**\n * Call an event listener.\n * @param listener The listener to call.\n * @param target The event target object for `thisArg`.\n * @param event The event object for the first argument.\n * @param attribute `true` if this callback is an event attribute handler.\n */\n\n\nfunction invokeCallback(_ref, target, event) {\n  var callback = _ref.callback;\n\n  try {\n    if (typeof callback === \"function\") {\n      callback.call(target, event);\n    } else if (typeof callback.handleEvent === \"function\") {\n      callback.handleEvent(event);\n    }\n  } catch (thrownError) {\n    reportError(thrownError);\n  }\n}\n/**\n * Find the index of given listener.\n * This returns `-1` if not found.\n * @param list The listener list.\n * @param callback The callback function to find.\n * @param capture The capture flag to find.\n */\n\n\nfunction findIndexOfListener(_ref2, callback, capture) {\n  var listeners = _ref2.listeners;\n\n  for (var _i4 = 0; _i4 < listeners.length; ++_i4) {\n    if (listeners[_i4].callback === callback && isCapture(listeners[_i4]) === capture) {\n      return _i4;\n    }\n  }\n\n  return -1;\n}\n/**\n * Add the given listener.\n * Does copy-on-write if needed.\n * @param list The listener list.\n * @param callback The callback function.\n * @param capture The capture flag.\n * @param passive The passive flag.\n * @param once The once flag.\n * @param signal The abort signal.\n */\n\n\nfunction addListener(list, callback, capture, passive, once, signal) {\n  var signalListener;\n\n  if (signal) {\n    signalListener = removeListener.bind(null, list, callback, capture);\n    signal.addEventListener(\"abort\", signalListener);\n  }\n\n  var listener = createListener(callback, capture, passive, once, signal, signalListener);\n\n  if (list.cow) {\n    list.cow = false;\n    list.listeners = [].concat(_toConsumableArray__default['default'](list.listeners), [listener]);\n  } else {\n    list.listeners.push(listener);\n  }\n\n  return listener;\n}\n/**\n * Remove a listener.\n * @param list The listener list.\n * @param callback The callback function to find.\n * @param capture The capture flag to find.\n * @returns `true` if it mutated the list directly.\n */\n\n\nfunction removeListener(list, callback, capture) {\n  var index = findIndexOfListener(list, callback, capture);\n\n  if (index !== -1) {\n    return removeListenerAt(list, index);\n  }\n\n  return false;\n}\n/**\n * Remove a listener.\n * @param list The listener list.\n * @param index The index of the target listener.\n * @param disableCow Disable copy-on-write if true.\n * @returns `true` if it mutated the `listeners` array directly.\n */\n\n\nfunction removeListenerAt(list, index) {\n  var disableCow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var listener = list.listeners[index]; // Set the removed flag.\n\n  setRemoved(listener); // Dispose the abort signal listener if exists.\n\n  if (listener.signal) {\n    listener.signal.removeEventListener(\"abort\", listener.signalListener);\n  } // Remove it from the array.\n\n\n  if (list.cow && !disableCow) {\n    list.cow = false;\n    list.listeners = list.listeners.filter(function (_, i) {\n      return i !== index;\n    });\n    return false;\n  }\n\n  list.listeners.splice(index, 1);\n  return true;\n}\n/**\n * Create a new `ListenerListMap` object.\n */\n\n\nfunction createListenerListMap() {\n  return Object.create(null);\n}\n/**\n * Get the listener list of the given type.\n * If the listener list has not been initialized, initialize and return it.\n * @param listenerMap The listener list map.\n * @param type The event type to get.\n */\n\n\nfunction ensureListenerList(listenerMap, type) {\n  var _a;\n\n  return (_a = listenerMap[type]) !== null && _a !== void 0 ? _a : listenerMap[type] = {\n    attrCallback: undefined,\n    attrListener: undefined,\n    cow: false,\n    listeners: []\n  };\n}\n/**\n * An implementation of the `EventTarget` interface.\n * @see https://dom.spec.whatwg.org/#eventtarget\n */\n\n\nvar EventTarget = /*#__PURE__*/function () {\n  /**\n   * Initialize this instance.\n   */\n  function EventTarget() {\n    _classCallCheck__default['default'](this, EventTarget);\n\n    internalDataMap$2.set(this, createListenerListMap());\n  } // Implementation\n\n\n  _createClass__default['default'](EventTarget, [{\n    key: \"addEventListener\",\n    value: function addEventListener(type0, callback0, options0) {\n      var listenerMap = $$2(this);\n\n      var _normalizeAddOptions = normalizeAddOptions(type0, callback0, options0),\n          callback = _normalizeAddOptions.callback,\n          capture = _normalizeAddOptions.capture,\n          once = _normalizeAddOptions.once,\n          passive = _normalizeAddOptions.passive,\n          signal = _normalizeAddOptions.signal,\n          type = _normalizeAddOptions.type;\n\n      if (callback == null || (signal === null || signal === void 0 ? void 0 : signal.aborted)) {\n        return;\n      }\n\n      var list = ensureListenerList(listenerMap, type); // Find existing listener.\n\n      var i = findIndexOfListener(list, callback, capture);\n\n      if (i !== -1) {\n        warnDuplicate(list.listeners[i], passive, once, signal);\n        return;\n      } // Add the new listener.\n\n\n      addListener(list, callback, capture, passive, once, signal);\n    } // Implementation\n\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type0, callback0, options0) {\n      var listenerMap = $$2(this);\n\n      var _normalizeOptions = normalizeOptions(type0, callback0, options0),\n          callback = _normalizeOptions.callback,\n          capture = _normalizeOptions.capture,\n          type = _normalizeOptions.type;\n\n      var list = listenerMap[type];\n\n      if (callback != null && list) {\n        removeListener(list, callback, capture);\n      }\n    } // Implementation\n\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(e) {\n      var list = $$2(this)[String(e.type)];\n\n      if (list == null) {\n        return true;\n      }\n\n      var event = e instanceof Event ? e : EventWrapper.wrap(e);\n      var eventData = $(event, \"event\");\n\n      if (eventData.dispatchFlag) {\n        throw createInvalidStateError(\"This event has been in dispatching.\");\n      }\n\n      eventData.dispatchFlag = true;\n      eventData.target = eventData.currentTarget = this;\n\n      if (!eventData.stopPropagationFlag) {\n        var cow = list.cow,\n            listeners = list.listeners; // Set copy-on-write flag.\n\n        list.cow = true; // Call listeners.\n\n        for (var _i5 = 0; _i5 < listeners.length; ++_i5) {\n          var listener = listeners[_i5]; // Skip if removed.\n\n          if (isRemoved(listener)) {\n            continue;\n          } // Remove this listener if has the `once` flag.\n\n\n          if (isOnce(listener) && removeListenerAt(list, _i5, !cow)) {\n            // Because this listener was removed, the next index is the\n            // same as the current value.\n            _i5 -= 1;\n          } // Call this listener with the `passive` flag.\n\n\n          eventData.inPassiveListenerFlag = isPassive(listener);\n          invokeCallback(listener, this, event);\n          eventData.inPassiveListenerFlag = false; // Stop if the `event.stopImmediatePropagation()` method was called.\n\n          if (eventData.stopImmediatePropagationFlag) {\n            break;\n          }\n        } // Restore copy-on-write flag.\n\n\n        if (!cow) {\n          list.cow = false;\n        }\n      }\n\n      eventData.target = null;\n      eventData.currentTarget = null;\n      eventData.stopImmediatePropagationFlag = false;\n      eventData.stopPropagationFlag = false;\n      eventData.dispatchFlag = false;\n      return !eventData.canceledFlag;\n    }\n  }]);\n\n  return EventTarget;\n}();\n/**\n * Internal data.\n */\n\n\nvar internalDataMap$2 = new WeakMap();\n/**\n * Get private data.\n * @param target The event target object to get private data.\n * @param name The variable name to report.\n * @returns The private data of the event.\n */\n\nfunction $$2(target) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"this\";\n  var retv = internalDataMap$2.get(target);\n  assertType(retv != null, \"'%s' must be an object that EventTarget constructor created, but got another one: %o\", name, target);\n  return retv;\n}\n/**\n * Normalize options.\n * @param options The options to normalize.\n */\n\n\nfunction normalizeAddOptions(type, callback, options) {\n  var _a;\n\n  assertCallback(callback);\n\n  if (_typeof__default['default'](options) === \"object\" && options !== null) {\n    return {\n      type: String(type),\n      callback: callback !== null && callback !== void 0 ? callback : undefined,\n      capture: Boolean(options.capture),\n      passive: Boolean(options.passive),\n      once: Boolean(options.once),\n      signal: (_a = options.signal) !== null && _a !== void 0 ? _a : undefined\n    };\n  }\n\n  return {\n    type: String(type),\n    callback: callback !== null && callback !== void 0 ? callback : undefined,\n    capture: Boolean(options),\n    passive: false,\n    once: false,\n    signal: undefined\n  };\n}\n/**\n * Normalize options.\n * @param options The options to normalize.\n */\n\n\nfunction normalizeOptions(type, callback, options) {\n  assertCallback(callback);\n\n  if (_typeof__default['default'](options) === \"object\" && options !== null) {\n    return {\n      type: String(type),\n      callback: callback !== null && callback !== void 0 ? callback : undefined,\n      capture: Boolean(options.capture)\n    };\n  }\n\n  return {\n    type: String(type),\n    callback: callback !== null && callback !== void 0 ? callback : undefined,\n    capture: Boolean(options)\n  };\n}\n/**\n * Assert the type of 'callback' argument.\n * @param callback The callback to check.\n */\n\n\nfunction assertCallback(callback) {\n  if (typeof callback === \"function\" || _typeof__default['default'](callback) === \"object\" && callback !== null && typeof callback.handleEvent === \"function\") {\n    return;\n  }\n\n  if (callback == null || _typeof__default['default'](callback) === \"object\") {\n    InvalidEventListener.warn(callback);\n    return;\n  }\n\n  throw new TypeError(format(InvalidEventListener.message, [callback]));\n}\n/**\n * Print warning for duplicated.\n * @param listener The current listener that is duplicated.\n * @param passive The passive flag of the new duplicated listener.\n * @param once The once flag of the new duplicated listener.\n * @param signal The signal object of the new duplicated listener.\n */\n\n\nfunction warnDuplicate(listener, passive, once, signal) {\n  EventListenerWasDuplicated.warn(isCapture(listener) ? \"capture\" : \"bubble\", listener.callback);\n\n  if (isPassive(listener) !== passive) {\n    OptionWasIgnored.warn(\"passive\");\n  }\n\n  if (isOnce(listener) !== once) {\n    OptionWasIgnored.warn(\"once\");\n  }\n\n  if (listener.signal !== signal) {\n    OptionWasIgnored.warn(\"signal\");\n  }\n} // Set enumerable\n\n\nvar keys$1 = Object.getOwnPropertyNames(EventTarget.prototype);\n\nfor (var _i6 = 0; _i6 < keys$1.length; ++_i6) {\n  if (keys$1[_i6] === \"constructor\") {\n    continue;\n  }\n\n  Object.defineProperty(EventTarget.prototype, keys$1[_i6], {\n    enumerable: true\n  });\n} // Ensure `eventTarget instanceof window.EventTarget` is `true`.\n\n\nif (typeof Global !== \"undefined\" && typeof Global.EventTarget !== \"undefined\") {\n  Object.setPrototypeOf(EventTarget.prototype, Global.EventTarget.prototype);\n}\n/**\n * Get the current value of a given event attribute.\n * @param target The `EventTarget` object to get.\n * @param type The event type.\n */\n\n\nfunction getEventAttributeValue(target, type) {\n  var _a, _b;\n\n  var listMap = $$2(target, \"target\");\n  return (_b = (_a = listMap[type]) === null || _a === void 0 ? void 0 : _a.attrCallback) !== null && _b !== void 0 ? _b : null;\n}\n/**\n * Set an event listener to a given event attribute.\n * @param target The `EventTarget` object to set.\n * @param type The event type.\n * @param callback The event listener.\n */\n\n\nfunction setEventAttributeValue(target, type, callback) {\n  if (callback != null && typeof callback !== \"function\") {\n    InvalidAttributeHandler.warn(callback);\n  }\n\n  if (typeof callback === \"function\" || _typeof__default['default'](callback) === \"object\" && callback !== null) {\n    upsertEventAttributeListener(target, type, callback);\n  } else {\n    removeEventAttributeListener(target, type);\n  }\n} //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Update or insert the given event attribute handler.\n * @param target The `EventTarget` object to set.\n * @param type The event type.\n * @param callback The event listener.\n */\n\n\nfunction upsertEventAttributeListener(target, type, callback) {\n  var list = ensureListenerList($$2(target, \"target\"), String(type));\n  list.attrCallback = callback;\n\n  if (list.attrListener == null) {\n    list.attrListener = addListener(list, defineEventAttributeCallback(list), false, false, false, undefined);\n  }\n}\n/**\n * Remove the given event attribute handler.\n * @param target The `EventTarget` object to remove.\n * @param type The event type.\n * @param callback The event listener.\n */\n\n\nfunction removeEventAttributeListener(target, type) {\n  var listMap = $$2(target, \"target\");\n  var list = listMap[String(type)];\n\n  if (list && list.attrListener) {\n    removeListener(list, list.attrListener.callback, false);\n    list.attrCallback = list.attrListener = undefined;\n  }\n}\n/**\n * Define the callback function for the given listener list object.\n * It calls `attrCallback` property if the property value is a function.\n * @param list The `ListenerList` object.\n */\n\n\nfunction defineEventAttributeCallback(list) {\n  return function (event) {\n    var callback = list.attrCallback;\n\n    if (typeof callback === \"function\") {\n      callback.call(this, event);\n    }\n  };\n}\n/**\n * Define an `EventTarget` class that has event attibutes.\n * @param types The types to define event attributes.\n * @deprecated Use `getEventAttributeValue`/`setEventAttributeValue` pair on your derived class instead because of static analysis friendly.\n */\n\n\nfunction defineCustomEventTarget() {\n  var CustomEventTarget = /*#__PURE__*/function (_EventTarget) {\n    _inherits__default['default'](CustomEventTarget, _EventTarget);\n\n    var _super4 = _createSuper(CustomEventTarget);\n\n    function CustomEventTarget() {\n      _classCallCheck__default['default'](this, CustomEventTarget);\n\n      return _super4.apply(this, arguments);\n    }\n\n    return CustomEventTarget;\n  }(EventTarget);\n\n  for (var _i7 = 0; _i7 < arguments.length; ++_i7) {\n    defineEventAttribute(CustomEventTarget.prototype, _i7 < 0 || arguments.length <= _i7 ? undefined : arguments[_i7]);\n  }\n\n  return CustomEventTarget;\n}\n/**\n * Define an event attribute.\n * @param target The `EventTarget` object to define an event attribute.\n * @param type The event type to define.\n * @param _eventClass Unused, but to infer `Event` class type.\n * @deprecated Use `getEventAttributeValue`/`setEventAttributeValue` pair on your derived class instead because of static analysis friendly.\n */\n\n\nfunction defineEventAttribute(target, type, _eventClass) {\n  Object.defineProperty(target, \"on\".concat(type), {\n    get: function get() {\n      return getEventAttributeValue(this, type);\n    },\n    set: function set(value) {\n      setEventAttributeValue(this, type, value);\n    },\n    configurable: true,\n    enumerable: true\n  });\n}\n\nexports.Event = Event;\nexports.EventTarget = EventTarget;\nexports.default = EventTarget;\nexports.defineCustomEventTarget = defineCustomEventTarget;\nexports.defineEventAttribute = defineEventAttribute;\nexports.getEventAttributeValue = getEventAttributeValue;\nexports.setErrorHandler = setErrorHandler;\nexports.setEventAttributeValue = setEventAttributeValue;\nexports.setWarningHandler = setWarningHandler;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\n\nvar iterableToArray = require(\"./iterableToArray.js\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var superPropBase = require(\"./superPropBase.js\");\n\nvar defineProperty = require(\"./defineProperty.js\");\n\nfunction set(target, property, value, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.set) {\n    set = Reflect.set;\n  } else {\n    set = function set(target, property, value, receiver) {\n      var base = superPropBase(target, property);\n      var desc;\n\n      if (base) {\n        desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.set) {\n          desc.set.call(receiver, value);\n          return true;\n        } else if (!desc.writable) {\n          return false;\n        }\n      }\n\n      desc = Object.getOwnPropertyDescriptor(receiver, property);\n\n      if (desc) {\n        if (!desc.writable) {\n          return false;\n        }\n\n        desc.value = value;\n        Object.defineProperty(receiver, property, desc);\n      } else {\n        defineProperty(receiver, property, value);\n      }\n\n      return true;\n    };\n  }\n\n  return set(target, property, value, receiver);\n}\n\nfunction _set(target, property, value, receiver, isStrict) {\n  var s = set(target, property, value, receiver || target);\n\n  if (!s && isStrict) {\n    throw new Error('failed to set property');\n  }\n\n  return value;\n}\n\nmodule.exports = _set, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var getPrototypeOf = require(\"./getPrototypeOf.js\");\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nmodule.exports = _superPropBase, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var superPropBase = require(\"./superPropBase.js\");\n\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    module.exports = _get = Reflect.get.bind(), module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  } else {\n    module.exports = _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  }\n\n  return _get.apply(this, arguments);\n}\n\nmodule.exports = _get, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var getPrototypeOf = require(\"./getPrototypeOf.js\");\n\nvar setPrototypeOf = require(\"./setPrototypeOf.js\");\n\nvar isNativeFunction = require(\"./isNativeFunction.js\");\n\nvar construct = require(\"./construct.js\");\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _wrapNativeSuper(Class);\n}\n\nmodule.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nmodule.exports = _isNativeFunction, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\n\nvar isNativeReflectConstruct = require(\"./isNativeReflectConstruct.js\");\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    module.exports = _construct = Reflect.construct.bind(), module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  } else {\n    module.exports = _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nmodule.exports = _construct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nmodule.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import _Promise from \"@babel/runtime-corejs3/core-js-stable/promise\";\n// ../p-defer/index.js\nfunction pDefer() {\n  var deferred = {};\n  deferred.promise = new _Promise(function (resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n  return deferred;\n}\n\n// src/index.mjs\nvar src_default = pDefer;\nexport { src_default as default };\n","module.exports = require(\"core-js-pure/stable/promise\");","'use strict';\nvar parent = require('../../es/promise');\nrequire('../../modules/web.dom-collections.iterator');\n\nmodule.exports = parent;\n","'use strict';\nrequire('../../modules/es.aggregate-error');\nrequire('../../modules/es.array.iterator');\nrequire('../../modules/es.object.to-string');\nrequire('../../modules/es.promise');\nrequire('../../modules/es.promise.all-settled');\nrequire('../../modules/es.promise.any');\nrequire('../../modules/es.promise.finally');\nrequire('../../modules/es.string.iterator');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Promise;\n","'use strict';\n// TODO: Remove this module from `core-js@4` since it's replaced to module below\nrequire('../modules/es.aggregate-error.constructor');\n","'use strict';\nvar $ = require('../internals/export');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar copyConstructorProperties = require('../internals/copy-constructor-properties');\nvar create = require('../internals/object-create');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar installErrorCause = require('../internals/install-error-cause');\nvar installErrorStack = require('../internals/error-stack-install');\nvar iterate = require('../internals/iterate');\nvar normalizeStringArgument = require('../internals/normalize-string-argument');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar $Error = Error;\nvar push = [].push;\n\nvar $AggregateError = function AggregateError(errors, message /* , options */) {\n  var isInstance = isPrototypeOf(AggregateErrorPrototype, this);\n  var that;\n  if (setPrototypeOf) {\n    that = setPrototypeOf($Error(), isInstance ? getPrototypeOf(this) : AggregateErrorPrototype);\n  } else {\n    that = isInstance ? this : create(AggregateErrorPrototype);\n    createNonEnumerableProperty(that, TO_STRING_TAG, 'Error');\n  }\n  if (message !== undefined) createNonEnumerableProperty(that, 'message', normalizeStringArgument(message));\n  installErrorStack(that, $AggregateError, that.stack, 1);\n  if (arguments.length > 2) installErrorCause(that, arguments[2]);\n  var errorsArray = [];\n  iterate(errors, push, { that: errorsArray });\n  createNonEnumerableProperty(that, 'errors', errorsArray);\n  return that;\n};\n\nif (setPrototypeOf) setPrototypeOf($AggregateError, $Error);\nelse copyConstructorProperties($AggregateError, $Error, { name: true });\n\nvar AggregateErrorPrototype = $AggregateError.prototype = create($Error.prototype, {\n  constructor: createPropertyDescriptor(1, $AggregateError),\n  message: createPropertyDescriptor(1, ''),\n  name: createPropertyDescriptor(1, 'AggregateError')\n});\n\n// `AggregateError` constructor\n// https://tc39.es/ecma262/#sec-aggregate-error-constructor\n$({ global: true, constructor: true, arity: 2 }, {\n  AggregateError: $AggregateError\n});\n","'use strict';\nvar global = require('../internals/global');\nvar apply = require('../internals/function-apply');\nvar uncurryThis = require('../internals/function-uncurry-this-clause');\nvar isCallable = require('../internals/is-callable');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar isForced = require('../internals/is-forced');\nvar path = require('../internals/path');\nvar bind = require('../internals/function-bind-context');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar hasOwn = require('../internals/has-own-property');\n\nvar wrapConstructor = function (NativeConstructor) {\n  var Wrapper = function (a, b, c) {\n    if (this instanceof Wrapper) {\n      switch (arguments.length) {\n        case 0: return new NativeConstructor();\n        case 1: return new NativeConstructor(a);\n        case 2: return new NativeConstructor(a, b);\n      } return new NativeConstructor(a, b, c);\n    } return apply(NativeConstructor, this, arguments);\n  };\n  Wrapper.prototype = NativeConstructor.prototype;\n  return Wrapper;\n};\n\n/*\n  options.target         - name of the target object\n  options.global         - target is the global object\n  options.stat           - export as static methods of target\n  options.proto          - export as prototype methods of target\n  options.real           - real prototype method for the `pure` version\n  options.forced         - export even if the native feature is available\n  options.bind           - bind methods to the target, required for the `pure` version\n  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe         - use the simple assignment of property instead of delete + defineProperty\n  options.sham           - add a flag to not completely full polyfills\n  options.enumerable     - export as enumerable property\n  options.dontCallGetSet - prevent calling a getter on target\n  options.name           - the .name of the function if it does not match the key\n*/\nmodule.exports = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var PROTO = options.proto;\n\n  var nativeSource = GLOBAL ? global : STATIC ? global[TARGET] : (global[TARGET] || {}).prototype;\n\n  var target = GLOBAL ? path : path[TARGET] || createNonEnumerableProperty(path, TARGET, {})[TARGET];\n  var targetPrototype = target.prototype;\n\n  var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;\n  var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;\n\n  for (key in source) {\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contains in native\n    USE_NATIVE = !FORCED && nativeSource && hasOwn(nativeSource, key);\n\n    targetProperty = target[key];\n\n    if (USE_NATIVE) if (options.dontCallGetSet) {\n      descriptor = getOwnPropertyDescriptor(nativeSource, key);\n      nativeProperty = descriptor && descriptor.value;\n    } else nativeProperty = nativeSource[key];\n\n    // export native or implementation\n    sourceProperty = (USE_NATIVE && nativeProperty) ? nativeProperty : source[key];\n\n    if (USE_NATIVE && typeof targetProperty == typeof sourceProperty) continue;\n\n    // bind methods to global for calling from export context\n    if (options.bind && USE_NATIVE) resultProperty = bind(sourceProperty, global);\n    // wrap global constructors for prevent changes in this version\n    else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty);\n    // make static versions for prototype methods\n    else if (PROTO && isCallable(sourceProperty)) resultProperty = uncurryThis(sourceProperty);\n    // default case\n    else resultProperty = sourceProperty;\n\n    // add a flag to not completely full polyfills\n    if (options.sham || (sourceProperty && sourceProperty.sham) || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty(resultProperty, 'sham', true);\n    }\n\n    createNonEnumerableProperty(target, key, resultProperty);\n\n    if (PROTO) {\n      VIRTUAL_PROTOTYPE = TARGET + 'Prototype';\n      if (!hasOwn(path, VIRTUAL_PROTOTYPE)) {\n        createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});\n      }\n      // export virtual prototype methods\n      createNonEnumerableProperty(path[VIRTUAL_PROTOTYPE], key, sourceProperty);\n      // export real prototype methods\n      if (options.real && targetPrototype && (FORCED || !targetPrototype[key])) {\n        createNonEnumerableProperty(targetPrototype, key, sourceProperty);\n      }\n    }\n  }\n};\n","'use strict';\nvar check = function (it) {\n  return it && it.Math === Math && it;\n};\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nmodule.exports =\n  // eslint-disable-next-line es/no-global-this -- safe\n  check(typeof globalThis == 'object' && globalThis) ||\n  check(typeof window == 'object' && window) ||\n  // eslint-disable-next-line no-restricted-globals -- safe\n  check(typeof self == 'object' && self) ||\n  check(typeof global == 'object' && global) ||\n  // eslint-disable-next-line no-new-func -- fallback\n  (function () { return this; })() || this || Function('return this')();\n","'use strict';\nvar NATIVE_BIND = require('../internals/function-bind-native');\n\nvar FunctionPrototype = Function.prototype;\nvar apply = FunctionPrototype.apply;\nvar call = FunctionPrototype.call;\n\n// eslint-disable-next-line es/no-reflect -- safe\nmodule.exports = typeof Reflect == 'object' && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function () {\n  return call.apply(apply, arguments);\n});\n","'use strict';\nvar fails = require('../internals/fails');\n\nmodule.exports = !fails(function () {\n  // eslint-disable-next-line es/no-function-prototype-bind -- safe\n  var test = (function () { /* empty */ }).bind();\n  // eslint-disable-next-line no-prototype-builtins -- safe\n  return typeof test != 'function' || test.hasOwnProperty('prototype');\n});\n","'use strict';\nmodule.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (error) {\n    return true;\n  }\n};\n","'use strict';\nvar classofRaw = require('../internals/classof-raw');\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nmodule.exports = function (fn) {\n  // Nashorn bug:\n  //   https://github.com/zloirock/core-js/issues/1128\n  //   https://github.com/zloirock/core-js/issues/1130\n  if (classofRaw(fn) === 'Function') return uncurryThis(fn);\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar toString = uncurryThis({}.toString);\nvar stringSlice = uncurryThis(''.slice);\n\nmodule.exports = function (it) {\n  return stringSlice(toString(it), 8, -1);\n};\n","'use strict';\nvar NATIVE_BIND = require('../internals/function-bind-native');\n\nvar FunctionPrototype = Function.prototype;\nvar call = FunctionPrototype.call;\nvar uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);\n\nmodule.exports = NATIVE_BIND ? uncurryThisWithBind : function (fn) {\n  return function () {\n    return call.apply(fn, arguments);\n  };\n};\n","'use strict';\nvar $documentAll = require('../internals/document-all');\n\nvar documentAll = $documentAll.all;\n\n// `IsCallable` abstract operation\n// https://tc39.es/ecma262/#sec-iscallable\nmodule.exports = $documentAll.IS_HTMLDDA ? function (argument) {\n  return typeof argument == 'function' || argument === documentAll;\n} : function (argument) {\n  return typeof argument == 'function';\n};\n","'use strict';\nvar documentAll = typeof document == 'object' && document.all;\n\n// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot\n// eslint-disable-next-line unicorn/no-typeof-undefined -- required for testing\nvar IS_HTMLDDA = typeof documentAll == 'undefined' && documentAll !== undefined;\n\nmodule.exports = {\n  all: documentAll,\n  IS_HTMLDDA: IS_HTMLDDA\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar call = require('../internals/function-call');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toPropertyKey = require('../internals/to-property-key');\nvar hasOwn = require('../internals/has-own-property');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\n\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor\nexports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n  O = toIndexedObject(O);\n  P = toPropertyKey(P);\n  if (IE8_DOM_DEFINE) try {\n    return $getOwnPropertyDescriptor(O, P);\n  } catch (error) { /* empty */ }\n  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);\n};\n","'use strict';\nvar fails = require('../internals/fails');\n\n// Detect IE8's incomplete defineProperty implementation\nmodule.exports = !fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] !== 7;\n});\n","'use strict';\nvar NATIVE_BIND = require('../internals/function-bind-native');\n\nvar call = Function.prototype.call;\n\nmodule.exports = NATIVE_BIND ? call.bind(call) : function () {\n  return call.apply(call, arguments);\n};\n","'use strict';\nvar $propertyIsEnumerable = {}.propertyIsEnumerable;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// Nashorn ~ JDK8 bug\nvar NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);\n\n// `Object.prototype.propertyIsEnumerable` method implementation\n// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable\nexports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n  var descriptor = getOwnPropertyDescriptor(this, V);\n  return !!descriptor && descriptor.enumerable;\n} : $propertyIsEnumerable;\n","'use strict';\nmodule.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","'use strict';\n// toObject with fallback for non-array-like ES3 strings\nvar IndexedObject = require('../internals/indexed-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nmodule.exports = function (it) {\n  return IndexedObject(requireObjectCoercible(it));\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar fails = require('../internals/fails');\nvar classof = require('../internals/classof-raw');\n\nvar $Object = Object;\nvar split = uncurryThis(''.split);\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nmodule.exports = fails(function () {\n  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n  // eslint-disable-next-line no-prototype-builtins -- safe\n  return !$Object('z').propertyIsEnumerable(0);\n}) ? function (it) {\n  return classof(it) === 'String' ? split(it, '') : $Object(it);\n} : $Object;\n","'use strict';\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\n\nvar $TypeError = TypeError;\n\n// `RequireObjectCoercible` abstract operation\n// https://tc39.es/ecma262/#sec-requireobjectcoercible\nmodule.exports = function (it) {\n  if (isNullOrUndefined(it)) throw $TypeError(\"Can't call method on \" + it);\n  return it;\n};\n","'use strict';\n// we can't use just `it == null` since of `document.all` special case\n// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec\nmodule.exports = function (it) {\n  return it === null || it === undefined;\n};\n","'use strict';\nvar toPrimitive = require('../internals/to-primitive');\nvar isSymbol = require('../internals/is-symbol');\n\n// `ToPropertyKey` abstract operation\n// https://tc39.es/ecma262/#sec-topropertykey\nmodule.exports = function (argument) {\n  var key = toPrimitive(argument, 'string');\n  return isSymbol(key) ? key : key + '';\n};\n","'use strict';\nvar call = require('../internals/function-call');\nvar isObject = require('../internals/is-object');\nvar isSymbol = require('../internals/is-symbol');\nvar getMethod = require('../internals/get-method');\nvar ordinaryToPrimitive = require('../internals/ordinary-to-primitive');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar $TypeError = TypeError;\nvar TO_PRIMITIVE = wellKnownSymbol('toPrimitive');\n\n// `ToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-toprimitive\nmodule.exports = function (input, pref) {\n  if (!isObject(input) || isSymbol(input)) return input;\n  var exoticToPrim = getMethod(input, TO_PRIMITIVE);\n  var result;\n  if (exoticToPrim) {\n    if (pref === undefined) pref = 'default';\n    result = call(exoticToPrim, input, pref);\n    if (!isObject(result) || isSymbol(result)) return result;\n    throw $TypeError(\"Can't convert object to primitive value\");\n  }\n  if (pref === undefined) pref = 'number';\n  return ordinaryToPrimitive(input, pref);\n};\n","'use strict';\nvar isCallable = require('../internals/is-callable');\nvar $documentAll = require('../internals/document-all');\n\nvar documentAll = $documentAll.all;\n\nmodule.exports = $documentAll.IS_HTMLDDA ? function (it) {\n  return typeof it == 'object' ? it !== null : isCallable(it) || it === documentAll;\n} : function (it) {\n  return typeof it == 'object' ? it !== null : isCallable(it);\n};\n","'use strict';\nvar getBuiltIn = require('../internals/get-built-in');\nvar isCallable = require('../internals/is-callable');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\n\nvar $Object = Object;\n\nmodule.exports = USE_SYMBOL_AS_UID ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  var $Symbol = getBuiltIn('Symbol');\n  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));\n};\n","'use strict';\nvar path = require('../internals/path');\nvar global = require('../internals/global');\nvar isCallable = require('../internals/is-callable');\n\nvar aFunction = function (variable) {\n  return isCallable(variable) ? variable : undefined;\n};\n\nmodule.exports = function (namespace, method) {\n  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])\n    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];\n};\n","'use strict';\nmodule.exports = {};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nmodule.exports = uncurryThis({}.isPrototypeOf);\n","'use strict';\n/* eslint-disable es/no-symbol -- required for testing */\nvar NATIVE_SYMBOL = require('../internals/symbol-constructor-detection');\n\nmodule.exports = NATIVE_SYMBOL\n  && !Symbol.sham\n  && typeof Symbol.iterator == 'symbol';\n","'use strict';\n/* eslint-disable es/no-symbol -- required for testing */\nvar V8_VERSION = require('../internals/engine-v8-version');\nvar fails = require('../internals/fails');\nvar global = require('../internals/global');\n\nvar $String = global.String;\n\n// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing\nmodule.exports = !!Object.getOwnPropertySymbols && !fails(function () {\n  var symbol = Symbol('symbol detection');\n  // Chrome 38 Symbol has incorrect toString conversion\n  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances\n  // nb: Do not call `String` directly to avoid this being optimized out to `symbol+''` which will,\n  // of course, fail.\n  return !$String(symbol) || !(Object(symbol) instanceof Symbol) ||\n    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances\n    !Symbol.sham && V8_VERSION && V8_VERSION < 41;\n});\n","'use strict';\nvar global = require('../internals/global');\nvar userAgent = require('../internals/engine-user-agent');\n\nvar process = global.process;\nvar Deno = global.Deno;\nvar versions = process && process.versions || Deno && Deno.version;\nvar v8 = versions && versions.v8;\nvar match, version;\n\nif (v8) {\n  match = v8.split('.');\n  // in old Chrome, versions of V8 isn't V8 = Chrome / 10\n  // but their correct versions are not interesting for us\n  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);\n}\n\n// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`\n// so check `userAgent` even if `.v8` exists, but 0\nif (!version && userAgent) {\n  match = userAgent.match(/Edge\\/(\\d+)/);\n  if (!match || match[1] >= 74) {\n    match = userAgent.match(/Chrome\\/(\\d+)/);\n    if (match) version = +match[1];\n  }\n}\n\nmodule.exports = version;\n","'use strict';\nmodule.exports = typeof navigator != 'undefined' && String(navigator.userAgent) || '';\n","'use strict';\nvar aCallable = require('../internals/a-callable');\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\n\n// `GetMethod` abstract operation\n// https://tc39.es/ecma262/#sec-getmethod\nmodule.exports = function (V, P) {\n  var func = V[P];\n  return isNullOrUndefined(func) ? undefined : aCallable(func);\n};\n","'use strict';\nvar isCallable = require('../internals/is-callable');\nvar tryToString = require('../internals/try-to-string');\n\nvar $TypeError = TypeError;\n\n// `Assert: IsCallable(argument) is true`\nmodule.exports = function (argument) {\n  if (isCallable(argument)) return argument;\n  throw $TypeError(tryToString(argument) + ' is not a function');\n};\n","'use strict';\nvar $String = String;\n\nmodule.exports = function (argument) {\n  try {\n    return $String(argument);\n  } catch (error) {\n    return 'Object';\n  }\n};\n","'use strict';\nvar call = require('../internals/function-call');\nvar isCallable = require('../internals/is-callable');\nvar isObject = require('../internals/is-object');\n\nvar $TypeError = TypeError;\n\n// `OrdinaryToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-ordinarytoprimitive\nmodule.exports = function (input, pref) {\n  var fn, val;\n  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;\n  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;\n  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;\n  throw $TypeError(\"Can't convert object to primitive value\");\n};\n","'use strict';\nvar global = require('../internals/global');\nvar shared = require('../internals/shared');\nvar hasOwn = require('../internals/has-own-property');\nvar uid = require('../internals/uid');\nvar NATIVE_SYMBOL = require('../internals/symbol-constructor-detection');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\n\nvar Symbol = global.Symbol;\nvar WellKnownSymbolsStore = shared('wks');\nvar createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol['for'] || Symbol : Symbol && Symbol.withoutSetter || uid;\n\nmodule.exports = function (name) {\n  if (!hasOwn(WellKnownSymbolsStore, name)) {\n    WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn(Symbol, name)\n      ? Symbol[name]\n      : createWellKnownSymbol('Symbol.' + name);\n  } return WellKnownSymbolsStore[name];\n};\n","'use strict';\nvar IS_PURE = require('../internals/is-pure');\nvar store = require('../internals/shared-store');\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: '3.32.1',\n  mode: IS_PURE ? 'pure' : 'global',\n  copyright: '© 2014-2023 Denis Pushkarev (zloirock.ru)',\n  license: 'https://github.com/zloirock/core-js/blob/v3.32.1/LICENSE',\n  source: 'https://github.com/zloirock/core-js'\n});\n","'use strict';\nmodule.exports = true;\n","'use strict';\nvar global = require('../internals/global');\nvar defineGlobalProperty = require('../internals/define-global-property');\n\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || defineGlobalProperty(SHARED, {});\n\nmodule.exports = store;\n","'use strict';\nvar global = require('../internals/global');\n\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar defineProperty = Object.defineProperty;\n\nmodule.exports = function (key, value) {\n  try {\n    defineProperty(global, key, { value: value, configurable: true, writable: true });\n  } catch (error) {\n    global[key] = value;\n  } return value;\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toObject = require('../internals/to-object');\n\nvar hasOwnProperty = uncurryThis({}.hasOwnProperty);\n\n// `HasOwnProperty` abstract operation\n// https://tc39.es/ecma262/#sec-hasownproperty\n// eslint-disable-next-line es/no-object-hasown -- safe\nmodule.exports = Object.hasOwn || function hasOwn(it, key) {\n  return hasOwnProperty(toObject(it), key);\n};\n","'use strict';\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar $Object = Object;\n\n// `ToObject` abstract operation\n// https://tc39.es/ecma262/#sec-toobject\nmodule.exports = function (argument) {\n  return $Object(requireObjectCoercible(argument));\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar id = 0;\nvar postfix = Math.random();\nvar toString = uncurryThis(1.0.toString);\n\nmodule.exports = function (key) {\n  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar createElement = require('../internals/document-create-element');\n\n// Thanks to IE8 for its funny defineProperty\nmodule.exports = !DESCRIPTORS && !fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty(createElement('div'), 'a', {\n    get: function () { return 7; }\n  }).a !== 7;\n});\n","'use strict';\nvar global = require('../internals/global');\nvar isObject = require('../internals/is-object');\n\nvar document = global.document;\n// typeof document.createElement is 'object' in old IE\nvar EXISTS = isObject(document) && isObject(document.createElement);\n\nmodule.exports = function (it) {\n  return EXISTS ? document.createElement(it) : {};\n};\n","'use strict';\nvar fails = require('../internals/fails');\nvar isCallable = require('../internals/is-callable');\n\nvar replacement = /#|\\.prototype\\./;\n\nvar isForced = function (feature, detection) {\n  var value = data[normalize(feature)];\n  return value === POLYFILL ? true\n    : value === NATIVE ? false\n    : isCallable(detection) ? fails(detection)\n    : !!detection;\n};\n\nvar normalize = isForced.normalize = function (string) {\n  return String(string).replace(replacement, '.').toLowerCase();\n};\n\nvar data = isForced.data = {};\nvar NATIVE = isForced.NATIVE = 'N';\nvar POLYFILL = isForced.POLYFILL = 'P';\n\nmodule.exports = isForced;\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this-clause');\nvar aCallable = require('../internals/a-callable');\nvar NATIVE_BIND = require('../internals/function-bind-native');\n\nvar bind = uncurryThis(uncurryThis.bind);\n\n// optional / simple context binding\nmodule.exports = function (fn, that) {\n  aCallable(fn);\n  return that === undefined ? fn : NATIVE_BIND ? bind(fn, that) : function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = DESCRIPTORS ? function (object, key, value) {\n  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\nvar V8_PROTOTYPE_DEFINE_BUG = require('../internals/v8-prototype-define-bug');\nvar anObject = require('../internals/an-object');\nvar toPropertyKey = require('../internals/to-property-key');\n\nvar $TypeError = TypeError;\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar $defineProperty = Object.defineProperty;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar ENUMERABLE = 'enumerable';\nvar CONFIGURABLE = 'configurable';\nvar WRITABLE = 'writable';\n\n// `Object.defineProperty` method\n// https://tc39.es/ecma262/#sec-object.defineproperty\nexports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPropertyKey(P);\n  anObject(Attributes);\n  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {\n    var current = $getOwnPropertyDescriptor(O, P);\n    if (current && current[WRITABLE]) {\n      O[P] = Attributes.value;\n      Attributes = {\n        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],\n        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],\n        writable: false\n      };\n    }\n  } return $defineProperty(O, P, Attributes);\n} : $defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPropertyKey(P);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return $defineProperty(O, P, Attributes);\n  } catch (error) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw $TypeError('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\n\n// V8 ~ Chrome 36-\n// https://bugs.chromium.org/p/v8/issues/detail?id=3334\nmodule.exports = DESCRIPTORS && fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty(function () { /* empty */ }, 'prototype', {\n    value: 42,\n    writable: false\n  }).prototype !== 42;\n});\n","'use strict';\nvar isObject = require('../internals/is-object');\n\nvar $String = String;\nvar $TypeError = TypeError;\n\n// `Assert: Type(argument) is Object`\nmodule.exports = function (argument) {\n  if (isObject(argument)) return argument;\n  throw $TypeError($String(argument) + ' is not an object');\n};\n","'use strict';\nvar hasOwn = require('../internals/has-own-property');\nvar isCallable = require('../internals/is-callable');\nvar toObject = require('../internals/to-object');\nvar sharedKey = require('../internals/shared-key');\nvar CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');\n\nvar IE_PROTO = sharedKey('IE_PROTO');\nvar $Object = Object;\nvar ObjectPrototype = $Object.prototype;\n\n// `Object.getPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.getprototypeof\n// eslint-disable-next-line es/no-object-getprototypeof -- safe\nmodule.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function (O) {\n  var object = toObject(O);\n  if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];\n  var constructor = object.constructor;\n  if (isCallable(constructor) && object instanceof constructor) {\n    return constructor.prototype;\n  } return object instanceof $Object ? ObjectPrototype : null;\n};\n","'use strict';\nvar shared = require('../internals/shared');\nvar uid = require('../internals/uid');\n\nvar keys = shared('keys');\n\nmodule.exports = function (key) {\n  return keys[key] || (keys[key] = uid(key));\n};\n","'use strict';\nvar fails = require('../internals/fails');\n\nmodule.exports = !fails(function () {\n  function F() { /* empty */ }\n  F.prototype.constructor = null;\n  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing\n  return Object.getPrototypeOf(new F()) !== F.prototype;\n});\n","'use strict';\n/* eslint-disable no-proto -- safe */\nvar uncurryThisAccessor = require('../internals/function-uncurry-this-accessor');\nvar anObject = require('../internals/an-object');\nvar aPossiblePrototype = require('../internals/a-possible-prototype');\n\n// `Object.setPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.setprototypeof\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n// eslint-disable-next-line es/no-object-setprototypeof -- safe\nmodule.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {\n  var CORRECT_SETTER = false;\n  var test = {};\n  var setter;\n  try {\n    setter = uncurryThisAccessor(Object.prototype, '__proto__', 'set');\n    setter(test, []);\n    CORRECT_SETTER = test instanceof Array;\n  } catch (error) { /* empty */ }\n  return function setPrototypeOf(O, proto) {\n    anObject(O);\n    aPossiblePrototype(proto);\n    if (CORRECT_SETTER) setter(O, proto);\n    else O.__proto__ = proto;\n    return O;\n  };\n}() : undefined);\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar aCallable = require('../internals/a-callable');\n\nmodule.exports = function (object, key, method) {\n  try {\n    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\n    return uncurryThis(aCallable(Object.getOwnPropertyDescriptor(object, key)[method]));\n  } catch (error) { /* empty */ }\n};\n","'use strict';\nvar isCallable = require('../internals/is-callable');\n\nvar $String = String;\nvar $TypeError = TypeError;\n\nmodule.exports = function (argument) {\n  if (typeof argument == 'object' || isCallable(argument)) return argument;\n  throw $TypeError(\"Can't set \" + $String(argument) + ' as a prototype');\n};\n","'use strict';\nvar hasOwn = require('../internals/has-own-property');\nvar ownKeys = require('../internals/own-keys');\nvar getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');\nvar definePropertyModule = require('../internals/object-define-property');\n\nmodule.exports = function (target, source, exceptions) {\n  var keys = ownKeys(source);\n  var defineProperty = definePropertyModule.f;\n  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {\n      defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n    }\n  }\n};\n","'use strict';\nvar getBuiltIn = require('../internals/get-built-in');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');\nvar getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');\nvar anObject = require('../internals/an-object');\n\nvar concat = uncurryThis([].concat);\n\n// all object keys, includes non-enumerable and symbols\nmodule.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {\n  var keys = getOwnPropertyNamesModule.f(anObject(it));\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;\n};\n","'use strict';\nvar internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\nvar hiddenKeys = enumBugKeys.concat('length', 'prototype');\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.es/ecma262/#sec-object.getownpropertynames\n// eslint-disable-next-line es/no-object-getownpropertynames -- safe\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return internalObjectKeys(O, hiddenKeys);\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar hasOwn = require('../internals/has-own-property');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar indexOf = require('../internals/array-includes').indexOf;\nvar hiddenKeys = require('../internals/hidden-keys');\n\nvar push = uncurryThis([].push);\n\nmodule.exports = function (object, names) {\n  var O = toIndexedObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (hasOwn(O, key = names[i++])) {\n    ~indexOf(result, key) || push(result, key);\n  }\n  return result;\n};\n","'use strict';\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\n// `Array.prototype.{ indexOf, includes }` methods implementation\nvar createMethod = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIndexedObject($this);\n    var length = lengthOfArrayLike(O);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare -- NaN check\n    if (IS_INCLUDES && el !== el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare -- NaN check\n      if (value !== value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) {\n      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.includes` method\n  // https://tc39.es/ecma262/#sec-array.prototype.includes\n  includes: createMethod(true),\n  // `Array.prototype.indexOf` method\n  // https://tc39.es/ecma262/#sec-array.prototype.indexof\n  indexOf: createMethod(false)\n};\n","'use strict';\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar max = Math.max;\nvar min = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\nmodule.exports = function (index, length) {\n  var integer = toIntegerOrInfinity(index);\n  return integer < 0 ? max(integer + length, 0) : min(integer, length);\n};\n","'use strict';\nvar trunc = require('../internals/math-trunc');\n\n// `ToIntegerOrInfinity` abstract operation\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\nmodule.exports = function (argument) {\n  var number = +argument;\n  // eslint-disable-next-line no-self-compare -- NaN check\n  return number !== number || number === 0 ? 0 : trunc(number);\n};\n","'use strict';\nvar ceil = Math.ceil;\nvar floor = Math.floor;\n\n// `Math.trunc` method\n// https://tc39.es/ecma262/#sec-math.trunc\n// eslint-disable-next-line es/no-math-trunc -- safe\nmodule.exports = Math.trunc || function trunc(x) {\n  var n = +x;\n  return (n > 0 ? floor : ceil)(n);\n};\n","'use strict';\nvar toLength = require('../internals/to-length');\n\n// `LengthOfArrayLike` abstract operation\n// https://tc39.es/ecma262/#sec-lengthofarraylike\nmodule.exports = function (obj) {\n  return toLength(obj.length);\n};\n","'use strict';\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar min = Math.min;\n\n// `ToLength` abstract operation\n// https://tc39.es/ecma262/#sec-tolength\nmodule.exports = function (argument) {\n  return argument > 0 ? min(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n};\n","'use strict';\nmodule.exports = {};\n","'use strict';\n// IE8- don't enum bug keys\nmodule.exports = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n","'use strict';\n// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe\nexports.f = Object.getOwnPropertySymbols;\n","'use strict';\n/* global ActiveXObject -- old IE, WSH */\nvar anObject = require('../internals/an-object');\nvar definePropertiesModule = require('../internals/object-define-properties');\nvar enumBugKeys = require('../internals/enum-bug-keys');\nvar hiddenKeys = require('../internals/hidden-keys');\nvar html = require('../internals/html');\nvar documentCreateElement = require('../internals/document-create-element');\nvar sharedKey = require('../internals/shared-key');\n\nvar GT = '>';\nvar LT = '<';\nvar PROTOTYPE = 'prototype';\nvar SCRIPT = 'script';\nvar IE_PROTO = sharedKey('IE_PROTO');\n\nvar EmptyConstructor = function () { /* empty */ };\n\nvar scriptTag = function (content) {\n  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;\n};\n\n// Create object with fake `null` prototype: use ActiveX Object with cleared prototype\nvar NullProtoObjectViaActiveX = function (activeXDocument) {\n  activeXDocument.write(scriptTag(''));\n  activeXDocument.close();\n  var temp = activeXDocument.parentWindow.Object;\n  activeXDocument = null; // avoid memory leak\n  return temp;\n};\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar NullProtoObjectViaIFrame = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = documentCreateElement('iframe');\n  var JS = 'java' + SCRIPT + ':';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  html.appendChild(iframe);\n  // https://github.com/zloirock/core-js/issues/475\n  iframe.src = String(JS);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(scriptTag('document.F=Object'));\n  iframeDocument.close();\n  return iframeDocument.F;\n};\n\n// Check for document.domain and active x support\n// No need to use active x approach when document.domain is not set\n// see https://github.com/es-shims/es5-shim/issues/150\n// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\n// avoid IE GC bug\nvar activeXDocument;\nvar NullProtoObject = function () {\n  try {\n    activeXDocument = new ActiveXObject('htmlfile');\n  } catch (error) { /* ignore */ }\n  NullProtoObject = typeof document != 'undefined'\n    ? document.domain && activeXDocument\n      ? NullProtoObjectViaActiveX(activeXDocument) // old IE\n      : NullProtoObjectViaIFrame()\n    : NullProtoObjectViaActiveX(activeXDocument); // WSH\n  var length = enumBugKeys.length;\n  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];\n  return NullProtoObject();\n};\n\nhiddenKeys[IE_PROTO] = true;\n\n// `Object.create` method\n// https://tc39.es/ecma262/#sec-object.create\n// eslint-disable-next-line es/no-object-create -- safe\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    EmptyConstructor[PROTOTYPE] = anObject(O);\n    result = new EmptyConstructor();\n    EmptyConstructor[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = NullProtoObject();\n  return Properties === undefined ? result : definePropertiesModule.f(result, Properties);\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar V8_PROTOTYPE_DEFINE_BUG = require('../internals/v8-prototype-define-bug');\nvar definePropertyModule = require('../internals/object-define-property');\nvar anObject = require('../internals/an-object');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar objectKeys = require('../internals/object-keys');\n\n// `Object.defineProperties` method\n// https://tc39.es/ecma262/#sec-object.defineproperties\n// eslint-disable-next-line es/no-object-defineproperties -- safe\nexports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var props = toIndexedObject(Properties);\n  var keys = objectKeys(Properties);\n  var length = keys.length;\n  var index = 0;\n  var key;\n  while (length > index) definePropertyModule.f(O, key = keys[index++], props[key]);\n  return O;\n};\n","'use strict';\nvar internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\n// `Object.keys` method\n// https://tc39.es/ecma262/#sec-object.keys\n// eslint-disable-next-line es/no-object-keys -- safe\nmodule.exports = Object.keys || function keys(O) {\n  return internalObjectKeys(O, enumBugKeys);\n};\n","'use strict';\nvar getBuiltIn = require('../internals/get-built-in');\n\nmodule.exports = getBuiltIn('document', 'documentElement');\n","'use strict';\nvar isObject = require('../internals/is-object');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\n// `InstallErrorCause` abstract operation\n// https://tc39.es/proposal-error-cause/#sec-errorobjects-install-error-cause\nmodule.exports = function (O, options) {\n  if (isObject(options) && 'cause' in options) {\n    createNonEnumerableProperty(O, 'cause', options.cause);\n  }\n};\n","'use strict';\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar clearErrorStack = require('../internals/error-stack-clear');\nvar ERROR_STACK_INSTALLABLE = require('../internals/error-stack-installable');\n\n// non-standard V8\nvar captureStackTrace = Error.captureStackTrace;\n\nmodule.exports = function (error, C, stack, dropEntries) {\n  if (ERROR_STACK_INSTALLABLE) {\n    if (captureStackTrace) captureStackTrace(error, C);\n    else createNonEnumerableProperty(error, 'stack', clearErrorStack(stack, dropEntries));\n  }\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar $Error = Error;\nvar replace = uncurryThis(''.replace);\n\nvar TEST = (function (arg) { return String($Error(arg).stack); })('zxcasd');\n// eslint-disable-next-line redos/no-vulnerable -- safe\nvar V8_OR_CHAKRA_STACK_ENTRY = /\\n\\s*at [^:]*:[^\\n]*/;\nvar IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);\n\nmodule.exports = function (stack, dropEntries) {\n  if (IS_V8_OR_CHAKRA_STACK && typeof stack == 'string' && !$Error.prepareStackTrace) {\n    while (dropEntries--) stack = replace(stack, V8_OR_CHAKRA_STACK_ENTRY, '');\n  } return stack;\n};\n","'use strict';\nvar fails = require('../internals/fails');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = !fails(function () {\n  var error = Error('a');\n  if (!('stack' in error)) return true;\n  // eslint-disable-next-line es/no-object-defineproperty -- safe\n  Object.defineProperty(error, 'stack', createPropertyDescriptor(1, 7));\n  return error.stack !== 7;\n});\n","'use strict';\nvar bind = require('../internals/function-bind-context');\nvar call = require('../internals/function-call');\nvar anObject = require('../internals/an-object');\nvar tryToString = require('../internals/try-to-string');\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar getIterator = require('../internals/get-iterator');\nvar getIteratorMethod = require('../internals/get-iterator-method');\nvar iteratorClose = require('../internals/iterator-close');\n\nvar $TypeError = TypeError;\n\nvar Result = function (stopped, result) {\n  this.stopped = stopped;\n  this.result = result;\n};\n\nvar ResultPrototype = Result.prototype;\n\nmodule.exports = function (iterable, unboundFunction, options) {\n  var that = options && options.that;\n  var AS_ENTRIES = !!(options && options.AS_ENTRIES);\n  var IS_RECORD = !!(options && options.IS_RECORD);\n  var IS_ITERATOR = !!(options && options.IS_ITERATOR);\n  var INTERRUPTED = !!(options && options.INTERRUPTED);\n  var fn = bind(unboundFunction, that);\n  var iterator, iterFn, index, length, result, next, step;\n\n  var stop = function (condition) {\n    if (iterator) iteratorClose(iterator, 'normal', condition);\n    return new Result(true, condition);\n  };\n\n  var callFn = function (value) {\n    if (AS_ENTRIES) {\n      anObject(value);\n      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);\n    } return INTERRUPTED ? fn(value, stop) : fn(value);\n  };\n\n  if (IS_RECORD) {\n    iterator = iterable.iterator;\n  } else if (IS_ITERATOR) {\n    iterator = iterable;\n  } else {\n    iterFn = getIteratorMethod(iterable);\n    if (!iterFn) throw $TypeError(tryToString(iterable) + ' is not iterable');\n    // optimisation for array iterators\n    if (isArrayIteratorMethod(iterFn)) {\n      for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {\n        result = callFn(iterable[index]);\n        if (result && isPrototypeOf(ResultPrototype, result)) return result;\n      } return new Result(false);\n    }\n    iterator = getIterator(iterable, iterFn);\n  }\n\n  next = IS_RECORD ? iterable.next : iterator.next;\n  while (!(step = call(next, iterator)).done) {\n    try {\n      result = callFn(step.value);\n    } catch (error) {\n      iteratorClose(iterator, 'throw', error);\n    }\n    if (typeof result == 'object' && result && isPrototypeOf(ResultPrototype, result)) return result;\n  } return new Result(false);\n};\n","'use strict';\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar Iterators = require('../internals/iterators');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar ArrayPrototype = Array.prototype;\n\n// check on default Array iterator\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);\n};\n","'use strict';\nmodule.exports = {};\n","'use strict';\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar tryToString = require('../internals/try-to-string');\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\nvar $TypeError = TypeError;\n\nmodule.exports = function (argument, usingIterator) {\n  var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;\n  if (aCallable(iteratorMethod)) return anObject(call(iteratorMethod, argument));\n  throw $TypeError(tryToString(argument) + ' is not iterable');\n};\n","'use strict';\nvar classof = require('../internals/classof');\nvar getMethod = require('../internals/get-method');\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\nvar Iterators = require('../internals/iterators');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar ITERATOR = wellKnownSymbol('iterator');\n\nmodule.exports = function (it) {\n  if (!isNullOrUndefined(it)) return getMethod(it, ITERATOR)\n    || getMethod(it, '@@iterator')\n    || Iterators[classof(it)];\n};\n","'use strict';\nvar TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar isCallable = require('../internals/is-callable');\nvar classofRaw = require('../internals/classof-raw');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar $Object = Object;\n\n// ES3 wrong here\nvar CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) === 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (error) { /* empty */ }\n};\n\n// getting tag from ES6+ `Object.prototype.toString`\nmodule.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {\n  var O, tag, result;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == 'string' ? tag\n    // builtinTag case\n    : CORRECT_ARGUMENTS ? classofRaw(O)\n    // ES3 arguments fallback\n    : (result = classofRaw(O)) === 'Object' && isCallable(O.callee) ? 'Arguments' : result;\n};\n","'use strict';\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar test = {};\n\ntest[TO_STRING_TAG] = 'z';\n\nmodule.exports = String(test) === '[object z]';\n","'use strict';\nvar call = require('../internals/function-call');\nvar anObject = require('../internals/an-object');\nvar getMethod = require('../internals/get-method');\n\nmodule.exports = function (iterator, kind, value) {\n  var innerResult, innerError;\n  anObject(iterator);\n  try {\n    innerResult = getMethod(iterator, 'return');\n    if (!innerResult) {\n      if (kind === 'throw') throw value;\n      return value;\n    }\n    innerResult = call(innerResult, iterator);\n  } catch (error) {\n    innerError = true;\n    innerResult = error;\n  }\n  if (kind === 'throw') throw value;\n  if (innerError) throw innerResult;\n  anObject(innerResult);\n  return value;\n};\n","'use strict';\nvar toString = require('../internals/to-string');\n\nmodule.exports = function (argument, $default) {\n  return argument === undefined ? arguments.length < 2 ? '' : $default : toString(argument);\n};\n","'use strict';\nvar classof = require('../internals/classof');\n\nvar $String = String;\n\nmodule.exports = function (argument) {\n  if (classof(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');\n  return $String(argument);\n};\n","'use strict';\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar addToUnscopables = require('../internals/add-to-unscopables');\nvar Iterators = require('../internals/iterators');\nvar InternalStateModule = require('../internals/internal-state');\nvar defineProperty = require('../internals/object-define-property').f;\nvar defineIterator = require('../internals/iterator-define');\nvar createIterResultObject = require('../internals/create-iter-result-object');\nvar IS_PURE = require('../internals/is-pure');\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar ARRAY_ITERATOR = 'Array Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);\n\n// `Array.prototype.entries` method\n// https://tc39.es/ecma262/#sec-array.prototype.entries\n// `Array.prototype.keys` method\n// https://tc39.es/ecma262/#sec-array.prototype.keys\n// `Array.prototype.values` method\n// https://tc39.es/ecma262/#sec-array.prototype.values\n// `Array.prototype[@@iterator]` method\n// https://tc39.es/ecma262/#sec-array.prototype-@@iterator\n// `CreateArrayIterator` internal method\n// https://tc39.es/ecma262/#sec-createarrayiterator\nmodule.exports = defineIterator(Array, 'Array', function (iterated, kind) {\n  setInternalState(this, {\n    type: ARRAY_ITERATOR,\n    target: toIndexedObject(iterated), // target\n    index: 0,                          // next index\n    kind: kind                         // kind\n  });\n// `%ArrayIteratorPrototype%.next` method\n// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next\n}, function () {\n  var state = getInternalState(this);\n  var target = state.target;\n  var kind = state.kind;\n  var index = state.index++;\n  if (!target || index >= target.length) {\n    state.target = undefined;\n    return createIterResultObject(undefined, true);\n  }\n  switch (kind) {\n    case 'keys': return createIterResultObject(index, false);\n    case 'values': return createIterResultObject(target[index], false);\n  } return createIterResultObject([index, target[index]], false);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values%\n// https://tc39.es/ecma262/#sec-createunmappedargumentsobject\n// https://tc39.es/ecma262/#sec-createmappedargumentsobject\nvar values = Iterators.Arguments = Iterators.Array;\n\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n\n// V8 ~ Chrome 45- bug\nif (!IS_PURE && DESCRIPTORS && values.name !== 'values') try {\n  defineProperty(values, 'name', { value: 'values' });\n} catch (error) { /* empty */ }\n","'use strict';\nmodule.exports = function () { /* empty */ };\n","'use strict';\nvar NATIVE_WEAK_MAP = require('../internals/weak-map-basic-detection');\nvar global = require('../internals/global');\nvar isObject = require('../internals/is-object');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar hasOwn = require('../internals/has-own-property');\nvar shared = require('../internals/shared-store');\nvar sharedKey = require('../internals/shared-key');\nvar hiddenKeys = require('../internals/hidden-keys');\n\nvar OBJECT_ALREADY_INITIALIZED = 'Object already initialized';\nvar TypeError = global.TypeError;\nvar WeakMap = global.WeakMap;\nvar set, get, has;\n\nvar enforce = function (it) {\n  return has(it) ? get(it) : set(it, {});\n};\n\nvar getterFor = function (TYPE) {\n  return function (it) {\n    var state;\n    if (!isObject(it) || (state = get(it)).type !== TYPE) {\n      throw TypeError('Incompatible receiver, ' + TYPE + ' required');\n    } return state;\n  };\n};\n\nif (NATIVE_WEAK_MAP || shared.state) {\n  var store = shared.state || (shared.state = new WeakMap());\n  /* eslint-disable no-self-assign -- prototype methods protection */\n  store.get = store.get;\n  store.has = store.has;\n  store.set = store.set;\n  /* eslint-enable no-self-assign -- prototype methods protection */\n  set = function (it, metadata) {\n    if (store.has(it)) throw TypeError(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    store.set(it, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return store.get(it) || {};\n  };\n  has = function (it) {\n    return store.has(it);\n  };\n} else {\n  var STATE = sharedKey('state');\n  hiddenKeys[STATE] = true;\n  set = function (it, metadata) {\n    if (hasOwn(it, STATE)) throw TypeError(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    createNonEnumerableProperty(it, STATE, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return hasOwn(it, STATE) ? it[STATE] : {};\n  };\n  has = function (it) {\n    return hasOwn(it, STATE);\n  };\n}\n\nmodule.exports = {\n  set: set,\n  get: get,\n  has: has,\n  enforce: enforce,\n  getterFor: getterFor\n};\n","'use strict';\nvar global = require('../internals/global');\nvar isCallable = require('../internals/is-callable');\n\nvar WeakMap = global.WeakMap;\n\nmodule.exports = isCallable(WeakMap) && /native code/.test(String(WeakMap));\n","'use strict';\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\nvar IS_PURE = require('../internals/is-pure');\nvar FunctionName = require('../internals/function-name');\nvar isCallable = require('../internals/is-callable');\nvar createIteratorConstructor = require('../internals/iterator-create-constructor');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar defineBuiltIn = require('../internals/define-built-in');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar Iterators = require('../internals/iterators');\nvar IteratorsCore = require('../internals/iterators-core');\n\nvar PROPER_FUNCTION_NAME = FunctionName.PROPER;\nvar CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;\nvar IteratorPrototype = IteratorsCore.IteratorPrototype;\nvar BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;\nvar ITERATOR = wellKnownSymbol('iterator');\nvar KEYS = 'keys';\nvar VALUES = 'values';\nvar ENTRIES = 'entries';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {\n  createIteratorConstructor(IteratorConstructor, NAME, next);\n\n  var getIterationMethod = function (KIND) {\n    if (KIND === DEFAULT && defaultIterator) return defaultIterator;\n    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];\n    switch (KIND) {\n      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };\n      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };\n      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };\n    } return function () { return new IteratorConstructor(this); };\n  };\n\n  var TO_STRING_TAG = NAME + ' Iterator';\n  var INCORRECT_VALUES_NAME = false;\n  var IterablePrototype = Iterable.prototype;\n  var nativeIterator = IterablePrototype[ITERATOR]\n    || IterablePrototype['@@iterator']\n    || DEFAULT && IterablePrototype[DEFAULT];\n  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);\n  var anyNativeIterator = NAME === 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;\n  var CurrentIteratorPrototype, methods, KEY;\n\n  // fix native\n  if (anyNativeIterator) {\n    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));\n    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {\n      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {\n        if (setPrototypeOf) {\n          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);\n        } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {\n          defineBuiltIn(CurrentIteratorPrototype, ITERATOR, returnThis);\n        }\n      }\n      // Set @@toStringTag to native iterators\n      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);\n      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;\n    }\n  }\n\n  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF\n  if (PROPER_FUNCTION_NAME && DEFAULT === VALUES && nativeIterator && nativeIterator.name !== VALUES) {\n    if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {\n      createNonEnumerableProperty(IterablePrototype, 'name', VALUES);\n    } else {\n      INCORRECT_VALUES_NAME = true;\n      defaultIterator = function values() { return call(nativeIterator, this); };\n    }\n  }\n\n  // export additional methods\n  if (DEFAULT) {\n    methods = {\n      values: getIterationMethod(VALUES),\n      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),\n      entries: getIterationMethod(ENTRIES)\n    };\n    if (FORCED) for (KEY in methods) {\n      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {\n        defineBuiltIn(IterablePrototype, KEY, methods[KEY]);\n      }\n    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);\n  }\n\n  // define iterator\n  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {\n    defineBuiltIn(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });\n  }\n  Iterators[NAME] = defaultIterator;\n\n  return methods;\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar hasOwn = require('../internals/has-own-property');\n\nvar FunctionPrototype = Function.prototype;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;\n\nvar EXISTS = hasOwn(FunctionPrototype, 'name');\n// additional protection from minified / mangled / dropped function names\nvar PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';\nvar CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));\n\nmodule.exports = {\n  EXISTS: EXISTS,\n  PROPER: PROPER,\n  CONFIGURABLE: CONFIGURABLE\n};\n","'use strict';\nvar IteratorPrototype = require('../internals/iterators-core').IteratorPrototype;\nvar create = require('../internals/object-create');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar Iterators = require('../internals/iterators');\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {\n  var TO_STRING_TAG = NAME + ' Iterator';\n  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });\n  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);\n  Iterators[TO_STRING_TAG] = returnThis;\n  return IteratorConstructor;\n};\n","'use strict';\nvar fails = require('../internals/fails');\nvar isCallable = require('../internals/is-callable');\nvar isObject = require('../internals/is-object');\nvar create = require('../internals/object-create');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar defineBuiltIn = require('../internals/define-built-in');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar IS_PURE = require('../internals/is-pure');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar BUGGY_SAFARI_ITERATORS = false;\n\n// `%IteratorPrototype%` object\n// https://tc39.es/ecma262/#sec-%iteratorprototype%-object\nvar IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;\n\n/* eslint-disable es/no-array-prototype-keys -- safe */\nif ([].keys) {\n  arrayIterator = [].keys();\n  // Safari 8 has buggy iterators w/o `next`\n  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;\n  else {\n    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));\n    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;\n  }\n}\n\nvar NEW_ITERATOR_PROTOTYPE = !isObject(IteratorPrototype) || fails(function () {\n  var test = {};\n  // FF44- legacy iterators case\n  return IteratorPrototype[ITERATOR].call(test) !== test;\n});\n\nif (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};\nelse if (IS_PURE) IteratorPrototype = create(IteratorPrototype);\n\n// `%IteratorPrototype%[@@iterator]()` method\n// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator\nif (!isCallable(IteratorPrototype[ITERATOR])) {\n  defineBuiltIn(IteratorPrototype, ITERATOR, function () {\n    return this;\n  });\n}\n\nmodule.exports = {\n  IteratorPrototype: IteratorPrototype,\n  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS\n};\n","'use strict';\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nmodule.exports = function (target, key, value, options) {\n  if (options && options.enumerable) target[key] = value;\n  else createNonEnumerableProperty(target, key, value);\n  return target;\n};\n","'use strict';\nvar TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar defineProperty = require('../internals/object-define-property').f;\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar hasOwn = require('../internals/has-own-property');\nvar toString = require('../internals/object-to-string');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\n\nmodule.exports = function (it, TAG, STATIC, SET_METHOD) {\n  if (it) {\n    var target = STATIC ? it : it.prototype;\n    if (!hasOwn(target, TO_STRING_TAG)) {\n      defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });\n    }\n    if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {\n      createNonEnumerableProperty(target, 'toString', toString);\n    }\n  }\n};\n","'use strict';\nvar TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar classof = require('../internals/classof');\n\n// `Object.prototype.toString` method implementation\n// https://tc39.es/ecma262/#sec-object.prototype.tostring\nmodule.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {\n  return '[object ' + classof(this) + ']';\n};\n","'use strict';\n// `CreateIterResultObject` abstract operation\n// https://tc39.es/ecma262/#sec-createiterresultobject\nmodule.exports = function (value, done) {\n  return { value: value, done: done };\n};\n","// empty\n","'use strict';\n// TODO: Remove this module from `core-js@4` since it's split to modules listed below\nrequire('../modules/es.promise.constructor');\nrequire('../modules/es.promise.all');\nrequire('../modules/es.promise.catch');\nrequire('../modules/es.promise.race');\nrequire('../modules/es.promise.reject');\nrequire('../modules/es.promise.resolve');\n","'use strict';\nvar $ = require('../internals/export');\nvar IS_PURE = require('../internals/is-pure');\nvar IS_NODE = require('../internals/engine-is-node');\nvar global = require('../internals/global');\nvar call = require('../internals/function-call');\nvar defineBuiltIn = require('../internals/define-built-in');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar setSpecies = require('../internals/set-species');\nvar aCallable = require('../internals/a-callable');\nvar isCallable = require('../internals/is-callable');\nvar isObject = require('../internals/is-object');\nvar anInstance = require('../internals/an-instance');\nvar speciesConstructor = require('../internals/species-constructor');\nvar task = require('../internals/task').set;\nvar microtask = require('../internals/microtask');\nvar hostReportErrors = require('../internals/host-report-errors');\nvar perform = require('../internals/perform');\nvar Queue = require('../internals/queue');\nvar InternalStateModule = require('../internals/internal-state');\nvar NativePromiseConstructor = require('../internals/promise-native-constructor');\nvar PromiseConstructorDetection = require('../internals/promise-constructor-detection');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\n\nvar PROMISE = 'Promise';\nvar FORCED_PROMISE_CONSTRUCTOR = PromiseConstructorDetection.CONSTRUCTOR;\nvar NATIVE_PROMISE_REJECTION_EVENT = PromiseConstructorDetection.REJECTION_EVENT;\nvar NATIVE_PROMISE_SUBCLASSING = PromiseConstructorDetection.SUBCLASSING;\nvar getInternalPromiseState = InternalStateModule.getterFor(PROMISE);\nvar setInternalState = InternalStateModule.set;\nvar NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;\nvar PromiseConstructor = NativePromiseConstructor;\nvar PromisePrototype = NativePromisePrototype;\nvar TypeError = global.TypeError;\nvar document = global.document;\nvar process = global.process;\nvar newPromiseCapability = newPromiseCapabilityModule.f;\nvar newGenericPromiseCapability = newPromiseCapability;\n\nvar DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);\nvar UNHANDLED_REJECTION = 'unhandledrejection';\nvar REJECTION_HANDLED = 'rejectionhandled';\nvar PENDING = 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\nvar HANDLED = 1;\nvar UNHANDLED = 2;\n\nvar Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && isCallable(then = it.then) ? then : false;\n};\n\nvar callReaction = function (reaction, state) {\n  var value = state.value;\n  var ok = state.state === FULFILLED;\n  var handler = ok ? reaction.ok : reaction.fail;\n  var resolve = reaction.resolve;\n  var reject = reaction.reject;\n  var domain = reaction.domain;\n  var result, then, exited;\n  try {\n    if (handler) {\n      if (!ok) {\n        if (state.rejection === UNHANDLED) onHandleUnhandled(state);\n        state.rejection = HANDLED;\n      }\n      if (handler === true) result = value;\n      else {\n        if (domain) domain.enter();\n        result = handler(value); // can throw\n        if (domain) {\n          domain.exit();\n          exited = true;\n        }\n      }\n      if (result === reaction.promise) {\n        reject(TypeError('Promise-chain cycle'));\n      } else if (then = isThenable(result)) {\n        call(then, result, resolve, reject);\n      } else resolve(result);\n    } else reject(value);\n  } catch (error) {\n    if (domain && !exited) domain.exit();\n    reject(error);\n  }\n};\n\nvar notify = function (state, isReject) {\n  if (state.notified) return;\n  state.notified = true;\n  microtask(function () {\n    var reactions = state.reactions;\n    var reaction;\n    while (reaction = reactions.get()) {\n      callReaction(reaction, state);\n    }\n    state.notified = false;\n    if (isReject && !state.rejection) onUnhandled(state);\n  });\n};\n\nvar dispatchEvent = function (name, promise, reason) {\n  var event, handler;\n  if (DISPATCH_EVENT) {\n    event = document.createEvent('Event');\n    event.promise = promise;\n    event.reason = reason;\n    event.initEvent(name, false, true);\n    global.dispatchEvent(event);\n  } else event = { promise: promise, reason: reason };\n  if (!NATIVE_PROMISE_REJECTION_EVENT && (handler = global['on' + name])) handler(event);\n  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);\n};\n\nvar onUnhandled = function (state) {\n  call(task, global, function () {\n    var promise = state.facade;\n    var value = state.value;\n    var IS_UNHANDLED = isUnhandled(state);\n    var result;\n    if (IS_UNHANDLED) {\n      result = perform(function () {\n        if (IS_NODE) {\n          process.emit('unhandledRejection', value, promise);\n        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;\n      if (result.error) throw result.value;\n    }\n  });\n};\n\nvar isUnhandled = function (state) {\n  return state.rejection !== HANDLED && !state.parent;\n};\n\nvar onHandleUnhandled = function (state) {\n  call(task, global, function () {\n    var promise = state.facade;\n    if (IS_NODE) {\n      process.emit('rejectionHandled', promise);\n    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);\n  });\n};\n\nvar bind = function (fn, state, unwrap) {\n  return function (value) {\n    fn(state, value, unwrap);\n  };\n};\n\nvar internalReject = function (state, value, unwrap) {\n  if (state.done) return;\n  state.done = true;\n  if (unwrap) state = unwrap;\n  state.value = value;\n  state.state = REJECTED;\n  notify(state, true);\n};\n\nvar internalResolve = function (state, value, unwrap) {\n  if (state.done) return;\n  state.done = true;\n  if (unwrap) state = unwrap;\n  try {\n    if (state.facade === value) throw TypeError(\"Promise can't be resolved itself\");\n    var then = isThenable(value);\n    if (then) {\n      microtask(function () {\n        var wrapper = { done: false };\n        try {\n          call(then, value,\n            bind(internalResolve, wrapper, state),\n            bind(internalReject, wrapper, state)\n          );\n        } catch (error) {\n          internalReject(wrapper, error, state);\n        }\n      });\n    } else {\n      state.value = value;\n      state.state = FULFILLED;\n      notify(state, false);\n    }\n  } catch (error) {\n    internalReject({ done: false }, error, state);\n  }\n};\n\n// constructor polyfill\nif (FORCED_PROMISE_CONSTRUCTOR) {\n  // 25.4.3.1 Promise(executor)\n  PromiseConstructor = function Promise(executor) {\n    anInstance(this, PromisePrototype);\n    aCallable(executor);\n    call(Internal, this);\n    var state = getInternalPromiseState(this);\n    try {\n      executor(bind(internalResolve, state), bind(internalReject, state));\n    } catch (error) {\n      internalReject(state, error);\n    }\n  };\n\n  PromisePrototype = PromiseConstructor.prototype;\n\n  // eslint-disable-next-line no-unused-vars -- required for `.length`\n  Internal = function Promise(executor) {\n    setInternalState(this, {\n      type: PROMISE,\n      done: false,\n      notified: false,\n      parent: false,\n      reactions: new Queue(),\n      rejection: false,\n      state: PENDING,\n      value: undefined\n    });\n  };\n\n  // `Promise.prototype.then` method\n  // https://tc39.es/ecma262/#sec-promise.prototype.then\n  Internal.prototype = defineBuiltIn(PromisePrototype, 'then', function then(onFulfilled, onRejected) {\n    var state = getInternalPromiseState(this);\n    var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));\n    state.parent = true;\n    reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;\n    reaction.fail = isCallable(onRejected) && onRejected;\n    reaction.domain = IS_NODE ? process.domain : undefined;\n    if (state.state === PENDING) state.reactions.add(reaction);\n    else microtask(function () {\n      callReaction(reaction, state);\n    });\n    return reaction.promise;\n  });\n\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    var state = getInternalPromiseState(promise);\n    this.promise = promise;\n    this.resolve = bind(internalResolve, state);\n    this.reject = bind(internalReject, state);\n  };\n\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === PromiseConstructor || C === PromiseWrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n\n  if (!IS_PURE && isCallable(NativePromiseConstructor) && NativePromisePrototype !== Object.prototype) {\n    nativeThen = NativePromisePrototype.then;\n\n    if (!NATIVE_PROMISE_SUBCLASSING) {\n      // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs\n      defineBuiltIn(NativePromisePrototype, 'then', function then(onFulfilled, onRejected) {\n        var that = this;\n        return new PromiseConstructor(function (resolve, reject) {\n          call(nativeThen, that, resolve, reject);\n        }).then(onFulfilled, onRejected);\n      // https://github.com/zloirock/core-js/issues/640\n      }, { unsafe: true });\n    }\n\n    // make `.constructor === Promise` work for native promise-based APIs\n    try {\n      delete NativePromisePrototype.constructor;\n    } catch (error) { /* empty */ }\n\n    // make `instanceof Promise` work for native promise-based APIs\n    if (setPrototypeOf) {\n      setPrototypeOf(NativePromisePrototype, PromisePrototype);\n    }\n  }\n}\n\n$({ global: true, constructor: true, wrap: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {\n  Promise: PromiseConstructor\n});\n\nsetToStringTag(PromiseConstructor, PROMISE, false, true);\nsetSpecies(PROMISE);\n","'use strict';\nvar global = require('../internals/global');\nvar classof = require('../internals/classof-raw');\n\nmodule.exports = classof(global.process) === 'process';\n","'use strict';\nvar getBuiltIn = require('../internals/get-built-in');\nvar defineBuiltInAccessor = require('../internals/define-built-in-accessor');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar SPECIES = wellKnownSymbol('species');\n\nmodule.exports = function (CONSTRUCTOR_NAME) {\n  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);\n\n  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {\n    defineBuiltInAccessor(Constructor, SPECIES, {\n      configurable: true,\n      get: function () { return this; }\n    });\n  }\n};\n","'use strict';\nvar defineProperty = require('../internals/object-define-property');\n\nmodule.exports = function (target, name, descriptor) {\n  return defineProperty.f(target, name, descriptor);\n};\n","'use strict';\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\n\nvar $TypeError = TypeError;\n\nmodule.exports = function (it, Prototype) {\n  if (isPrototypeOf(Prototype, it)) return it;\n  throw $TypeError('Incorrect invocation');\n};\n","'use strict';\nvar anObject = require('../internals/an-object');\nvar aConstructor = require('../internals/a-constructor');\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar SPECIES = wellKnownSymbol('species');\n\n// `SpeciesConstructor` abstract operation\n// https://tc39.es/ecma262/#sec-speciesconstructor\nmodule.exports = function (O, defaultConstructor) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || isNullOrUndefined(S = anObject(C)[SPECIES]) ? defaultConstructor : aConstructor(S);\n};\n","'use strict';\nvar isConstructor = require('../internals/is-constructor');\nvar tryToString = require('../internals/try-to-string');\n\nvar $TypeError = TypeError;\n\n// `Assert: IsConstructor(argument) is true`\nmodule.exports = function (argument) {\n  if (isConstructor(argument)) return argument;\n  throw $TypeError(tryToString(argument) + ' is not a constructor');\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar fails = require('../internals/fails');\nvar isCallable = require('../internals/is-callable');\nvar classof = require('../internals/classof');\nvar getBuiltIn = require('../internals/get-built-in');\nvar inspectSource = require('../internals/inspect-source');\n\nvar noop = function () { /* empty */ };\nvar empty = [];\nvar construct = getBuiltIn('Reflect', 'construct');\nvar constructorRegExp = /^\\s*(?:class|function)\\b/;\nvar exec = uncurryThis(constructorRegExp.exec);\nvar INCORRECT_TO_STRING = !constructorRegExp.exec(noop);\n\nvar isConstructorModern = function isConstructor(argument) {\n  if (!isCallable(argument)) return false;\n  try {\n    construct(noop, empty, argument);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nvar isConstructorLegacy = function isConstructor(argument) {\n  if (!isCallable(argument)) return false;\n  switch (classof(argument)) {\n    case 'AsyncFunction':\n    case 'GeneratorFunction':\n    case 'AsyncGeneratorFunction': return false;\n  }\n  try {\n    // we can't check .prototype since constructors produced by .bind haven't it\n    // `Function#toString` throws on some built-it function in some legacy engines\n    // (for example, `DOMQuad` and similar in FF41-)\n    return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));\n  } catch (error) {\n    return true;\n  }\n};\n\nisConstructorLegacy.sham = true;\n\n// `IsConstructor` abstract operation\n// https://tc39.es/ecma262/#sec-isconstructor\nmodule.exports = !construct || fails(function () {\n  var called;\n  return isConstructorModern(isConstructorModern.call)\n    || !isConstructorModern(Object)\n    || !isConstructorModern(function () { called = true; })\n    || called;\n}) ? isConstructorLegacy : isConstructorModern;\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar isCallable = require('../internals/is-callable');\nvar store = require('../internals/shared-store');\n\nvar functionToString = uncurryThis(Function.toString);\n\n// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper\nif (!isCallable(store.inspectSource)) {\n  store.inspectSource = function (it) {\n    return functionToString(it);\n  };\n}\n\nmodule.exports = store.inspectSource;\n","'use strict';\nvar global = require('../internals/global');\nvar apply = require('../internals/function-apply');\nvar bind = require('../internals/function-bind-context');\nvar isCallable = require('../internals/is-callable');\nvar hasOwn = require('../internals/has-own-property');\nvar fails = require('../internals/fails');\nvar html = require('../internals/html');\nvar arraySlice = require('../internals/array-slice');\nvar createElement = require('../internals/document-create-element');\nvar validateArgumentsLength = require('../internals/validate-arguments-length');\nvar IS_IOS = require('../internals/engine-is-ios');\nvar IS_NODE = require('../internals/engine-is-node');\n\nvar set = global.setImmediate;\nvar clear = global.clearImmediate;\nvar process = global.process;\nvar Dispatch = global.Dispatch;\nvar Function = global.Function;\nvar MessageChannel = global.MessageChannel;\nvar String = global.String;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar $location, defer, channel, port;\n\nfails(function () {\n  // Deno throws a ReferenceError on `location` access without `--location` flag\n  $location = global.location;\n});\n\nvar run = function (id) {\n  if (hasOwn(queue, id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\n\nvar runner = function (id) {\n  return function () {\n    run(id);\n  };\n};\n\nvar eventListener = function (event) {\n  run(event.data);\n};\n\nvar globalPostMessageDefer = function (id) {\n  // old engines have not location.origin\n  global.postMessage(String(id), $location.protocol + '//' + $location.host);\n};\n\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!set || !clear) {\n  set = function setImmediate(handler) {\n    validateArgumentsLength(arguments.length, 1);\n    var fn = isCallable(handler) ? handler : Function(handler);\n    var args = arraySlice(arguments, 1);\n    queue[++counter] = function () {\n      apply(fn, undefined, args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clear = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (IS_NODE) {\n    defer = function (id) {\n      process.nextTick(runner(id));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(runner(id));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  // except iOS - https://github.com/zloirock/core-js/issues/624\n  } else if (MessageChannel && !IS_IOS) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = eventListener;\n    defer = bind(port.postMessage, port);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (\n    global.addEventListener &&\n    isCallable(global.postMessage) &&\n    !global.importScripts &&\n    $location && $location.protocol !== 'file:' &&\n    !fails(globalPostMessageDefer)\n  ) {\n    defer = globalPostMessageDefer;\n    global.addEventListener('message', eventListener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in createElement('script')) {\n    defer = function (id) {\n      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(runner(id), 0);\n    };\n  }\n}\n\nmodule.exports = {\n  set: set,\n  clear: clear\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nmodule.exports = uncurryThis([].slice);\n","'use strict';\nvar $TypeError = TypeError;\n\nmodule.exports = function (passed, required) {\n  if (passed < required) throw $TypeError('Not enough arguments');\n  return passed;\n};\n","'use strict';\nvar userAgent = require('../internals/engine-user-agent');\n\n// eslint-disable-next-line redos/no-vulnerable -- safe\nmodule.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);\n","'use strict';\nvar global = require('../internals/global');\nvar bind = require('../internals/function-bind-context');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar macrotask = require('../internals/task').set;\nvar Queue = require('../internals/queue');\nvar IS_IOS = require('../internals/engine-is-ios');\nvar IS_IOS_PEBBLE = require('../internals/engine-is-ios-pebble');\nvar IS_WEBOS_WEBKIT = require('../internals/engine-is-webos-webkit');\nvar IS_NODE = require('../internals/engine-is-node');\n\nvar MutationObserver = global.MutationObserver || global.WebKitMutationObserver;\nvar document = global.document;\nvar process = global.process;\nvar Promise = global.Promise;\n// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`\nvar queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');\nvar microtask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;\nvar notify, toggle, node, promise, then;\n\n// modern engines have queueMicrotask method\nif (!microtask) {\n  var queue = new Queue();\n\n  var flush = function () {\n    var parent, fn;\n    if (IS_NODE && (parent = process.domain)) parent.exit();\n    while (fn = queue.get()) try {\n      fn();\n    } catch (error) {\n      if (queue.head) notify();\n      throw error;\n    }\n    if (parent) parent.enter();\n  };\n\n  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339\n  // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898\n  if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document) {\n    toggle = true;\n    node = document.createTextNode('');\n    new MutationObserver(flush).observe(node, { characterData: true });\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (!IS_IOS_PEBBLE && Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    promise = Promise.resolve(undefined);\n    // workaround of WebKit ~ iOS Safari 10.1 bug\n    promise.constructor = Promise;\n    then = bind(promise.then, promise);\n    notify = function () {\n      then(flush);\n    };\n  // Node.js without promises\n  } else if (IS_NODE) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessage\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    // `webpack` dev server bug on IE global methods - use bind(fn, global)\n    macrotask = bind(macrotask, global);\n    notify = function () {\n      macrotask(flush);\n    };\n  }\n\n  microtask = function (fn) {\n    if (!queue.head) notify();\n    queue.add(fn);\n  };\n}\n\nmodule.exports = microtask;\n","'use strict';\nvar Queue = function () {\n  this.head = null;\n  this.tail = null;\n};\n\nQueue.prototype = {\n  add: function (item) {\n    var entry = { item: item, next: null };\n    var tail = this.tail;\n    if (tail) tail.next = entry;\n    else this.head = entry;\n    this.tail = entry;\n  },\n  get: function () {\n    var entry = this.head;\n    if (entry) {\n      var next = this.head = entry.next;\n      if (next === null) this.tail = null;\n      return entry.item;\n    }\n  }\n};\n\nmodule.exports = Queue;\n","'use strict';\nvar userAgent = require('../internals/engine-user-agent');\n\nmodule.exports = /ipad|iphone|ipod/i.test(userAgent) && typeof Pebble != 'undefined';\n","'use strict';\nvar userAgent = require('../internals/engine-user-agent');\n\nmodule.exports = /web0s(?!.*chrome)/i.test(userAgent);\n","'use strict';\nmodule.exports = function (a, b) {\n  try {\n    // eslint-disable-next-line no-console -- safe\n    arguments.length === 1 ? console.error(a) : console.error(a, b);\n  } catch (error) { /* empty */ }\n};\n","'use strict';\nmodule.exports = function (exec) {\n  try {\n    return { error: false, value: exec() };\n  } catch (error) {\n    return { error: true, value: error };\n  }\n};\n","'use strict';\nvar global = require('../internals/global');\n\nmodule.exports = global.Promise;\n","'use strict';\nvar global = require('../internals/global');\nvar NativePromiseConstructor = require('../internals/promise-native-constructor');\nvar isCallable = require('../internals/is-callable');\nvar isForced = require('../internals/is-forced');\nvar inspectSource = require('../internals/inspect-source');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar IS_BROWSER = require('../internals/engine-is-browser');\nvar IS_DENO = require('../internals/engine-is-deno');\nvar IS_PURE = require('../internals/is-pure');\nvar V8_VERSION = require('../internals/engine-v8-version');\n\nvar NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;\nvar SPECIES = wellKnownSymbol('species');\nvar SUBCLASSING = false;\nvar NATIVE_PROMISE_REJECTION_EVENT = isCallable(global.PromiseRejectionEvent);\n\nvar FORCED_PROMISE_CONSTRUCTOR = isForced('Promise', function () {\n  var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(NativePromiseConstructor);\n  var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(NativePromiseConstructor);\n  // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n  // We can't detect it synchronously, so just check versions\n  if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;\n  // We need Promise#{ catch, finally } in the pure version for preventing prototype pollution\n  if (IS_PURE && !(NativePromisePrototype['catch'] && NativePromisePrototype['finally'])) return true;\n  // We can't use @@species feature detection in V8 since it causes\n  // deoptimization and performance degradation\n  // https://github.com/zloirock/core-js/issues/679\n  if (!V8_VERSION || V8_VERSION < 51 || !/native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) {\n    // Detect correctness of subclassing with @@species support\n    var promise = new NativePromiseConstructor(function (resolve) { resolve(1); });\n    var FakePromise = function (exec) {\n      exec(function () { /* empty */ }, function () { /* empty */ });\n    };\n    var constructor = promise.constructor = {};\n    constructor[SPECIES] = FakePromise;\n    SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;\n    if (!SUBCLASSING) return true;\n  // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n  } return !GLOBAL_CORE_JS_PROMISE && (IS_BROWSER || IS_DENO) && !NATIVE_PROMISE_REJECTION_EVENT;\n});\n\nmodule.exports = {\n  CONSTRUCTOR: FORCED_PROMISE_CONSTRUCTOR,\n  REJECTION_EVENT: NATIVE_PROMISE_REJECTION_EVENT,\n  SUBCLASSING: SUBCLASSING\n};\n","'use strict';\nvar IS_DENO = require('../internals/engine-is-deno');\nvar IS_NODE = require('../internals/engine-is-node');\n\nmodule.exports = !IS_DENO && !IS_NODE\n  && typeof window == 'object'\n  && typeof document == 'object';\n","'use strict';\n/* global Deno -- Deno case */\nmodule.exports = typeof Deno == 'object' && Deno && typeof Deno.version == 'object';\n","'use strict';\nvar aCallable = require('../internals/a-callable');\n\nvar $TypeError = TypeError;\n\nvar PromiseCapability = function (C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw $TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aCallable(resolve);\n  this.reject = aCallable(reject);\n};\n\n// `NewPromiseCapability` abstract operation\n// https://tc39.es/ecma262/#sec-newpromisecapability\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar iterate = require('../internals/iterate');\nvar PROMISE_STATICS_INCORRECT_ITERATION = require('../internals/promise-statics-incorrect-iteration');\n\n// `Promise.all` method\n// https://tc39.es/ecma262/#sec-promise.all\n$({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapabilityModule.f(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var $promiseResolve = aCallable(C.resolve);\n      var values = [];\n      var counter = 0;\n      var remaining = 1;\n      iterate(iterable, function (promise) {\n        var index = counter++;\n        var alreadyCalled = false;\n        remaining++;\n        call($promiseResolve, C, promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n","'use strict';\nvar NativePromiseConstructor = require('../internals/promise-native-constructor');\nvar checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');\nvar FORCED_PROMISE_CONSTRUCTOR = require('../internals/promise-constructor-detection').CONSTRUCTOR;\n\nmodule.exports = FORCED_PROMISE_CONSTRUCTOR || !checkCorrectnessOfIteration(function (iterable) {\n  NativePromiseConstructor.all(iterable).then(undefined, function () { /* empty */ });\n});\n","'use strict';\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var called = 0;\n  var iteratorWithReturn = {\n    next: function () {\n      return { done: !!called++ };\n    },\n    'return': function () {\n      SAFE_CLOSING = true;\n    }\n  };\n  iteratorWithReturn[ITERATOR] = function () {\n    return this;\n  };\n  // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing\n  Array.from(iteratorWithReturn, function () { throw 2; });\n} catch (error) { /* empty */ }\n\nmodule.exports = function (exec, SKIP_CLOSING) {\n  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;\n  var ITERATION_SUPPORT = false;\n  try {\n    var object = {};\n    object[ITERATOR] = function () {\n      return {\n        next: function () {\n          return { done: ITERATION_SUPPORT = true };\n        }\n      };\n    };\n    exec(object);\n  } catch (error) { /* empty */ }\n  return ITERATION_SUPPORT;\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar IS_PURE = require('../internals/is-pure');\nvar FORCED_PROMISE_CONSTRUCTOR = require('../internals/promise-constructor-detection').CONSTRUCTOR;\nvar NativePromiseConstructor = require('../internals/promise-native-constructor');\nvar getBuiltIn = require('../internals/get-built-in');\nvar isCallable = require('../internals/is-callable');\nvar defineBuiltIn = require('../internals/define-built-in');\n\nvar NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;\n\n// `Promise.prototype.catch` method\n// https://tc39.es/ecma262/#sec-promise.prototype.catch\n$({ target: 'Promise', proto: true, forced: FORCED_PROMISE_CONSTRUCTOR, real: true }, {\n  'catch': function (onRejected) {\n    return this.then(undefined, onRejected);\n  }\n});\n\n// makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`\nif (!IS_PURE && isCallable(NativePromiseConstructor)) {\n  var method = getBuiltIn('Promise').prototype['catch'];\n  if (NativePromisePrototype['catch'] !== method) {\n    defineBuiltIn(NativePromisePrototype, 'catch', method, { unsafe: true });\n  }\n}\n","'use strict';\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar iterate = require('../internals/iterate');\nvar PROMISE_STATICS_INCORRECT_ITERATION = require('../internals/promise-statics-incorrect-iteration');\n\n// `Promise.race` method\n// https://tc39.es/ecma262/#sec-promise.race\n$({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapabilityModule.f(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      var $promiseResolve = aCallable(C.resolve);\n      iterate(iterable, function (promise) {\n        call($promiseResolve, C, promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar FORCED_PROMISE_CONSTRUCTOR = require('../internals/promise-constructor-detection').CONSTRUCTOR;\n\n// `Promise.reject` method\n// https://tc39.es/ecma262/#sec-promise.reject\n$({ target: 'Promise', stat: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {\n  reject: function reject(r) {\n    var capability = newPromiseCapabilityModule.f(this);\n    call(capability.reject, undefined, r);\n    return capability.promise;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar getBuiltIn = require('../internals/get-built-in');\nvar IS_PURE = require('../internals/is-pure');\nvar NativePromiseConstructor = require('../internals/promise-native-constructor');\nvar FORCED_PROMISE_CONSTRUCTOR = require('../internals/promise-constructor-detection').CONSTRUCTOR;\nvar promiseResolve = require('../internals/promise-resolve');\n\nvar PromiseConstructorWrapper = getBuiltIn('Promise');\nvar CHECK_WRAPPER = IS_PURE && !FORCED_PROMISE_CONSTRUCTOR;\n\n// `Promise.resolve` method\n// https://tc39.es/ecma262/#sec-promise.resolve\n$({ target: 'Promise', stat: true, forced: IS_PURE || FORCED_PROMISE_CONSTRUCTOR }, {\n  resolve: function resolve(x) {\n    return promiseResolve(CHECK_WRAPPER && this === PromiseConstructorWrapper ? NativePromiseConstructor : this, x);\n  }\n});\n","'use strict';\nvar anObject = require('../internals/an-object');\nvar isObject = require('../internals/is-object');\nvar newPromiseCapability = require('../internals/new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar iterate = require('../internals/iterate');\nvar PROMISE_STATICS_INCORRECT_ITERATION = require('../internals/promise-statics-incorrect-iteration');\n\n// `Promise.allSettled` method\n// https://tc39.es/ecma262/#sec-promise.allsettled\n$({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {\n  allSettled: function allSettled(iterable) {\n    var C = this;\n    var capability = newPromiseCapabilityModule.f(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var promiseResolve = aCallable(C.resolve);\n      var values = [];\n      var counter = 0;\n      var remaining = 1;\n      iterate(iterable, function (promise) {\n        var index = counter++;\n        var alreadyCalled = false;\n        remaining++;\n        call(promiseResolve, C, promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = { status: 'fulfilled', value: value };\n          --remaining || resolve(values);\n        }, function (error) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = { status: 'rejected', reason: error };\n          --remaining || resolve(values);\n        });\n      });\n      --remaining || resolve(values);\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar getBuiltIn = require('../internals/get-built-in');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar iterate = require('../internals/iterate');\nvar PROMISE_STATICS_INCORRECT_ITERATION = require('../internals/promise-statics-incorrect-iteration');\n\nvar PROMISE_ANY_ERROR = 'No one promise resolved';\n\n// `Promise.any` method\n// https://tc39.es/ecma262/#sec-promise.any\n$({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {\n  any: function any(iterable) {\n    var C = this;\n    var AggregateError = getBuiltIn('AggregateError');\n    var capability = newPromiseCapabilityModule.f(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var promiseResolve = aCallable(C.resolve);\n      var errors = [];\n      var counter = 0;\n      var remaining = 1;\n      var alreadyResolved = false;\n      iterate(iterable, function (promise) {\n        var index = counter++;\n        var alreadyRejected = false;\n        remaining++;\n        call(promiseResolve, C, promise).then(function (value) {\n          if (alreadyRejected || alreadyResolved) return;\n          alreadyResolved = true;\n          resolve(value);\n        }, function (error) {\n          if (alreadyRejected || alreadyResolved) return;\n          alreadyRejected = true;\n          errors[index] = error;\n          --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));\n        });\n      });\n      --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar IS_PURE = require('../internals/is-pure');\nvar NativePromiseConstructor = require('../internals/promise-native-constructor');\nvar fails = require('../internals/fails');\nvar getBuiltIn = require('../internals/get-built-in');\nvar isCallable = require('../internals/is-callable');\nvar speciesConstructor = require('../internals/species-constructor');\nvar promiseResolve = require('../internals/promise-resolve');\nvar defineBuiltIn = require('../internals/define-built-in');\n\nvar NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;\n\n// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829\nvar NON_GENERIC = !!NativePromiseConstructor && fails(function () {\n  // eslint-disable-next-line unicorn/no-thenable -- required for testing\n  NativePromisePrototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });\n});\n\n// `Promise.prototype.finally` method\n// https://tc39.es/ecma262/#sec-promise.prototype.finally\n$({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {\n  'finally': function (onFinally) {\n    var C = speciesConstructor(this, getBuiltIn('Promise'));\n    var isFunction = isCallable(onFinally);\n    return this.then(\n      isFunction ? function (x) {\n        return promiseResolve(C, onFinally()).then(function () { return x; });\n      } : onFinally,\n      isFunction ? function (e) {\n        return promiseResolve(C, onFinally()).then(function () { throw e; });\n      } : onFinally\n    );\n  }\n});\n\n// makes sure that native promise-based APIs `Promise#finally` properly works with patched `Promise#then`\nif (!IS_PURE && isCallable(NativePromiseConstructor)) {\n  var method = getBuiltIn('Promise').prototype['finally'];\n  if (NativePromisePrototype['finally'] !== method) {\n    defineBuiltIn(NativePromisePrototype, 'finally', method, { unsafe: true });\n  }\n}\n","'use strict';\nvar charAt = require('../internals/string-multibyte').charAt;\nvar toString = require('../internals/to-string');\nvar InternalStateModule = require('../internals/internal-state');\nvar defineIterator = require('../internals/iterator-define');\nvar createIterResultObject = require('../internals/create-iter-result-object');\n\nvar STRING_ITERATOR = 'String Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);\n\n// `String.prototype[@@iterator]` method\n// https://tc39.es/ecma262/#sec-string.prototype-@@iterator\ndefineIterator(String, 'String', function (iterated) {\n  setInternalState(this, {\n    type: STRING_ITERATOR,\n    string: toString(iterated),\n    index: 0\n  });\n// `%StringIteratorPrototype%.next` method\n// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next\n}, function next() {\n  var state = getInternalState(this);\n  var string = state.string;\n  var index = state.index;\n  var point;\n  if (index >= string.length) return createIterResultObject(undefined, true);\n  point = charAt(string, index);\n  state.index += point.length;\n  return createIterResultObject(point, false);\n});\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar toString = require('../internals/to-string');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar charAt = uncurryThis(''.charAt);\nvar charCodeAt = uncurryThis(''.charCodeAt);\nvar stringSlice = uncurryThis(''.slice);\n\nvar createMethod = function (CONVERT_TO_STRING) {\n  return function ($this, pos) {\n    var S = toString(requireObjectCoercible($this));\n    var position = toIntegerOrInfinity(pos);\n    var size = S.length;\n    var first, second;\n    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;\n    first = charCodeAt(S, position);\n    return first < 0xD800 || first > 0xDBFF || position + 1 === size\n      || (second = charCodeAt(S, position + 1)) < 0xDC00 || second > 0xDFFF\n        ? CONVERT_TO_STRING\n          ? charAt(S, position)\n          : first\n        : CONVERT_TO_STRING\n          ? stringSlice(S, position, position + 2)\n          : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.codePointAt` method\n  // https://tc39.es/ecma262/#sec-string.prototype.codepointat\n  codeAt: createMethod(false),\n  // `String.prototype.at` method\n  // https://github.com/mathiasbynens/String.prototype.at\n  charAt: createMethod(true)\n};\n","'use strict';\nrequire('../modules/es.array.iterator');\nvar DOMIterables = require('../internals/dom-iterables');\nvar global = require('../internals/global');\nvar classof = require('../internals/classof');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar Iterators = require('../internals/iterators');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\n\nfor (var COLLECTION_NAME in DOMIterables) {\n  var Collection = global[COLLECTION_NAME];\n  var CollectionPrototype = Collection && Collection.prototype;\n  if (CollectionPrototype && classof(CollectionPrototype) !== TO_STRING_TAG) {\n    createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);\n  }\n  Iterators[COLLECTION_NAME] = Iterators.Array;\n}\n","'use strict';\n// iterable DOM collections\n// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods\nmodule.exports = {\n  CSSRuleList: 0,\n  CSSStyleDeclaration: 0,\n  CSSValueList: 0,\n  ClientRectList: 0,\n  DOMRectList: 0,\n  DOMStringList: 0,\n  DOMTokenList: 1,\n  DataTransferItemList: 0,\n  FileList: 0,\n  HTMLAllCollection: 0,\n  HTMLCollection: 0,\n  HTMLFormElement: 0,\n  HTMLSelectElement: 0,\n  MediaList: 0,\n  MimeTypeArray: 0,\n  NamedNodeMap: 0,\n  NodeList: 1,\n  PaintRequestList: 0,\n  Plugin: 0,\n  PluginArray: 0,\n  SVGLengthList: 0,\n  SVGNumberList: 0,\n  SVGPathSegList: 0,\n  SVGPointList: 0,\n  SVGStringList: 0,\n  SVGTransformList: 0,\n  SourceBufferList: 0,\n  StyleSheetList: 0,\n  TextTrackCueList: 0,\n  TextTrackList: 0,\n  TouchList: 0\n};\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = onErrorResumeNext;\n\nfunction onErrorResumeNext(fn) {\n  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  try {\n    var result = fn.call(context);\n\n    if (typeof result.then === 'function') {\n      return new Promise(function (resolve) {\n        result.then(resolve, function () {\n          return resolve();\n        });\n      });\n    } else {\n      return result;\n    }\n  } catch (err) {}\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;",null,"/* eslint no-await-in-loop: \"off\" */\n\nimport memoize from 'memoize-one';\n\nimport AudioContextConsumer from './AudioContextConsumer';\n\nexport default class {\n  constructor({ audioContext, ponyfill }) {\n    this.consumer = null;\n    this.paused = false;\n    this.queue = [];\n\n    this.getAudioContext = memoize(() => audioContext || new ponyfill.AudioContext());\n  }\n\n  pause() {\n    this.paused = true;\n    this.consumer && this.consumer.pause();\n  }\n\n  push(utterance) {\n    this.queue.push(utterance);\n    this.startConsumer();\n  }\n\n  resume() {\n    this.paused = false;\n\n    if (this.consumer) {\n      this.consumer.resume();\n    } else {\n      this.startConsumer();\n    }\n  }\n\n  get speaking() {\n    return !!this.consumer;\n  }\n\n  async startConsumer() {\n    while (!this.paused && this.queue.length && !this.consumer) {\n      this.consumer = new AudioContextConsumer(this.getAudioContext());\n\n      await this.consumer.start(this.queue);\n\n      this.consumer = null;\n    }\n  }\n\n  stop() {\n    this.queue.splice(0);\n    this.consumer && this.consumer.stop();\n  }\n}\n","var safeIsNaN = Number.isNaN ||\n    function ponyfill(value) {\n        return typeof value === 'number' && value !== value;\n    };\nfunction isEqual(first, second) {\n    if (first === second) {\n        return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n        return true;\n    }\n    return false;\n}\nfunction areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n        if (!isEqual(newInputs[i], lastInputs[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) { isEqual = areInputsEqual; }\n    var cache = null;\n    function memoized() {\n        var newArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newArgs[_i] = arguments[_i];\n        }\n        if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) {\n            return cache.lastResult;\n        }\n        var lastResult = resultFn.apply(this, newArgs);\n        cache = {\n            lastResult: lastResult,\n            lastArgs: newArgs,\n            lastThis: this,\n        };\n        return lastResult;\n    }\n    memoized.clear = function clear() {\n        cache = null;\n    };\n    return memoized;\n}\n\nexport { memoizeOne as default };\n",null,"/* eslint no-await-in-loop: \"off\" */\n\nexport default class {\n  constructor(audioContext) {\n    this.audioContext = audioContext;\n  }\n\n  pause() {\n    this.audioContext && this.audioContext.suspend();\n    this.playingUtterance && this.playingUtterance.dispatchEvent(new CustomEvent('pause'));\n  }\n\n  resume() {\n    this.audioContext && this.audioContext.resume();\n    this.playingUtterance && this.playingUtterance.dispatchEvent(new CustomEvent('resume'));\n  }\n\n  async start(queue) {\n    let utterance;\n\n    while ((utterance = queue.shift())) {\n      this.playingUtterance = utterance;\n\n      await utterance.play(this.audioContext);\n\n      this.playingUtterance = null;\n    }\n  }\n\n  stop() {\n    this.playingUtterance && this.playingUtterance.stop();\n\n    if (this.audioContext.state === 'suspended') {\n      // Play -> Pause -> Cancel (stop)\n      // This would generate these events: \"start\", \"pause\", \"end\"\n\n      // Without this code, the \"end\" event will not emit until resume() is called\n      // Cancelling an unstarted utterance will not emit any \"start\" or \"end\" event\n      this.audioContext.resume();\n    }\n  }\n}\n",null,"/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, -1] }] */\n\nimport SpeechSynthesisVoice from './SpeechSynthesisVoice';\n\nasync function fetchCustomVoices({ customVoiceHostname, deploymentId, region, subscriptionKey }) {\n  const hostname = customVoiceHostname || `${ region }.customvoice.api.speech.microsoft.com`;\n\n  // Although encodeURI on a hostname doesn't work as expected for hostname, at least, it will fail peacefully.\n  const res = await fetch(\n    `https://${ encodeURI(hostname) }/api/texttospeech/v2.0/endpoints/${ encodeURIComponent(deploymentId) }`,\n    {\n      headers: {\n        accept: 'application/json',\n        'ocp-apim-subscription-key': subscriptionKey\n      }\n    }\n  );\n\n  if (!res.ok) {\n    throw new Error('Failed to fetch custom voices');\n  }\n\n  return res.json();\n}\n\nexport default async function({ customVoiceHostname, deploymentId, region, subscriptionKey }) {\n  const { models } = await fetchCustomVoices({ customVoiceHostname, deploymentId, region, subscriptionKey });\n\n  return models\n    .map(\n      ({ properties: { Gender: gender }, locale: lang, name: voiceURI }) =>\n        new SpeechSynthesisVoice({ gender, lang, voiceURI })\n    )\n    .sort(({ name: x }, { name: y }) => (x > y ? 1 : x < y ? -1 : 0));\n}\n",null,"export default class {\n  constructor({ gender, lang, voiceURI }) {\n    this._default = false;\n    this._gender = gender;\n    this._lang = lang;\n    this._localService = false;\n    this._name = voiceURI;\n    this._voiceURI = voiceURI;\n  }\n\n  get default() {\n    return this._default;\n  }\n\n  get gender() {\n    return this._gender;\n  }\n\n  get lang() {\n    return this._lang;\n  }\n\n  get localService() {\n    return this._localService;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get voiceURI() {\n    return this._voiceURI;\n  }\n}\n",null,"/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, -1] }] */\n\nimport SpeechSynthesisVoice from './SpeechSynthesisVoice';\n\nexport default async function fetchVoices({ authorizationToken, region, speechSynthesisHostname, subscriptionKey }) {\n  // Although encodeURI on a hostname doesn't work as expected for hostname, at least, it will fail peacefully.\n  const hostname = speechSynthesisHostname || `${ encodeURI(region) }.tts.speech.microsoft.com`;\n  const res = await fetch(`https://${ hostname }/cognitiveservices/voices/list`, {\n    headers: {\n      'content-type': 'application/json',\n      ...(authorizationToken\n        ? {\n            authorization: `Bearer ${ authorizationToken }`\n          }\n        : {\n            'Ocp-Apim-Subscription-Key': subscriptionKey\n          })\n    }\n  });\n\n  if (!res.ok) {\n    throw new Error('Failed to fetch voices');\n  }\n\n  const voices = await res.json();\n\n  return voices\n    .map(({ Gender: gender, Locale: lang, Name: voiceURI }) => new SpeechSynthesisVoice({ gender, lang, voiceURI }))\n    .sort(({ name: x }, { name: y }) => (x > y ? 1 : x < y ? -1 : 0));\n}\n",null,"import resolveFunctionOrReturnValue from './resolveFunctionOrReturnValue';\n\nlet shouldWarnOnSubscriptionKey = true;\n\nexport default function patchOptions({\n  authorizationToken,\n  credentials,\n  looseEvent,\n  looseEvents,\n  region = 'westus',\n  subscriptionKey,\n  ...otherOptions\n} = {}) {\n  if (typeof looseEvent !== 'undefined') {\n    console.warn('web-speech-cognitive-services: The option \"looseEvent\" should be named as \"looseEvents\".');\n\n    looseEvents = looseEvent;\n  }\n\n  if (!credentials) {\n    if (!authorizationToken && !subscriptionKey) {\n      throw new Error('web-speech-cognitive-services: Credentials must be specified.');\n    } else {\n      console.warn(\n        'web-speech-cognitive-services: We are deprecating authorizationToken, region, and subscriptionKey. Please use credentials instead. The deprecated option will be removed on or after 2020-11-14.'\n      );\n\n      credentials = async () =>\n        authorizationToken\n          ? { authorizationToken: await resolveFunctionOrReturnValue(authorizationToken), region }\n          : { region, subscriptionKey: await resolveFunctionOrReturnValue(subscriptionKey) };\n    }\n  }\n\n  return {\n    ...otherOptions,\n    fetchCredentials: async () => {\n      const {\n        authorizationToken,\n        customVoiceHostname,\n        region,\n        speechRecognitionHostname,\n        speechSynthesisHostname,\n        subscriptionKey\n      } = await resolveFunctionOrReturnValue(credentials);\n\n      if ((!authorizationToken && !subscriptionKey) || (authorizationToken && subscriptionKey)) {\n        throw new Error(\n          'web-speech-cognitive-services: Either \"authorizationToken\" or \"subscriptionKey\" must be provided.'\n        );\n      } else if (!region && !(speechRecognitionHostname && speechSynthesisHostname)) {\n        throw new Error(\n          'web-speech-cognitive-services: Either \"region\" or \"speechRecognitionHostname\" and \"speechSynthesisHostname\" must be set.'\n        );\n      } else if (region && (customVoiceHostname || speechRecognitionHostname || speechSynthesisHostname)) {\n        throw new Error(\n          'web-speech-cognitive-services: Only either \"region\" or \"customVoiceHostname\", \"speechRecognitionHostname\" and \"speechSynthesisHostname\" can be set.'\n        );\n      } else if (authorizationToken) {\n        if (typeof authorizationToken !== 'string') {\n          throw new Error('web-speech-cognitive-services: \"authorizationToken\" must be a string.');\n        }\n      } else if (typeof subscriptionKey !== 'string') {\n        throw new Error('web-speech-cognitive-services: \"subscriptionKey\" must be a string.');\n      }\n\n      if (shouldWarnOnSubscriptionKey && subscriptionKey) {\n        console.warn(\n          'web-speech-cognitive-services: In production environment, subscription key should not be used, authorization token should be used instead.'\n        );\n\n        shouldWarnOnSubscriptionKey = false;\n      }\n\n      const resolvedCredentials = authorizationToken ? { authorizationToken } : { subscriptionKey };\n\n      if (region) {\n        resolvedCredentials.region = region;\n      } else {\n        resolvedCredentials.customVoiceHostname = customVoiceHostname;\n        resolvedCredentials.speechRecognitionHostname = speechRecognitionHostname;\n        resolvedCredentials.speechSynthesisHostname = speechSynthesisHostname;\n      }\n\n      return resolvedCredentials;\n    },\n    looseEvents\n  };\n}\n","var objectWithoutPropertiesLoose = require(\"./objectWithoutPropertiesLoose.js\");\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutProperties, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",null,"export default function resolveFunctionOrReturnValue(fnOrValue) {\n  return typeof fnOrValue === 'function' ? fnOrValue() : fnOrValue;\n}\n",null,"import { Event } from 'event-target-shim/es5';\n\nexport default class SpeechSynthesisEvent extends Event {\n  constructor(type) {\n    super(type);\n  }\n}\n",null,"/* eslint no-empty: [\"error\", { \"allowEmptyCatch\": true }] */\n\nimport { EventTarget, getEventAttributeValue, setEventAttributeValue } from 'event-target-shim/es5';\nimport EventAsPromise from 'event-as-promise';\n\nimport fetchSpeechData from './fetchSpeechData';\nimport SpeechSynthesisEvent from './SpeechSynthesisEvent';\nimport subscribeEvent from './subscribeEvent';\n\nfunction asyncDecodeAudioData(audioContext, arrayBuffer) {\n  return new Promise((resolve, reject) => {\n    const promise = audioContext.decodeAudioData(arrayBuffer, resolve, reject);\n\n    // Newer implementation of \"decodeAudioData\" will return a Promise\n    promise && typeof promise.then === 'function' && resolve(promise);\n  });\n}\n\nfunction playDecoded(audioContext, audioBuffer, source) {\n  return new Promise((resolve, reject) => {\n    const audioContextClosed = new EventAsPromise();\n    const sourceEnded = new EventAsPromise();\n    const unsubscribe = subscribeEvent(\n      audioContext,\n      'statechange',\n      ({ target: { state } }) => state === 'closed' && audioContextClosed.eventListener()\n    );\n\n    try {\n      source.buffer = audioBuffer;\n      // \"ended\" may not fire if the underlying AudioContext is closed prematurely\n      source.onended = sourceEnded.eventListener;\n\n      source.connect(audioContext.destination);\n      source.start(0);\n\n      Promise.race([audioContextClosed.upcoming(), sourceEnded.upcoming()]).then(resolve);\n    } catch (err) {\n      reject(err);\n    } finally {\n      unsubscribe();\n    }\n  });\n}\n\nclass SpeechSynthesisUtterance extends EventTarget {\n  constructor(text) {\n    super();\n\n    this._lang = null;\n    this._pitch = 1;\n    this._rate = 1;\n    this._voice = null;\n    this._volume = 1;\n\n    this.text = text;\n\n    this.onboundary = null;\n    this.onend = null;\n    this.onerror = null;\n    this.onmark = null;\n    this.onpause = null;\n    this.onresume = null;\n    this.onstart = null;\n  }\n\n  get lang() {\n    return this._lang;\n  }\n\n  set lang(value) {\n    this._lang = value;\n  }\n\n  get onboundary() {\n    return getEventAttributeValue(this, 'boundary');\n  }\n\n  set onboundary(value) {\n    setEventAttributeValue(this, 'boundary', value);\n  }\n\n  get onend() {\n    return getEventAttributeValue(this, 'end');\n  }\n\n  set onend(value) {\n    setEventAttributeValue(this, 'end', value);\n  }\n\n  get onerror() {\n    return getEventAttributeValue(this, 'error');\n  }\n\n  set onerror(value) {\n    setEventAttributeValue(this, 'error', value);\n  }\n\n  get onmark() {\n    return getEventAttributeValue(this, 'mark');\n  }\n\n  set onmark(value) {\n    setEventAttributeValue(this, 'mark', value);\n  }\n\n  get onpause() {\n    return getEventAttributeValue(this, 'pause');\n  }\n\n  set onpause(value) {\n    setEventAttributeValue(this, 'pause', value);\n  }\n\n  get onresume() {\n    return getEventAttributeValue(this, 'resume');\n  }\n\n  set onresume(value) {\n    setEventAttributeValue(this, 'resume', value);\n  }\n\n  get onstart() {\n    return getEventAttributeValue(this, 'start');\n  }\n\n  set onstart(value) {\n    setEventAttributeValue(this, 'start', value);\n  }\n\n  get pitch() {\n    return this._pitch;\n  }\n\n  set pitch(value) {\n    this._pitch = value;\n  }\n\n  get rate() {\n    return this._rate;\n  }\n\n  set rate(value) {\n    this._rate = value;\n  }\n\n  get voice() {\n    return this._voice;\n  }\n\n  set voice(value) {\n    this._voice = value;\n  }\n\n  get volume() {\n    return this._volume;\n  }\n\n  set volume(value) {\n    this._volume = value;\n  }\n\n  preload({ deploymentId, fetchCredentials, outputFormat }) {\n    this.arrayBufferPromise = fetchSpeechData({\n      fetchCredentials,\n      deploymentId,\n      lang: this.lang || window.navigator.language,\n      outputFormat,\n      pitch: this.pitch,\n      rate: this.rate,\n      text: this.text,\n      voice: this.voice && this.voice.voiceURI,\n      volume: this.volume\n    });\n\n    // We need to call \"catch\" to make sure the Promise is running.\n    // We will ignore the reject result and handled in play() later.\n    this.arrayBufferPromise.catch();\n  }\n\n  async play(audioContext) {\n    try {\n      // We should emit \"start\" event even if preload() failed.\n      this.dispatchEvent(new SpeechSynthesisEvent('start'));\n\n      // HACK: iOS requires bufferSourceNode to be constructed before decoding data.\n      const source = audioContext.createBufferSource();\n      const audioBuffer = await asyncDecodeAudioData(audioContext, await this.arrayBufferPromise);\n\n      this._playingSource = source;\n\n      await playDecoded(audioContext, audioBuffer, source);\n\n      this._playingSource = null;\n      this.dispatchEvent(new SpeechSynthesisEvent('end'));\n    } catch (error) {\n      // \"message\" is not in spec but to provide a friendly message.\n      this.dispatchEvent(new ErrorEvent('error', { error: 'synthesis-failed', message: error.stack }));\n    }\n  }\n\n  stop() {\n    this._playingSource && this._playingSource.stop();\n  }\n}\n\nexport default SpeechSynthesisUtterance;\n",null,"import createDeferred from './external/p-defer';\n\nexport default class EventAsPromise {\n  constructor(options = {}) {\n    this.defers = [];\n    this.upcomingDeferred = null;\n    this.eventListener = this.eventListener.bind(this);\n    this.options = options;\n\n    this.one = this.one.bind(this);\n    this.upcoming = this.upcoming.bind(this);\n\n    this[Symbol.iterator] = () => ({\n      next: () => ({\n        done: false,\n        value: this.upcoming()\n      })\n    });\n  }\n\n  eventListener(event) {\n    const deferred = this.defers.shift();\n    const args = this.options.array ? [].slice.call(arguments) : event;\n\n    deferred && deferred.resolve(args);\n\n    if (this.upcomingDeferred) {\n      this.upcomingDeferred.resolve(args);\n      this.upcomingDeferred = null;\n    }\n  }\n\n  one() {\n    const deferred = createDeferred();\n\n    this.defers.push(deferred);\n\n    return deferred.promise;\n  }\n\n  upcoming() {\n    if (!this.upcomingDeferred) {\n      this.upcomingDeferred = createDeferred();\n    }\n\n    return this.upcomingDeferred.promise;\n  }\n}\n",null,"// The MIT License (MIT)\n//\n// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// This piece of code is adopted from https://github.com/sindresorhus/p-defer\n\n// The reason why we need to fork it is because:\n// - The original package published to NPM is not ES5-compliant\n//    - Due to the use of arrow functions\n// - create-react-app@1 does not play nice with packages that are not ES5-compliant\n//    - create-react-app@2 do play nice, but it was so new that most of the people are still on @1\n\n// Criteria to remove this package:\n// - When create-react-app@2 become mainstream, or,\n// - When p-defer start publishing a ES5-compliant version on NPM\n\n'use strict';\n\nmodule.exports = function () {\n  const ret = {};\n\n  ret.promise = new Promise(function (resolve, reject) {\n    ret.resolve = resolve;\n    ret.reject = reject;\n  });\n\n  return ret;\n};\n",null,"import { decode } from 'base64-arraybuffer';\nimport buildSSML from './buildSSML';\nimport isSSML from './isSSML';\n\nconst DEFAULT_LANGUAGE = 'en-US';\nconst DEFAULT_OUTPUT_FORMAT = 'riff-16khz-16bit-mono-pcm';\nconst DEFAULT_VOICE = 'Microsoft Server Speech Text to Speech Voice (en-US, AriaNeural)';\nconst EMPTY_MP3_BASE64 =\n  'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU3LjU2LjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAACAAABhgC7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7//////////////////////////////////////////////////////////////////8AAAAATGF2YzU3LjY0AAAAAAAAAAAAAAAAJAUHAAAAAAAAAYYoRBqpAAAAAAD/+xDEAAPAAAGkAAAAIAAANIAAAARMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EMQpg8AAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nexport default async function({\n  deploymentId,\n  fetchCredentials,\n  lang = DEFAULT_LANGUAGE,\n  outputFormat = DEFAULT_OUTPUT_FORMAT,\n  pitch,\n  rate,\n  text,\n  voice = DEFAULT_VOICE,\n  volume\n}) {\n  if (!text) {\n    // If text is empty, play a short audio clip. This allows developers to easily prime the AudioContext object by playing an empty string.\n    return decode(EMPTY_MP3_BASE64);\n  }\n\n  const { authorizationToken, region, speechSynthesisHostname, subscriptionKey } = await fetchCredentials();\n\n  if ((authorizationToken && subscriptionKey) || (!authorizationToken && !subscriptionKey)) {\n    throw new Error('Only \"authorizationToken\" or \"subscriptionKey\" should be set.');\n  } else if ((region && speechSynthesisHostname) || (!region && !speechSynthesisHostname)) {\n    throw new Error('Only \"region\" or \"speechSynthesisHostnamename\" should be set.');\n  }\n\n  const ssml = isSSML(text) ? text : buildSSML({ lang, pitch, rate, text, voice, volume });\n\n  // Although calling encodeURI on hostname does not actually works, it fails faster and safer.\n  const hostname =\n    speechSynthesisHostname ||\n    (deploymentId\n      ? `${ encodeURI(region) }.voice.speech.microsoft.com`\n      : `${ encodeURI(region) }.tts.speech.microsoft.com`);\n  const search = deploymentId ? `?deploymentId=${ encodeURI(deploymentId) }` : '';\n  const url = `https://${ hostname }/cognitiveservices/v1${ search }`;\n\n  const res = await fetch(url, {\n    headers: {\n      'Content-Type': 'application/ssml+xml',\n      'X-Microsoft-OutputFormat': outputFormat,\n      ...(authorizationToken\n        ? {\n            Authorization: `Bearer ${ authorizationToken }`\n          }\n        : {\n            'Ocp-Apim-Subscription-Key': subscriptionKey\n          })\n    },\n    method: 'POST',\n    body: ssml\n  });\n\n  if (!res.ok) {\n    throw new Error(`web-speech-cognitive-services: Failed to syntheis speech, server returned ${ res.status }`);\n  }\n\n  return res.arrayBuffer();\n}\n",null,"const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n// Use a lookup table to find the index.\nconst lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\nfor (let i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n}\n\nexport const encode = (arraybuffer: ArrayBuffer): string => {\n    let bytes = new Uint8Array(arraybuffer),\n        i,\n        len = bytes.length,\n        base64 = '';\n\n    for (i = 0; i < len; i += 3) {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n\n    if (len % 3 === 2) {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    } else if (len % 3 === 1) {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n\n    return base64;\n};\n\nexport const decode = (base64: string): ArrayBuffer => {\n    let bufferLength = base64.length * 0.75,\n        len = base64.length,\n        i,\n        p = 0,\n        encoded1,\n        encoded2,\n        encoded3,\n        encoded4;\n\n    if (base64[base64.length - 1] === '=') {\n        bufferLength--;\n        if (base64[base64.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n\n    const arraybuffer = new ArrayBuffer(bufferLength),\n        bytes = new Uint8Array(arraybuffer);\n\n    for (i = 0; i < len; i += 4) {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n\n    return arraybuffer;\n};\n",null,"/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, 100] }] */\n\n// Cognitive Services does not support unsigned percentage\n// It must be converted into +/- first.\nfunction relativePercentage(value) {\n  let relative = Math.round((value - 1) * 100);\n\n  if (relative >= 0) {\n    relative = '+' + relative;\n  }\n\n  return relative + '%';\n}\n\nexport default function buildSSML({ lang, pitch = 1, rate = 1, text, voice, volume }) {\n  return `<speak version=\"1.0\" xml:lang=\"${ lang }\">\n  <voice xml:lang=\"${ lang }\" name=\"${ voice }\">\n    <prosody pitch=\"${ relativePercentage(pitch) }\" rate=\"${ relativePercentage(rate) }\" volume=\"${ relativePercentage(\n    volume\n  ) }\">\n      ${ text }\n    </prosody>\n  </voice>\n</speak>`;\n}\n",null,"const SPEAK_TAG_PATTERN = /^\\s*<speak(\\s|\\/?>)/u;\nconst XML_PROLOG_PATTERN = /^\\s*<\\?xml\\s/u;\n\nexport default function isSSML(text) {\n  return SPEAK_TAG_PATTERN.test(text) || XML_PROLOG_PATTERN.test(text);\n}\n",null,"export default function subscribeEvent(target, name, handler) {\n  target.addEventListener(name, handler);\n\n  return () => target.removeEventListener(name, handler);\n}\n","import {\n  createMachine,\n  sendParent,\n  assign,\n  fromCallback,\n  raise,\n  cancel,\n} from \"xstate\";\nimport { getToken } from \"./getToken\";\n\nimport createSpeechRecognitionPonyfill from \"web-speech-cognitive-services/lib/SpeechServices/SpeechToText\";\nconst REGION = \"northeurope\";\n\nimport { RecogniseParameters, Hypothesis, AzureCredentials } from \"./types\";\ninterface MySpeechRecognition extends SpeechRecognition {\n  new ();\n}\n\ninterface MySpeechGrammarList extends SpeechGrammarList {\n  new ();\n}\n\ntype ASREvent =\n  | {\n      type: \"READY\";\n      value: {\n        wsaASR: MySpeechRecognition;\n        wsaGrammarList: MySpeechGrammarList;\n      };\n    }\n  | { type: \"ERROR\" }\n  | { type: \"NOINPUT\" }\n  | { type: \"CONTROL\" }\n  | {\n      type: \"START\";\n      value?: RecogniseParameters;\n    }\n  | { type: \"STARTED\"; value: { wsaASRinstance: MySpeechRecognition } }\n  | { type: \"STARTSPEECH\" }\n  | { type: \"RECOGNISED\" }\n  | { type: \"RESULT\"; value: Hypothesis[] };\n\ninterface ASRContext {\n  audioContext: AudioContext;\n  azureCredentials: string | AzureCredentials;\n  azureAuthorizationToken?: string;\n  locale: string;\n  asrDefaultNoInputTimeout: number;\n  asrDefaultCompleteTimeout: number;\n  wsaASR?: MySpeechRecognition;\n  wsaASRinstance?: MySpeechRecognition;\n  wsaGrammarList?: MySpeechGrammarList;\n  result?: Hypothesis[];\n  params?: RecogniseParameters;\n}\n\nexport const asrMachine = createMachine(\n  {\n    id: \"asr\",\n    types: {\n      context: {} as ASRContext,\n      events: {} as ASREvent,\n    },\n    context: ({ input }) => ({\n      asrDefaultCompleteTimeout: input.asrDefaultCompleteTimeout || 0,\n      asrDefaultNoInputTimeout: input.asrDefaultNoInputTimeout || 5000,\n      locale: input.locale || \"en-US\",\n      audioContext: input.audioContext,\n      azureCredentials: input.azureCredentials,\n    }),\n\n    initial: \"GetToken\",\n    on: {\n      READY: {\n        target: \".Ready\",\n        actions: [\n          assign({\n            wsaASR: ({ event }) => event.value.wsaASR,\n            wsaGrammarList: ({ event }) => event.value.wsaGrammarList,\n          }),\n          sendParent({ type: \"ASR_READY\" }),\n        ],\n      },\n    },\n    states: {\n      Fail: {},\n      Ready: {\n        on: {\n          START: {\n            target: \"Recognising\",\n            actions: assign({ params: ({ event }) => event.value }),\n          },\n        },\n      },\n      Recognising: {\n        initial: \"WaitForRecogniser\",\n        invoke: {\n          id: \"recStart\",\n          input: ({ context }) => ({\n            wsaASR: context.wsaASR,\n            wsaGrammarList: context.wsaGrammarList,\n            locale: context.locale,\n            phrases: (context.params || {}).hints || [],\n          }),\n          src: \"recStart\",\n        },\n        exit: \"recStop\",\n        on: {\n          RESULT: {\n            actions: [\n              assign({\n                result: ({ event }) => event.value,\n              }),\n              cancel(\"completeTimeout\"),\n            ],\n            target: \".Match\",\n          },\n          RECOGNISED: {\n            target: \"Ready\",\n            actions: [\n              sendParent(({ context }) => ({\n                type: \"RECOGNISED\",\n                value: context.result,\n              })),\n            ],\n          },\n          CONTROL: {\n            target: \"Pause\",\n          },\n          NOINPUT: {\n            actions: sendParent({ type: \"ASR_NOINPUT\" }),\n            target: \"Ready\",\n          },\n        },\n        states: {\n          WaitForRecogniser: {\n            on: {\n              STARTED: {\n                target: \"NoInput\",\n                actions: [\n                  assign({\n                    wsaASRinstance: ({ event }) => event.value.wsaASRinstance,\n                  }),\n                  sendParent({ type: \"ASR_STARTED\" }),\n                ],\n              },\n            },\n          },\n          NoInput: {\n            entry: [\n              raise(\n                { type: \"NOINPUT\" },\n                {\n                  delay: ({ context }) =>\n                    (context.params || {}).noInputTimeout ||\n                    context.asrDefaultNoInputTimeout,\n                  id: \"timeout\",\n                },\n              ),\n            ],\n            on: {\n              STARTSPEECH: {\n                target: \"InProgress\",\n                actions: cancel(\"completeTimeout\"),\n              },\n            },\n            exit: [cancel(\"timeout\")],\n          },\n          InProgress: {\n            entry: () => console.debug(\"[ASR] in progress\"),\n          },\n          Match: {\n            entry: [\n              ({ context }) =>\n                console.debug(\n                  \"RECOGNISED will be sent in (ms)\",\n                  (context.params || {}).completeTimeout ||\n                    context.asrDefaultCompleteTimeout,\n                ),\n              raise(\n                { type: \"RECOGNISED\" },\n                {\n                  delay: ({ context }) =>\n                    (context.params || {}).completeTimeout ||\n                    context.asrDefaultCompleteTimeout,\n                  id: \"completeTimeout\",\n                },\n              ),\n            ],\n          },\n        },\n      },\n      Pause: {\n        entry: sendParent({ type: \"ASR_PAUSED\" }),\n        on: {\n          CONTROL: {\n            target: \"Recognising\",\n            //       ///// todo? reset noInputTimeout\n            //       // actions: assign({\n            //       //   params: {\n            //       //     noInputTimeout: ({ context }) =>\n            //       //       context.asrDefaultNoInputTimeout,\n            //       //     completeTimeout: 0,\n            //       //     locale: \"0\",\n            //       //     hints: [\"\"],\n            //       //   },\n            //       // }),} },\n          },\n        },\n      },\n      GetToken: {\n        invoke: {\n          id: \"getAuthorizationToken\",\n          input: ({ context }) => ({\n            credentials: context.azureCredentials,\n          }),\n          src: \"getToken\",\n          onDone: {\n            target: \"Ponyfill\",\n            actions: [\n              assign(({ event }) => {\n                return { azureAuthorizationToken: event.output };\n              }),\n            ],\n          },\n          onError: {\n            target: \"Fail\",\n          },\n        },\n      },\n      Ponyfill: {\n        invoke: {\n          id: \"ponyASR\",\n          src: \"ponyfill\",\n          input: ({ context }) => ({\n            audioContext: context.audioContext,\n            azureAuthorizationToken: context.azureAuthorizationToken,\n            locale: context.locale,\n          }),\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      recStop: ({ context }) => {\n        context.wsaASRinstance.abort();\n        console.debug(\"[ASR] stopped\");\n      },\n    },\n    actors: {\n      getToken: getToken,\n      ponyfill: fromCallback(\n        async ({ sendBack, input }: { sendBack: any; input: any }) => {\n          const { SpeechGrammarList, SpeechRecognition } =\n            createSpeechRecognitionPonyfill({\n              audioContext: input.audioContext,\n              credentials: {\n                region: REGION, // TODO\n                authorizationToken: input.azureAuthorizationToken,\n              },\n            });\n          sendBack({\n            type: \"READY\",\n            value: {\n              wsaASR: SpeechRecognition,\n              wsaGrammarList: SpeechGrammarList,\n            },\n          });\n          console.debug(\"[ASR] READY\");\n        },\n      ),\n      recStart: fromCallback(\n        ({ sendBack, input }: { sendBack: any; input: any }) => {\n          let asr = new input.wsaASR!();\n          asr.grammars = new input.wsaGrammarList!();\n          asr.grammars.phrases = input.phrases || [];\n          asr.lang = input.locale;\n          asr.continuous = true;\n          asr.interimResults = true;\n          asr.onresult = function (event: any) {\n            if (event.results[event.results.length - 1].isFinal) {\n              const transcript = event.results\n                .map((x: SpeechRecognitionResult) =>\n                  x[0].transcript.replace(/\\.$/, \"\"),\n                )\n                .join(\" \");\n              const confidence =\n                event.results\n                  .map((x: SpeechRecognitionResult) => x[0].confidence)\n                  .reduce((a: number, b: number) => a + b) /\n                event.results.length;\n              const res: Hypothesis[] = [\n                {\n                  utterance: transcript,\n                  confidence: confidence,\n                },\n              ];\n              sendBack({\n                type: \"RESULT\",\n                value: res,\n              });\n              console.debug(\"[ASR] RESULT (pre-final)\", res);\n            } else {\n              sendBack({ type: \"STARTSPEECH\" });\n            }\n          };\n          asr.addEventListener(\"start\", () => {\n            sendBack({ type: \"STARTED\", value: { wsaASRinstance: asr } });\n          });\n\n          // receive((event) => {\n          //   console.debug(\"bla\");\n          //   if (event.type === \"STOP\") {\n          //     asr.abort();\n          //   }\n          // });\n          asr.start();\n        },\n      ),\n    },\n  },\n);\n",null,"import createSpeechRecognitionPonyfill, {\n  createSpeechRecognitionPonyfillFromRecognizer\n} from './SpeechToText/createSpeechRecognitionPonyfill';\n\nexport default createSpeechRecognitionPonyfill;\n\nexport { createSpeechRecognitionPonyfillFromRecognizer };\n",null,"/* eslint class-methods-use-this: \"off\" */\n/* eslint complexity: [\"error\", 70] */\n/* eslint no-await-in-loop: \"off\" */\n/* eslint no-empty-function: \"off\" */\n/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 100, 150] }] */\n\nimport { Event, EventTarget, getEventAttributeValue, setEventAttributeValue } from 'event-target-shim/es5';\n\nimport cognitiveServiceEventResultToWebSpeechRecognitionResultList from './cognitiveServiceEventResultToWebSpeechRecognitionResultList';\nimport createPromiseQueue from '../../Util/createPromiseQueue';\nimport patchOptions from '../patchOptions';\nimport SpeechGrammarList from './SpeechGrammarList';\nimport SpeechSDK from '../SpeechSDK';\n\n// https://docs.microsoft.com/en-us/javascript/api/microsoft-cognitiveservices-speech-sdk/speechconfig?view=azure-node-latest#outputformat\n// {\n//   \"RecognitionStatus\": \"Success\",\n//   \"Offset\": 900000,\n//   \"Duration\": 49000000,\n//   \"NBest\": [\n//     {\n//       \"Confidence\": 0.738919,\n//       \"Lexical\": \"second\",\n//       \"ITN\": \"second\",\n//       \"MaskedITN\": \"second\",\n//       \"Display\": \"Second.\"\n//     }\n//   ]\n// }\n\n// {\n//   \"RecognitionStatus\": \"InitialSilenceTimeout\",\n//   \"Offset\": 50000000,\n//   \"Duration\": 0\n// }\n\nconst { AudioConfig, OutputFormat, ResultReason, SpeechConfig, SpeechRecognizer } = SpeechSDK;\n\nfunction serializeRecognitionResult({ duration, errorDetails, json, offset, properties, reason, resultId, text }) {\n  return {\n    duration,\n    errorDetails,\n    json: JSON.parse(json),\n    offset,\n    properties,\n    reason,\n    resultId,\n    text\n  };\n}\n\nfunction averageAmplitude(arrayBuffer) {\n  const array = new Int16Array(arrayBuffer);\n\n  return (\n    [].reduce.call(array, (averageAmplitude, amplitude) => averageAmplitude + Math.abs(amplitude), 0) / array.length\n  );\n}\n\nfunction cognitiveServicesAsyncToPromise(fn) {\n  return (...args) => new Promise((resolve, reject) => fn(...args, resolve, reject));\n}\n\nclass SpeechRecognitionEvent extends Event {\n  constructor(type, { data, emma, interpretation, resultIndex, results } = {}) {\n    super(type);\n\n    this.data = data;\n    this.emma = emma;\n    this.interpretation = interpretation;\n    this.resultIndex = resultIndex;\n    this.results = results;\n  }\n}\n\nfunction prepareAudioConfig(audioConfig) {\n  const originalAttach = audioConfig.attach;\n  const boundOriginalAttach = audioConfig.attach.bind(audioConfig);\n  let firstChunk;\n  let muted;\n\n  // We modify \"attach\" function and detect when audible chunk is read.\n  // We will only modify \"attach\" function once.\n  audioConfig.attach = async () => {\n    const reader = await boundOriginalAttach();\n\n    return {\n      ...reader,\n      read: async () => {\n        const chunk = await reader.read();\n\n        // The magic number 150 is measured by:\n        // 1. Set microphone volume to 0\n        // 2. Observe the amplitude (100-110) for the first few chunks\n        //    (There is a short static caught when turning on the microphone)\n        // 3. Set the number a bit higher than the observation\n\n        if (!firstChunk && averageAmplitude(chunk.buffer) > 150) {\n          audioConfig.events.onEvent({ name: 'FirstAudibleChunk' });\n          firstChunk = true;\n        }\n\n        if (muted) {\n          return { buffer: new ArrayBuffer(0), isEnd: true, timeReceived: Date.now() };\n        }\n\n        return chunk;\n      }\n    };\n  };\n\n  return {\n    audioConfig,\n    pause: () => {\n      muted = true;\n    },\n    unprepare: () => {\n      audioConfig.attach = originalAttach;\n    }\n  };\n}\n\nexport function createSpeechRecognitionPonyfillFromRecognizer({\n  createRecognizer,\n  enableTelemetry,\n  looseEvents,\n  referenceGrammars,\n  textNormalization\n}) {\n  // If enableTelemetry is set to null or non-boolean, we will default to true.\n  SpeechRecognizer.enableTelemetry(enableTelemetry !== false);\n\n  class SpeechRecognition extends EventTarget {\n    constructor() {\n      super();\n\n      this._continuous = false;\n      this._interimResults = false;\n      this._lang =\n        typeof window !== 'undefined'\n          ? window.document.documentElement.getAttribute('lang') || window.navigator.language\n          : 'en-US';\n      this._grammars = new SpeechGrammarList();\n      this._maxAlternatives = 1;\n    }\n\n    emitCognitiveServices(type, event) {\n      this.dispatchEvent(\n        new SpeechRecognitionEvent('cognitiveservices', {\n          data: {\n            ...event,\n            type\n          }\n        })\n      );\n    }\n\n    get continuous() {\n      return this._continuous;\n    }\n\n    set continuous(value) {\n      this._continuous = value;\n    }\n\n    get grammars() {\n      return this._grammars;\n    }\n\n    set grammars(value) {\n      if (value instanceof SpeechGrammarList) {\n        this._grammars = value;\n      } else {\n        throw new Error(`The provided value is not of type 'SpeechGrammarList'`);\n      }\n    }\n\n    get interimResults() {\n      return this._interimResults;\n    }\n\n    set interimResults(value) {\n      this._interimResults = value;\n    }\n\n    get maxAlternatives() {\n      return this._maxAlternatives;\n    }\n\n    set maxAlternatives(value) {\n      this._maxAlternatives = value;\n    }\n\n    get lang() {\n      return this._lang;\n    }\n\n    set lang(value) {\n      this._lang = value;\n    }\n\n    get onaudioend() {\n      return getEventAttributeValue(this, 'audioend');\n    }\n\n    set onaudioend(value) {\n      setEventAttributeValue(this, 'audioend', value);\n    }\n\n    get onaudiostart() {\n      return getEventAttributeValue(this, 'audiostart');\n    }\n\n    set onaudiostart(value) {\n      setEventAttributeValue(this, 'audiostart', value);\n    }\n\n    get oncognitiveservices() {\n      return getEventAttributeValue(this, 'cognitiveservices');\n    }\n\n    set oncognitiveservices(value) {\n      setEventAttributeValue(this, 'cognitiveservices', value);\n    }\n\n    get onend() {\n      return getEventAttributeValue(this, 'end');\n    }\n\n    set onend(value) {\n      setEventAttributeValue(this, 'end', value);\n    }\n\n    get onerror() {\n      return getEventAttributeValue(this, 'error');\n    }\n\n    set onerror(value) {\n      setEventAttributeValue(this, 'error', value);\n    }\n\n    get onresult() {\n      return getEventAttributeValue(this, 'result');\n    }\n\n    set onresult(value) {\n      setEventAttributeValue(this, 'result', value);\n    }\n\n    get onsoundend() {\n      return getEventAttributeValue(this, 'soundend');\n    }\n\n    set onsoundend(value) {\n      setEventAttributeValue(this, 'soundend', value);\n    }\n\n    get onsoundstart() {\n      return getEventAttributeValue(this, 'soundstart');\n    }\n\n    set onsoundstart(value) {\n      setEventAttributeValue(this, 'soundstart', value);\n    }\n\n    get onspeechend() {\n      return getEventAttributeValue(this, 'speechend');\n    }\n\n    set onspeechend(value) {\n      setEventAttributeValue(this, 'speechend', value);\n    }\n\n    get onspeechstart() {\n      return getEventAttributeValue(this, 'speechstart');\n    }\n\n    set onspeechstart(value) {\n      setEventAttributeValue(this, 'speechstart', value);\n    }\n\n    get onstart() {\n      return getEventAttributeValue(this, 'start');\n    }\n\n    set onstart(value) {\n      setEventAttributeValue(this, 'start', value);\n    }\n\n    start() {\n      this._startOnce().catch(err => {\n        this.dispatchEvent(new ErrorEvent('error', { error: err, message: err && (err.stack || err.message) }));\n      });\n    }\n\n    async _startOnce() {\n      // TODO: [P2] Should check if recognition is active, we should not start recognition twice\n      const recognizer = await createRecognizer(this.lang);\n\n      const { pause, unprepare } = prepareAudioConfig(recognizer.audioConfig);\n\n      try {\n        const queue = createPromiseQueue();\n        let soundStarted;\n        let speechStarted;\n        let stopping;\n\n        const { detach: detachAudioConfigEvent } = recognizer.audioConfig.events.attach(event => {\n          const { name } = event;\n\n          if (name === 'AudioSourceReadyEvent') {\n            queue.push({ audioSourceReady: {} });\n          } else if (name === 'AudioSourceOffEvent') {\n            queue.push({ audioSourceOff: {} });\n          } else if (name === 'FirstAudibleChunk') {\n            queue.push({ firstAudibleChunk: {} });\n          }\n        });\n\n        recognizer.canceled = (_, { errorDetails, offset, reason, sessionId }) => {\n          queue.push({\n            canceled: {\n              errorDetails,\n              offset,\n              reason,\n              sessionId\n            }\n          });\n        };\n\n        recognizer.recognized = (_, { offset, result, sessionId }) => {\n          queue.push({\n            recognized: {\n              offset,\n              result: serializeRecognitionResult(result),\n              sessionId\n            }\n          });\n        };\n\n        recognizer.recognizing = (_, { offset, result, sessionId }) => {\n          queue.push({\n            recognizing: {\n              offset,\n              result: serializeRecognitionResult(result),\n              sessionId\n            }\n          });\n        };\n\n        recognizer.sessionStarted = (_, { sessionId }) => {\n          queue.push({ sessionStarted: { sessionId } });\n        };\n\n        recognizer.sessionStopped = (_, { sessionId }) => {\n          // \"sessionStopped\" is never fired, probably because we are using startContinuousRecognitionAsync instead of recognizeOnceAsync.\n          queue.push({ sessionStopped: { sessionId } });\n        };\n\n        recognizer.speechStartDetected = (_, { offset, sessionId }) => {\n          queue.push({ speechStartDetected: { offset, sessionId } });\n        };\n\n        recognizer.speechEndDetected = (_, { sessionId }) => {\n          // \"speechEndDetected\" is never fired, probably because we are using startContinuousRecognitionAsync instead of recognizeOnceAsync.\n          // Update: \"speechEndDetected\" is fired for DLSpeech.listenOnceAsync()\n          queue.push({ speechEndDetected: { sessionId } });\n        };\n\n        const { phrases } = this.grammars;\n\n        // HACK: We are using the internal of SpeechRecognizer because they did not expose it\n        const { dynamicGrammar } = recognizer.privReco;\n\n        referenceGrammars && referenceGrammars.length && dynamicGrammar.addReferenceGrammar(referenceGrammars);\n        phrases && phrases.length && dynamicGrammar.addPhrase(phrases);\n\n        await cognitiveServicesAsyncToPromise(recognizer.startContinuousRecognitionAsync.bind(recognizer))();\n\n        if (recognizer.stopContinuousRecognitionAsync) {\n          this.abort = () => queue.push({ abort: {} });\n          this.stop = () => queue.push({ stop: {} });\n        } else {\n          this.abort = this.stop = undefined;\n        }\n\n        let audioStarted;\n        let finalEvent;\n        let finalizedResults = [];\n\n        for (let loop = 0; !stopping || audioStarted; loop++) {\n          const event = await queue.shift();\n          const {\n            abort,\n            audioSourceOff,\n            audioSourceReady,\n            canceled,\n            firstAudibleChunk,\n            recognized,\n            recognizing,\n            stop\n          } = event;\n\n          // We are emitting event \"cognitiveservices\" for debugging purpose.\n          Object.keys(event).forEach(name => this.emitCognitiveServices(name, event[name]));\n\n          const errorMessage = canceled && canceled.errorDetails;\n\n          if (/Permission\\sdenied/u.test(errorMessage || '')) {\n            // If microphone is not allowed, we should not emit \"start\" event.\n\n            finalEvent = {\n              error: 'not-allowed',\n              type: 'error'\n            };\n\n            break;\n          }\n\n          if (!loop) {\n            this.dispatchEvent(new SpeechRecognitionEvent('start'));\n          }\n\n          if (errorMessage) {\n            if (/1006/u.test(errorMessage)) {\n              if (!audioStarted) {\n                this.dispatchEvent(new SpeechRecognitionEvent('audiostart'));\n                this.dispatchEvent(new SpeechRecognitionEvent('audioend'));\n              }\n\n              finalEvent = {\n                error: 'network',\n                type: 'error'\n              };\n            } else {\n              finalEvent = {\n                error: 'unknown',\n                type: 'error'\n              };\n            }\n\n            break;\n          } else if (abort || stop) {\n            if (abort) {\n              finalEvent = {\n                error: 'aborted',\n                type: 'error'\n              };\n\n              // If we are aborting, we will ignore lingering recognizing/recognized events. But if we are stopping, we need them.\n              stopping = 'abort';\n            } else {\n              // When we pause, we will send { isEnd: true }, Speech Services will send us \"recognized\" event.\n              pause();\n              stopping = 'stop';\n            }\n\n            // Abort should not be dispatched without support of \"stopContinuousRecognitionAsync\".\n            // But for defensive purpose, we make sure \"stopContinuousRecognitionAsync\" is available before we can call.\n            if (abort && recognizer.stopContinuousRecognitionAsync) {\n              await cognitiveServicesAsyncToPromise(recognizer.stopContinuousRecognitionAsync.bind(recognizer))();\n            }\n          } else if (audioSourceReady) {\n            this.dispatchEvent(new SpeechRecognitionEvent('audiostart'));\n\n            audioStarted = true;\n          } else if (firstAudibleChunk) {\n            this.dispatchEvent(new SpeechRecognitionEvent('soundstart'));\n\n            soundStarted = true;\n          } else if (audioSourceOff) {\n            // Looks like we don't need this line and all the tests are still working.\n            // Guessing probably stopping is already truthy.\n            // stopping = true;\n\n            speechStarted && this.dispatchEvent(new SpeechRecognitionEvent('speechend'));\n            soundStarted && this.dispatchEvent(new SpeechRecognitionEvent('soundend'));\n            audioStarted && this.dispatchEvent(new SpeechRecognitionEvent('audioend'));\n\n            audioStarted = soundStarted = speechStarted = false;\n\n            break;\n          } else if (stopping !== 'abort') {\n            if (recognized && recognized.result && recognized.result.reason === ResultReason.NoMatch) {\n              finalEvent = {\n                error: 'no-speech',\n                type: 'error'\n              };\n            } else if (recognized || recognizing) {\n              if (!audioStarted) {\n                // Unconfirmed prevention of quirks\n                this.dispatchEvent(new SpeechRecognitionEvent('audiostart'));\n\n                audioStarted = true;\n              }\n\n              if (!soundStarted) {\n                this.dispatchEvent(new SpeechRecognitionEvent('soundstart'));\n\n                soundStarted = true;\n              }\n\n              if (!speechStarted) {\n                this.dispatchEvent(new SpeechRecognitionEvent('speechstart'));\n\n                speechStarted = true;\n              }\n\n              if (recognized) {\n                const result = cognitiveServiceEventResultToWebSpeechRecognitionResultList(recognized.result, {\n                  maxAlternatives: this.maxAlternatives,\n                  textNormalization\n                });\n\n                const recognizable = !!result[0].transcript;\n\n                if (recognizable) {\n                  finalizedResults = [...finalizedResults, result];\n\n                  this.continuous &&\n                    this.dispatchEvent(\n                      new SpeechRecognitionEvent('result', {\n                        results: finalizedResults\n                      })\n                    );\n                }\n\n                // If it is continuous, we just sent the finalized results. So we don't need to send it again after \"audioend\" event.\n                if (this.continuous && recognizable) {\n                  finalEvent = null;\n                } else {\n                  finalEvent = {\n                    results: finalizedResults,\n                    type: 'result'\n                  };\n                }\n\n                if (!this.continuous && recognizer.stopContinuousRecognitionAsync) {\n                  await cognitiveServicesAsyncToPromise(recognizer.stopContinuousRecognitionAsync.bind(recognizer))();\n                }\n\n                // If event order can be loosened, we can send the recognized event as soon as we receive it.\n                // 1. If it is not recognizable (no-speech), we should send an \"error\" event just before \"end\" event. We will not loosen \"error\" events.\n                if (looseEvents && finalEvent && recognizable) {\n                  this.dispatchEvent(new SpeechRecognitionEvent(finalEvent.type, finalEvent));\n                  finalEvent = null;\n                }\n              } else if (recognizing) {\n                this.interimResults &&\n                  this.dispatchEvent(\n                    new SpeechRecognitionEvent('result', {\n                      results: [\n                        ...finalizedResults,\n                        cognitiveServiceEventResultToWebSpeechRecognitionResultList(recognizing.result, {\n                          maxAlternatives: this.maxAlternatives,\n                          textNormalization\n                        })\n                      ]\n                    })\n                  );\n              }\n            }\n          }\n        }\n\n        if (speechStarted) {\n          this.dispatchEvent(new SpeechRecognitionEvent('speechend'));\n        }\n\n        if (soundStarted) {\n          this.dispatchEvent(new SpeechRecognitionEvent('soundend'));\n        }\n\n        if (audioStarted) {\n          this.dispatchEvent(new SpeechRecognitionEvent('audioend'));\n        }\n\n        if (finalEvent) {\n          if (finalEvent.type === 'result' && !finalEvent.results.length) {\n            finalEvent = {\n              error: 'no-speech',\n              type: 'error'\n            };\n          }\n\n          if (finalEvent.type === 'error') {\n            this.dispatchEvent(new ErrorEvent('error', finalEvent));\n          } else {\n            this.dispatchEvent(new SpeechRecognitionEvent(finalEvent.type, finalEvent));\n          }\n        }\n\n        // Even though there is no \"start\" event emitted, we will still emit \"end\" event\n        // This is mainly for \"microphone blocked\" story.\n        this.dispatchEvent(new SpeechRecognitionEvent('end'));\n\n        detachAudioConfigEvent();\n      } catch (err) {\n        // Logging out the erorr because Speech SDK would fail silently.\n        console.error(err);\n\n        throw err;\n      } finally {\n        unprepare();\n        recognizer.dispose();\n      }\n    }\n  }\n\n  return {\n    SpeechGrammarList,\n    SpeechRecognition,\n    SpeechRecognitionEvent\n  };\n}\n\nexport default options => {\n  const {\n    audioConfig = AudioConfig.fromDefaultMicrophoneInput(),\n\n    // We set telemetry to true to honor the default telemetry settings of Speech SDK\n    // https://github.com/Microsoft/cognitive-services-speech-sdk-js#data--telemetry\n    enableTelemetry = true,\n\n    fetchCredentials,\n    looseEvents,\n    referenceGrammars,\n    speechRecognitionEndpointId,\n    textNormalization = 'display'\n  } = patchOptions(options);\n\n  if (!audioConfig && (!window.navigator.mediaDevices || !window.navigator.mediaDevices.getUserMedia)) {\n    console.warn(\n      'web-speech-cognitive-services: This browser does not support WebRTC and it will not work with Cognitive Services Speech Services.'\n    );\n\n    return {};\n  }\n\n  const createRecognizer = async lang => {\n    const { authorizationToken, region, speechRecognitionHostname, subscriptionKey } = await fetchCredentials();\n    let speechConfig;\n\n    if (speechRecognitionHostname) {\n      const host = { hostname: speechRecognitionHostname, port: 443, protocol: 'wss:' };\n\n      if (authorizationToken) {\n        speechConfig = SpeechConfig.fromHost(host);\n        speechConfig.authorizationToken = authorizationToken;\n      } else {\n        speechConfig = SpeechConfig.fromHost(host, subscriptionKey);\n      }\n    } else {\n      speechConfig = authorizationToken\n        ? SpeechConfig.fromAuthorizationToken(authorizationToken, region)\n        : SpeechConfig.fromSubscription(subscriptionKey, region);\n    }\n\n    if (speechRecognitionEndpointId) {\n      speechConfig.endpointId = speechRecognitionEndpointId;\n    }\n\n    speechConfig.outputFormat = OutputFormat.Detailed;\n    speechConfig.speechRecognitionLanguage = lang || 'en-US';\n\n    return new SpeechRecognizer(speechConfig, audioConfig);\n  };\n\n  return createSpeechRecognitionPonyfillFromRecognizer({\n    audioConfig,\n    createRecognizer,\n    enableTelemetry,\n    looseEvents,\n    referenceGrammars,\n    textNormalization\n  });\n};\n",null,"import arrayToMap from '../../Util/arrayToMap';\nimport SpeechSDK from '../SpeechSDK';\n\nconst {\n  ResultReason: { RecognizingSpeech, RecognizedSpeech }\n} = SpeechSDK;\n\nexport default function(result, { maxAlternatives = Infinity, textNormalization = 'display' } = {}) {\n  if (result.reason === RecognizingSpeech || (result.reason === RecognizedSpeech && !result.json.NBest)) {\n    const resultList = [\n      {\n        confidence: 0.5,\n        transcript: result.text\n      }\n    ];\n\n    if (result.reason === RecognizedSpeech) {\n      resultList.isFinal = true;\n    }\n\n    return resultList;\n  } else if (result.reason === RecognizedSpeech) {\n    const resultList = arrayToMap(\n      (result.json.NBest || [])\n        .slice(0, maxAlternatives)\n        .map(({ Confidence: confidence, Display: display, ITN: itn, Lexical: lexical, MaskedITN: maskedITN }) => ({\n          confidence,\n          transcript:\n            textNormalization === 'itn'\n              ? itn\n              : textNormalization === 'lexical'\n              ? lexical\n              : textNormalization === 'maskeditn'\n              ? maskedITN\n              : display\n        })),\n      { isFinal: true }\n    );\n\n    return resultList;\n  }\n\n  return [];\n}\n",null,"export default function(array, extras) {\n  const map = {\n    ...[].reduce.call(\n      array,\n      (map, value, index) => {\n        map[index] = value;\n\n        return map;\n      },\n      {}\n    ),\n    ...extras,\n    length: array.length,\n    [Symbol.iterator]: () => [].slice.call(map)[Symbol.iterator]()\n  };\n\n  return map;\n}\n",null,"// We are only importing what we need.\n\nimport {\n  AudioConfig,\n  OutputFormat,\n  ResultReason,\n  SpeechConfig,\n  SpeechRecognizer\n} from 'microsoft-cognitiveservices-speech-sdk/distrib/lib/microsoft.cognitiveservices.speech.sdk';\n\nexport default {\n  AudioConfig,\n  OutputFormat,\n  ResultReason,\n  SpeechConfig,\n  SpeechRecognizer\n};\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { ConsoleLoggingListener } from \"./src/common.browser/Exports\";\r\nimport { Events } from \"./src/common/Exports\";\r\n\r\n// Common.Storage.SetLocalStorage(new Common.Browser.LocalStorage());\r\n// Common.Storage.SetSessionStorage(new Common.Browser.SessionStorage());\r\nEvents.instance.attachConsoleListener(new ConsoleLoggingListener());\r\n\r\n// Speech SDK API\r\nexport * from \"./src/sdk/Exports\";\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport * from \"./ConsoleLoggingListener\";\r\nexport * from \"./IRecorder\";\r\nexport * from \"./MicAudioSource\";\r\nexport * from \"./FileAudioSource\";\r\nexport * from \"./PCMRecorder\";\r\nexport * from \"./WebsocketConnection\";\r\nexport * from \"./WebsocketMessageAdapter\";\r\nexport * from \"./ReplayableAudioNode\";\r\nexport * from \"./ProxyInfo\";\r\nexport * from \"./RestMessageAdapter\";\r\nexport * from \"./RestConfigBase\";\r\n",null,"/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { LogLevel } from \"../sdk/LogLevel\";\r\nimport { IEventListener, PlatformEvent } from \"../common/Exports\";\r\nimport { Contracts } from \"../sdk/Contracts\";\r\n\r\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\r\n    private privLogLevelFilter: LogLevel;\r\n    private privLogPath: fs.PathLike = undefined;\r\n    private privEnableConsoleOutput: boolean = true;\r\n\r\n    public constructor(logLevelFilter: LogLevel = LogLevel.None) { // Console output disabled by default\r\n        this.privLogLevelFilter = logLevelFilter;\r\n    }\r\n\r\n    public set logPath(path: fs.PathLike) {\r\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available\");\r\n        this.privLogPath = path;\r\n    }\r\n\r\n    public set enableConsoleOutput(enableOutput: boolean) {\r\n        this.privEnableConsoleOutput = enableOutput;\r\n    }\r\n\r\n    public onEvent(event: PlatformEvent): void {\r\n        if (event.eventType >= this.privLogLevelFilter) {\r\n            const log = this.toString(event);\r\n            if (!!this.privLogPath) {\r\n                fs.writeFileSync(this.privLogPath, log + \"\\n\", { flag: \"a+\" });\r\n            }\r\n\r\n            if (this.privEnableConsoleOutput) {\r\n                switch (event.eventType) {\r\n                    case LogLevel.Debug:\r\n                        // eslint-disable-next-line no-console\r\n                        console.debug(log);\r\n                        break;\r\n                    case LogLevel.Info:\r\n                        // eslint-disable-next-line no-console\r\n                        console.info(log);\r\n                        break;\r\n                    case LogLevel.Warning:\r\n                        // eslint-disable-next-line no-console\r\n                        console.warn(log);\r\n                        break;\r\n                    case LogLevel.Error:\r\n                        // eslint-disable-next-line no-console\r\n                        console.error(log);\r\n                        break;\r\n                    default:\r\n                        // eslint-disable-next-line no-console\r\n                        console.log(log);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private toString(event: PlatformEvent): string {\r\n        const logFragments = [\r\n            `${event.eventTime}`,\r\n            `${event.name}`,\r\n        ];\r\n\r\n        const e: any = event as any;\r\n        for (const prop in e) {\r\n            if (prop && event.hasOwnProperty(prop) &&\r\n                prop !== \"eventTime\" && prop !== \"eventType\" &&\r\n                prop !== \"eventId\" && prop !== \"name\" &&\r\n                prop !== \"constructor\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                const value = e[prop];\r\n                let valueToLog = \"<NULL>\";\r\n                if (value !== undefined && value !== null) {\r\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\r\n                        valueToLog = value.toString();\r\n                    } else {\r\n                        valueToLog = JSON.stringify(value);\r\n                    }\r\n                }\r\n\r\n                logFragments.push(`${prop}: ${valueToLog}`);\r\n            }\r\n\r\n        }\r\n\r\n        return logFragments.join(\" | \");\r\n    }\r\n}\r\n","\"use strict\";",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { EventType } from \"../common/Exports\";\r\n\r\n/**\r\n * Define event severity types for setting logging output.\r\n * @class LogLevel\r\n */\r\n\r\nexport { EventType as LogLevel };\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport * from \"./AudioSourceEvents\";\r\nexport * from \"./ConnectionEvents\";\r\nexport * from \"./ConnectionMessage\";\r\nexport * from \"./ConnectionOpenResponse\";\r\nexport * from \"./DeferralMap\";\r\nexport * from \"./DialogEvents\";\r\nexport * from \"./Error\";\r\nexport * from \"./Events\";\r\nexport * from \"./EventSource\";\r\nexport * from \"./Guid\";\r\nexport * from \"./IAudioSource\";\r\nexport * from \"./IConnection\";\r\nexport * from \"./IDetachable\";\r\nexport * from \"./IDictionary\";\r\nexport * from \"./IDisposable\";\r\nexport * from \"./IEventSource\";\r\nexport * from \"./IErrorMessages\";\r\nexport * from \"./ITimer\";\r\nexport * from \"./IWebsocketMessageFormatter\";\r\nexport * from \"./List\";\r\nexport * from \"./PlatformEvent\";\r\nexport * from \"./Promise\";\r\nexport * from \"./Queue\";\r\nexport * from \"./RawWebsocketMessage\";\r\nexport * from \"./RiffPcmEncoder\";\r\nexport * from \"./Stream\";\r\nexport { TranslationStatus } from \"../common.speech/TranslationStatus\";\r\nexport * from \"./ChunkedArrayBufferStream\";\r\nexport * from \"./IAudioDestination\";\r\nexport * from \"./Timeout\";\r\nexport * from \"./OCSPEvents\";\r\nexport * from \"./BackgroundError\";\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class AudioSourceEvent extends PlatformEvent {\r\n    private privAudioSourceId: string;\r\n\r\n    public constructor(eventName: string, audioSourceId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privAudioSourceId = audioSourceId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n}\r\n\r\nexport class AudioSourceInitializingEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceInitializingEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceReadyEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceReadyEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceOffEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceOffEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceErrorEvent extends AudioSourceEvent {\r\n    private privError: string;\r\n\r\n    public constructor(audioSourceId: string, error: string) {\r\n        super(\"AudioSourceErrorEvent\", audioSourceId, EventType.Error);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeEvent extends AudioSourceEvent {\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(eventName: string, audioSourceId: string, audioNodeId: string) {\r\n        super(eventName, audioSourceId);\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeAttachingEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachingEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeAttachedEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeDetachedEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeDetachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeErrorEvent extends AudioStreamNodeEvent {\r\n    private privError: string;\r\n\r\n    public constructor(audioSourceId: string, audioNodeId: string, error: string) {\r\n        super(\"AudioStreamNodeErrorEvent\", audioSourceId, audioNodeId);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\n\r\nexport enum EventType {\r\n    Debug,\r\n    Info,\r\n    Warning,\r\n    Error,\r\n    None,\r\n}\r\n\r\nexport class PlatformEvent {\r\n    private privName: string;\r\n    private privEventId: string;\r\n    private privEventTime: string;\r\n    private privEventType: EventType;\r\n    private privMetadata: IStringDictionary<string>;\r\n\r\n    public constructor(eventName: string, eventType: EventType) {\r\n        this.privName = eventName;\r\n        this.privEventId = createNoDashGuid();\r\n        this.privEventTime = new Date().toISOString();\r\n        this.privEventType = eventType;\r\n        this.privMetadata = { };\r\n    }\r\n\r\n    public get name(): string {\r\n        return this.privName;\r\n    }\r\n\r\n    public get eventId(): string {\r\n        return this.privEventId;\r\n    }\r\n\r\n    public get eventTime(): string {\r\n        return this.privEventTime;\r\n    }\r\n\r\n    public get eventType(): EventType {\r\n        return this.privEventType;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nconst createGuid: () => string = (): string => uuid();\r\n\r\nconst createNoDashGuid: () => string = (): string => createGuid().replace(new RegExp(\"-\", \"g\"), \"\").toUpperCase();\r\n\r\nexport { createGuid, createNoDashGuid };\r\n","export { default as v1 } from './v1.js';\nexport { default as v3 } from './v3.js';\nexport { default as v4 } from './v4.js';\nexport { default as v5 } from './v5.js';\nexport { default as NIL } from './nil.js';\nexport { default as version } from './version.js';\nexport { default as validate } from './validate.js';\nexport { default as stringify } from './stringify.js';\nexport { default as parse } from './parse.js';","import rng from './rng.js';\nimport { unsafeStringify } from './stringify.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || unsafeStringify(b);\n}\n\nexport default v1;","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import v35 from './v35.js';\nimport md5 from './md5.js';\nconst v3 = v35('v3', 0x30, md5);\nexport default v3;","import { unsafeStringify } from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function v35(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    var _namespace;\n\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return unsafeStringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","import validate from './validate.js';\n\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nexport default parse;","/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nexport default md5;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import v35 from './v35.js';\nimport sha1 from './sha1.js';\nconst v5 = v35('v5', 0x50, sha1);\nexport default v5;","// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nexport default sha1;","export default '00000000-0000-0000-0000-000000000000';","import validate from './validate.js';\n\nfunction version(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.slice(14, 15), 16);\n}\n\nexport default version;",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { ConnectionMessage } from \"./ConnectionMessage\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class ServiceEvent extends PlatformEvent {\r\n    private privJsonResult: string;\r\n\r\n    public constructor(eventName: string, jsonstring: string, eventType: EventType = EventType.Info) {\r\n      super(eventName, eventType);\r\n      this.privJsonResult = jsonstring;\r\n    }\r\n\r\n    public get jsonString(): string {\r\n        return this.privJsonResult;\r\n    }\r\n}\r\n\r\nexport class ConnectionEvent extends PlatformEvent {\r\n    private privConnectionId: string;\r\n\r\n    public constructor(eventName: string, connectionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privConnectionId = connectionId;\r\n    }\r\n\r\n    public get connectionId(): string {\r\n        return this.privConnectionId;\r\n    }\r\n}\r\n\r\nexport class ConnectionStartEvent extends ConnectionEvent {\r\n    private privUri: string;\r\n    private privHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(connectionId: string, uri: string, headers?: IStringDictionary<string>) {\r\n        super(\"ConnectionStartEvent\", connectionId);\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n    }\r\n\r\n    public get uri(): string {\r\n        return this.privUri;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n}\r\n\r\nexport class ConnectionEstablishedEvent extends ConnectionEvent {\r\n    public constructor(connectionId: string) {\r\n        super(\"ConnectionEstablishedEvent\", connectionId);\r\n    }\r\n}\r\n\r\nexport class ConnectionClosedEvent extends ConnectionEvent {\r\n    private privReason: string;\r\n    private privStatusCode: number;\r\n\r\n    public constructor(connectionId: string, statusCode: number, reason: string) {\r\n        super(\"ConnectionClosedEvent\", connectionId, EventType.Debug);\r\n        this.privReason = reason;\r\n        this.privStatusCode = statusCode;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\n\r\nexport class ConnectionErrorEvent extends ConnectionEvent {\r\n    private readonly privMessage: string;\r\n    private readonly privType: string;\r\n\r\n    public constructor(connectionId: string, message: string, type: string) {\r\n        super(\"ConnectionErrorEvent\", connectionId, EventType.Debug);\r\n        this.privMessage = message;\r\n        this.privType = type;\r\n    }\r\n\r\n    public get message(): string {\r\n        return this.privMessage;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privType;\r\n    }\r\n}\r\n\r\nexport class ConnectionEstablishErrorEvent extends ConnectionEvent {\r\n    private privStatusCode: number;\r\n    private privReason: string;\r\n\r\n    public constructor(connectionId: string, statuscode: number, reason: string) {\r\n        super(\"ConnectionEstablishErrorEvent\", connectionId, EventType.Error);\r\n        this.privStatusCode = statuscode;\r\n        this.privReason = reason;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\n\r\nexport class ConnectionMessageReceivedEvent extends ConnectionEvent {\r\n    private privNetworkReceivedTime: string;\r\n    private privMessage: ConnectionMessage;\r\n\r\n    public constructor(connectionId: string, networkReceivedTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageReceivedEvent\", connectionId);\r\n        this.privNetworkReceivedTime = networkReceivedTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n\r\n    public get networkReceivedTime(): string {\r\n        return this.privNetworkReceivedTime;\r\n    }\r\n\r\n    public get message(): ConnectionMessage {\r\n        return this.privMessage;\r\n    }\r\n}\r\n\r\nexport class ConnectionMessageSentEvent extends ConnectionEvent {\r\n    private privNetworkSentTime: string;\r\n    private privMessage: ConnectionMessage;\r\n\r\n    public constructor(connectionId: string, networkSentTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageSentEvent\", connectionId);\r\n        this.privNetworkSentTime = networkSentTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n\r\n    public get networkSentTime(): string {\r\n        return this.privNetworkSentTime;\r\n    }\r\n\r\n    public get message(): ConnectionMessage {\r\n        return this.privMessage;\r\n    }\r\n}\r\n",null,"/* eslint-disable @typescript-eslint/no-unsafe-return */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\n\r\nexport enum MessageType {\r\n    Text,\r\n    Binary,\r\n}\r\n\r\nexport class ConnectionMessage {\r\n\r\n    private privMessageType: MessageType;\r\n    private privHeaders: IStringDictionary<string>;\r\n    private privBody: any = null;\r\n    private privSize: number;\r\n\r\n    private privId: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        this.privBody = body;\r\n        this.privHeaders = headers ? headers : {};\r\n        this.privId = id ? id : createNoDashGuid();\r\n        switch (this.messageType) {\r\n            case MessageType.Binary:\r\n                this.privSize = this.binaryBody !== null ? this.binaryBody.byteLength : 0;\r\n                break;\r\n            case MessageType.Text:\r\n                this.privSize = this.textBody.length;\r\n        }\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n\r\n    public get body(): any {\r\n        return this.privBody;\r\n    }\r\n\r\n    public get textBody(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privBody as string;\r\n    }\r\n\r\n    public get binaryBody(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privBody;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\n/**\r\n * The error that is thrown when an argument passed in is null.\r\n *\r\n * @export\r\n * @class ArgumentNullError\r\n * @extends {Error}\r\n */\r\nexport class ArgumentNullError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ArgumentNullError.\r\n     *\r\n     * @param {string} argumentName - Name of the argument that is null\r\n     *\r\n     * @memberOf ArgumentNullError\r\n     */\r\n    public constructor(argumentName: string) {\r\n        super(argumentName);\r\n        this.name = \"ArgumentNull\";\r\n        this.message = argumentName;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an invalid operation is performed in the code.\r\n *\r\n * @export\r\n * @class InvalidOperationError\r\n * @extends {Error}\r\n */\r\nexport class InvalidOperationError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of InvalidOperationError.\r\n     *\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf InvalidOperationError\r\n     */\r\n    public constructor(error: string) {\r\n        super(error);\r\n        this.name = \"InvalidOperation\";\r\n        this.message = error;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an object is disposed.\r\n *\r\n * @export\r\n * @class ObjectDisposedError\r\n * @extends {Error}\r\n */\r\nexport class ObjectDisposedError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ObjectDisposedError.\r\n     *\r\n     * @param {string} objectName - The object that is disposed\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf ObjectDisposedError\r\n     */\r\n    public constructor(objectName: string, error?: string) {\r\n        super(error);\r\n        this.name = objectName + \"ObjectDisposed\";\r\n        this.message = error;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class ConnectionOpenResponse {\r\n    private privStatusCode: number;\r\n    private privReason: string;\r\n\r\n    public constructor(statusCode: number, reason: string) {\r\n        this.privStatusCode = statusCode;\r\n        this.privReason = reason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Deferred } from \"./Promise\";\r\n\r\n/**\r\n * The error that is thrown when an argument passed in is null.\r\n *\r\n * @export\r\n * @class DefferalMap\r\n */\r\n\r\nexport class DeferralMap {\r\n    private privMap: { [id: string]: Deferred<any> } = {};\r\n\r\n    public add<T>(id: string, deferral: Deferred<T>): void {\r\n        this.privMap[id] = deferral;\r\n    }\r\n\r\n    public getId(id: string): Deferred<any> {\r\n        return this.privMap[id];\r\n    }\r\n\r\n    public complete<T>(id: string, result: T): void {\r\n        try {\r\n            this.privMap[id].resolve(result);\r\n        } catch (error) {\r\n            this.privMap[id].reject(error as string);\r\n        } finally {\r\n            this.privMap[id] = undefined;\r\n         }\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { AgentConfig } from \"../common.speech/Exports\";\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class DialogEvent extends PlatformEvent {\r\n\r\n    public constructor(eventName: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n    }\r\n}\r\n\r\nexport class SendingAgentContextMessageEvent extends DialogEvent {\r\n    private privAgentConfig: AgentConfig;\r\n\r\n    public constructor(agentConfig: AgentConfig) {\r\n        super(\"SendingAgentContextMessageEvent\");\r\n        this.privAgentConfig = agentConfig;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError } from \"./Error\";\r\nimport { EventSource } from \"./EventSource\";\r\nimport { IEventSource } from \"./IEventSource\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class Events {\r\n    private static privInstance: IEventSource<PlatformEvent> = new EventSource<PlatformEvent>();\r\n\r\n    public static setEventSource(eventSource: IEventSource<PlatformEvent>): void {\r\n        if (!eventSource) {\r\n            throw new ArgumentNullError(\"eventSource\");\r\n        }\r\n\r\n        Events.privInstance = eventSource;\r\n    }\r\n\r\n    public static get instance(): IEventSource<PlatformEvent> {\r\n        return Events.privInstance;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IEventListener, IEventSource } from \"./IEventSource\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\r\n    private privEventListeners: IStringDictionary<(event: TEvent) => void> = {};\r\n    private privMetadata: IStringDictionary<string>;\r\n    private privIsDisposed: boolean = false;\r\n    private privConsoleListener: IDetachable = undefined;\r\n\r\n    public constructor(metadata?: IStringDictionary<string>) {\r\n        this.privMetadata = metadata;\r\n    }\r\n\r\n    public onEvent(event: TEvent): void {\r\n        if (this.isDisposed()) {\r\n            throw (new ObjectDisposedError(\"EventSource\"));\r\n        }\r\n\r\n        if (this.metadata) {\r\n            for (const paramName in this.metadata) {\r\n                if (paramName) {\r\n                    if (event.metadata) {\r\n                        if (!event.metadata[paramName]) {\r\n                            event.metadata[paramName] = this.metadata[paramName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const eventId in this.privEventListeners) {\r\n            if (eventId && this.privEventListeners[eventId]) {\r\n                this.privEventListeners[eventId](event);\r\n            }\r\n        }\r\n    }\r\n\r\n    public attach(onEventCallback: (event: TEvent) => void): IDetachable {\r\n        const id = createNoDashGuid();\r\n        this.privEventListeners[id] = onEventCallback;\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privEventListeners[id];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public attachListener(listener: IEventListener<TEvent>): IDetachable {\r\n        return this.attach((e: TEvent): void => listener.onEvent(e));\r\n    }\r\n\r\n    public attachConsoleListener(listener: IEventListener<TEvent>): IDetachable {\r\n        if (!!this.privConsoleListener) {\r\n            void this.privConsoleListener.detach(); // Detach implementation for eventListeners is synchronous\r\n        }\r\n        this.privConsoleListener = this.attach((e: TEvent): void => listener.onEvent(e));\r\n        return this.privConsoleListener;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.privEventListeners = null;\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ISpeechConfigAudioDevice } from \"../common.speech/Exports\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport { AudioSourceEvent } from \"./AudioSourceEvents\";\r\nimport { EventSource } from \"./EventSource\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStreamChunk } from \"./Stream\";\r\n\r\nexport interface IAudioSource {\r\n    id(): string;\r\n    turnOn(): Promise<void>;\r\n    attach(audioNodeId: string): Promise<IAudioStreamNode>;\r\n    detach(audioNodeId: string): void;\r\n    turnOff(): Promise<void>;\r\n    events: EventSource<AudioSourceEvent>;\r\n    format: Promise<AudioStreamFormatImpl>;\r\n    deviceInfo: Promise<ISpeechConfigAudioDevice>;\r\n    setProperty?(name: string, value: string): void;\r\n    getProperty?(name: string, def?: string): string;\r\n}\r\n\r\nexport interface IAudioStreamNode extends IDetachable {\r\n    id(): string;\r\n    read(): Promise<IStreamChunk<ArrayBuffer>>;\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ConnectionEvent } from \"./ConnectionEvents\";\r\nimport { ConnectionMessage } from \"./ConnectionMessage\";\r\nimport { ConnectionOpenResponse } from \"./ConnectionOpenResponse\";\r\nimport { EventSource } from \"./EventSource\";\r\n\r\nexport enum ConnectionState {\r\n    None,\r\n    Connected,\r\n    Connecting,\r\n    Disconnected,\r\n}\r\n\r\nexport interface IConnection {\r\n    id: string;\r\n    state(): ConnectionState;\r\n    open(): Promise<ConnectionOpenResponse>;\r\n    send(message: ConnectionMessage): Promise<void>;\r\n    read(): Promise<ConnectionMessage>;\r\n    events: EventSource<ConnectionEvent>;\r\n    dispose(disposing?: string): Promise<void>;\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport interface IDetachable {\r\n    detach(): Promise<void>;\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport interface IStringDictionary<TValue> {\r\n    [propName: string]: TValue;\r\n}\r\n\r\nexport interface INumberDictionary<TValue> extends Object {\r\n    [propName: number]: TValue;\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * @export\r\n * @interface IDisposable\r\n */\r\nexport interface IDisposable {\r\n\r\n    /**\r\n     * @returns {boolean}\r\n     *\r\n     * @memberOf IDisposable\r\n     */\r\n    isDisposed(): boolean;\r\n\r\n    /**\r\n     * Performs cleanup operations on this instance\r\n     *\r\n     * @param {string} [reason] - optional reason for disposing the instance.\r\n     * This will be used to throw errors when a operations are performed on the disposed object.\r\n     *\r\n     * @memberOf IDisposable\r\n     */\r\n    dispose(reason?: string): void;\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IDisposable } from \"./IDisposable\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport interface IEventListener<TEvent extends PlatformEvent> {\r\n    onEvent(e: TEvent): void;\r\n}\r\n\r\nexport interface IEventSource<TEvent extends PlatformEvent> extends IDisposable {\r\n    metadata: IStringDictionary<string>;\r\n\r\n    onEvent(e: TEvent): void;\r\n\r\n    attach(onEventCallback: (event: TEvent) => void): IDetachable;\r\n\r\n    attachListener(listener: IEventListener<TEvent>): IDetachable;\r\n\r\n    attachConsoleListener(listener: IEventListener<TEvent>): IDetachable;\r\n}\r\n",null,"export interface IErrorMessages {\r\n    authInvalidSubscriptionKey: string;\r\n    authInvalidSubscriptionRegion: string;\r\n    invalidArgs: string;\r\n    invalidCreateJoinConversationResponse: string;\r\n    invalidParticipantRequest: string;\r\n    permissionDeniedConnect: string;\r\n    permissionDeniedConversation: string;\r\n    permissionDeniedParticipant: string;\r\n    permissionDeniedSend: string;\r\n    permissionDeniedStart: string;\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport interface ITimer {\r\n    /**\r\n     * start timer\r\n     *\r\n     * @param {number} delay\r\n     * @param {(...args: any[]) => any} successCallback\r\n     * @returns {*}\r\n     *\r\n     * @memberOf ITimer\r\n     */\r\n    start(): void;\r\n\r\n    /**\r\n     * stops timer\r\n     *\r\n     * @param {*} timerId\r\n     *\r\n     * @memberOf ITimer\r\n     */\r\n    stop(): void;\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ConnectionMessage } from \"./ConnectionMessage\";\r\nimport { RawWebsocketMessage } from \"./RawWebsocketMessage\";\r\n\r\nexport interface IWebsocketMessageFormatter {\r\n    toConnectionMessage(message: RawWebsocketMessage): Promise<ConnectionMessage>;\r\n    fromConnectionMessage(message: ConnectionMessage): Promise<RawWebsocketMessage>;\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IDisposable } from \"./IDisposable\";\r\n\r\nexport interface IList<TItem> extends IDisposable {\r\n    get(itemIndex: number): TItem;\r\n    first(): TItem;\r\n    last(): TItem;\r\n\r\n    add(item: TItem): void;\r\n    insertAt(index: number, item: TItem): void;\r\n\r\n    removeFirst(): TItem;\r\n    removeLast(): TItem;\r\n    removeAt(index: number): TItem;\r\n    remove(index: number, count: number): TItem[];\r\n    clear(): void;\r\n\r\n    length(): number;\r\n\r\n    onAdded(addedCallback: () => void): IDetachable;\r\n    onRemoved(removedCallback: () => void): IDetachable;\r\n    onDisposed(disposedCallback: () => void): IDetachable;\r\n\r\n    join(seperator?: string): string;\r\n\r\n    toArray(): TItem[];\r\n\r\n    any(callback?: (item: TItem, index: number) => boolean): boolean;\r\n    all(callback: (item: TItem) => boolean): boolean;\r\n    forEach(callback: (item: TItem, index: number) => void): void;\r\n    select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\r\n    where(callback: (item: TItem, index: number) => boolean): List<TItem>;\r\n    orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    clone(): List<TItem>;\r\n    concat(list: List<TItem>): List<TItem>;\r\n    concatArray(array: TItem[]): List<TItem>;\r\n}\r\n\r\nexport class List<TItem> implements IList<TItem>  {\r\n    private privList: TItem[];\r\n    private privSubscriptionIdCounter: number = 0;\r\n    private privAddSubscriptions: IStringDictionary<() => void> = {};\r\n    private privRemoveSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposedSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: TItem[]) {\r\n        this.privList = [];\r\n        // copy the list rather than taking as is.\r\n        if (list) {\r\n            for (const item of list) {\r\n                this.privList.push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get(itemIndex: number): TItem {\r\n        this.throwIfDisposed();\r\n        return this.privList[itemIndex];\r\n    }\r\n\r\n    public first(): TItem {\r\n        return this.get(0);\r\n    }\r\n\r\n    public last(): TItem {\r\n        return this.get(this.length() - 1);\r\n    }\r\n\r\n    public add(item: TItem): void {\r\n        this.throwIfDisposed();\r\n        this.insertAt(this.privList.length, item);\r\n    }\r\n\r\n    public insertAt(index: number, item: TItem): void {\r\n        this.throwIfDisposed();\r\n        if (index === 0) {\r\n            this.privList.unshift(item);\r\n        } else if (index === this.privList.length) {\r\n            this.privList.push(item);\r\n        } else {\r\n            this.privList.splice(index, 0, item);\r\n        }\r\n        this.triggerSubscriptions(this.privAddSubscriptions);\r\n    }\r\n\r\n    public removeFirst(): TItem {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(0);\r\n    }\r\n\r\n    public removeLast(): TItem {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(this.length() - 1);\r\n    }\r\n\r\n    public removeAt(index: number): TItem {\r\n        this.throwIfDisposed();\r\n        return this.remove(index, 1)[0];\r\n    }\r\n\r\n    public remove(index: number, count: number): TItem[] {\r\n        this.throwIfDisposed();\r\n        const removedElements = this.privList.splice(index, count);\r\n        this.triggerSubscriptions(this.privRemoveSubscriptions);\r\n        return removedElements;\r\n    }\r\n\r\n    public clear(): void {\r\n        this.throwIfDisposed();\r\n        this.remove(0, this.length());\r\n    }\r\n\r\n    public length(): number {\r\n        this.throwIfDisposed();\r\n        return this.privList.length;\r\n    }\r\n\r\n    public onAdded(addedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privAddSubscriptions[subscriptionId] = addedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privAddSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onRemoved(removedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privRemoveSubscriptions[subscriptionId] = removedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privRemoveSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onDisposed(disposedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privDisposedSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public join(seperator?: string): string {\r\n        this.throwIfDisposed();\r\n        return this.privList.join(seperator);\r\n    }\r\n\r\n    public toArray(): TItem[] {\r\n        const cloneCopy = Array<TItem>();\r\n        this.privList.forEach((val: TItem): void => {\r\n            cloneCopy.push(val);\r\n        });\r\n        return cloneCopy;\r\n    }\r\n\r\n    public any(callback?: (item: TItem, index: number) => boolean): boolean {\r\n        this.throwIfDisposed();\r\n        if (callback) {\r\n            return this.where(callback).length() > 0;\r\n        } else {\r\n            return this.length() > 0;\r\n        }\r\n    }\r\n\r\n    public all(callback: (item: TItem) => boolean): boolean {\r\n        this.throwIfDisposed();\r\n        return this.where(callback).length() === this.length();\r\n    }\r\n\r\n    public forEach(callback: (item: TItem, index: number) => void): void {\r\n        this.throwIfDisposed();\r\n        for (let i = 0; i < this.length(); i++) {\r\n            callback(this.privList[i], i);\r\n        }\r\n    }\r\n\r\n    public select<T2>(callback: (item: TItem, index: number) => T2): List<T2> {\r\n        this.throwIfDisposed();\r\n        const selectList: T2[] = [];\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            selectList.push(callback(this.privList[i], i));\r\n        }\r\n\r\n        return new List<T2>(selectList);\r\n    }\r\n\r\n    public where(callback: (item: TItem, index: number) => boolean): List<TItem> {\r\n        this.throwIfDisposed();\r\n        const filteredList = new List<TItem>();\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            if (callback(this.privList[i], i)) {\r\n                filteredList.add(this.privList[i]);\r\n            }\r\n        }\r\n        return filteredList;\r\n    }\r\n\r\n    public orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem> {\r\n        this.throwIfDisposed();\r\n        const clonedArray = this.toArray();\r\n        const orderedArray = clonedArray.sort(compareFn);\r\n        return new List(orderedArray);\r\n    }\r\n\r\n    public orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return this.orderBy((a: TItem, b: TItem): number => compareFn(b, a));\r\n    }\r\n\r\n    public clone(): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.toArray());\r\n    }\r\n\r\n    public concat(list: List<TItem>): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(list.toArray()));\r\n    }\r\n\r\n    public concatArray(array: TItem[]): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(array));\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privList == null;\r\n    }\r\n\r\n    public dispose(reason?: string): void {\r\n        if (!this.isDisposed()) {\r\n            this.privDisposeReason = reason;\r\n            this.privList = null;\r\n            this.privAddSubscriptions = null;\r\n            this.privRemoveSubscriptions = null;\r\n            this.triggerSubscriptions(this.privDisposedSubscriptions);\r\n        }\r\n    }\r\n\r\n    private throwIfDisposed(): void {\r\n        if (this.isDisposed()) {\r\n            throw new ObjectDisposedError(\"List\", this.privDisposeReason);\r\n        }\r\n    }\r\n\r\n    private triggerSubscriptions(subscriptions: IStringDictionary<() => void>): void {\r\n        if (subscriptions) {\r\n            for (const subscriptionId in subscriptions) {\r\n                if (subscriptionId) {\r\n                    subscriptions[subscriptionId]();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file, @typescript-eslint/typedef */\r\n\r\nexport enum PromiseState {\r\n    None,\r\n    Resolved,\r\n    Rejected,\r\n}\r\n\r\nexport interface IDeferred<T> {\r\n    readonly promise: Promise<T>;\r\n\r\n    resolve(result: T): IDeferred<T>;\r\n\r\n    reject(error: string): IDeferred<T>;\r\n}\r\n\r\nexport class PromiseResult<T> {\r\n    protected privIsCompleted: boolean;\r\n    protected privIsError: boolean;\r\n    protected privError: string;\r\n    protected privResult: T;\r\n\r\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\r\n        promiseResultEventSource.on((result: T): void => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = false;\r\n                this.privResult = result;\r\n            }\r\n        }, (error: string): void => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = true;\r\n                this.privError = error;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get isCompleted(): boolean {\r\n        return this.privIsCompleted;\r\n    }\r\n\r\n    public get isError(): boolean {\r\n        return this.privIsError;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n\r\n    public get result(): T {\r\n        return this.privResult;\r\n    }\r\n\r\n    public throwIfError = (): void => {\r\n        if (this.isError) {\r\n            throw this.error;\r\n        }\r\n    };\r\n}\r\n\r\nexport class PromiseResultEventSource<T>  {\r\n\r\n    private privOnSetResult: (result: T) => void;\r\n    private privOnSetError: (error: string) => void;\r\n\r\n    public setResult = (result: T): void => {\r\n        this.privOnSetResult(result);\r\n    };\r\n\r\n    public setError = (error: string): void => {\r\n        this.privOnSetError(error);\r\n    };\r\n\r\n    public on = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\r\n        this.privOnSetResult = onSetResult;\r\n        this.privOnSetError = onSetError;\r\n    };\r\n}\r\n\r\nexport class Deferred<T> implements IDeferred<T> {\r\n    private privPromise: Promise<T>;\r\n    private privResolve: (value?: T | PromiseLike<T>) => void;\r\n    private privReject: (reason?: any) => void;\r\n\r\n    public constructor() {\r\n        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n        this.privPromise = new Promise<T>((resolve: (value: T) => void, reject: (reason: any) => void) => {\r\n            this.privResolve = resolve;\r\n            this.privReject = reject;\r\n        });\r\n    }\r\n\r\n    public get promise(): Promise<T> {\r\n        return this.privPromise;\r\n    }\r\n\r\n    public resolve = (result: T | Promise<T>): Deferred<T> => {\r\n        this.privResolve(result);\r\n        return this;\r\n    };\r\n\r\n    public reject = (error: string): Deferred<T> => {\r\n        this.privReject(error);\r\n        return this;\r\n    };\r\n}\r\n\r\nexport class Sink<T> {\r\n    private privState: PromiseState = PromiseState.None;\r\n    private privPromiseResult: PromiseResult<T> = null;\r\n    private privPromiseResultEvents: PromiseResultEventSource<T> = null;\r\n\r\n    private privSuccessHandlers: ((result: T) => void)[] = [];\r\n    private privErrorHandlers: ((e: string) => void)[] = [];\r\n\r\n    public constructor() {\r\n        this.privPromiseResultEvents = new PromiseResultEventSource();\r\n        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\r\n    }\r\n\r\n    public get state(): PromiseState {\r\n        return this.privState;\r\n    }\r\n\r\n    public get result(): PromiseResult<T> {\r\n        return this.privPromiseResult;\r\n    }\r\n\r\n    public resolve(result: T): void {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot resolve a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Resolved;\r\n        this.privPromiseResultEvents.setResult(result);\r\n\r\n        for (let i = 0; i < this.privSuccessHandlers.length; i++) {\r\n            this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public reject(error: string): void {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot reject a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Rejected;\r\n        this.privPromiseResultEvents.setError(error);\r\n\r\n        for (const errorHandler of this.privErrorHandlers) {\r\n            this.executeErrorCallback(error, errorHandler);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public on(\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): void {\r\n\r\n        if (successCallback == null) {\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            successCallback = (): void => { };\r\n        }\r\n\r\n        if (this.privState === PromiseState.None) {\r\n            this.privSuccessHandlers.push(successCallback);\r\n            this.privErrorHandlers.push(errorCallback);\r\n        } else {\r\n            if (this.privState === PromiseState.Resolved) {\r\n                this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\r\n            } else if (this.privState === PromiseState.Rejected) {\r\n                this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\r\n            }\r\n\r\n            this.detachHandlers();\r\n        }\r\n    }\r\n\r\n    private executeSuccessCallback(result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void {\r\n        try {\r\n            successCallback(result);\r\n        } catch (e) {\r\n            this.executeErrorCallback(`'Unhandled callback error: ${e as string}'`, errorCallback);\r\n        }\r\n    }\r\n\r\n    private executeErrorCallback(error: string, errorCallback: (error: string) => void): void {\r\n        if (errorCallback) {\r\n            try {\r\n                errorCallback(error);\r\n            } catch (e) {\r\n                throw new Error(`'Unhandled callback error: ${e as string}. InnerError: ${error}'`);\r\n            }\r\n        } else {\r\n            throw new Error(`'Unhandled error: ${error}'`);\r\n        }\r\n    }\r\n\r\n    private detachHandlers(): void {\r\n        this.privErrorHandlers = [];\r\n        this.privSuccessHandlers = [];\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line prefer-arrow/prefer-arrow-functions\r\nexport function marshalPromiseToCallbacks<T>(\r\n    promise: Promise<T>,\r\n    cb?: (value: T) => void,\r\n    err?: (error: string) => void): void {\r\n    promise.then((val: T): void => {\r\n        try {\r\n            if (!!cb) {\r\n                cb(val);\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                try {\r\n                    if (error instanceof Error) {\r\n                        const typedError: Error = error ;\r\n                        err(typedError.name + \": \" + typedError.message);\r\n                    } else {\r\n                        err(error as string);\r\n                    }\r\n                // eslint-disable-next-line no-empty\r\n                } catch (error) { }\r\n            }\r\n        }\r\n    }, (error: any): void => {\r\n        if (!!err) {\r\n            try {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            // eslint-disable-next-line no-empty\r\n            } catch (error) { }\r\n        }\r\n    });\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError, ObjectDisposedError } from \"./Error\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IDisposable } from \"./IDisposable\";\r\nimport { List } from \"./List\";\r\nimport {\r\n    Deferred,\r\n} from \"./Promise\";\r\nexport interface IQueue<TItem> extends IDisposable {\r\n    enqueue(item: TItem): void;\r\n    enqueueFromPromise(promise: Promise<TItem>): void;\r\n    dequeue(): Promise<TItem>;\r\n    peek(): Promise<TItem>;\r\n    length(): number;\r\n}\r\n\r\nenum SubscriberType {\r\n    Dequeue,\r\n    Peek,\r\n}\r\n\r\nexport class Queue<TItem> implements IQueue<TItem> {\r\n    private privPromiseStore: List<Promise<TItem>> = new List<Promise<TItem>>();\r\n    private privList: List<TItem>;\r\n    private privDetachables: IDetachable[];\r\n    private privSubscribers: List<{ type: SubscriberType; deferral: Deferred<TItem> }>;\r\n    private privIsDrainInProgress: boolean = false;\r\n    private privIsDisposing: boolean = false;\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: List<TItem>) {\r\n        this.privList = list ? list : new List<TItem>();\r\n        this.privDetachables = [];\r\n        this.privSubscribers = new List<{ type: SubscriberType; deferral: Deferred<TItem> }>();\r\n        this.privDetachables.push(this.privList.onAdded((): void => this.drain()));\r\n    }\r\n\r\n    public enqueue(item: TItem): void {\r\n        this.throwIfDispose();\r\n        this.enqueueFromPromise(new Promise<TItem>((resolve: (value: TItem) => void): void => resolve(item)));\r\n    }\r\n\r\n    public enqueueFromPromise(promise: Promise<TItem>): void {\r\n        this.throwIfDispose();\r\n        promise.then((val: TItem): void => {\r\n            this.privList.add(val);\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        }, (): void => { });\r\n    }\r\n\r\n    public dequeue(): Promise<TItem> {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        if (this.privSubscribers) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise;\r\n    }\r\n\r\n    public peek(): Promise<TItem> {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        const subs = this.privSubscribers;\r\n        if (subs) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Peek });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise;\r\n    }\r\n\r\n    public length(): number {\r\n        this.throwIfDispose();\r\n        return this.privList.length();\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privSubscribers == null;\r\n    }\r\n\r\n    public async drainAndDispose(pendingItemProcessor: (pendingItemInQueue: TItem) => void, reason?: string): Promise<void> {\r\n        if (!this.isDisposed() && !this.privIsDisposing) {\r\n            this.privDisposeReason = reason;\r\n            this.privIsDisposing = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            if (subs) {\r\n                while (subs.length() > 0) {\r\n                    const subscriber = subs.removeFirst();\r\n                    // TODO: this needs work (Resolve(null) instead?).\r\n                    subscriber.deferral.resolve(undefined);\r\n                    // subscriber.deferral.reject(\"Disposed\");\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n            }\r\n\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n\r\n            if (this.privPromiseStore.length() > 0 && pendingItemProcessor) {\r\n                const promiseArray: Promise<TItem>[] = [];\r\n\r\n                this.privPromiseStore.toArray().forEach((wrapper: Promise<TItem>): void => {\r\n                    promiseArray.push(wrapper);\r\n                });\r\n                return Promise.all(promiseArray).finally((): void => {\r\n                    this.privSubscribers = null;\r\n                    this.privList.forEach((item: TItem): void => {\r\n                        pendingItemProcessor(item);\r\n                    });\r\n                    this.privList = null;\r\n                    return;\r\n                }).then<void>();\r\n            } else {\r\n                this.privSubscribers = null;\r\n                this.privList = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        await this.drainAndDispose(null, reason);\r\n    }\r\n\r\n    private drain(): void {\r\n        if (!this.privIsDrainInProgress && !this.privIsDisposing) {\r\n            this.privIsDrainInProgress = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            const lists = this.privList;\r\n            if (subs && lists) {\r\n                while (lists.length() > 0 && subs.length() > 0 && !this.privIsDisposing) {\r\n                    const subscriber = subs.removeFirst();\r\n                    if (subscriber.type === SubscriberType.Peek) {\r\n                        subscriber.deferral.resolve(lists.first());\r\n                    } else {\r\n                        const dequeuedItem = lists.removeFirst();\r\n                        subscriber.deferral.resolve(dequeuedItem);\r\n                    }\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privList === lists) {\r\n                    this.privList = lists;\r\n                }\r\n            }\r\n\r\n            this.privIsDrainInProgress = false;\r\n        }\r\n    }\r\n\r\n    private throwIfDispose(): void {\r\n        if (this.isDisposed()) {\r\n            if (this.privDisposeReason) {\r\n                throw new InvalidOperationError(this.privDisposeReason);\r\n            }\r\n\r\n            throw new ObjectDisposedError(\"Queue\");\r\n        } else if (this.privIsDisposing) {\r\n            throw new InvalidOperationError(\"Queue disposing\");\r\n        }\r\n    }\r\n}\r\n",null,"/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { MessageType } from \"./ConnectionMessage\";\r\nimport { ArgumentNullError, InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\n\r\nexport class RawWebsocketMessage {\r\n    private privMessageType: MessageType;\r\n    private privPayload: any = null;\r\n    private privId: string;\r\n\r\n    public constructor(messageType: MessageType, payload: any, id?: string) {\r\n        if (!payload) {\r\n            throw new ArgumentNullError(\"payload\");\r\n        }\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n        if (messageType === MessageType.Binary && payload.__proto__.constructor.name !== \"ArrayBuffer\") {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        if (messageType === MessageType.Text && !(typeof (payload) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        this.privPayload = payload;\r\n        this.privId = id ? id : createNoDashGuid();\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get payload(): any {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get textContent(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privPayload as string;\r\n    }\r\n\r\n    public get binaryContent(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privPayload as ArrayBuffer;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class RiffPcmEncoder {\r\n\r\n    private privActualSampleRate: number;\r\n    private privDesiredSampleRate: number;\r\n\r\n    public constructor(actualSampleRate: number, desiredSampleRate: number) {\r\n        this.privActualSampleRate = actualSampleRate;\r\n        this.privDesiredSampleRate = desiredSampleRate;\r\n    }\r\n\r\n    public encode(actualAudioFrame: Float32Array): ArrayBuffer {\r\n\r\n        const audioFrame = this.downSampleAudioFrame(actualAudioFrame, this.privActualSampleRate, this.privDesiredSampleRate);\r\n\r\n        if (!audioFrame) {\r\n            return null;\r\n        }\r\n\r\n        const audioLength = audioFrame.length * 2;\r\n\r\n        const buffer = new ArrayBuffer(audioLength);\r\n        const view = new DataView(buffer);\r\n        this.floatTo16BitPCM(view, 0, audioFrame);\r\n\r\n        return buffer;\r\n    }\r\n\r\n    private setString(view: DataView, offset: number, str: string): void {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n\r\n    private floatTo16BitPCM(view: DataView, offset: number, input: Float32Array): void {\r\n        for (let i = 0; i < input.length; i++ , offset += 2) {\r\n            const s = Math.max(-1, Math.min(1, input[i]));\r\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\r\n        }\r\n    }\r\n\r\n    private downSampleAudioFrame(\r\n        srcFrame: Float32Array,\r\n        srcRate: number,\r\n        dstRate: number): Float32Array {\r\n\r\n        if (!srcFrame) {\r\n            return null;\r\n        }\r\n\r\n        if (dstRate === srcRate || dstRate > srcRate) {\r\n            return srcFrame;\r\n        }\r\n\r\n        const ratio = srcRate / dstRate;\r\n        const dstLength = Math.round(srcFrame.length / ratio);\r\n        const dstFrame = new Float32Array(dstLength);\r\n        let srcOffset = 0;\r\n        let dstOffset = 0;\r\n        while (dstOffset < dstLength) {\r\n            const nextSrcOffset = Math.round((dstOffset + 1) * ratio);\r\n            let accum = 0;\r\n            let count = 0;\r\n            while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {\r\n                accum += srcFrame[srcOffset++];\r\n                count++;\r\n            }\r\n            dstFrame[dstOffset++] = accum / count;\r\n        }\r\n\r\n        return dstFrame;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { Queue } from \"./Queue\";\r\n\r\nexport interface IStreamChunk<TBuffer> {\r\n    isEnd: boolean;\r\n    buffer: TBuffer;\r\n    timeReceived: number;\r\n}\r\n\r\nexport class Stream<TBuffer> {\r\n    private privId: string;\r\n    private privIsWriteEnded: boolean = false;\r\n    private privIsReadEnded: boolean = false;\r\n    private privReaderQueue: Queue<IStreamChunk<TBuffer>>;\r\n\r\n    public constructor(streamId?: string) {\r\n        this.privId = streamId ? streamId : createNoDashGuid();\r\n        this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsWriteEnded;\r\n    }\r\n\r\n    public get isReadEnded(): boolean {\r\n        return this.privIsReadEnded;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public close(): void {\r\n        if (!this.privIsWriteEnded) {\r\n            this.writeStreamChunk({\r\n                buffer: null,\r\n                isEnd: true,\r\n                timeReceived: Date.now(),\r\n            });\r\n            this.privIsWriteEnded = true;\r\n        }\r\n    }\r\n\r\n    public writeStreamChunk(streamChunk: IStreamChunk<TBuffer>): void {\r\n        this.throwIfClosed();\r\n        if (!this.privReaderQueue.isDisposed()) {\r\n            try {\r\n                this.privReaderQueue.enqueue(streamChunk);\r\n            } catch (e) {\r\n                // Do nothing\r\n            }\r\n        }\r\n    }\r\n\r\n    public read(): Promise<IStreamChunk<TBuffer>> {\r\n        if (this.privIsReadEnded) {\r\n            throw new InvalidOperationError(\"Stream read has already finished\");\r\n        }\r\n\r\n        return this.privReaderQueue\r\n            .dequeue()\r\n            .then(async (streamChunk: IStreamChunk<TBuffer>): Promise<IStreamChunk<TBuffer>> => {\r\n                if (streamChunk === undefined || streamChunk.isEnd) {\r\n                    await this.privReaderQueue.dispose(\"End of stream reached\");\r\n                }\r\n\r\n                return streamChunk;\r\n            });\r\n    }\r\n    public readEnded(): void {\r\n        if (!this.privIsReadEnded) {\r\n            this.privIsReadEnded = true;\r\n            this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n        }\r\n    }\r\n\r\n    private throwIfClosed(): void {\r\n        if (this.privIsWriteEnded) {\r\n            throw new InvalidOperationError(\"Stream closed\");\r\n        }\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines translation status.\r\n * @class TranslationStatus\r\n */\r\nexport enum TranslationStatus {\r\n    /**\r\n     * @member TranslationStatus.Success\r\n     */\r\n    Success = 0,\r\n\r\n    /**\r\n     * @member TranslationStatus.Error\r\n     */\r\n    Error,\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IStreamChunk, Stream } from \"./Exports\";\r\n\r\nexport class ChunkedArrayBufferStream extends Stream<ArrayBuffer> {\r\n    private privTargetChunkSize: number;\r\n    private privNextBufferToWrite: ArrayBuffer;\r\n    private privNextBufferStartTime: number;\r\n    private privNextBufferReadyBytes: number;\r\n\r\n    public constructor(targetChunkSize: number, streamId?: string) {\r\n        super(streamId);\r\n        this.privTargetChunkSize = targetChunkSize;\r\n        this.privNextBufferReadyBytes = 0;\r\n    }\r\n\r\n    public writeStreamChunk(chunk: IStreamChunk<ArrayBuffer>): void {\r\n        // No pending write, and the buffer is the right size so write it.\r\n        if (chunk.isEnd ||\r\n            (0 === this.privNextBufferReadyBytes && chunk.buffer.byteLength === this.privTargetChunkSize)) {\r\n            super.writeStreamChunk(chunk);\r\n            return;\r\n        }\r\n\r\n        let bytesCopiedFromBuffer: number = 0;\r\n\r\n        while (bytesCopiedFromBuffer < chunk.buffer.byteLength) {\r\n            // Fill the next buffer.\r\n            if (undefined === this.privNextBufferToWrite) {\r\n                this.privNextBufferToWrite = new ArrayBuffer(this.privTargetChunkSize);\r\n                this.privNextBufferStartTime = chunk.timeReceived;\r\n            }\r\n\r\n            // Find out how many bytes we can copy into the read buffer.\r\n            const bytesToCopy: number = Math.min(chunk.buffer.byteLength - bytesCopiedFromBuffer, this.privTargetChunkSize - this.privNextBufferReadyBytes);\r\n            const targetView: Uint8Array = new Uint8Array(this.privNextBufferToWrite);\r\n            const sourceView: Uint8Array = new Uint8Array(chunk.buffer.slice(bytesCopiedFromBuffer, bytesToCopy + bytesCopiedFromBuffer));\r\n\r\n            targetView.set(sourceView, this.privNextBufferReadyBytes);\r\n            this.privNextBufferReadyBytes += bytesToCopy;\r\n            bytesCopiedFromBuffer += bytesToCopy;\r\n\r\n            // Are we ready to write?\r\n            if (this.privNextBufferReadyBytes === this.privTargetChunkSize) {\r\n                super.writeStreamChunk({\r\n                    buffer: this.privNextBufferToWrite,\r\n                    isEnd: false,\r\n                    timeReceived: this.privNextBufferStartTime,\r\n                });\r\n                this.privNextBufferReadyBytes = 0;\r\n                this.privNextBufferToWrite = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        // Send whatever is pending, then close the base class.\r\n        if (0 !== this.privNextBufferReadyBytes && !this.isClosed) {\r\n            super.writeStreamChunk({\r\n                buffer: this.privNextBufferToWrite.slice(0, this.privNextBufferReadyBytes),\r\n                isEnd: false,\r\n                timeReceived: this.privNextBufferStartTime,\r\n            });\r\n        }\r\n\r\n        super.close();\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioStreamFormat } from \"../sdk/Exports\";\r\n\r\nexport interface IAudioDestination {\r\n    id(): string;\r\n    write(buffer: ArrayBuffer): void;\r\n    format: AudioStreamFormat;\r\n    close(cb?: () => void, err?: (error: string) => void): void;\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\ntype TWorkerMessage = ICallNotification | IClearResponse | IErrorNotification | IErrorResponse;\r\n\r\ninterface IClearResponse {\r\n    error: null;\r\n    id: number;\r\n}\r\n\r\ninterface IErrorNotification {\r\n    error: {\r\n        message: string;\r\n    };\r\n    id: null;\r\n    result: null;\r\n}\r\n\r\ninterface IErrorResponse {\r\n    error: {\r\n        message: string;\r\n    };\r\n    id: number;\r\n    result: null;\r\n}\r\n\r\ninterface ICallNotification {\r\n    id: null;\r\n    method: \"call\";\r\n    params: {\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface ISetNotification {\r\n    id: null;\r\n    method: \"set\";\r\n    params: {\r\n        delay: number;\r\n        now: number;\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface IClearRequest {\r\n    id: number;\r\n    method: \"clear\";\r\n    params: {\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface IWorkerEvent extends Event {\r\n    data: TWorkerMessage;\r\n}\r\n\r\ninterface IWorkerTimers {\r\n    clearTimeout: (timerId: number) => void;\r\n    setTimeout: (func: () => any, delay: number) => number;\r\n}\r\n\r\ndeclare type Func = () => any;\r\n\r\nexport class Timeout {\r\n\r\n    private static workerTimers: null | IWorkerTimers = null;\r\n\r\n    public static clearTimeout: IWorkerTimers[\"clearTimeout\"] = (timerId: number): void => Timeout.timers().clearTimeout(timerId);\r\n\r\n    public static setTimeout: IWorkerTimers[\"setTimeout\"] = (func: () => any, delay: number): number => Timeout.timers().setTimeout(func, delay);\r\n\r\n    public static load(): any {\r\n        // Prefilling the Maps with a function indexed by zero is necessary to be compliant with the specification.\r\n        const scheduledTimeoutFunctions: Map<number, number | Func> = new Map([[0, (): void => { }]]); // eslint-disable-line @typescript-eslint/no-empty-function\r\n        const unhandledRequests: Map<number, number> = new Map();\r\n\r\n        // eslint-disable-next-line\r\n        const workerScript = `!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=14)}([function(e,t,n){\"use strict\";n.d(t,\"a\",(function(){return i})),n.d(t,\"b\",(function(){return u})),n.d(t,\"c\",(function(){return a})),n.d(t,\"d\",(function(){return d}));const r=new Map,o=new Map,i=e=>{const t=r.get(e);if(void 0===t)throw new Error('There is no interval scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),r.delete(e)},u=e=>{const t=o.get(e);if(void 0===t)throw new Error('There is no timeout scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),o.delete(e)},f=(e,t)=>{let n,r;if(\"performance\"in self){const o=performance.now();n=o,r=e-Math.max(0,o-t)}else n=Date.now(),r=e;return{expected:n+r,remainingDelay:r}},c=(e,t,n,r)=>{const o=\"performance\"in self?performance.now():Date.now();o>n?postMessage({id:null,method:\"call\",params:{timerId:t}}):e.set(t,setTimeout(c,n-o,e,t,n))},a=(e,t,n)=>{const{expected:o,remainingDelay:i}=f(e,n);r.set(t,setTimeout(c,i,r,t,o))},d=(e,t,n)=>{const{expected:r,remainingDelay:i}=f(e,n);o.set(t,setTimeout(c,i,o,t,r))}},function(e,t,n){\"use strict\";n.r(t);var r=n(2);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(3);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(4);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o);var f=n(5);for(var o in f)\"default\"!==o&&function(e){n.d(t,e,(function(){return f[e]}))}(o);var c=n(6);for(var o in c)\"default\"!==o&&function(e){n.d(t,e,(function(){return c[e]}))}(o);var a=n(7);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,(function(){return a[e]}))}(o);var d=n(8);for(var o in d)\"default\"!==o&&function(e){n.d(t,e,(function(){return d[e]}))}(o);var s=n(9);for(var o in s)\"default\"!==o&&function(e){n.d(t,e,(function(){return s[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(11);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(12);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(13);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(0),o=n(1);for(var i in o)\"default\"!==i&&function(e){n.d(t,e,(function(){return o[e]}))}(i);var u=n(10);for(var i in u)\"default\"!==i&&function(e){n.d(t,e,(function(){return u[e]}))}(i);addEventListener(\"message\",({data:e})=>{try{if(\"clear\"===e.method){const{id:t,params:{timerId:n}}=e;Object(r.b)(n),postMessage({error:null,id:t})}else{if(\"set\"!==e.method)throw new Error('The given method \"'.concat(e.method,'\" is not supported'));{const{params:{delay:t,now:n,timerId:o}}=e;Object(r.d)(t,o,n)}}}catch(t){postMessage({error:{message:t.message},id:e.id,result:null})}})}]);`;\r\n        const workerUrl = \"data:text/javascript;base64,\" + btoa(workerScript);\r\n        const worker = new Worker(workerUrl);\r\n\r\n        worker.addEventListener(\"message\", ({ data }: IWorkerEvent): void => {\r\n            if (Timeout.isCallNotification(data)) {\r\n                const {\r\n                    params: { timerId }\r\n                } = data;\r\n\r\n                const idOrFunc = scheduledTimeoutFunctions.get(timerId);\r\n\r\n                if (typeof idOrFunc === \"number\") {\r\n                    const unhandledTimerId = unhandledRequests.get(idOrFunc);\r\n\r\n                    if (\r\n                        unhandledTimerId === undefined ||\r\n                        unhandledTimerId !== timerId\r\n                    ) {\r\n                        throw new Error(\"The timer is in an undefined state.\");\r\n                    }\r\n                } else if (typeof idOrFunc !== \"undefined\") {\r\n                    idOrFunc();\r\n\r\n                    // A timeout can be safely deleted because it is only called once.\r\n                    scheduledTimeoutFunctions.delete(timerId);\r\n                } else {\r\n                    throw new Error(\"The timer is in an undefined state.\");\r\n                }\r\n            } else if (Timeout.isClearResponse(data)) {\r\n                const { id } = data;\r\n\r\n                const unhandledTimerId = unhandledRequests.get(id);\r\n\r\n                if (unhandledTimerId === undefined) {\r\n                    throw new Error(\"The timer is in an undefined state.\");\r\n                }\r\n\r\n                unhandledRequests.delete(id);\r\n\r\n                scheduledTimeoutFunctions.delete(unhandledTimerId);\r\n            } else {\r\n                const {\r\n                    error: { message }\r\n                } = data;\r\n\r\n                throw new Error(message);\r\n            }\r\n        });\r\n\r\n        const clearTimeout = (timerId: number): void => {\r\n            const id = Math.random();\r\n\r\n            unhandledRequests.set(id, timerId);\r\n            scheduledTimeoutFunctions.set(timerId, id);\r\n\r\n            worker.postMessage({\r\n                id,\r\n                method: \"clear\",\r\n                params: { timerId }\r\n            } as IClearRequest);\r\n        };\r\n\r\n        const setTimeout = (func: () => void, delay: number): number => {\r\n            const timerId = Math.random();\r\n\r\n            scheduledTimeoutFunctions.set(timerId, func);\r\n\r\n            worker.postMessage({\r\n                id: null,\r\n                method: \"set\",\r\n                params: {\r\n                    delay,\r\n                    now: performance.now(),\r\n                    timerId\r\n                }\r\n            } as ISetNotification);\r\n\r\n            return timerId;\r\n        };\r\n\r\n        return {\r\n            clearTimeout,\r\n            setTimeout\r\n        };\r\n    }\r\n\r\n    private static loadWorkerTimers(): () => IWorkerTimers {\r\n        return (): IWorkerTimers => {\r\n            if (Timeout.workerTimers !== null) {\r\n                return Timeout.workerTimers;\r\n            }\r\n\r\n            Timeout.workerTimers = Timeout.load() as IWorkerTimers;\r\n\r\n            return Timeout.workerTimers;\r\n        };\r\n    }\r\n\r\n    public static timers: () => IWorkerTimers = Timeout.loadWorkerTimers();\r\n\r\n    private static isCallNotification(message: TWorkerMessage): message is ICallNotification {\r\n        return (message as ICallNotification).method !== undefined && (message as ICallNotification).method === \"call\";\r\n    }\r\n\r\n    private static isClearResponse(message: TWorkerMessage): message is IClearResponse {\r\n        return (message as IClearResponse).error === null && typeof message.id === \"number\";\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class OCSPEvent extends PlatformEvent {\r\n    private privSignature: string;\r\n\r\n    public constructor(eventName: string, eventType: EventType, signature: string) {\r\n        super(eventName, eventType);\r\n\r\n        this.privSignature = signature;\r\n    }\r\n}\r\n\r\nexport class OCSPMemoryCacheHitEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPMemoryCacheHitEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheMissEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPCacheMissEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPDiskCacheHitEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPDiskCacheHitEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateNeededEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPCacheUpdateNeededEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPMemoryCacheStoreEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPMemoryCacheStoreEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPDiskCacheStoreEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPDiskCacheStoreEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateCompleteEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPCacheUpdateCompleteEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPStapleReceivedEvent extends OCSPEvent {\r\n    public constructor() {\r\n        super(\"OCSPStapleReceivedEvent\", EventType.Debug, \"\");\r\n    }\r\n}\r\n\r\nexport class OCSPWSUpgradeStartedEvent extends OCSPEvent {\r\n    public constructor(serialNumber: string) {\r\n        super(\"OCSPWSUpgradeStartedEvent\", EventType.Debug, serialNumber);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheEntryExpiredEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n\r\n    public constructor(serialNumber: string, expireTime: number) {\r\n        super(\"OCSPCacheEntryExpiredEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheEntryNeedsRefreshEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n    private privStartTime: number;\r\n\r\n    public constructor(serialNumber: string, startTime: number, expireTime: number) {\r\n        super(\"OCSPCacheEntryNeedsRefreshEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n        this.privStartTime = startTime;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheHitEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n    private privStartTime: number;\r\n    private privExpireTimeString: string;\r\n    private privStartTimeString: string;\r\n\r\n    public constructor(serialNumber: string, startTime: number, expireTime: number) {\r\n        super(\"OCSPCacheHitEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n        this.privExpireTimeString = new Date(expireTime).toLocaleDateString();\r\n        this.privStartTime = startTime;\r\n        this.privStartTimeString = new Date(startTime).toLocaleTimeString();\r\n    }\r\n}\r\n\r\nexport class OCSPVerificationFailedEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    public constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPVerificationFailedEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheFetchErrorEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    public constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPCacheFetchErrorEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n\r\nexport class OCSPResponseRetrievedEvent extends OCSPEvent {\r\n    public constructor(serialNumber: string) {\r\n        super(\"OCSPResponseRetrievedEvent\", EventType.Debug, serialNumber);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateErrorEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    public constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPCacheUpdateErrorEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n",null,"\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    EventType,\r\n    PlatformEvent\r\n} from \"./Exports\";\r\n\r\nexport class BackgroundEvent extends PlatformEvent {\r\n    private privError: string;\r\n\r\n    public constructor(error: string) {\r\n        super(\"BackgroundEvent\", EventType.Error);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * @class Contracts\r\n * @private\r\n */\r\nexport class Contracts {\r\n    public static throwIfNullOrUndefined(param: any, name: string): void {\r\n        if (param === undefined || param === null) {\r\n            throw new Error(\"throwIfNullOrUndefined:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNull(param: any, name: string): void {\r\n        if (param === null) {\r\n            throw new Error(\"throwIfNull:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrWhitespace(param: string, name: string): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).trim().length < 1) {\r\n            throw new Error(\"throwIfNullOrWhitespace:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrTooLong(param: string, name: string, maxLength: number): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).length > maxLength) {\r\n            throw new Error(\"throwIfNullOrTooLong:\" + name + \" (more than \" + maxLength.toString() + \" characters)\");\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrTooShort(param: string, name: string, minLength: number): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).length < minLength) {\r\n            throw new Error(\"throwIfNullOrTooShort:\" + name + \" (less than \" + minLength.toString() + \" characters)\");\r\n        }\r\n    }\r\n\r\n    public static throwIfDisposed(isDisposed: boolean): void {\r\n        if (isDisposed) {\r\n            throw new Error(\"the object is already disposed\");\r\n        }\r\n    }\r\n\r\n    public static throwIfArrayEmptyOrWhitespace(array: string[], name: string): void {\r\n        Contracts.throwIfNullOrUndefined(array, name);\r\n\r\n        if (array.length === 0) {\r\n            throw new Error(\"throwIfArrayEmptyOrWhitespace:\" + name);\r\n        }\r\n\r\n        for (const item of array) {\r\n            Contracts.throwIfNullOrWhitespace(item, name);\r\n        }\r\n    }\r\n\r\n    public static throwIfFileDoesNotExist(param: string, name: string): void {\r\n        Contracts.throwIfNullOrWhitespace(param, name);\r\n\r\n        // TODO check for file existence.\r\n    }\r\n\r\n    public static throwIfNotUndefined(param: any, name: string): void {\r\n        if (param !== undefined) {\r\n            throw new Error(\"throwIfNotUndefined:\" + name);\r\n        }\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Stream } from \"../common/Exports\";\r\n\r\nexport interface IRecorder {\r\n    record(context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void;\r\n    releaseMediaResources(context: AudioContext): void;\r\n    setWorkletUrl(url: string): void;\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStringDictionary,\r\n    Stream,\r\n} from \"../common/Exports\";\r\nimport { IStreamChunk } from \"../common/Stream\";\r\nimport {\r\n    AudioStreamFormat,\r\n    AudioStreamFormatImpl,\r\n} from \"../sdk/Audio/AudioStreamFormat\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\n// Extending the default definition with browser specific definitions for backward compatibility\r\ninterface INavigator extends Navigator {\r\n    webkitGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback | undefined, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    mozGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback | undefined, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    msGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n}\r\n\r\nexport const AudioWorkletSourceURLPropertyName = \"MICROPHONE-WorkletSourceUrl\";\r\n\r\nexport class MicAudioSource implements IAudioSource {\r\n\r\n    private static readonly AUDIOFORMAT: AudioStreamFormatImpl = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privInitializeDeferral: Deferred<void>;\r\n\r\n    private privMediaStream: MediaStream;\r\n\r\n    private privContext: AudioContext;\r\n\r\n    private privMicrophoneLabel: string;\r\n\r\n    private privOutputChunkSize: number;\r\n\r\n    private privIsClosing: boolean;\r\n\r\n    public constructor(\r\n        private readonly privRecorder: IRecorder,\r\n        private readonly deviceId?: string,\r\n        audioSourceId?: string,\r\n        mediaStream?: MediaStream\r\n        ) {\r\n\r\n        this.privOutputChunkSize = MicAudioSource.AUDIOFORMAT.avgBytesPerSec / 10;\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privMediaStream = mediaStream || null;\r\n        this.privIsClosing = false;\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(MicAudioSource.AUDIOFORMAT);\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        if (this.privInitializeDeferral) {\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        this.privInitializeDeferral = new Deferred<void>();\r\n\r\n        try {\r\n            this.createAudioContext();\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                this.privInitializeDeferral.reject(typedError.name + \": \" + typedError.message);\r\n            } else {\r\n                this.privInitializeDeferral.reject(error as string);\r\n            }\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        const nav = window.navigator as INavigator;\r\n\r\n        let getUserMedia = (\r\n            // eslint-disable-next-line\r\n            nav.getUserMedia ||\r\n            nav.webkitGetUserMedia ||\r\n            nav.mozGetUserMedia ||\r\n            nav.msGetUserMedia\r\n        );\r\n\r\n        if (!!nav.mediaDevices) {\r\n            getUserMedia = (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback): void => {\r\n                nav.mediaDevices\r\n                    .getUserMedia(constraints)\r\n                    .then(successCallback)\r\n                    .catch(errorCallback);\r\n            };\r\n        }\r\n\r\n        if (!getUserMedia) {\r\n            const errorMsg = \"Browser does not support getUserMedia.\";\r\n            this.privInitializeDeferral.reject(errorMsg);\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\r\n        } else {\r\n            const next = (): void => {\r\n                this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n                if (this.privMediaStream && this.privMediaStream.active) {\r\n                    this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                    this.privInitializeDeferral.resolve();\r\n                } else {\r\n                    getUserMedia(\r\n                        { audio: this.deviceId ? { deviceId: this.deviceId } : true, video: false },\r\n                        (mediaStream: MediaStream): void => {\r\n                            this.privMediaStream = mediaStream;\r\n                            this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                            this.privInitializeDeferral.resolve();\r\n                        }, (error: any): void => {\r\n                            const errorMsg = `Error occurred during microphone initialization: ${error as string}`;\r\n                            this.privInitializeDeferral.reject(errorMsg);\r\n                            this.onEvent(new AudioSourceErrorEvent(this.privId, errorMsg));\r\n                        });\r\n                }\r\n            };\r\n\r\n            if (this.privContext.state === \"suspended\") {\r\n                // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.\r\n                // https://github.com/WebAudio/web-audio-api/issues/790\r\n                this.privContext.resume()\r\n                    .then(next)\r\n                    .catch((reason: any): void => {\r\n                        this.privInitializeDeferral.reject(`Failed to initialize audio context: ${reason as string}`);\r\n                    });\r\n            } else {\r\n                next();\r\n            }\r\n        }\r\n\r\n        return this.privInitializeDeferral.promise;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        return this.listen(audioNodeId).then<IAudioStreamNode>(\r\n            (stream: Stream<ArrayBuffer>): IAudioStreamNode => {\r\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n                return {\r\n                    detach: async (): Promise<void> => {\r\n                        stream.readEnded();\r\n                        delete this.privStreams[audioNodeId];\r\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                        return this.turnOff();\r\n                    },\r\n                    id: (): string => audioNodeId,\r\n                    read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n                };\r\n            });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public async turnOff(): Promise<void> {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        if (this.privInitializeDeferral) {\r\n            // Correctly handle when browser forces mic off before turnOn() completes\r\n            // eslint-disable-next-line @typescript-eslint/await-thenable\r\n            await this.privInitializeDeferral;\r\n            this.privInitializeDeferral = null;\r\n        }\r\n\r\n        await this.destroyAudioContext();\r\n\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.getMicrophoneLabel().then((label: string): ISpeechConfigAudioDevice => (\r\n            {\r\n                bitspersample: MicAudioSource.AUDIOFORMAT.bitsPerSample,\r\n                channelcount: MicAudioSource.AUDIOFORMAT.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: label,\r\n                samplerate: MicAudioSource.AUDIOFORMAT.samplesPerSec,\r\n                type: type.Microphones,\r\n            }\r\n        ));\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        if (name === AudioWorkletSourceURLPropertyName) {\r\n            this.privRecorder.setWorkletUrl(value);\r\n        } else {\r\n            throw new Error(\"Property '\" + name + \"' is not supported on Microphone.\");\r\n        }\r\n    }\r\n\r\n    private getMicrophoneLabel(): Promise<string> {\r\n        const defaultMicrophoneName: string = \"microphone\";\r\n\r\n        // If we did this already, return the value.\r\n        if (this.privMicrophoneLabel !== undefined) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        // If the stream isn't currently running, we can't query devices because security.\r\n        if (this.privMediaStream === undefined || !this.privMediaStream.active) {\r\n            return Promise.resolve(defaultMicrophoneName);\r\n        }\r\n\r\n        // Setup a default\r\n        this.privMicrophoneLabel = defaultMicrophoneName;\r\n\r\n        // Get the id of the device running the audio track.\r\n        const microphoneDeviceId: string = this.privMediaStream.getTracks()[0].getSettings().deviceId;\r\n\r\n        // If the browser doesn't support getting the device ID, set a default and return.\r\n        if (undefined === microphoneDeviceId) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        const deferred: Deferred<string> = new Deferred<string>();\r\n\r\n        // Enumerate the media devices.\r\n        navigator.mediaDevices.enumerateDevices().then((devices: MediaDeviceInfo[]): void => {\r\n            for (const device of devices) {\r\n                if (device.deviceId === microphoneDeviceId) {\r\n                    // Found the device\r\n                    this.privMicrophoneLabel = device.label;\r\n                    break;\r\n                }\r\n            }\r\n            deferred.resolve(this.privMicrophoneLabel);\r\n        }, (): Deferred<string> => deferred.resolve(this.privMicrophoneLabel));\r\n\r\n        return deferred.promise;\r\n    }\r\n\r\n    private async listen(audioNodeId: string): Promise<Stream<ArrayBuffer>> {\r\n        await this.turnOn();\r\n        const stream = new ChunkedArrayBufferStream(this.privOutputChunkSize, audioNodeId);\r\n        this.privStreams[audioNodeId] = stream;\r\n        try {\r\n            this.privRecorder.record(this.privContext, this.privMediaStream, stream);\r\n        } catch (error) {\r\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, error as string));\r\n            throw error;\r\n        }\r\n        const result: Stream<ArrayBuffer> = stream;\r\n        return result;\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private createAudioContext(): void {\r\n        if (!!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privContext = AudioStreamFormatImpl.getAudioContext(MicAudioSource.AUDIOFORMAT.samplesPerSec);\r\n    }\r\n\r\n    private async destroyAudioContext(): Promise<void> {\r\n        if (!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privRecorder.releaseMediaResources(this.privContext);\r\n\r\n        // This pattern brought to you by a bug in the TypeScript compiler where it\r\n        // confuses the (\"close\" in this.privContext) with this.privContext always being null as the alternate.\r\n        // https://github.com/Microsoft/TypeScript/issues/11498\r\n        let hasClose: boolean = false;\r\n        if (\"close\" in this.privContext) {\r\n            hasClose = true;\r\n        }\r\n\r\n        if (hasClose) {\r\n            if (!this.privIsClosing) {\r\n                // The audio context close may take enough time that the close is called twice\r\n                this.privIsClosing = true;\r\n                await this.privContext.close();\r\n                this.privContext = null;\r\n                this.privIsClosing = false;\r\n            }\r\n        } else if (null !== this.privContext && this.privContext.state === \"running\") {\r\n            // Suspend actually takes a callback, but analogous to the\r\n            // resume method, it'll be only fired if suspend is called\r\n            // in a direct response to a user action. The later is not always\r\n            // the case, as TurnOff is also called, when we receive an\r\n            // end-of-speech message from the service. So, doing a best effort\r\n            // fire-and-forget here.\r\n            await this.privContext.suspend();\r\n        }\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// Make sure not to export internal modules.\r\n//\r\nexport * from \"./CognitiveSubscriptionKeyAuthentication\";\r\nexport * from \"./CognitiveTokenAuthentication\";\r\nexport * from \"./IAuthentication\";\r\nexport * from \"./IConnectionFactory\";\r\nexport * from \"./ISynthesisConnectionFactory\";\r\nexport * from \"./IntentConnectionFactory\";\r\nexport * from \"./SpeakerRecognitionConnectionFactory\";\r\nexport * from \"./RecognitionEvents\";\r\nexport * from \"./ServiceRecognizerBase\";\r\nexport * from \"./ConversationServiceRecognizer\";\r\nexport * from \"./RecognizerConfig\";\r\nexport * from \"./SpeechServiceInterfaces\";\r\nexport * from \"./WebsocketMessageFormatter\";\r\nexport * from \"./SpeechConnectionFactory\";\r\nexport * from \"./ConversationTranscriberConnectionFactory\";\r\nexport * from \"./TranscriberConnectionFactory\";\r\nexport * from \"./TranslationConnectionFactory\";\r\nexport * from \"./SpeechSynthesisConnectionFactory\";\r\nexport * from \"./EnumTranslation\";\r\nexport * from \"./ServiceMessages/Enums\";\r\nexport * from \"./ServiceMessages/TranslationSynthesisEnd\";\r\nexport * from \"./ServiceMessages/TranslationHypothesis\";\r\nexport * from \"./ServiceMessages/TranslationPhrase\";\r\nexport * from \"./TranslationServiceRecognizer\";\r\nexport * from \"./ServiceMessages/SpeechDetected\";\r\nexport * from \"./ServiceMessages/SpeechHypothesis\";\r\nexport * from \"./ServiceMessages/SpeechKeyword\";\r\nexport * from \"./SpeechServiceRecognizer\";\r\nexport * from \"./ConversationTranscriptionServiceRecognizer\";\r\nexport * from \"./TranscriptionServiceRecognizer\";\r\nexport * from \"./ServiceMessages/DetailedSpeechPhrase\";\r\nexport * from \"./ServiceMessages/SimpleSpeechPhrase\";\r\nexport * from \"./AddedLmIntent\";\r\nexport * from \"./IntentServiceRecognizer\";\r\nexport * from \"./ServiceMessages/IntentResponse\";\r\nexport * from \"./ServiceMessages/SpeakerResponse\";\r\nexport * from \"./RequestSession\";\r\nexport * from \"./SpeechContext\";\r\nexport * from \"./DynamicGrammarBuilder\";\r\nexport * from \"./DynamicGrammarInterfaces\";\r\nexport * from \"./DialogServiceAdapter\";\r\nexport * from \"./AgentConfig\";\r\nexport * from \"./Transcription/Exports\";\r\nexport * from \"./ServiceMessages/SynthesisAudioMetadata\";\r\nexport * from \"./SynthesisTurn\";\r\nexport * from \"./SynthesisAdapterBase\";\r\nexport * from \"./SynthesisRestAdapter\";\r\nexport * from \"./SynthesizerConfig\";\r\nexport * from \"./SynthesisContext\";\r\nexport * from \"./SpeakerRecognitionConfig\";\r\nexport * from \"./SpeakerServiceRecognizer\";\r\nexport * from \"./VoiceServiceRecognizer\";\r\n\r\nexport const OutputFormatPropertyName: string = \"OutputFormat\";\r\nexport const CancellationErrorCodePropertyName: string = \"CancellationErrorCode\";\r\nexport const ServicePropertiesPropertyName: string = \"ServiceProperties\";\r\nexport const ForceDictationPropertyName: string = \"ForceDictation\";\r\nexport const AutoDetectSourceLanguagesOpenRangeOptionName: string = \"OpenRange\";\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n} from \"../common/Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication\r\n} from \"./IAuthentication\";\r\n\r\n/**\r\n * @class\r\n */\r\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\r\n    private privAuthInfo: AuthInfo;\r\n\r\n    /**\r\n     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\r\n     * @constructor\r\n     * @param {string} subscriptionKey - The subscription key\r\n     */\r\n    public constructor(subscriptionKey: string) {\r\n        if (!subscriptionKey) {\r\n            throw new ArgumentNullError(\"subscriptionKey\");\r\n        }\r\n\r\n        this.privAuthInfo = new AuthInfo(HeaderNames.AuthKey, subscriptionKey);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public fetch(authFetchEventId: string): Promise<AuthInfo> {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo> {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class HeaderNames {\r\n    public static AuthKey: string = \"Ocp-Apim-Subscription-Key\";\r\n    public static Authorization: string = \"Authorization\";\r\n    public static SpIDAuthKey: string = \"Apim-Subscription-Id\";\r\n    public static ConnectionId: string = \"X-ConnectionId\";\r\n    public static ContentType: string = \"Content-Type\";\r\n    public static CustomCommandsAppId: string = \"X-CommandsAppId\";\r\n    public static Path: string = \"Path\";\r\n    public static RequestId: string = \"X-RequestId\";\r\n    public static RequestStreamId: string = \"X-StreamId\";\r\n    public static RequestTimestamp: string = \"X-Timestamp\";\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport interface IAuthentication {\r\n    fetch(authFetchEventId: string): Promise<AuthInfo>;\r\n    fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo>;\r\n}\r\n\r\nexport class AuthInfo {\r\n    private privHeaderName: string;\r\n    private privToken: string;\r\n\r\n    public constructor(headerName: string, token: string) {\r\n        this.privHeaderName = headerName;\r\n        this.privToken = token;\r\n    }\r\n\r\n    public get headerName(): string {\r\n        return this.privHeaderName;\r\n    }\r\n\r\n    public get token(): string {\r\n        return this.privToken;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError } from \"../common/Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\n\r\nexport class CognitiveTokenAuthentication implements IAuthentication {\r\n    private static privTokenPrefix: string = \"Bearer \";\r\n    private privFetchCallback: (authFetchEventId: string) => Promise<string>;\r\n    private privFetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>;\r\n\r\n    public constructor(fetchCallback: (authFetchEventId: string) => Promise<string>, fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>) {\r\n        if (!fetchCallback) {\r\n            throw new ArgumentNullError(\"fetchCallback\");\r\n        }\r\n\r\n        if (!fetchOnExpiryCallback) {\r\n            throw new ArgumentNullError(\"fetchOnExpiryCallback\");\r\n        }\r\n\r\n        this.privFetchCallback = fetchCallback;\r\n        this.privFetchOnExpiryCallback = fetchOnExpiryCallback;\r\n    }\r\n\r\n    public fetch(authFetchEventId: string): Promise<AuthInfo> {\r\n        return this.privFetchCallback(authFetchEventId).then((token: string): AuthInfo => new AuthInfo(HeaderNames.Authorization, token === undefined ? undefined : CognitiveTokenAuthentication.privTokenPrefix + token));\r\n    }\r\n\r\n    public fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo> {\r\n        return this.privFetchOnExpiryCallback(authFetchEventId).then((token: string): AuthInfo => new AuthInfo(HeaderNames.Authorization, token === undefined ? undefined : CognitiveTokenAuthentication.privTokenPrefix + token));\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IConnection } from \"../common/Exports\";\r\nimport { AuthInfo } from \"./IAuthentication\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\n\r\nexport interface IConnectionFactory {\r\n    create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection;\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IConnection } from \"../common/Exports\";\r\nimport { AuthInfo } from \"./IAuthentication\";\r\nimport { SynthesizerConfig } from \"./SynthesizerConfig\";\r\n\r\nexport interface ISynthesisConnectionFactory {\r\n    create(\r\n        config: SynthesizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection;\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\n\r\nexport class IntentConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_IntentRegion);\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".sr.speech\" + hostSuffix);\r\n            endpoint = host + \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    private getSpeechRegionFromIntentRegion(intentRegion: string): string {\r\n        switch (intentRegion) {\r\n            case \"West US\":\r\n            case \"US West\":\r\n            case \"westus\":\r\n                return \"uswest\";\r\n            case \"West US 2\":\r\n            case \"US West 2\":\r\n            case \"westus2\":\r\n                return \"uswest2\";\r\n            case \"South Central US\":\r\n            case \"US South Central\":\r\n            case \"southcentralus\":\r\n                return \"ussouthcentral\";\r\n            case \"West Central US\":\r\n            case \"US West Central\":\r\n            case \"westcentralus\":\r\n                return \"uswestcentral\";\r\n            case \"East US\":\r\n            case \"US East\":\r\n            case \"eastus\":\r\n                return \"useast\";\r\n            case \"East US 2\":\r\n            case \"US East 2\":\r\n            case \"eastus2\":\r\n                return \"useast2\";\r\n            case \"West Europe\":\r\n            case \"Europe West\":\r\n            case \"westeurope\":\r\n                return \"europewest\";\r\n            case \"North Europe\":\r\n            case \"Europe North\":\r\n            case \"northeurope\":\r\n                return \"europenorth\";\r\n            case \"Brazil South\":\r\n            case \"South Brazil\":\r\n            case \"southbrazil\":\r\n                return \"brazilsouth\";\r\n            case \"Australia East\":\r\n            case \"East Australia\":\r\n            case \"eastaustralia\":\r\n                return \"australiaeast\";\r\n            case \"Southeast Asia\":\r\n            case \"Asia Southeast\":\r\n            case \"southeastasia\":\r\n                return \"asiasoutheast\";\r\n            case \"East Asia\":\r\n            case \"Asia East\":\r\n            case \"eastasia\":\r\n                return \"asiaeast\";\r\n            default:\r\n                return intentRegion;\r\n        }\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport { AudioConfig } from \"./Audio/AudioConfig\";\r\nexport { AudioStreamFormat, AudioFormatTag } from \"./Audio/AudioStreamFormat\";\r\nexport { AudioInputStream, PullAudioInputStream, PushAudioInputStream } from \"./Audio/AudioInputStream\";\r\nexport { AudioOutputStream, PullAudioOutputStream, PushAudioOutputStream} from \"./Audio/AudioOutputStream\";\r\nexport { CancellationReason } from \"./CancellationReason\";\r\nexport { PullAudioInputStreamCallback } from \"./Audio/PullAudioInputStreamCallback\";\r\nexport { PushAudioOutputStreamCallback } from \"./Audio/PushAudioOutputStreamCallback\";\r\nexport { KeywordRecognitionModel } from \"./KeywordRecognitionModel\";\r\nexport { SessionEventArgs } from \"./SessionEventArgs\";\r\nexport { RecognitionEventArgs } from \"./RecognitionEventArgs\";\r\nexport { OutputFormat } from \"./OutputFormat\";\r\nexport { IntentRecognitionEventArgs } from \"./IntentRecognitionEventArgs\";\r\nexport { RecognitionResult } from \"./RecognitionResult\";\r\nexport { SpeechRecognitionResult } from \"./SpeechRecognitionResult\";\r\nexport { IntentRecognitionResult } from \"./IntentRecognitionResult\";\r\nexport { LanguageUnderstandingModel } from \"./LanguageUnderstandingModel\";\r\nexport { SpeechRecognitionEventArgs, ConversationTranscriptionEventArgs, MeetingTranscriptionEventArgs } from \"./SpeechRecognitionEventArgs\";\r\nexport { SpeechRecognitionCanceledEventArgs } from \"./SpeechRecognitionCanceledEventArgs\";\r\nexport { TranslationRecognitionEventArgs } from \"./TranslationRecognitionEventArgs\";\r\nexport { TranslationSynthesisEventArgs } from \"./TranslationSynthesisEventArgs\";\r\nexport { TranslationRecognitionResult } from \"./TranslationRecognitionResult\";\r\nexport { TranslationSynthesisResult } from \"./TranslationSynthesisResult\";\r\nexport { ResultReason } from \"./ResultReason\";\r\nexport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\nexport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig\";\r\nexport { PropertyCollection } from \"./PropertyCollection\";\r\nexport { PropertyId } from \"./PropertyId\";\r\nexport { Recognizer } from \"./Recognizer\";\r\nexport { SpeechRecognizer } from \"./SpeechRecognizer\";\r\nexport { IntentRecognizer } from \"./IntentRecognizer\";\r\nexport { VoiceProfileType } from \"./VoiceProfileType\";\r\nexport { TranslationRecognizer } from \"./TranslationRecognizer\";\r\nexport { Translations } from \"./Translations\";\r\nexport { NoMatchReason } from \"./NoMatchReason\";\r\nexport { NoMatchDetails } from \"./NoMatchDetails\";\r\nexport { TranslationRecognitionCanceledEventArgs } from \"./TranslationRecognitionCanceledEventArgs\";\r\nexport { IntentRecognitionCanceledEventArgs } from \"./IntentRecognitionCanceledEventArgs\";\r\nexport { CancellationDetailsBase } from \"./CancellationDetailsBase\";\r\nexport { CancellationDetails } from \"./CancellationDetails\";\r\nexport { CancellationErrorCode } from \"./CancellationErrorCodes\";\r\nexport { ConnectionEventArgs } from \"./ConnectionEventArgs\";\r\nexport { ServiceEventArgs } from \"./ServiceEventArgs\";\r\nexport { Connection } from \"./Connection\";\r\nexport { PhraseListGrammar } from \"./PhraseListGrammar\";\r\nexport { DialogServiceConfig } from \"./DialogServiceConfig\";\r\nexport { BotFrameworkConfig } from \"./BotFrameworkConfig\";\r\nexport { CustomCommandsConfig } from \"./CustomCommandsConfig\";\r\nexport { DialogServiceConnector } from \"./DialogServiceConnector\";\r\nexport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs\";\r\nexport { TurnStatusReceivedEventArgs } from \"./TurnStatusReceivedEventArgs\";\r\nexport { ServicePropertyChannel } from \"./ServicePropertyChannel\";\r\nexport { ProfanityOption } from \"./ProfanityOption\";\r\nexport { BaseAudioPlayer } from \"./Audio/BaseAudioPlayer\";\r\nexport { ConnectionMessageEventArgs } from \"./ConnectionMessageEventArgs\";\r\nexport { ConnectionMessage } from \"./ConnectionMessage\";\r\nexport { VoiceProfile } from \"./VoiceProfile\";\r\nexport { VoiceProfileEnrollmentResult, VoiceProfileEnrollmentCancellationDetails } from \"./VoiceProfileEnrollmentResult\";\r\nexport { VoiceProfileResult, VoiceProfileCancellationDetails } from \"./VoiceProfileResult\";\r\nexport { VoiceProfilePhraseResult } from \"./VoiceProfilePhraseResult\";\r\nexport { VoiceProfileClient } from \"./VoiceProfileClient\";\r\nexport { SpeakerRecognizer } from \"./SpeakerRecognizer\";\r\nexport { SpeakerIdentificationModel } from \"./SpeakerIdentificationModel\";\r\nexport { SpeakerVerificationModel } from \"./SpeakerVerificationModel\";\r\nexport { AutoDetectSourceLanguageConfig } from \"./AutoDetectSourceLanguageConfig\";\r\nexport { AutoDetectSourceLanguageResult } from \"./AutoDetectSourceLanguageResult\";\r\nexport { SourceLanguageConfig } from \"./SourceLanguageConfig\";\r\nexport { SpeakerRecognitionResult, SpeakerRecognitionResultType, SpeakerRecognitionCancellationDetails } from \"./SpeakerRecognitionResult\";\r\nexport { Conversation,\r\n    ConversationExpirationEventArgs,\r\n    ConversationInfo,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslationResult,\r\n    ConversationTranslator,\r\n    ConversationTranscriber,\r\n    ConversationTranscriptionResult,\r\n    Meeting,\r\n    MeetingInfo,\r\n    MeetingTranscriber,\r\n    IParticipant,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    User,\r\n    VoiceSignature\r\n    } from \"./Transcription/Exports\";\r\nexport { SpeechSynthesisOutputFormat } from \"./SpeechSynthesisOutputFormat\";\r\nexport { SpeechSynthesizer } from \"./SpeechSynthesizer\";\r\nexport { SynthesisResult } from \"./SynthesisResult\";\r\nexport { SpeechSynthesisResult } from \"./SpeechSynthesisResult\";\r\nexport { SpeechSynthesisEventArgs } from \"./SpeechSynthesisEventArgs\";\r\nexport { SpeechSynthesisWordBoundaryEventArgs } from \"./SpeechSynthesisWordBoundaryEventArgs\";\r\nexport { SpeechSynthesisBookmarkEventArgs } from \"./SpeechSynthesisBookmarkEventArgs\";\r\nexport { SpeechSynthesisVisemeEventArgs } from \"./SpeechSynthesisVisemeEventArgs\";\r\nexport { SpeechSynthesisBoundaryType } from \"./SpeechSynthesisBoundaryType\";\r\nexport { SynthesisVoicesResult } from \"./SynthesisVoicesResult\";\r\nexport { VoiceInfo } from \"./VoiceInfo\";\r\nexport { IPlayer } from \"./Audio/IPlayer\";\r\nexport { SpeakerAudioDestination } from \"./Audio/SpeakerAudioDestination\";\r\nexport { CancellationEventArgs } from \"./CancellationEventArgs\";\r\nexport { ConversationTranscriptionCanceledEventArgs } from \"./ConversationTranscriptionCanceledEventArgs\";\r\nexport { MeetingTranscriptionCanceledEventArgs } from \"./MeetingTranscriptionCanceledEventArgs\";\r\nexport { PronunciationAssessmentGradingSystem } from \"./PronunciationAssessmentGradingSystem\";\r\nexport { PronunciationAssessmentGranularity } from \"./PronunciationAssessmentGranularity\";\r\nexport { PronunciationAssessmentConfig } from \"./PronunciationAssessmentConfig\";\r\nexport { PronunciationAssessmentResult } from \"./PronunciationAssessmentResult\";\r\nexport { LanguageIdMode } from \"./LanguageIdMode\";\r\nexport { Diagnostics } from \"./Diagnostics\";\r\nexport { LogLevel } from \"./LogLevel\";\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { PathLike } from \"fs\";\r\nimport {\r\n    FileAudioSource,\r\n    MicAudioSource,\r\n    PcmRecorder,\r\n} from \"../../common.browser/Exports\";\r\nimport { ISpeechConfigAudioDevice } from \"../../common.speech/Exports\";\r\nimport {\r\n    AudioSourceEvent,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IAudioSource,\r\n    IAudioStreamNode\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioInputStream,\r\n    AudioOutputStream,\r\n    AudioStreamFormat,\r\n    IPlayer,\r\n    PullAudioInputStreamCallback,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeakerAudioDestination\r\n} from \"../Exports\";\r\nimport { AudioFileWriter } from \"./AudioFileWriter\";\r\nimport { PullAudioInputStreamImpl, PushAudioInputStreamImpl } from \"./AudioInputStream\";\r\nimport { PullAudioOutputStreamImpl, PushAudioOutputStreamImpl } from \"./AudioOutputStream\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\r\n * @class AudioConfig\r\n * Updated in version 1.11.0\r\n */\r\nexport abstract class AudioConfig {\r\n    /**\r\n     * Creates an AudioConfig object representing the default microphone on the system.\r\n     * @member AudioConfig.fromDefaultMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromDefaultMicrophoneInput(): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a microphone with the specified device ID.\r\n     * @member AudioConfig.fromMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\r\n     * Default microphone is used the value is omitted.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromMicrophoneInput(deviceId?: string): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified file.\r\n     * @member AudioConfig.fromWavFileInput\r\n     * @function\r\n     * @public\r\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromWavFileInput(file: File | Buffer, name: string = \"unnamedBuffer.wav\"): AudioConfig {\r\n        return new AudioConfigImpl(new FileAudioSource(file, name));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified stream.\r\n     * @member AudioConfig.fromStreamInput\r\n     * @function\r\n     * @public\r\n     * @param {AudioInputStream | PullAudioInputStreamCallback | MediaStream} audioStream - Specifies the custom audio input\r\n     * stream. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromStreamInput(audioStream: AudioInputStream | PullAudioInputStreamCallback\r\n        | MediaStream): AudioConfig {\r\n        if (audioStream instanceof PullAudioInputStreamCallback) {\r\n            return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream));\r\n        }\r\n\r\n        if (audioStream instanceof AudioInputStream) {\r\n            return new AudioConfigImpl(audioStream as PushAudioInputStreamImpl);\r\n        }\r\n        if (typeof MediaStream !== \"undefined\" && audioStream instanceof MediaStream) {\r\n            const pcmRecorder = new PcmRecorder(false);\r\n            return new AudioConfigImpl(new MicAudioSource(pcmRecorder, null, null, audioStream));\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the default speaker.\r\n     * @member AudioConfig.fromDefaultSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromDefaultSpeakerOutput(): AudioConfig {\r\n        return new AudioOutputConfigImpl(new SpeakerAudioDestination());\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the custom IPlayer object.\r\n     * You can use the IPlayer object to control pause, resume, etc.\r\n     * @member AudioConfig.fromSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @param {IPlayer} player - the IPlayer object for playback.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.12.0\r\n     */\r\n    public static fromSpeakerOutput(player?: IPlayer): AudioConfig {\r\n        if (player === undefined) {\r\n            return AudioConfig.fromDefaultSpeakerOutput();\r\n        }\r\n        if (player instanceof SpeakerAudioDestination) {\r\n            return new AudioOutputConfigImpl(player);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified output audio file\r\n     * @member AudioConfig.fromAudioFileOutput\r\n     * @function\r\n     * @public\r\n     * @param {PathLike} filename - the filename of the output audio file\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromAudioFileOutput(filename: PathLike): AudioConfig {\r\n        return new AudioOutputConfigImpl(new AudioFileWriter(filename));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified audio output stream\r\n     * @member AudioConfig.fromStreamOutput\r\n     * @function\r\n     * @public\r\n     * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\r\n     * stream.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromStreamOutput(audioStream: AudioOutputStream | PushAudioOutputStreamCallback): AudioConfig {\r\n        if (audioStream instanceof PushAudioOutputStreamCallback) {\r\n            return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream));\r\n        }\r\n\r\n        if (audioStream instanceof PushAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PushAudioOutputStreamImpl);\r\n        }\r\n\r\n        if (audioStream instanceof PullAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PullAudioOutputStreamImpl);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class AudioConfigImpl\r\n */\r\nexport class AudioConfigImpl extends AudioConfig implements IAudioSource {\r\n    private privSource: IAudioSource;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioSource} source - An audio source.\r\n     */\r\n    public constructor(source: IAudioSource) {\r\n        super();\r\n        this.privSource = source;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privSource.format;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privSource.turnOff().then((): void => {\r\n            if (!!cb) {\r\n                cb();\r\n            }\r\n        }, (error: string): void => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.id\r\n     * @function\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privSource.id();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOn\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOn(): Promise<void> {\r\n        return this.privSource.turnOn();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.attach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     * @returns {Promise<IAudioStreamNode>} A promise.\r\n     */\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        return this.privSource.attach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.detach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     */\r\n    public detach(audioNodeId: string): void {\r\n        return this.privSource.detach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOff\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOff(): Promise<void> {\r\n        return this.privSource.turnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.events\r\n     * @function\r\n     * @public\r\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\r\n     */\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privSource.events;\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        if (undefined !== this.privSource.setProperty) {\r\n            this.privSource.setProperty(name, value);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n        }\r\n\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        if (undefined !== this.privSource.getProperty) {\r\n            return this.privSource.getProperty(name, def);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privSource.deviceInfo;\r\n    }\r\n}\r\n\r\nexport class AudioOutputConfigImpl extends AudioConfig implements IAudioDestination {\r\n    private privDestination: IAudioDestination;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioDestination} destination - An audio destination.\r\n     */\r\n    public constructor(destination: IAudioDestination) {\r\n        super();\r\n        this.privDestination = destination;\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        this.privDestination.format = format;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        this.privDestination.write(buffer);\r\n    }\r\n\r\n    public close(): void {\r\n        this.privDestination.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privDestination.id();\r\n    }\r\n\r\n    public setProperty(): void {\r\n        throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n    }\r\n\r\n    public getProperty(): string {\r\n        throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { IAudioDestination } from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport { AudioStreamFormat } from \"../Exports\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\n\r\nexport class AudioFileWriter implements IAudioDestination {\r\n    private privAudioFormat: AudioOutputFormatImpl;\r\n    private privFd: number;\r\n    private privId: string;\r\n    private privWriteStream: fs.WriteStream;\r\n\r\n    public constructor(filename: fs.PathLike) {\r\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available, please use Push or PullAudioOutputStream\");\r\n        this.privFd = fs.openSync(filename, \"w\");\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        Contracts.throwIfNotUndefined(this.privAudioFormat, \"format is already set\");\r\n        this.privAudioFormat = format as AudioOutputFormatImpl;\r\n        let headerOffset: number = 0;\r\n        if (this.privAudioFormat.hasHeader) {\r\n            headerOffset = this.privAudioFormat.header.byteLength;\r\n        }\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream = fs.createWriteStream(\"\", {fd: this.privFd, start: headerOffset, autoClose: false});\r\n        }\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privAudioFormat, \"must set format before writing.\");\r\n        if (this.privWriteStream !== undefined) {\r\n            this.privWriteStream.write(new Uint8Array(buffer.slice(0)));\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream.on(\"finish\", (): void => {\r\n                if (this.privAudioFormat.hasHeader) {\r\n                    this.privAudioFormat.updateHeader(this.privWriteStream.bytesWritten);\r\n                    fs.writeSync(this.privFd,\r\n                        new Int8Array(this.privAudioFormat.header),\r\n                        0,\r\n                        this.privAudioFormat.header.byteLength,\r\n                        0);\r\n                }\r\n                fs.closeSync(this.privFd);\r\n                this.privFd = undefined;\r\n            });\r\n            this.privWriteStream.end();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../../common.speech/Exports\";\r\nimport {\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    ChunkedArrayBufferStream,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports\";\r\nimport { createNoDashGuid } from \"../../common/Guid\";\r\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class AudioInputStream\r\n */\r\nexport abstract class AudioInputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member AudioInputStream.createPushStream\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPushStream(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return PushAudioInputStream.create(format);\r\n    }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\r\n     * and close() methods.\r\n     * @member AudioInputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\r\n     * PullAudioInputStreamCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\r\n     * the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPullStream(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return PullAudioInputStream.create(callback, format);\r\n        // throw new Error(\"Oops\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @class PushAudioInputStream\r\n */\r\nexport abstract class PushAudioInputStream extends AudioInputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member PushAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\r\n     * push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return new PushAudioInputStreamImpl(format);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStream.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PushAudioInputStreamImpl\r\n */\r\nexport class PushAudioInputStreamImpl extends PushAudioInputStream implements IAudioSource {\r\n\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privStream: Stream<ArrayBuffer>;\r\n\r\n    /**\r\n     * Creates and initalizes an instance with the given values.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} format - The audio stream format.\r\n     */\r\n    public constructor(format?: AudioStreamFormat) {\r\n        super();\r\n        if (format === undefined) {\r\n            this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\r\n        } else {\r\n            this.privFormat = format as AudioStreamFormatImpl;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        const stream = this.privStream;\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: async (): Promise<void> => {\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PushStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private toBuffer(arrayBuffer: ArrayBuffer): Buffer {\r\n        const buf: Buffer = Buffer.alloc(arrayBuffer.byteLength);\r\n        const view: Uint8Array = new Uint8Array(arrayBuffer);\r\n        for (let i = 0; i < buf.length; ++i) {\r\n            buf[i] = view[i];\r\n        }\r\n        return buf;\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class PullAudioInputStream\r\n */\r\nexport abstract class PullAudioInputStream extends AudioInputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n super();\r\n}\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @member PullAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     * derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return new PullAudioInputStreamImpl(callback, format as AudioStreamFormatImpl);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PullAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PullAudioInputStreamImpl\r\n */\r\nexport class PullAudioInputStreamImpl extends PullAudioInputStream implements IAudioSource {\r\n\r\n    private privCallback: PullAudioInputStreamCallback;\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privIsClosed: boolean;\r\n    private privBufferSize: number;\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @constructor\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     * derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     */\r\n    public constructor(callback: PullAudioInputStreamCallback, format?: AudioStreamFormatImpl) {\r\n        super();\r\n        if (undefined === format) {\r\n            this.privFormat = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n        } else {\r\n            this.privFormat = format;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n        this.privIsClosed = false;\r\n        this.privBufferSize = this.privFormat.avgBytesPerSec / 10;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privIsClosed = true;\r\n        this.privCallback.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                this.privCallback.close();\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => {\r\n                let totalBytes: number = 0;\r\n                let transmitBuff: ArrayBuffer;\r\n                // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n                while (totalBytes < this.privBufferSize) {\r\n                    // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\r\n                    // data back.\r\n                    const readBuff: ArrayBuffer = new ArrayBuffer(this.privBufferSize - totalBytes);\r\n                    const pulledBytes: number = this.privCallback.read(readBuff);\r\n                    // If there is no return buffer yet defined, set the return buffer to the that was just populated.\r\n                    // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\r\n                    // preferred size allocated.\r\n                    if (undefined === transmitBuff) {\r\n                        transmitBuff = readBuff;\r\n                    } else {\r\n                        // Not the first bite at the apple, so fill the return buffer with the data we got back.\r\n                        const intView: Int8Array = new Int8Array(transmitBuff);\r\n                        intView.set(new Int8Array(readBuff), totalBytes);\r\n                    }\r\n                    // If there are no bytes to read, just break out and be done.\r\n                    if (0 === pulledBytes) {\r\n                        break;\r\n                    }\r\n                    totalBytes += pulledBytes;\r\n                }\r\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\r\n                    buffer: transmitBuff.slice(0, totalBytes),\r\n                    isEnd: this.privIsClosed || totalBytes === 0,\r\n                    timeReceived: Date.now(),\r\n                });\r\n            },\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PullStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport enum AudioFormatTag {\r\n    PCM = 1,\r\n    MuLaw,\r\n    Siren,\r\n    MP3,\r\n    SILKSkype,\r\n    OGG_OPUS,\r\n    WEBM_OPUS,\r\n    ALaw,\r\n    FLAC,\r\n    OPUS,\r\n}\r\n\r\n/**\r\n * Represents audio stream format used for custom audio input configurations.\r\n * @class AudioStreamFormat\r\n */\r\nexport abstract class AudioStreamFormat {\r\n    /**\r\n     * Creates an audio stream format object representing the default audio stream\r\n     * format (16KHz 16bit mono PCM).\r\n     * @member AudioStreamFormat.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormat {\r\n        return AudioStreamFormatImpl.getDefaultInputFormat();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified format characteristics.\r\n     * @member AudioStreamFormat.getWaveFormat\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     * uses one channel and stereo data uses two channels.\r\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormat(samplesPerSecond: number, bitsPerSample: number, channels: number, format: AudioFormatTag): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels, format);\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified pcm waveformat characteristics.\r\n     * @member AudioStreamFormat.getWaveFormatPCM\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     * uses one channel and stereo data uses two channels.\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormatPCM(samplesPerSecond: number, bitsPerSample: number, channels: number): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioStreamFormat.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class AudioStreamFormatImpl\r\n */\r\nexport class AudioStreamFormatImpl extends AudioStreamFormat {\r\n    protected privHeader: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {number} channels - Number of channels.\r\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\r\n     */\r\n    public constructor(samplesPerSec: number = 16000, bitsPerSample: number = 16, channels: number = 1, format: AudioFormatTag = AudioFormatTag.PCM) {\r\n        super();\r\n\r\n        let isWavFormat: boolean = true;\r\n        /* 1 for PCM; 6 for alaw; 7 for mulaw */\r\n        switch (format) {\r\n            case AudioFormatTag.PCM:\r\n                this.formatTag = 1;\r\n                break;\r\n            case AudioFormatTag.ALaw:\r\n                this.formatTag = 6;\r\n                break;\r\n            case AudioFormatTag.MuLaw:\r\n                this.formatTag = 7;\r\n                break;\r\n            default:\r\n                isWavFormat = false;\r\n        }\r\n        this.bitsPerSample = bitsPerSample;\r\n        this.samplesPerSec = samplesPerSec;\r\n        this.channels = channels;\r\n        this.avgBytesPerSec = this.samplesPerSec * this.channels * (this.bitsPerSample / 8);\r\n        this.blockAlign = this.channels * Math.max(this.bitsPerSample, 8);\r\n\r\n        if (isWavFormat) {\r\n            this.privHeader = new ArrayBuffer(44);\r\n\r\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\r\n            const view = new DataView(this.privHeader);\r\n\r\n            /* RIFF identifier */\r\n            this.setString(view, 0, \"RIFF\");\r\n            /* file length */\r\n            view.setUint32(4, 0, true);\r\n            /* RIFF type & Format */\r\n            this.setString(view, 8, \"WAVEfmt \");\r\n            /* format chunk length */\r\n            view.setUint32(16, 16, true);\r\n            /* audio format */\r\n            view.setUint16(20, this.formatTag, true);\r\n            /* channel count */\r\n            view.setUint16(22, this.channels, true);\r\n            /* sample rate */\r\n            view.setUint32(24, this.samplesPerSec, true);\r\n            /* byte rate (sample rate * block align) */\r\n            view.setUint32(28, this.avgBytesPerSec, true);\r\n            /* block align (channel count * bytes per sample) */\r\n            view.setUint16(32, this.channels * (this.bitsPerSample / 8), true);\r\n            /* bits per sample */\r\n            view.setUint16(34, this.bitsPerSample, true);\r\n            /* data chunk identifier */\r\n            this.setString(view, 36, \"data\");\r\n            /* data chunk length */\r\n            view.setUint32(40, 0, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the default input format.\r\n     * @member AudioStreamFormatImpl.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormatImpl} The default input format.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormatImpl {\r\n        return new AudioStreamFormatImpl();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio context appropriate to current browser\r\n     * @member AudioStreamFormatImpl.getAudioContext\r\n     * @function\r\n     * @public\r\n     * @returns {AudioContext} An audio context instance\r\n     */\r\n    /* eslint-disable */\r\n    public static getAudioContext(sampleRate?: number): AudioContext {\r\n        // Workaround for Speech SDK bug in Safari.\r\n        const AudioContext = (window as any).AudioContext // our preferred impl\r\n            || (window as any).webkitAudioContext // fallback, mostly when on Safari\r\n            || false; // could not find.\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\r\n        if (!!AudioContext) {\r\n            if (sampleRate !== undefined && navigator.mediaDevices.getSupportedConstraints().sampleRate) {\r\n                return new AudioContext({ sampleRate });\r\n            } else {\r\n                return new AudioContext();\r\n            }\r\n        } else {\r\n            throw new Error(\"Browser does not support Web Audio API (AudioContext is not available).\");\r\n        }\r\n    }\r\n    /* eslint-enable */\r\n\r\n    /**\r\n     * Closes the configuration object.\r\n     * @member AudioStreamFormatImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * The format of the audio, valid values: 1 (PCM)\r\n     * @member AudioStreamFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: number;\r\n\r\n    /**\r\n     * The number of channels, valid values: 1 (Mono).\r\n     * @member AudioStreamFormatImpl.prototype.channels\r\n     * @function\r\n     * @public\r\n     */\r\n    public channels: number;\r\n\r\n    /**\r\n     * The sample rate, valid values: 16000.\r\n     * @member AudioStreamFormatImpl.prototype.samplesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public samplesPerSec: number;\r\n\r\n    /**\r\n     * The bits per sample, valid values: 16\r\n     * @member AudioStreamFormatImpl.prototype.b\r\n     * @function\r\n     * @public\r\n     */\r\n    public bitsPerSample: number;\r\n\r\n    /**\r\n     * Average bytes per second, usually calculated as nSamplesPerSec * nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.avgBytesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public avgBytesPerSec: number;\r\n\r\n    /**\r\n     * The size of a single frame, valid values: nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.blockAlign\r\n     * @function\r\n     * @public\r\n     */\r\n    public blockAlign: number;\r\n\r\n    public get header(): ArrayBuffer {\r\n        return this.privHeader;\r\n    }\r\n\r\n    protected setString(view: DataView, offset: number, str: string): void {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    IAudioDestination,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioStreamFormat,\r\n    PushAudioOutputStreamCallback\r\n} from \"../Exports\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class AudioOutputStream\r\n */\r\nexport abstract class AudioOutputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Sets the format of the AudioOutputStream\r\n     * Note: the format is set by the synthesizer before writing. Do not set it before passing it to AudioConfig\r\n     * @member AudioOutputStream.prototype.format\r\n     */\r\n    public abstract set format(format: AudioStreamFormat);\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member AudioOutputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The audio output stream being created.\r\n     */\r\n    public static createPullStream(): PullAudioOutputStream {\r\n        return PullAudioOutputStream.create();\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @class PullAudioOutputStream\r\n */\r\nexport abstract class PullAudioOutputStream extends AudioOutputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member PullAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(): PullAudioOutputStream {\r\n        return new PullAudioOutputStreamImpl();\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStream.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} Audio buffer length has been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): Promise<number>;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PullAudioOutputStreamImpl\r\n */\r\nexport class PullAudioOutputStreamImpl extends PullAudioOutputStream implements IAudioDestination {\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privId: string;\r\n    private privStream: Stream<ArrayBuffer>;\r\n    private privLastChunkView: Int8Array;\r\n\r\n    /**\r\n     * Creates and initializes an instance with the given values.\r\n     * @constructor\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new Stream<ArrayBuffer>();\r\n    }\r\n\r\n    /**\r\n     * Sets the format information to the stream. For internal use only.\r\n     * @param {AudioStreamFormat} format - the format to be set.\r\n     */\r\n    public set format(format: AudioStreamFormat) {\r\n        if (format === undefined || format === null) {\r\n            this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        this.privFormat = format as AudioOutputFormatImpl;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): AudioStreamFormat {\r\n        return this.privFormat;\r\n    }\r\n\r\n    /**\r\n     * Checks if the stream is closed\r\n     * @member PullAudioOutputStreamImpl.prototype.isClosed\r\n     * @property\r\n     * @public\r\n     */\r\n    public get isClosed(): boolean {\r\n        return this.privStream.isClosed;\r\n    }\r\n\r\n    /**\r\n     * Gets the id of the stream\r\n     * @member PullAudioOutputStreamImpl.prototype.id\r\n     * @property\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStreamImpl.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} - Audio buffer length has been read.\r\n     */\r\n    public async read(dataBuffer: ArrayBuffer): Promise<number> {\r\n        const intView: Int8Array = new Int8Array(dataBuffer);\r\n        let totalBytes: number = 0;\r\n\r\n        if (this.privLastChunkView !== undefined) {\r\n            if (this.privLastChunkView.length > dataBuffer.byteLength) {\r\n                intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\r\n                this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\r\n                return Promise.resolve(dataBuffer.byteLength);\r\n            }\r\n            intView.set(this.privLastChunkView);\r\n            totalBytes = this.privLastChunkView.length;\r\n            this.privLastChunkView = undefined;\r\n        }\r\n\r\n        // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n        while (totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded) {\r\n            const chunk: IStreamChunk<ArrayBuffer> = await this.privStream.read();\r\n            if (chunk !== undefined && !chunk.isEnd) {\r\n                let tmpBuffer: ArrayBuffer;\r\n                if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\r\n                    tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\r\n                    this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\r\n                } else {\r\n                    tmpBuffer = chunk.buffer;\r\n                }\r\n                intView.set(new Int8Array(tmpBuffer), totalBytes);\r\n                totalBytes += tmpBuffer.byteLength;\r\n            } else {\r\n                this.privStream.readEnded();\r\n            }\r\n        }\r\n        return totalBytes;\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PullAudioOutputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class PushAudioOutputStream\r\n */\r\nexport abstract class PushAudioOutputStream extends AudioOutputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * write() and close() methods.\r\n     * @member PushAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     * derived from PushAudioOutputStreamCallback\r\n     * @returns {PushAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(callback: PushAudioOutputStreamCallback): PushAudioOutputStream {\r\n        return new PushAudioOutputStreamImpl(callback);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PushAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PushAudioOutputStreamImpl\r\n */\r\nexport class PushAudioOutputStreamImpl extends PushAudioOutputStream implements IAudioDestination {\r\n    private readonly privId: string;\r\n    private privCallback: PushAudioOutputStreamCallback;\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * read() and close() methods.\r\n     * @constructor\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     * derived from PushAudioOutputStreamCallback\r\n     */\r\n    public constructor(callback: PushAudioOutputStreamCallback) {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public set format(format: AudioStreamFormat) { }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        if (!!this.privCallback.write) {\r\n            this.privCallback.write(buffer);\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (!!this.privCallback.close) {\r\n            this.privCallback.close();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { INumberDictionary } from \"../../common/Exports\";\r\nimport { SpeechSynthesisOutputFormat } from \"../SpeechSynthesisOutputFormat\";\r\nimport { AudioFormatTag, AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * @private\r\n * @class AudioOutputFormatImpl\r\n * Updated in version 1.17.0\r\n */\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class AudioOutputFormatImpl extends AudioStreamFormatImpl {\r\n    public static SpeechSynthesisOutputFormatToString: INumberDictionary<string> = {\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw]: \"raw-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren]: \"riff-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren]: \"audio-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3]: \"audio-16khz-32kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3]: \"audio-16khz-128kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3]: \"audio-16khz-64kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3]: \"audio-24khz-48kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3]: \"audio-24khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3]: \"audio-24khz-160kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk]: \"raw-16khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm]: \"riff-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm]: \"riff-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm]: \"riff-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw]: \"riff-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm]: \"raw-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm]: \"raw-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm]: \"raw-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus]: \"ogg-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus]: \"ogg-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm]: \"raw-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm]: \"riff-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3]: \"audio-48khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3]: \"audio-48khz-192kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus]: \"ogg-48khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus]: \"webm-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus]: \"webm-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus]: \"webm-24khz-16bit-24kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk]: \"raw-24khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw]: \"raw-8khz-8bit-mono-alaw\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw]: \"riff-8khz-8bit-mono-alaw\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus]: \"audio-16khz-16bit-32kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus]: \"audio-24khz-16bit-48kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus]: \"audio-24khz-16bit-24kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw22050Hz16BitMonoPcm]: \"raw-22050hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff22050Hz16BitMonoPcm]: \"riff-22050hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw44100Hz16BitMonoPcm]: \"raw-44100hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff44100Hz16BitMonoPcm]: \"riff-44100hz-16bit-mono-pcm\",\r\n    };\r\n    private priAudioFormatString: string;\r\n    /**\r\n     * audio format string for synthesis request, which may differ from priAudioFormatString.\r\n     * e.g. for riff format, we will request raw format and add a header in SDK side.\r\n     */\r\n    private readonly priRequestAudioFormatString: string;\r\n    private readonly priHasHeader: boolean;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param formatTag\r\n     * @param {number} channels - Number of channels.\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} avgBytesPerSec - Average bytes per second.\r\n     * @param {number} blockAlign - Block alignment.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {string} audioFormatString - Audio format string\r\n     * @param {string} requestAudioFormatString - Audio format string sent to service.\r\n     * @param {boolean} hasHeader - If the format has header or not.\r\n     */\r\n    public constructor(formatTag: AudioFormatTag,\r\n                       channels: number,\r\n                       samplesPerSec: number,\r\n                       avgBytesPerSec: number,\r\n                       blockAlign: number,\r\n                       bitsPerSample: number,\r\n                       audioFormatString: string,\r\n                       requestAudioFormatString: string,\r\n                       hasHeader: boolean) {\r\n        super(samplesPerSec, bitsPerSample, channels, formatTag);\r\n        this.formatTag = formatTag;\r\n        this.avgBytesPerSec = avgBytesPerSec;\r\n        this.blockAlign = blockAlign;\r\n        this.priAudioFormatString = audioFormatString;\r\n        this.priRequestAudioFormatString = requestAudioFormatString;\r\n        this.priHasHeader = hasHeader;\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormat(speechSynthesisOutputFormat?: SpeechSynthesisOutputFormat): AudioOutputFormatImpl {\r\n        if (speechSynthesisOutputFormat === undefined) {\r\n            return AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat]);\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormatString(speechSynthesisOutputFormatString: string): AudioOutputFormatImpl {\r\n        switch (speechSynthesisOutputFormatString) {\r\n            case \"raw-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"audio-16khz-16kbps-mono-siren\",\r\n                    true);\r\n            case \"audio-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-32kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    32 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-128kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    128 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-64kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    64 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-48kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    48 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-160kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    160 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-16khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n\r\n            case \"riff-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-mulaw\",\r\n                    true);\r\n            case \"raw-16khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"ogg-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    16000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    24000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"riff-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"audio-48khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-192kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    192 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-48khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    48000,\r\n                    12000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    16000,\r\n                    4000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    6000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    3000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-16bit-32kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    16000,\r\n                    4000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-48kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    24000,\r\n                    6000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    24000,\r\n                    3000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.FLAC,\r\n                    1,\r\n                    24000,\r\n                    24000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.FLAC,\r\n                    1,\r\n                    48000,\r\n                    30000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-alaw\",\r\n                    true);\r\n            case \"raw-22050hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    22050,\r\n                    44100,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-22050hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    22050,\r\n                    44100,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-22050hz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"raw-44100hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    44100,\r\n                    88200,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-44100hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    44100,\r\n                    88200,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-44100hz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-16khz-16bit-mono-pcm\":\r\n            default:\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    \"riff-16khz-16bit-mono-pcm\",\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    true);\r\n        }\r\n    }\r\n\r\n    public static getDefaultOutputFormat(): AudioOutputFormatImpl {\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            (typeof window !== \"undefined\") ? \"audio-24khz-48kbitrate-mono-mp3\" : \"riff-16khz-16bit-mono-pcm\");\r\n    }\r\n\r\n    /**\r\n     * The format tag of the audio\r\n     * @AudioFormatTag AudioOutputFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: AudioFormatTag;\r\n\r\n    /**\r\n     * Specifies if this audio output format has a header\r\n     * @boolean AudioOutputFormatImpl.prototype.hasHeader\r\n     * @function\r\n     * @public\r\n     */\r\n    public get hasHeader(): boolean {\r\n        return this.priHasHeader;\r\n    }\r\n\r\n    /**\r\n     * Specifies the header of this format\r\n     * @ArrayBuffer AudioOutputFormatImpl.prototype.header\r\n     * @function\r\n     * @public\r\n     */\r\n    public get header(): ArrayBuffer {\r\n        if (this.hasHeader) {\r\n            return this.privHeader;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Updates the header based on the audio length\r\n     * @member AudioOutputFormatImpl.updateHeader\r\n     * @function\r\n     * @public\r\n     * @param {number} audioLength - the audio length\r\n     */\r\n    public updateHeader(audioLength: number): void {\r\n        if (this.priHasHeader) {\r\n            const view = new DataView(this.privHeader);\r\n            view.setUint32(4, audioLength + this.privHeader.byteLength - 8, true);\r\n            view.setUint32(40, audioLength, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio format string to be sent to the service\r\n     * @string AudioOutputFormatImpl.prototype.requestAudioFormatString\r\n     * @function\r\n     * @public\r\n     */\r\n    public get requestAudioFormatString(): string {\r\n        return this.priRequestAudioFormatString;\r\n    }\r\n\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Define speech synthesis audio output formats.\r\n * @enum SpeechSynthesisOutputFormat\r\n * Updated in version 1.17.0\r\n */\r\nexport enum SpeechSynthesisOutputFormat {\r\n    /**\r\n     * raw-8khz-8bit-mono-mulaw\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw,\r\n     */\r\n    Raw8Khz8BitMonoMULaw,\r\n\r\n    /**\r\n     * riff-16khz-16kbps-mono-siren\r\n     * @note Unsupported by the service. Do not use this value.\r\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren\r\n     */\r\n    Riff16Khz16KbpsMonoSiren ,\r\n\r\n    /**\r\n     * audio-16khz-16kbps-mono-siren\r\n     * @note Unsupported by the service. Do not use this value.\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren\r\n     */\r\n    Audio16Khz16KbpsMonoSiren,\r\n\r\n    /**\r\n     * audio-16khz-32kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3\r\n     */\r\n    Audio16Khz32KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-16khz-128kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3\r\n     */\r\n    Audio16Khz128KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-16khz-64kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3\r\n     */\r\n    Audio16Khz64KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-48kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3\r\n     */\r\n    Audio24Khz48KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-96kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3\r\n     */\r\n    Audio24Khz96KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-160kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3\r\n     */\r\n    Audio24Khz160KBitRateMonoMp3,\r\n\r\n    /**\r\n     * raw-16khz-16bit-mono-truesilk\r\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk\r\n     */\r\n    Raw16Khz16BitMonoTrueSilk,\r\n\r\n    /**\r\n     * riff-16khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm\r\n     */\r\n    Riff16Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-8khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm\r\n     */\r\n    Riff8Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-24khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm\r\n     */\r\n    Riff24Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-8khz-8bit-mono-mulaw\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw\r\n     */\r\n    Riff8Khz8BitMonoMULaw,\r\n\r\n    /**\r\n     * raw-16khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm\r\n     */\r\n    Raw16Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-24khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm\r\n     */\r\n    Raw24Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-8khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm\r\n     */\r\n    Raw8Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * ogg-16khz-16bit-mono-opus\r\n     * @member SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus\r\n     */\r\n    Ogg16Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * ogg-24khz-16bit-mono-opus\r\n     * @member SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus\r\n     */\r\n    Ogg24Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * raw-48khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm\r\n     */\r\n    Raw48Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-48khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm\r\n     */\r\n\r\n    Riff48Khz16BitMonoPcm,\r\n    /**\r\n     * audio-48khz-96kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3\r\n     */\r\n    Audio48Khz96KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-48khz-192kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3\r\n     */\r\n    Audio48Khz192KBitRateMonoMp3,\r\n\r\n    /**\r\n     * ogg-48khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus\r\n     */\r\n    Ogg48Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * webm-16khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus\r\n     */\r\n    Webm16Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * webm-24khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus\r\n     */\r\n    Webm24Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * raw-24khz-16bit-mono-truesilk\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk\r\n     */\r\n     Raw24Khz16BitMonoTrueSilk,\r\n\r\n    /**\r\n     * raw-8khz-8bit-mono-alaw\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw\r\n     */\r\n     Raw8Khz8BitMonoALaw,\r\n\r\n    /**\r\n     * riff-8khz-8bit-mono-alaw\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw\r\n     */\r\n     Riff8Khz8BitMonoALaw,\r\n\r\n    /**\r\n     * webm-24khz-16bit-24kbps-mono-opus\r\n     * Audio compressed by OPUS codec in a webm container, with bitrate of 24kbps, optimized for IoT scenario.\r\n     * Added in version 1.19.0\r\n     * @member SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus\r\n     */\r\n    Webm24Khz16Bit24KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-16khz-16bit-32kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 32kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus\r\n     */\r\n    Audio16Khz16Bit32KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-24khz-16bit-48kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 48kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus\r\n     */\r\n    Audio24Khz16Bit48KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-24khz-16bit-24kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 24kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus\r\n     */\r\n    Audio24Khz16Bit24KbpsMonoOpus,\r\n\r\n    /**\r\n     * raw-22050hz-16bit-mono-pcm\r\n     * Raw PCM audio at 22050Hz sampling rate and 16-bit depth.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Raw22050Hz16BitMonoPcm\r\n     */\r\n    Raw22050Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-22050hz-16bit-mono-pcm\r\n     * PCM audio at 22050Hz sampling rate and 16-bit depth, with RIFF header.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Riff22050Hz16BitMonoPcm\r\n     */\r\n    Riff22050Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-44100hz-16bit-mono-pcm\r\n     * Raw PCM audio at 44100Hz sampling rate and 16-bit depth.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Raw44100Hz16BitMonoPcm\r\n     */\r\n    Raw44100Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-44100hz-16bit-mono-pcm\r\n     * PCM audio at 44100Hz sampling rate and 16-bit depth, with RIFF header.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Riff44100Hz16BitMonoPcm\r\n     */\r\n    Riff44100Hz16BitMonoPcm\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be canceled.\r\n * @class CancellationReason\r\n */\r\nexport enum CancellationReason {\r\n    /**\r\n     * Indicates that an error occurred during speech recognition.\r\n     * @member CancellationReason.Error\r\n     */\r\n    Error,\r\n\r\n    /**\r\n     * Indicates that the end of the audio stream was reached.\r\n     * @member CancellationReason.EndOfStream\r\n     */\r\n    EndOfStream,\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n /**\r\n  * An abstract base class that defines callback methods (read() and close()) for\r\n  * custom audio input streams).\r\n  * @class PullAudioInputStreamCallback\r\n  */\r\nexport abstract class PullAudioInputStreamCallback {\r\n\r\n    /**\r\n     * Reads data from audio input stream into the data buffer. The maximal number of bytes\r\n     * to be read is determined by the size of dataBuffer.\r\n     * @member PullAudioInputStreamCallback.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The byte array to store the read data.\r\n     * @returns {number} the number of bytes have been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): number;\r\n\r\n    /**\r\n     * Closes the audio input stream.\r\n     * @member PullAudioInputStreamCallback.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * An abstract base class that defines callback methods (write() and close()) for\r\n * custom audio output streams).\r\n * @class PushAudioOutputStreamCallback\r\n */\r\nexport abstract class PushAudioOutputStreamCallback {\r\n\r\n    /**\r\n     * Writes audio data into the data buffer.\r\n     * @member PushAudioOutputStreamCallback.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The byte array that stores the audio data to write.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the audio output stream.\r\n     * @member PushAudioOutputStreamCallback.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\n\r\n/**\r\n * Represents a keyword recognition model for recognizing when\r\n * the user says a keyword to initiate further speech recognition.\r\n * @class KeywordRecognitionModel\r\n */\r\nexport class KeywordRecognitionModel {\r\n    private privDisposed: boolean = false;\r\n\r\n    /**\r\n     * Create and initializes a new instance.\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromFile\r\n     * @function\r\n     * @public\r\n     * @param {string} fileName - A string that represents file name for the keyword recognition model.\r\n     * Note, the file can point to a zip file in which case the model\r\n     * will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromFile(fileName: string): KeywordRecognitionModel {\r\n        Contracts.throwIfFileDoesNotExist(fileName, \"fileName\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromStream\r\n     * @function\r\n     * @public\r\n     * @param {string} file - A File that represents file for the keyword recognition model.\r\n     * Note, the file can point to a zip file in which case the model will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromStream(file: File): KeywordRecognitionModel {\r\n        Contracts.throwIfNull(file, \"file\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member KeywordRecognitionModel.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines content for session events like SessionStarted/Stopped, SoundStarted/Stopped.\r\n * @class SessionEventArgs\r\n */\r\nexport class SessionEventArgs {\r\n    private privSessionId: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    /**\r\n     * Represents the session identifier.\r\n     * @member SessionEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Represents the session identifier.\r\n     */\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SessionEventArgs } from \"./Exports\";\r\n\r\n/**\r\n * Defines payload for session events like Speech Start/End Detected\r\n * @class\r\n */\r\nexport class RecognitionEventArgs extends SessionEventArgs {\r\n    private privOffset: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(offset: number, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privOffset = offset;\r\n    }\r\n\r\n    /**\r\n     * Represents the message offset\r\n     * @member RecognitionEventArgs.prototype.offset\r\n     * @function\r\n     * @public\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Define Speech Recognizer output formats.\r\n * @class OutputFormat\r\n */\r\nexport enum OutputFormat {\r\n    /**\r\n     * @member OutputFormat.Simple\r\n     */\r\n    Simple = 0,\r\n\r\n    /**\r\n     * @member OutputFormat.Detailed\r\n     */\r\n    Detailed,\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IntentRecognitionResult, RecognitionEventArgs } from \"./Exports\";\r\n\r\n/**\r\n * Intent recognition result event arguments.\r\n * @class\r\n */\r\nexport class IntentRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: IntentRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param result - The result of the intent recognition.\r\n     * @param offset - The offset.\r\n     * @param sessionId - The session id.\r\n     */\r\n    public constructor(result: IntentRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Represents the intent recognition result.\r\n     * @member IntentRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {IntentRecognitionResult} Represents the intent recognition result.\r\n     */\r\n    public get result(): IntentRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason } from \"./Exports\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class RecognitionResult\r\n */\r\nexport class RecognitionResult {\r\n    private privResultId: string;\r\n    private privReason: ResultReason;\r\n    private privText: string;\r\n    private privDuration: number;\r\n    private privOffset: number;\r\n    private privLanguage: string;\r\n    private privLanguageDetectionConfidence: string;\r\n    private privErrorDetails: string;\r\n    private privJson: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string, duration?: number,\r\n                offset?: number, language?: string, languageDetectionConfidence?: string, errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privText = text;\r\n        this.privDuration = duration;\r\n        this.privOffset = offset;\r\n        this.privLanguage = language;\r\n        this.privLanguageDetectionConfidence = languageDetectionConfidence;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privJson = json;\r\n        this.privProperties = properties;\r\n    }\r\n\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member RecognitionResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    public get resultId(): string {\r\n        return this.privResultId;\r\n    }\r\n\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member RecognitionResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * Presents the recognized text in the result.\r\n     * @member RecognitionResult.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} Presents the recognized text in the result.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n\r\n    /**\r\n     * Duration of recognized speech in 100 nano second increments.\r\n     * @member RecognitionResult.prototype.duration\r\n     * @function\r\n     * @public\r\n     * @returns {number} Duration of recognized speech in 100 nano second increments.\r\n     */\r\n    public get duration(): number {\r\n        return this.privDuration;\r\n    }\r\n\r\n    /**\r\n     * Offset of recognized speech in 100 nano second increments.\r\n     * @member RecognitionResult.prototype.offset\r\n     * @function\r\n     * @public\r\n     * @returns {number} Offset of recognized speech in 100 nano second increments.\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n\r\n    /**\r\n     * Primary Language detected.\r\n     * @member RecognitionResult.prototype.language\r\n     * @function\r\n     * @public\r\n     * @returns {string} language detected.\r\n     */\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    /**\r\n     * Primary Language detection confidence (Unknown, Low, Medium, High).\r\n     * @member RecognitionResult.prototype.languageDetectionConfidence\r\n     * @function\r\n     * @public\r\n     * @returns {string} detection confidence strength.\r\n     */\r\n    public get languageDetectionConfidence(): string {\r\n        return this.privLanguageDetectionConfidence;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member RecognitionResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * A string containing Json serialized recognition result as it was received from the service.\r\n     * @member RecognitionResult.prototype.json\r\n     * @function\r\n     * @private\r\n     * @returns {string} Json serialized representation of the result.\r\n     */\r\n    public get json(): string {\r\n        return this.privJson;\r\n    }\r\n\r\n    /**\r\n     * The set of properties exposed in the result.\r\n     * @member RecognitionResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"./Exports\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class SpeechRecognitionResult\r\n */\r\nexport class SpeechRecognitionResult extends RecognitionResult {\r\n    private readonly privSpeakerId: string;\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} speakerId - speaker id for conversation transcription, if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string,\r\n                       duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, speakerId?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\r\n        this.privSpeakerId = speakerId;\r\n    }\r\n\r\n    /**\r\n     * speaker id from conversation transcription/id scenarios\r\n     * @member SpeechRecognitionResult.prototype.speakerId\r\n     * @function\r\n     * @public\r\n     * @returns {string} id of speaker in given result\r\n     */\r\n    public get speakerId(): string {\r\n        return this.privSpeakerId;\r\n    }\r\n\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult } from \"./Exports\";\r\n\r\n/**\r\n * Intent recognition result.\r\n * @class\r\n */\r\nexport class IntentRecognitionResult extends SpeechRecognitionResult {\r\n    private privIntentId: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param intentId - The intent id.\r\n     * @param resultId - The result id.\r\n     * @param reason - The reason.\r\n     * @param text - The recognized text.\r\n     * @param duration - The duration.\r\n     * @param offset - The offset into the stream.\r\n     * @param language - Primary Language detected, if provided.\r\n     * @param languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param errorDetails - Error details, if provided.\r\n     * @param json - Additional Json, if provided.\r\n     * @param properties - Additional properties, if provided.\r\n     */\r\n    public constructor(intentId?: string, resultId?: string, reason?: ResultReason, text?: string,\r\n                duration?: number, offset?: number, language?: string, languageDetectionConfidence?: string,\r\n                errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, undefined, errorDetails, json, properties);\r\n\r\n        this.privIntentId = intentId;\r\n    }\r\n\r\n    /**\r\n     * A String that represents the intent identifier being recognized.\r\n     * @member IntentRecognitionResult.prototype.intentId\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the intent identifier being recognized.\r\n     */\r\n    public get intentId(): string {\r\n        return this.privIntentId;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport { Contracts } from \"./Contracts\";\r\n\r\n/**\r\n * Language understanding model\r\n * @class LanguageUnderstandingModel\r\n */\r\nexport class LanguageUnderstandingModel {\r\n    /**\r\n     * Creates and initializes a new instance\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the specified endpoint.\r\n     * @member LanguageUnderstandingModel.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} uri - A String that represents the endpoint of the language understanding model.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromEndpoint(uri: URL): LanguageUnderstandingModel {\r\n        Contracts.throwIfNull(uri, \"uri\");\r\n        Contracts.throwIfNullOrWhitespace(uri.hostname, \"uri\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        // Need to extract the app ID from the URL.\r\n        // URL is in the format: https://<region>.api.cognitive.microsoft.com/luis/v2.0/apps/<Guid>?subscription-key=<key>&timezoneOffset=-360\r\n\r\n        // Start tearing the string apart.\r\n\r\n        // region can be extracted from the host name.\r\n        const firstDot: number = uri.host.indexOf(\".\");\r\n        if (-1 === firstDot) {\r\n            throw new Error(\"Could not determine region from endpoint\");\r\n        }\r\n        langModelImp.region = uri.host.substr(0, firstDot);\r\n\r\n        // Now the app ID.\r\n\r\n        const lastSegment: number = uri.pathname.lastIndexOf(\"/\") + 1;\r\n        if (-1 === lastSegment) {\r\n            throw new Error(\"Could not determine appId from endpoint\");\r\n        }\r\n\r\n        langModelImp.appId = uri.pathname.substr(lastSegment);\r\n\r\n        // And finally the key.\r\n        langModelImp.subscriptionKey = uri.searchParams.get(\"subscription-key\");\r\n        if (undefined === langModelImp.subscriptionKey) {\r\n            throw new Error(\"Could not determine subscription key from endpoint\");\r\n        }\r\n\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the application id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromAppId\r\n     * @function\r\n     * @public\r\n     * @param {string} appId - A String that represents the application id of Language Understanding service.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromAppId(appId: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates a language understanding model using hostname, subscription key and application\r\n     * id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - A String that represents the subscription key of\r\n     * Language Understanding service.\r\n     * @param {string} appId - A String that represents the application id of Language\r\n     * Understanding service.\r\n     * @param {LanguageUnderstandingModel} region - A String that represents the region\r\n     * of the Language Understanding service (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, appId: string, region: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        langModelImp.region = region;\r\n        langModelImp.subscriptionKey = subscriptionKey;\r\n        return langModelImp;\r\n    }\r\n}\r\n\r\n/**\r\n * @private\r\n * @class LanguageUnderstandingModelImpl\r\n */\r\nexport class LanguageUnderstandingModelImpl extends LanguageUnderstandingModel {\r\n    public appId: string;\r\n    public region: string;\r\n    public subscriptionKey: string;\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { RecognitionEventArgs, SpeechRecognitionResult, ConversationTranscriptionResult } from \"./Exports\";\r\n\r\n/**\r\n * Defines contents of speech recognizing/recognized event.\r\n * @class SpeechRecognitionEventArgs\r\n */\r\nexport class SpeechRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: SpeechRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechRecognitionResult} result - The speech recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: SpeechRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member SpeechRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): SpeechRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines contents of conversation transcribed/transcribing event.\r\n * @class ConversationTranscriptionEventArgs\r\n */\r\nexport class ConversationTranscriptionEventArgs extends RecognitionEventArgs {\r\n    private privResult: ConversationTranscriptionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ConversationTranscriptionResult} result - The conversation transcription result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: ConversationTranscriptionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the transcription result.\r\n     * @member ConversationTranscription1EventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {ConversationTranscriptionResult} the recognition result.\r\n     */\r\n        public get result(): ConversationTranscriptionResult {\r\n            return this.privResult;\r\n        }\r\n}\r\n\r\n/**\r\n * Defines contents of meeting transcribed/transcribing event.\r\n * @class MeetingTranscriptionEventArgs\r\n */\r\nexport class MeetingTranscriptionEventArgs extends SpeechRecognitionEventArgs {\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase\";\r\n\r\nexport class SpeechRecognitionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationEventArgs,\r\n    CancellationReason,\r\n    RecognitionEventArgs\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines content of a CancellationEvent.\r\n * @class CancellationEventArgsBase\r\n */\r\nexport class CancellationEventArgsBase extends RecognitionEventArgs implements CancellationEventArgs {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(reason: CancellationReason, errorDetails: string,\r\n                       errorCode: CancellationErrorCode, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member CancellationEventArgsBase.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful operation.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful operation, provides details of the occurred error.\r\n     * @member CancellationEventArgsBase.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionEventArgs, TranslationRecognitionResult } from \"./Exports\";\r\n\r\n/**\r\n * Translation text result event arguments.\r\n * @class TranslationRecognitionEventArgs\r\n */\r\nexport class TranslationRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: TranslationRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {TranslationRecognitionResult} result - The translation recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: TranslationRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member TranslationRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): TranslationRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SessionEventArgs, TranslationSynthesisResult } from \"./Exports\";\r\n\r\n/**\r\n * Translation Synthesis event arguments\r\n * @class TranslationSynthesisEventArgs\r\n */\r\nexport class TranslationSynthesisEventArgs extends SessionEventArgs {\r\n    private privResult: TranslationSynthesisResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {TranslationSynthesisResult} result - The translation synthesis result.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: TranslationSynthesisResult, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the translation synthesis result.\r\n     * @member TranslationSynthesisEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationSynthesisResult} Specifies the translation synthesis result.\r\n     */\r\n    public get result(): TranslationSynthesisResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult, Translations } from \"./Exports\";\r\n\r\n/**\r\n * Translation text result.\r\n * @class TranslationRecognitionResult\r\n */\r\nexport class TranslationRecognitionResult extends SpeechRecognitionResult {\r\n    private privTranslations: Translations;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {Translations} translations - The translations.\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(translations: Translations, resultId?: string, reason?: ResultReason,\r\n                       text?: string, duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, undefined, errorDetails, json, properties);\r\n\r\n        this.privTranslations = translations;\r\n    }\r\n\r\n    public static fromSpeechRecognitionResult(result: SpeechRecognitionResult): TranslationRecognitionResult {\r\n        return new TranslationRecognitionResult(undefined, result.resultId, result.reason, result.text, result.duration, result.offset, result.language, result.languageDetectionConfidence, result.errorDetails, result.json, result.properties);\r\n    }\r\n\r\n    /**\r\n     * Presents the translation results. Each item in the dictionary represents\r\n     * a translation result in one of target languages, where the key is the name\r\n     * of the target language, in BCP-47 format, and the value is the translation\r\n     * text in the specified language.\r\n     * @member TranslationRecognitionResult.prototype.translations\r\n     * @function\r\n     * @public\r\n     * @returns {Translations} the current translation map that holds all translations requested.\r\n     */\r\n    public get translations(): Translations {\r\n        return this.privTranslations;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ResultReason } from \"./ResultReason\";\r\n\r\n/**\r\n * Defines translation synthesis result, i.e. the voice output of the translated\r\n * text in the target language.\r\n * @class TranslationSynthesisResult\r\n */\r\nexport class TranslationSynthesisResult {\r\n    private privReason: ResultReason;\r\n    private privAudio: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ResultReason} reason - The synthesis reason.\r\n     * @param {ArrayBuffer} audio - The audio data.\r\n     */\r\n    public constructor(reason: ResultReason, audio: ArrayBuffer) {\r\n        this.privReason = reason;\r\n        this.privAudio = audio;\r\n    }\r\n\r\n    /**\r\n     * Translated text in the target language.\r\n     * @member TranslationSynthesisResult.prototype.audio\r\n     * @function\r\n     * @public\r\n     * @returns {ArrayBuffer} Translated audio in the target language.\r\n     */\r\n    public get audio(): ArrayBuffer {\r\n        return this.privAudio;\r\n    }\r\n\r\n    /**\r\n     * The synthesis status.\r\n     * @member TranslationSynthesisResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} The synthesis status.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be generated.\r\n * @class ResultReason\r\n */\r\nexport enum ResultReason {\r\n    /**\r\n     * Indicates speech could not be recognized. More details\r\n     * can be found in the NoMatchDetails object.\r\n     * @member ResultReason.NoMatch\r\n     */\r\n    NoMatch,\r\n\r\n    /**\r\n     * Indicates that the recognition was canceled. More details\r\n     * can be found using the CancellationDetails object.\r\n     * @member ResultReason.Canceled\r\n     */\r\n    Canceled,\r\n\r\n    /**\r\n     * Indicates the speech result contains hypothesis text.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizingSpeech,\r\n\r\n    /**\r\n     * Indicates the speech result contains final text that has been recognized.\r\n     * Speech Recognition is now complete for this phrase.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizedSpeech,\r\n\r\n    /**\r\n     * Indicates the speech result contains a finalized acceptance of a provided keyword.\r\n     * Speech recognition will continue unless otherwise configured.\r\n     * @member ResultReason.RecognizedKeyword\r\n     */\r\n    RecognizedKeyword,\r\n\r\n    /**\r\n     * Indicates the intent result contains hypothesis text and intent.\r\n     * @member ResultReason.RecognizingIntent\r\n     */\r\n    RecognizingIntent,\r\n\r\n    /**\r\n     * Indicates the intent result contains final text and intent.\r\n     * Speech Recognition and Intent determination are now complete for this phrase.\r\n     * @member ResultReason.RecognizedIntent\r\n     */\r\n    RecognizedIntent,\r\n\r\n    /**\r\n     * Indicates the translation result contains hypothesis text and its translation(s).\r\n     * @member ResultReason.TranslatingSpeech\r\n     */\r\n    TranslatingSpeech,\r\n\r\n    /**\r\n     * Indicates the translation result contains final text and corresponding translation(s).\r\n     * Speech Recognition and Translation are now complete for this phrase.\r\n     * @member ResultReason.TranslatedSpeech\r\n     */\r\n    TranslatedSpeech,\r\n\r\n    /**\r\n     * Indicates the synthesized audio result contains a non-zero amount of audio data\r\n     * @member ResultReason.SynthesizingAudio\r\n     */\r\n    SynthesizingAudio,\r\n\r\n    /**\r\n     * Indicates the synthesized audio is now complete for this phrase.\r\n     * @member ResultReason.SynthesizingAudioCompleted\r\n     */\r\n    SynthesizingAudioCompleted,\r\n\r\n    /**\r\n     * Indicates the speech synthesis is now started\r\n     * @member ResultReason.SynthesizingAudioStarted\r\n     */\r\n    SynthesizingAudioStarted,\r\n\r\n    /**\r\n     * Indicates the voice profile is being enrolled and customers need to send more audio to create a voice profile.\r\n     * @member ResultReason.EnrollingVoiceProfile\r\n     */\r\n    EnrollingVoiceProfile,\r\n\r\n    /**\r\n     * Indicates the voice profile has been enrolled.\r\n     * @member ResultReason.EnrolledVoiceProfile\r\n     */\r\n    EnrolledVoiceProfile,\r\n\r\n    /**\r\n     * Indicates successful identification of some speakers.\r\n     * @member ResultReason.RecognizedSpeakers\r\n     */\r\n    RecognizedSpeakers,\r\n\r\n    /**\r\n     * Indicates successfully verified one speaker.\r\n     * @member ResultReason.RecognizedSpeaker\r\n     */\r\n    RecognizedSpeaker,\r\n\r\n    /**\r\n     * Indicates a voice profile has been reset successfully.\r\n     * @member ResultReason.ResetVoiceProfile\r\n     */\r\n    ResetVoiceProfile,\r\n\r\n    /**\r\n     * Indicates a voice profile has been deleted successfully.\r\n     * @member ResultReason.DeletedVoiceProfile\r\n     */\r\n    DeletedVoiceProfile,\r\n\r\n    /**\r\n     * Indicates synthesis voices list has been successfully retrieved.\r\n     * @member ResultReason.VoicesListRetrieved\r\n     */\r\n    VoicesListRetrieved,\r\n\r\n    /**\r\n     * Indicates the transcription result contains hypothesis text and its translation(s) for\r\n     * other participants in the conversation.\r\n     * @member ResultReason.TranslatingParticipantSpeech\r\n     */\r\n    TranslatingParticipantSpeech,\r\n\r\n    /**\r\n     * Indicates the transcription result contains final text and corresponding translation(s)\r\n     * for other participants in the conversation. Speech Recognition and Translation are now\r\n     * complete for this phrase.\r\n     * @member ResultReason.TranslatedParticipantSpeech\r\n     */\r\n    TranslatedParticipantSpeech,\r\n\r\n    /**\r\n     * <summary>\r\n     * Indicates the transcription result contains the instant message and corresponding\r\n     * translation(s).\r\n     * @member ResultReason.TranslatedInstantMessage\r\n     */\r\n    TranslatedInstantMessage,\r\n\r\n    /**\r\n     * Indicates the transcription result contains the instant message for other participants\r\n     * in the conversation and corresponding translation(s).\r\n     * @member ResultReason.TranslatedParticipantInstantMessage\r\n     */\r\n    TranslatedParticipantInstantMessage,\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports\";\r\nimport {IStringDictionary} from \"../common/Exports\";\r\nimport {Contracts} from \"./Contracts\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SpeechSynthesisOutputFormat,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Speech configuration.\r\n * @class SpeechConfig\r\n */\r\nexport abstract class SpeechConfig {\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechConfig returned by passing subscriptionKey and service region.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * @member SpeechConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} The speech factory\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * For example, if language is defined in the uri as query parameter \"language=de-DE\", and also set by\r\n     * SpeechConfig.speechRecognitionLanguage = \"en-US\", the language setting in uri takes precedence,\r\n     * and the effective language is \"de-DE\". Only the parameters that are not specified in the\r\n     * endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     * use the authorization token.\r\n     * @member SpeechConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech factory with specified initial authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key in case you want\r\n     * to use the Intent recognizer. As configuration values are copied when creating a new recognizer,\r\n     * the new token value will not apply to recognizers that have already been created. For recognizers\r\n     * that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The initial authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNull(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.authorizationToken = authorizationToken;\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Gets the authorization token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get authorizationToken(): string;\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n    /**\r\n     * Gets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * get synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} Returns the output format.\r\n     */\r\n    public abstract get outputFormat(): OutputFormat;\r\n\r\n    /**\r\n     * Gets/Sets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * set synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set outputFormat(format: OutputFormat);\r\n\r\n    /**\r\n     * Gets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @return {string} The endpoint ID\r\n     */\r\n    public abstract get endpointId(): string;\r\n\r\n    /**\r\n     * Gets/Sets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The endpoint ID\r\n     */\r\n    public abstract set endpointId(value: string);\r\n\r\n    /**\r\n     * Closes the configuration.\r\n     * @member SpeechConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public close(): void { }\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     * @return {string} The subscription key set on the config.\r\n     */\r\n    public abstract get subscriptionKey(): string;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.region\r\n     * @function\r\n     * @public\r\n     * @return {region} The region set on the config.\r\n     */\r\n    public abstract get region(): string;\r\n\r\n    /**\r\n     * Sets a property value that will be passed to service using the specified channel.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * Sets profanity option.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.setProfanity\r\n     * @function\r\n     * @public\r\n     * @param {profanity} Profanity option to set.\r\n     */\r\n    public abstract setProfanity(profanity: ProfanityOption): void;\r\n\r\n    /**\r\n     * Enable audio logging in service.\r\n     * Audio and content logs are stored either in Microsoft-owned storage, or in your own storage account linked\r\n     * to your Cognitive Services subscription (Bring Your Own Storage (BYOS) enabled Speech resource).\r\n     * The logs will be removed after 30 days.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.enableAudioLogging\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract enableAudioLogging(): void;\r\n\r\n    /**\r\n     * Includes word-level timestamps.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.requestWordLevelTimestamps\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract requestWordLevelTimestamps(): void;\r\n\r\n    /**\r\n     * Enable dictation. Only supported in speech continuous recognition.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.enableDictation\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract enableDictation(): void;\r\n\r\n    /**\r\n     * Gets the language of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis language.\r\n     */\r\n    public abstract get speechSynthesisLanguage(): string;\r\n\r\n    /**\r\n     * Sets the language of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisLanguage(language: string);\r\n\r\n    /**\r\n     * Gets the voice of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis voice.\r\n     */\r\n    public abstract get speechSynthesisVoiceName(): string;\r\n\r\n    /**\r\n     * Sets the voice of the speech synthesizer. (see <a href=\"https://aka.ms/speech/tts-languages\">available voices</a>).\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisVoiceName(voice: string);\r\n\r\n    /**\r\n     * Gets the speech synthesis output format.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisOutputFormat} Returns the speech synthesis output format\r\n     */\r\n    public abstract get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat;\r\n\r\n    /**\r\n     * Sets the speech synthesis output format (e.g. Riff16Khz16BitMonoPcm).\r\n     * The default format is Audio16Khz64KBitRateMonoMp3 for browser and Riff16Khz16BitMonoPcm for Node.JS.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat);\r\n}\r\n\r\n/**\r\n * @public\r\n * @class SpeechConfigImpl\r\n */\r\nexport class SpeechConfigImpl extends SpeechConfig {\r\n\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privProperties = new PropertyCollection();\r\n        this.speechRecognitionLanguage = \"en-US\"; // Should we have a default?\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get endPoint(): URL {\r\n        return new URL(this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Endpoint));\r\n    }\r\n\r\n    public get subscriptionKey(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n    }\r\n\r\n    public get region(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public set speechRecognitionLanguage(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages);\r\n    }\r\n\r\n    public set autoDetectSourceLanguages(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, value);\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return OutputFormat[this.privProperties.getProperty(OutputFormatPropertyName, undefined) as keyof typeof OutputFormat];\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    public get endpointId(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    public set endpointId(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        this.privProperties.setProperty(name, value);\r\n    }\r\n\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n\r\n        return this.privProperties.getProperty(name, def);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword as string);\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public clone(): SpeechConfigImpl {\r\n        const ret: SpeechConfigImpl = new SpeechConfigImpl();\r\n        ret.privProperties = this.privProperties.clone();\r\n        return ret;\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        return SpeechSynthesisOutputFormat[this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined) as keyof typeof SpeechSynthesisOutputFormat];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports\";\r\nimport { IStringDictionary } from \"../common/Exports\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechConfig,\r\n    SpeechSynthesisOutputFormat,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Speech translation configuration.\r\n * @class SpeechTranslationConfig\r\n */\r\nexport abstract class SpeechTranslationConfig extends SpeechConfig {\r\n\r\n    /**\r\n     * Creates an instance of recognizer config.\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.\r\n     * @member SpeechTranslationConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by setting the property authorizationToken with a new\r\n     * valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance\r\n     * will encounter errors during recognition.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply\r\n     * to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechTranslationConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech translation config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or paramters.\r\n     * Note: The query properties specified in the endpoint URL are not changed, even if they are\r\n     * set by any other APIs. For example, if language is defined in the uri as query parameter\r\n     * \"language=de-DE\", and also set by the speechRecognitionLanguage property, the language\r\n     * setting in uri takes precedence, and the effective language is \"de-DE\".\r\n     * Only the properties that are not specified in the endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     * use the authorization token.\r\n     * @member SpeechTranslationConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @returns {SpeechTranslationConfig} A speech config instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n        Contracts.throwIfNull(subscriptionKey, \"subscriptionKey\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechTranslationConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Gets/Sets the speech recognition language.\r\n     * @member SpeechTranslationConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract addTargetLanguage(value: string): void;\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract get targetLanguages(): string[];\r\n\r\n    /**\r\n     * Gets the selected voice name.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} The voice name.\r\n     */\r\n    public abstract get voiceName(): string;\r\n\r\n    /**\r\n     * Gets/Sets voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public abstract set voiceName(value: string);\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member SpeechTranslationConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class SpeechTranslationConfigImpl\r\n */\r\nexport class SpeechTranslationConfigImpl extends SpeechTranslationConfig {\r\n\r\n    private privSpeechProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechProperties = new PropertyCollection();\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * If this is set, subscription key is ignored.\r\n     * User needs to make sure the provided authorization token is valid and not expired.\r\n     * @member SpeechTranslationConfigImpl.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @return {string} The speechRecognitionLanguage.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     */\r\n    public get subscriptionKey(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        // eslint-disable-next-line\r\n        return (OutputFormat as any)[this.privSpeechProperties.getProperty(OutputFormatPropertyName, undefined)];\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    /**\r\n     * Gets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public get endpointId(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public set endpointId(value: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public addTargetLanguage(value: string): void {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        const languages: string[] = this.targetLanguages;\r\n        languages.push(value);\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n    }\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public get targetLanguages(): string[] {\r\n\r\n        if (this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n        } else {\r\n            return [];\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the voice name.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     */\r\n    public get voiceName(): string {\r\n        return this.getProperty(PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public set voiceName(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationVoice, value);\r\n    }\r\n\r\n    /**\r\n     * Provides the region.\r\n     * @member SpeechTranslationConfigImpl.prototype.region\r\n     * @function\r\n     * @public\r\n     * @returns {string} The region.\r\n     */\r\n    public get region(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword as string);\r\n    }\r\n\r\n    /**\r\n     * Gets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} def - The default value of the property in case it is not set.\r\n     * @returns {string} The value of the property.\r\n     */\r\n    public getProperty(name: string, def?: string): string {\r\n        return this.privSpeechProperties.getProperty(name, def);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The value of the property.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechProperties.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member SpeechTranslationConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechProperties;\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privSpeechProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privSpeechProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privSpeechProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        // eslint-disable-next-line\r\n        return (SpeechSynthesisOutputFormat as any)[this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Represents collection of properties and their values.\r\n * @class PropertyCollection\r\n */\r\nexport class PropertyCollection {\r\n    private privKeys: string[] = [] as string[];\r\n    private privValues: string[] = [] as string[];\r\n\r\n    /**\r\n     * Returns the property value in type String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member PropertyCollection.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string | number | boolean} def - The default value which is returned if the parameter\r\n     * is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public getProperty(key: PropertyId | string, def?: string | number | boolean): string {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                return this.privValues[n];\r\n            }\r\n        }\r\n\r\n        if (def === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        return String(def);\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member PropertyCollection.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public setProperty(key: string | PropertyId, value: string): void {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                this.privValues[n] = value;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.privKeys.push(keyToUse);\r\n        this.privValues.push(value);\r\n    }\r\n\r\n    /**\r\n     * Clones the collection.\r\n     * @member PropertyCollection.prototype.clone\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} A copy of the collection.\r\n     */\r\n    public clone(): PropertyCollection {\r\n        const clonedMap = new PropertyCollection();\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            clonedMap.privKeys.push(this.privKeys[n]);\r\n            clonedMap.privValues.push(this.privValues[n]);\r\n        }\r\n\r\n        return clonedMap;\r\n    }\r\n\r\n    /**\r\n     * Merges this set of properties into another, no overwrites.\r\n     * @member PropertyCollection.prototype.mergeTo\r\n     * @function\r\n     * @public\r\n     * @param {PropertyCollection}  destinationCollection - The collection to merge into.\r\n     */\r\n    public mergeTo(destinationCollection: PropertyCollection): void {\r\n        this.privKeys.forEach((key: string | PropertyId): void => {\r\n            if (destinationCollection.getProperty(key, undefined) === undefined) {\r\n                const value = this.getProperty(key);\r\n                destinationCollection.setProperty(key, value);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the keys in Property Collection.\r\n     * @member PropertyCollection.prototype.keys\r\n     * @function\r\n     * @public\r\n     * @returns {string []} Keys in the collection.\r\n     */\r\n    public get keys(): string[] {\r\n        return this.privKeys;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines speech property ids.\r\n * @class PropertyId\r\n */\r\nexport enum PropertyId {\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service subscription Key. If you are using an intent recognizer, you need to\r\n     * specify the LUIS endpoint key for your particular LUIS app. Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromSubscription]].\r\n     * @member PropertyId.SpeechServiceConnection_Key\r\n     */\r\n    SpeechServiceConnection_Key = 0,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service endpoint (url). Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromEndpoint]].\r\n     * NOTE: This endpoint is not the same as the endpoint used to obtain an access token.\r\n     * @member PropertyId.SpeechServiceConnection_Endpoint\r\n     */\r\n    SpeechServiceConnection_Endpoint,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service region. Under normal circumstances, you shouldn't have to\r\n     * use this property directly.\r\n     * Instead, use [[SpeechConfig.fromSubscription]], [[SpeechConfig.fromEndpoint]], [[SpeechConfig.fromAuthorizationToken]].\r\n     * @member PropertyId.SpeechServiceConnection_Region\r\n     */\r\n    SpeechServiceConnection_Region,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service authorization token (aka access token). Under normal circumstances,\r\n     * you shouldn't have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromAuthorizationToken]], [[SpeechRecognizer.authorizationToken]],\r\n     * [[IntentRecognizer.authorizationToken]], [[TranslationRecognizer.authorizationToken]], [[SpeakerRecognizer.authorizationToken]].\r\n     * @member PropertyId.SpeechServiceAuthorization_Token\r\n     */\r\n    SpeechServiceAuthorization_Token,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service authorization type. Currently unused.\r\n     * @member PropertyId.SpeechServiceAuthorization_Type\r\n     */\r\n    SpeechServiceAuthorization_Type,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service endpoint id. Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.endpointId]].\r\n     * NOTE: The endpoint id is available in the Speech Portal, listed under Endpoint Details.\r\n     * @member PropertyId.SpeechServiceConnection_EndpointId\r\n     */\r\n    SpeechServiceConnection_EndpointId,\r\n\r\n    /**\r\n     * The list of comma separated languages (BCP-47 format) used as target translation languages. Under normal circumstances,\r\n     * you shouldn't have to use this property directly.\r\n     * Instead use [[SpeechTranslationConfig.addTargetLanguage]],\r\n     * [[SpeechTranslationConfig.targetLanguages]], [[TranslationRecognizer.targetLanguages]].\r\n     * @member PropertyId.SpeechServiceConnection_TranslationToLanguages\r\n     */\r\n    SpeechServiceConnection_TranslationToLanguages,\r\n\r\n    /**\r\n     * The name of the Cognitive Service Text to Speech Service Voice. Under normal circumstances, you shouldn't have to use this\r\n     * property directly.\r\n     * Instead, use [[SpeechTranslationConfig.voiceName]].\r\n     * NOTE: Valid voice names can be found <a href=\"https://aka.ms/csspeech/voicenames\">here</a>.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationVoice\r\n     */\r\n    SpeechServiceConnection_TranslationVoice,\r\n\r\n    /**\r\n     * Translation features.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationFeatures\r\n     */\r\n    SpeechServiceConnection_TranslationFeatures,\r\n\r\n    /**\r\n     * The Language Understanding Service Region. Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Instead, use [[LanguageUnderstandingModel]].\r\n     * @member PropertyId.SpeechServiceConnection_IntentRegion\r\n     */\r\n    SpeechServiceConnection_IntentRegion,\r\n\r\n    /**\r\n     * The host name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyHostName,\r\n\r\n    /**\r\n     * The port of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyPort,\r\n\r\n    /**\r\n     * The user name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyUserName,\r\n\r\n    /**\r\n     * The password of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyPassword,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service recognition Mode. Can be \"INTERACTIVE\", \"CONVERSATION\", \"DICTATION\".\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * @member PropertyId.SpeechServiceConnection_RecoMode\r\n     */\r\n    SpeechServiceConnection_RecoMode,\r\n\r\n    /**\r\n     * The spoken language to be recognized (in BCP-47 format). Under normal circumstances, you shouldn't have to use this property\r\n     * directly.\r\n     * Instead, use [[SpeechConfig.speechRecognitionLanguage]].\r\n     * @member PropertyId.SpeechServiceConnection_RecoLanguage\r\n     */\r\n    SpeechServiceConnection_RecoLanguage,\r\n\r\n    /**\r\n     * The session id. This id is a universally unique identifier (aka UUID) representing a specific binding of an audio input stream\r\n     * and the underlying speech recognition instance to which it is bound. Under normal circumstances, you shouldn't have to use this\r\n     * property directly.\r\n     * Instead use [[SessionEventArgs.sessionId]].\r\n     * @member PropertyId.Speech_SessionId\r\n     */\r\n    Speech_SessionId,\r\n\r\n    /**\r\n     * The spoken language to be synthesized (e.g. en-US)\r\n     * @member PropertyId.SpeechServiceConnection_SynthLanguage\r\n     */\r\n    SpeechServiceConnection_SynthLanguage,\r\n\r\n    /**\r\n     * The name of the TTS voice to be used for speech synthesis\r\n     * @member PropertyId.SpeechServiceConnection_SynthVoice\r\n     */\r\n    SpeechServiceConnection_SynthVoice,\r\n\r\n    /**\r\n     * The string to specify TTS output audio format\r\n     * @member PropertyId.SpeechServiceConnection_SynthOutputFormat\r\n     */\r\n    SpeechServiceConnection_SynthOutputFormat,\r\n\r\n    /**\r\n     * The list of comma separated languages used as possible source languages\r\n     * Added in version 1.13.0\r\n     * @member PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages\r\n     */\r\n    SpeechServiceConnection_AutoDetectSourceLanguages,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output format (simple or detailed). Under normal circumstances, you shouldn't have\r\n     * to use this property directly.\r\n     * Instead use [[SpeechConfig.outputFormat]].\r\n     * @member PropertyId.SpeechServiceResponse_RequestDetailedResultTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestDetailedResultTrueFalse,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output profanity level. Currently unused.\r\n     * @member PropertyId.SpeechServiceResponse_RequestProfanityFilterTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestProfanityFilterTrueFalse,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service response output (in JSON format). This property is available on recognition result objects only.\r\n     * @member PropertyId.SpeechServiceResponse_JsonResult\r\n     */\r\n    SpeechServiceResponse_JsonResult,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service error details (in JSON format). Under normal circumstances, you shouldn't have to\r\n     * use this property directly. Instead use [[CancellationDetails.errorDetails]].\r\n     * @member PropertyId.SpeechServiceResponse_JsonErrorDetails\r\n     */\r\n    SpeechServiceResponse_JsonErrorDetails,\r\n\r\n    /**\r\n     * The cancellation reason. Currently unused.\r\n     * @member PropertyId.CancellationDetails_Reason\r\n     */\r\n    CancellationDetails_Reason,\r\n\r\n    /**\r\n     * The cancellation text. Currently unused.\r\n     * @member PropertyId.CancellationDetails_ReasonText\r\n     */\r\n    CancellationDetails_ReasonText,\r\n\r\n    /**\r\n     * The Cancellation detailed text. Currently unused.\r\n     * @member PropertyId.CancellationDetails_ReasonDetailedText\r\n     */\r\n    CancellationDetails_ReasonDetailedText,\r\n\r\n    /**\r\n     * The Language Understanding Service response output (in JSON format). Available via [[IntentRecognitionResult]]\r\n     * @member PropertyId.LanguageUnderstandingServiceResponse_JsonResult\r\n     */\r\n    LanguageUnderstandingServiceResponse_JsonResult,\r\n\r\n    /**\r\n     * The URL string built from speech configuration.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * NOTE: Added in version 1.7.0.\r\n     */\r\n    SpeechServiceConnection_Url,\r\n\r\n    /**\r\n     * The initial silence timeout value (in milliseconds) used by the service.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_InitialSilenceTimeoutMs,\r\n\r\n    /**\r\n     * The end silence timeout value (in milliseconds) used by the service.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_EndSilenceTimeoutMs,\r\n\r\n    /**\r\n     * A duration of detected silence, measured in milliseconds, after which speech-to-text will determine a spoken\r\n     * phrase has ended and generate a final Recognized result. Configuring this timeout may be helpful in situations\r\n     * where spoken input is significantly faster or slower than usual and default segmentation behavior consistently\r\n     * yields results that are too long or too short. Segmentation timeout values that are inappropriately high or low\r\n     * can negatively affect speech-to-text accuracy; this property should be carefully configured and the resulting\r\n     * behavior should be thoroughly validated as intended.\r\n     *\r\n     * For more information about timeout configuration that includes discussion of default behaviors, please visit\r\n     * https://aka.ms/csspeech/timeouts.\r\n     *\r\n     * Added in version 1.21.0.\r\n     */\r\n    Speech_SegmentationSilenceTimeoutMs,\r\n\r\n    /**\r\n     * A boolean value specifying whether audio logging is enabled in the service or not.\r\n     * Audio and content logs are stored either in Microsoft-owned storage, or in your own storage account linked\r\n     * to your Cognitive Services subscription (Bring Your Own Storage (BYOS) enabled Speech resource).\r\n     * The logs will be removed after 30 days.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_EnableAudioLogging,\r\n\r\n    /**\r\n     * The speech service connection language identifier mode.\r\n     * Can be \"AtStart\" (the default), or \"Continuous\". See Language\r\n     * Identification document https://aka.ms/speech/lid?pivots=programming-language-javascript\r\n     * for more details.\r\n     * Added in 1.25.0\r\n     **/\r\n    SpeechServiceConnection_LanguageIdMode,\r\n\r\n    /**\r\n     * A string value representing the desired endpoint version to target for Speech Recognition.\r\n     * Added in version 1.21.0\r\n     */\r\n    SpeechServiceConnection_RecognitionEndpointVersion,\r\n\r\n    /**\r\n    /**\r\n     * A string value the current speaker recognition scenario/mode (TextIndependentIdentification, etc.).\r\n     * Added in version 1.23.0\r\n     */\r\n    SpeechServiceConnection_SpeakerIdMode,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output profanity setting.\r\n     * Allowed values are \"masked\", \"removed\", and \"raw\".\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_ProfanityOption,\r\n\r\n    /**\r\n     * A string value specifying which post processing option should be used by service.\r\n     * Allowed values are \"TrueText\".\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_PostProcessingOption,\r\n\r\n    /**\r\n     * A boolean value specifying whether to include word-level timestamps in the response result.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_RequestWordLevelTimestamps,\r\n\r\n    /**\r\n     * The number of times a word has to be in partial results to be returned.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_StablePartialResultThreshold,\r\n\r\n    /**\r\n     * A string value specifying the output format option in the response result. Internal use only.\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_OutputFormatOption,\r\n\r\n    /**\r\n     * A boolean value to request for stabilizing translation partial results by omitting words in the end.\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request WordBoundary events.\r\n     * @member PropertyId.SpeechServiceResponse_RequestWordBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestWordBoundary,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request punctuation boundary in WordBoundary Events. Default is true.\r\n     * @member PropertyId.SpeechServiceResponse_RequestPunctuationBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestPunctuationBoundary,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request sentence boundary in WordBoundary Events. Default is false.\r\n     * @member PropertyId.SpeechServiceResponse_RequestSentenceBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestSentenceBoundary,\r\n\r\n    /**\r\n     * Identifier used to connect to the backend service.\r\n     * @member PropertyId.Conversation_ApplicationId\r\n     */\r\n    Conversation_ApplicationId,\r\n\r\n    /**\r\n     * Type of dialog backend to connect to.\r\n     * @member PropertyId.Conversation_DialogType\r\n     */\r\n    Conversation_DialogType,\r\n\r\n    /**\r\n     * Silence timeout for listening\r\n     * @member PropertyId.Conversation_Initial_Silence_Timeout\r\n     */\r\n    Conversation_Initial_Silence_Timeout,\r\n\r\n    /**\r\n     * From Id to add to speech recognition activities.\r\n     * @member PropertyId.Conversation_From_Id\r\n     */\r\n    Conversation_From_Id,\r\n\r\n    /**\r\n     * ConversationId for the session.\r\n     * @member PropertyId.Conversation_Conversation_Id\r\n     */\r\n    Conversation_Conversation_Id,\r\n\r\n    /**\r\n     * Comma separated list of custom voice deployment ids.\r\n     * @member PropertyId.Conversation_Custom_Voice_Deployment_Ids\r\n     */\r\n    Conversation_Custom_Voice_Deployment_Ids,\r\n\r\n    /**\r\n     * Speech activity template, stamp properties from the template on the activity generated by the service for speech.\r\n     * @member PropertyId.Conversation_Speech_Activity_Template\r\n     * Added in version 1.10.0.\r\n     */\r\n    Conversation_Speech_Activity_Template,\r\n\r\n    /**\r\n     * Enables or disables the receipt of turn status messages as obtained on the turnStatusReceived event.\r\n     * @member PropertyId.Conversation_Request_Bot_Status_Messages\r\n     * Added in version 1.15.0.\r\n     */\r\n    Conversation_Request_Bot_Status_Messages,\r\n\r\n    /**\r\n     * Specifies the connection ID to be provided in the Agent configuration message, e.g. a Direct Line token for\r\n     * channel authentication.\r\n     * Added in version 1.15.1.\r\n     */\r\n    Conversation_Agent_Connection_Id,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service host (url). Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromHost]].\r\n     */\r\n    SpeechServiceConnection_Host,\r\n\r\n    /**\r\n     * Set the host for service calls to the Conversation Translator REST management and websocket calls.\r\n     */\r\n    ConversationTranslator_Host,\r\n\r\n    /**\r\n     * Optionally set the the host's display name.\r\n     * Used when joining a conversation.\r\n     */\r\n    ConversationTranslator_Name,\r\n\r\n    /**\r\n     * Optionally set a value for the X-CorrelationId request header.\r\n     * Used for troubleshooting errors in the server logs. It should be a valid guid.\r\n     */\r\n    ConversationTranslator_CorrelationId,\r\n\r\n    /**\r\n     * Set the conversation token to be sent to the speech service. This enables the\r\n     * service to service call from the speech service to the Conversation Translator service for relaying\r\n     * recognitions. For internal use.\r\n     */\r\n    ConversationTranslator_Token,\r\n\r\n    /**\r\n     * The reference text of the audio for pronunciation evaluation.\r\n     * For this and the following pronunciation assessment parameters, see\r\n     * https://docs.microsoft.com/azure/cognitive-services/speech-service/rest-speech-to-text#pronunciation-assessment-parameters for details.\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_ReferenceText,\r\n\r\n    /**\r\n     * The point system for pronunciation score calibration (FivePoint or HundredMark).\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_GradingSystem,\r\n\r\n    /**\r\n     * The pronunciation evaluation granularity (Phoneme, Word, or FullText).\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Granularity,\r\n\r\n    /**\r\n     * Defines if enable miscue calculation.\r\n     * With this enabled, the pronounced words will be compared to the reference text,\r\n     * and will be marked with omission/insertion based on the comparison. The default setting is False.\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_EnableMiscue,\r\n\r\n    /**\r\n     * The json string of pronunciation assessment parameters\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Json,\r\n\r\n    /**\r\n     * Pronunciation assessment parameters.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Params,\r\n\r\n    /**\r\n     * Version of Speaker Recognition API to use.\r\n     * Added in version 1.18.0\r\n     */\r\n    SpeakerRecognition_Api_Version,\r\n\r\n    /**\r\n     * Specifies whether to allow load of data URL for web worker\r\n     * Allowed values are \"off\" and \"on\". Default is \"on\".\r\n     * Added in version 1.32.0\r\n     */\r\n    WebWorkerLoadType,\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OS,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports\";\r\nimport {\r\n    Contracts\r\n} from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines the base class Recognizer which mainly contains common event handlers.\r\n * @class Recognizer\r\n */\r\nexport abstract class Recognizer {\r\n    private privDisposed: boolean;\r\n    protected audioConfig: AudioConfig;\r\n    protected privReco: ServiceRecognizerBase;\r\n    protected privProperties: PropertyCollection;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\r\n     */\r\n    protected constructor(audioConfig: AudioConfig, properties: PropertyCollection, connectionFactory: IConnectionFactory) {\r\n        this.audioConfig = (audioConfig !== undefined) ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\r\n        this.privDisposed = false;\r\n        this.privProperties = properties.clone();\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.implCommonRecognizerSetup();\r\n    }\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member Recognizer.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member Recognizer.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech started events.\r\n     * @member Recognizer.prototype.speechStartDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechStartDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech stopped events.\r\n     * @member Recognizer.prototype.speechEndDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechEndDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member Recognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privReco;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Recognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposed = true;\r\n\r\n        if (disposing) {\r\n            if (this.privReco) {\r\n                await this.privReco.audioSource.turnOff();\r\n                await this.privReco.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method returns the current state of the telemetry setting.\r\n     * @member Recognizer.prototype.telemetryEnabled\r\n     * @function\r\n     * @public\r\n     * @returns true if the telemetry is enabled, false otherwise.\r\n     */\r\n    public static get telemetryEnabled(): boolean {\r\n        return ServiceRecognizerBase.telemetryDataEnabled;\r\n    }\r\n\r\n    /**\r\n     * This method globally enables or disables telemetry.\r\n     * @member Recognizer.prototype.enableTelemetry\r\n     * @function\r\n     * @public\r\n     * @param enabled - Global setting for telemetry collection.\r\n     * If set to true, telemetry information like microphone errors,\r\n     * recognition errors are collected and sent to Microsoft.\r\n     * If set to false, no telemetry is sent to Microsoft.\r\n     */\r\n    public static enableTelemetry(enabled: boolean): void {\r\n        ServiceRecognizerBase.telemetryDataEnabled = enabled;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n    protected abstract createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig;\r\n\r\n    // Creates the correct service recognizer for the type\r\n    protected abstract createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase;\r\n\r\n    // Does the generic recognizer setup that is common across all recognizer types.\r\n    protected implCommonRecognizerSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig = this.createRecognizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        this.privReco = this.createServiceRecognizer(\r\n            Recognizer.getAuthFromProperties(this.privProperties),\r\n            this.privConnectionFactory,\r\n            this.audioConfig,\r\n            recognizerConfig);\r\n    }\r\n\r\n    protected async recognizeOnceAsyncImpl(recognitionMode: RecognitionMode): Promise<SpeechRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, ret.resolve, ret.reject);\r\n        const result: SpeechRecognitionResult = await ret.promise;\r\n        await this.implRecognizerStop();\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    protected async startContinuousRecognitionAsyncImpl(recognitionMode: RecognitionMode): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, undefined, undefined);\r\n    }\r\n\r\n    protected async stopContinuousRecognitionAsyncImpl(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        await this.implRecognizerStop();\r\n    }\r\n\r\n    protected async implRecognizerStop(): Promise<void> {\r\n        if (this.privReco) {\r\n            await this.privReco.stopRecognizing();\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected static getAuthFromProperties(properties: PropertyCollection): IAuthentication {\r\n        const subscriptionKey = properties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                },\r\n                (): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                });\r\n\r\n        return authentication;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechConnectionFactory,\r\n    SpeechServiceConfig,\r\n    SpeechServiceRecognizer,\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    KeywordRecognitionModel,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class SpeechRecognizer\r\n */\r\nexport class SpeechRecognizer extends Recognizer {\r\n    private privDisposedRecognizer: boolean;\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechConfigImpl.properties, new SpeechConnectionFactory());\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechRecognizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new SpeechRecognizer(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member SpeechRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for speech recognition.\r\n     * @member SpeechRecognizer.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member SpeechRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of recognition.\r\n     * @member SpeechRecognizer.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of recognition.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeechRecognizer.\r\n     * @member SpeechRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     * so it is suitable only for single shot recognition\r\n     * like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member SpeechRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the SpeechRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until\r\n     * stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the\r\n     * Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model The keyword recognition model that\r\n     * specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the\r\n     * Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void): void {\r\n        if (!!cb) {\r\n            cb();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member SpeechRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AddedLmIntent,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    IntentConnectionFactory,\r\n    IntentServiceRecognizer,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    KeywordRecognitionModel,\r\n    LanguageUnderstandingModel,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechConfig,\r\n} from \"./Exports\";\r\nimport { LanguageUnderstandingModelImpl } from \"./LanguageUnderstandingModel\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Intent recognizer.\r\n * @class\r\n */\r\nexport class IntentRecognizer extends Recognizer {\r\n    private privDisposedIntentRecognizer: boolean;\r\n    private privAddedIntents: string[][];\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent };\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n\r\n    /**\r\n     * Initializes an instance of the IntentRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new IntentConnectionFactory());\r\n        this.privAddedIntents = [];\r\n        this.privAddedLmIntents = {};\r\n\r\n        this.privDisposedIntentRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member IntentRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: IntentRecognizer, event: IntentRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member IntentRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} the spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this IntentRecognizer.\r\n     * @member IntentRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their\r\n     * values defined for this IntentRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts intent recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text and intent as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     * so it is suitable only for single shot recognition like command or query.\r\n     * For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member IntentRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: IntentRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member IntentRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous intent recognition.\r\n     * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     * This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     * This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a phrase that should be recognized as intent.\r\n     * @member IntentRecognizer.prototype.addIntent\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent to be recognized.\r\n     * @param {string} phrase - A String that specifies the phrase representing the intent.\r\n     */\r\n    public addIntent(simplePhrase: string, intentId?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNullOrWhitespace(simplePhrase, \"simplePhrase\");\r\n\r\n        this.privAddedIntents.push([intentId, simplePhrase]);\r\n    }\r\n\r\n    /**\r\n     * Adds an intent from Language Understanding service for recognition.\r\n     * @member IntentRecognizer.prototype.addIntentWithLanguageModel\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent\r\n     * to be recognized. Ignored if intentName is empty.\r\n     * @param {string} model - The intent model from Language Understanding service.\r\n     * @param {string} intentName - The intent name defined in the intent model. If it\r\n     * is empty, all intent names defined in the model will be added.\r\n     */\r\n    public addIntentWithLanguageModel(intentId: string, model: LanguageUnderstandingModel, intentName?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privAddedLmIntents[intentId] = new AddedLmIntent(modelImpl, intentName);\r\n    }\r\n\r\n    /**\r\n     * @summary Adds all intents from the specified Language Understanding Model.\r\n     * @member IntentRecognizer.prototype.addAllIntents\r\n     * @function\r\n     * @public\r\n     * @function\r\n     * @public\r\n     * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.\r\n     * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.\r\n     */\r\n    public addAllIntents(model: LanguageUnderstandingModel, intentId?: string): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privUmbrellaIntent = new AddedLmIntent(modelImpl, intentId);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member IntentRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedIntentRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedIntentRecognizer = true;\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    private buildSpeechContext(): IIntentContext {\r\n        let appId: string;\r\n        let region: string;\r\n        let subscriptionKey: string;\r\n        const refGrammers: string[] = [];\r\n\r\n        if (undefined !== this.privUmbrellaIntent) {\r\n            appId = this.privUmbrellaIntent.modelImpl.appId;\r\n            region = this.privUmbrellaIntent.modelImpl.region;\r\n            subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;\r\n        }\r\n\r\n        // Build the reference grammer array.\r\n        for (const intentId of Object.keys(this.privAddedLmIntents)) {\r\n            const addedLmIntent: AddedLmIntent = this.privAddedLmIntents[intentId];\r\n\r\n            // validate all the same model, region, and key...\r\n            if (appId === undefined) {\r\n                appId = addedLmIntent.modelImpl.appId;\r\n            } else {\r\n                if (appId !== addedLmIntent.modelImpl.appId) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model\");\r\n                }\r\n            }\r\n\r\n            if (region === undefined) {\r\n                region = addedLmIntent.modelImpl.region;\r\n            } else {\r\n                if (region !== addedLmIntent.modelImpl.region) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model in a single region\");\r\n                }\r\n            }\r\n\r\n            if (subscriptionKey === undefined) {\r\n                subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;\r\n            } else {\r\n                if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {\r\n                    throw new Error(\"Intents must all use the same subscription key\");\r\n                }\r\n            }\r\n\r\n            const grammer: string = \"luis/\" + appId + \"-PRODUCTION#\" + intentId;\r\n            refGrammers.push(grammer);\r\n        }\r\n\r\n        return {\r\n            Intent: {\r\n                id: appId,\r\n                key: (subscriptionKey === undefined) ? this.privProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,\r\n                provider: \"LUIS\",\r\n            },\r\n            ReferenceGrammars: (undefined === this.privUmbrellaIntent) ? refGrammers : [\"luis/\" + appId + \"-PRODUCTION\"],\r\n        };\r\n    }\r\n}\r\n\r\ninterface IIntentContext {\r\n    Intent: {\r\n        id: string;\r\n        key: string;\r\n        provider: string;\r\n    };\r\n    ReferenceGrammars: string[];\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileType\r\n */\r\nexport enum VoiceProfileType {\r\n\r\n    /**\r\n     * Text independent speaker identification\r\n     * @member VoiceProfileType.TextIndependentIdentification\r\n     */\r\n    TextIndependentIdentification,\r\n\r\n    /**\r\n     * Text dependent speaker verification\r\n     * @member VoiceProfileType.TextDependentVerification\r\n     */\r\n    TextDependentVerification,\r\n\r\n    /**\r\n     * Text independent speaker verification\r\n     * @member VoiceProfileType.TextIndependentVerification\r\n     */\r\n    TextIndependentVerification,\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranslationConnectionFactory,\r\n    TranslationServiceRecognizer\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Connection } from \"./Connection\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationSynthesisEventArgs\r\n} from \"./Exports\";\r\nimport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig\";\r\n\r\n/**\r\n * Translation recognizer\r\n * @class TranslationRecognizer\r\n */\r\nexport class TranslationRecognizer extends Recognizer {\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member TranslationRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: TranslationRecognizer, event: TranslationRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event synthesizing signals that a translation synthesis result is received.\r\n     * @member TranslationRecognizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: TranslationRecognizer, event: TranslationSynthesisEventArgs) => void;\r\n\r\n    private privDisposedTranslationRecognizer: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the TranslationRecognizer.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     * @param {IConnectionFactory} connectionFactory - An optional connection factory to use to generate the endpoint URIs, headers to set, etc...\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig, connectionFactory?: IConnectionFactory) {\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, connectionFactory || new TranslationConnectionFactory());\r\n\r\n        this.privDisposedTranslationRecognizer = false;\r\n\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            Contracts.throwIfNullOrWhitespace(\r\n                this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice),\r\n                PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n        }\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n            PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(\r\n            PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n    }\r\n\r\n    /**\r\n     * TranslationRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechTranslationConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechTranslationConfig: SpeechTranslationConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): TranslationRecognizer {\r\n        const speechTranslationConfigImpl: SpeechTranslationConfigImpl = speechTranslationConfig as SpeechTranslationConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechTranslationConfigImpl.properties);\r\n        return new TranslationRecognizer(speechTranslationConfig, audioConfig);\r\n    }\r\n\r\n    /**\r\n     * Gets the language name that was set when the recognizer was created.\r\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Gets the language name that was set when the recognizer was created.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets target languages for translation that were set when the recognizer was created.\r\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\r\n     * @member TranslationRecognizer.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\r\n     */\r\n    public get targetLanguages(): string[] {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n    }\r\n\r\n    /**\r\n     * Gets the name of output voice.\r\n     * @member TranslationRecognizer.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} the name of output voice.\r\n     */\r\n    public get voiceName(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this TranslationRecognizer.\r\n     * @member TranslationRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, and stops after the first utterance is recognized.\r\n     * The task returns the translation text as result.\r\n     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitable only\r\n     * for single shot recognition like command or query. For long-running recognition,\r\n     * use startContinuousRecognitionAsync() instead.\r\n     * @member TranslationRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the translation has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: TranslationRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive translation results.\r\n     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous recognition and translation.\r\n     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * dynamically remove a language from list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.removeTargetLanguage\r\n     * @function\r\n     * @param lang - language to be removed\r\n     * @public\r\n     */\r\n    public removeTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be removed\");\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            const languages: string[] = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            const index: number = languages.indexOf(lang);\r\n            if (index > -1) {\r\n                languages.splice(index, 1);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n                this.updateLanguages(languages);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * dynamically add a language to list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.addTargetLanguage\r\n     * @function\r\n     * @param lang - language to be added\r\n     * @public\r\n     */\r\n    public addTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be added\");\r\n        let languages: string[] = [];\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            languages = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            if (!languages.includes(lang)) {\r\n                languages.push(lang);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n            }\r\n        } else {\r\n            this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, lang);\r\n            languages = [lang];\r\n        }\r\n        this.updateLanguages(languages);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member TranslationRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * handles ConnectionEstablishedEvent for conversation translation scenarios.\r\n     * @member TranslationRecognizer.prototype.onConnection\r\n     * @function\r\n     * @public\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public onConnection(): void { }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedTranslationRecognizer) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedTranslationRecognizer = true;\r\n\r\n        if (disposing) {\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n\r\n    private updateLanguages(languages: string[]): void {\r\n        const conn: Connection = Connection.fromRecognizer(this);\r\n        if (!!conn) {\r\n            conn.setMessageProperty(\"speech.context\", \"translationcontext\", {to: languages});\r\n            conn.sendMessageAsync(\"event\", JSON.stringify({\r\n                id: \"translation\",\r\n                name: \"updateLanguage\",\r\n                to: languages\r\n                }));\r\n        }\r\n    }\r\n\r\n}\r\n",null,"//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport {\r\n    ServiceRecognizerBase,\r\n    SynthesisAdapterBase,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    ConnectionEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    IDetachable,\r\n    marshalPromiseToCallbacks,\r\n    ServiceEvent,\r\n} from \"../common/Exports\";\r\nimport {\r\n    ConnectionMessageImpl\r\n} from \"./ConnectionMessage\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConnectionMessageEventArgs,\r\n    ConversationTranscriber,\r\n    Recognizer,\r\n    ServiceEventArgs,\r\n    SpeechSynthesizer,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Connection is a proxy class for managing connection to the speech service of the specified Recognizer.\r\n * By default, a Recognizer autonomously manages connection to service when needed.\r\n * The Connection class provides additional methods for users to explicitly open or close a connection and\r\n * to subscribe to connection status changes.\r\n * The use of Connection is optional, and mainly for scenarios where fine tuning of application\r\n * behavior based on connection status is needed. Users can optionally call Open() to manually set up a connection\r\n * in advance before starting recognition on the Recognizer associated with this Connection.\r\n * If the Recognizer needs to connect or disconnect to service, it will\r\n * setup or shutdown the connection independently. In this case the Connection will be notified by change of connection\r\n * status via Connected/Disconnected events.\r\n * Added in version 1.2.1.\r\n */\r\nexport class Connection {\r\n    private privInternalData: ServiceRecognizerBase | SynthesisAdapterBase;\r\n    private privEventListener: IDetachable;\r\n    private privServiceEventListener: IDetachable;\r\n\r\n    /**\r\n     * Gets the Connection instance from the specified recognizer.\r\n     * @param recognizer The recognizer associated with the connection.\r\n     * @return The Connection instance of the recognizer.\r\n     */\r\n    public static fromRecognizer(recognizer: Recognizer | ConversationTranscriber): Connection {\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        const ret: Connection = new Connection();\r\n\r\n        ret.privInternalData = recoBase;\r\n        ret.setupEvents();\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets the Connection instance from the specified synthesizer.\r\n     * @param synthesizer The synthesizer associated with the connection.\r\n     * @return The Connection instance of the synthesizer.\r\n     */\r\n    public static fromSynthesizer(synthesizer: SpeechSynthesizer): Connection {\r\n        const synthBase: SynthesisAdapterBase = synthesizer.internalData as SynthesisAdapterBase;\r\n\r\n        const ret: Connection = new Connection();\r\n\r\n        ret.privInternalData = synthBase;\r\n        ret.setupEvents();\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Starts to set up connection to the service.\r\n     * Users can optionally call openConnection() to manually set up a connection in advance before starting recognition on the\r\n     * Recognizer associated with this Connection. After starting recognition, calling Open() will have no effect\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     */\r\n    public openConnection(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privInternalData.connect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call closeConnection() to manually shutdown the connection of the associated Recognizer.\r\n     *\r\n     * If closeConnection() is called during recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public closeConnection(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privInternalData instanceof SynthesisAdapterBase) {\r\n            throw new Error(\"Disconnecting a synthesizer's connection is currently not supported\");\r\n        } else {\r\n            marshalPromiseToCallbacks(this.privInternalData.disconnect(), cb, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Appends a parameter in a message to service.\r\n     * Added in version 1.12.1.\r\n     * @param path The path of the network message.\r\n     * @param propertyName Name of the property\r\n     * @param propertyValue Value of the property. This is a json string.\r\n     */\r\n    public setMessageProperty(path: string, propertyName: string, propertyValue: string | object): void {\r\n        Contracts.throwIfNullOrWhitespace(propertyName, \"propertyName\");\r\n\r\n        if (this.privInternalData instanceof ServiceRecognizerBase) {\r\n            if (path.toLowerCase() !== \"speech.context\") {\r\n                throw new Error(\"Only speech.context message property sets are currently supported for recognizer\");\r\n            } else {\r\n                this.privInternalData.speechContext.setSection(propertyName, propertyValue);\r\n            }\r\n        } else if (this.privInternalData instanceof SynthesisAdapterBase) {\r\n            if (path.toLowerCase() !== \"synthesis.context\") {\r\n                throw new Error(\"Only synthesis.context message property sets are currently supported for synthesizer\");\r\n            } else {\r\n                this.privInternalData.synthesisContext.setSection(propertyName, propertyValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends a message to the speech service.\r\n     * Added in version 1.13.0.\r\n     * @param path The WebSocket path of the message\r\n     * @param payload The payload of the message. This is a json string or a ArrayBuffer.\r\n     * @param success A callback to indicate success.\r\n     * @param error A callback to indicate an error.\r\n     */\r\n    public sendMessageAsync(path: string, payload: string | ArrayBuffer, success?: () => void, error?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privInternalData.sendNetworkMessage(path, payload), success, error);\r\n    }\r\n\r\n    /**\r\n     * Any message from service that is not being processed by any other top level recognizers.\r\n     *\r\n     * Will be removed in 2.0.\r\n     */\r\n    public receivedServiceMessage: (args: ServiceEventArgs) => void;\r\n\r\n    /**\r\n     * Any message received from the Speech Service.\r\n     */\r\n    public messageReceived: (args: ConnectionMessageEventArgs) => void;\r\n\r\n    /**\r\n     * Any message sent to the Speech Service.\r\n     */\r\n    public messageSent: (args: ConnectionMessageEventArgs) => void;\r\n\r\n    /**\r\n     * The Connected event to indicate that the recognizer is connected to service.\r\n     */\r\n    public connected: (args: ConnectionEventArgs) => void;\r\n\r\n    /**\r\n     * The Disconnected event to indicate that the recognizer is disconnected from service.\r\n     */\r\n    public disconnected: (args: ConnectionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     */\r\n    public close(): void {\r\n        /* eslint-disable no-empty */\r\n    }\r\n\r\n    private setupEvents(): void {\r\n        this.privEventListener = this.privInternalData.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\r\n                if (!!this.connected) {\r\n                    this.connected(new ConnectionEventArgs(connectionEvent.connectionId));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                if (!!this.disconnected) {\r\n                    this.disconnected(new ConnectionEventArgs(connectionEvent.connectionId));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionMessageSentEvent\") {\r\n                if (!!this.messageSent) {\r\n                    this.messageSent(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageSentEvent).message)));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionMessageReceivedEvent\") {\r\n                if (!!this.messageReceived) {\r\n                    this.messageReceived(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageReceivedEvent).message)));\r\n                }\r\n            }\r\n        });\r\n\r\n        this.privServiceEventListener = this.privInternalData.serviceEvents.attach((e: ServiceEvent): void => {\r\n            if (!!this.receivedServiceMessage) {\r\n                this.receivedServiceMessage(new ServiceEventArgs(e.jsonString, e.name));\r\n            }\r\n        });\r\n    }\r\n}\r\n",null,"//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport { HeaderNames } from \"../common.speech/HeaderNames\";\r\nimport {\r\n    ConnectionMessage as IntConnectionMessage,\r\n    MessageType\r\n} from \"../common/Exports\";\r\nimport {\r\n    PropertyCollection\r\n} from \"./PropertyCollection\";\r\nimport { PropertyId } from \"./PropertyId\";\r\n\r\n/**\r\n * ConnectionMessage represents implementation specific messages sent to and received from\r\n * the speech service. These messages are provided for debugging purposes and should not\r\n * be used for production use cases with the Azure Cognitive Services Speech Service.\r\n * Messages sent to and received from the Speech Service are subject to change without\r\n * notice. This includes message contents, headers, payloads, ordering, etc.\r\n * Added in version 1.11.0.\r\n */\r\nexport abstract class ConnectionMessage {\r\n    /**\r\n     * The message path.\r\n     */\r\n    public abstract get path(): string;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public abstract get isTextMessage(): boolean;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public abstract get isBinaryMessage(): boolean;\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public abstract get TextMessage(): string;\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public abstract get binaryMessage(): ArrayBuffer;\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public abstract get properties(): PropertyCollection;\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public abstract toString(): string;\r\n}\r\n\r\nexport class ConnectionMessageImpl {\r\n\r\n    private privConnectionMessage: IntConnectionMessage;\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor(message: IntConnectionMessage) {\r\n        this.privConnectionMessage = message;\r\n        this.privProperties = new PropertyCollection();\r\n        if (!!this.privConnectionMessage.headers[HeaderNames.ConnectionId]) {\r\n            this.privProperties.setProperty(PropertyId.Speech_SessionId, this.privConnectionMessage.headers[HeaderNames.ConnectionId]);\r\n        }\r\n\r\n        Object.keys(this.privConnectionMessage.headers).forEach((header: string): void => {\r\n            this.privProperties.setProperty(header, this.privConnectionMessage.headers[header]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The message path.\r\n     */\r\n    public get path(): string {\r\n        return this.privConnectionMessage.headers[Object.keys(this.privConnectionMessage.headers).find((key: string): boolean => key.toLowerCase() === \"path\".toLowerCase())];\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public get isTextMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Text;\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public get isBinaryMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Binary;\r\n    }\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public get TextMessage(): string {\r\n        return this.privConnectionMessage.textBody;\r\n    }\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public get binaryMessage(): ArrayBuffer {\r\n        return this.privConnectionMessage.binaryBody;\r\n    }\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public toString(): string {\r\n        return \"\";\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"./Exports\";\r\n\r\n/**\r\n * Represents collection of parameters and their values.\r\n * @class Translations\r\n */\r\nexport class Translations {\r\n    // Use an PropertyCollection internally, just wrapping it to hide the | enum syntax it has.\r\n    private privMap: PropertyCollection = new PropertyCollection();\r\n\r\n    /**\r\n     * Get the languages in the object in a String array.\r\n     * @member Translations.prototype.languages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} languages in translations object.\r\n     */\r\n    public get languages(): string[] {\r\n        return this.privMap.keys;\r\n    }\r\n\r\n    /**\r\n     * Returns the parameter value in type String. The parameter must have the same type as String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member Translations.prototype.get\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} def - The default value which is returned if the parameter is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public get(key: string, def?: string): string {\r\n        return this.privMap.getProperty(key, def);\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member Translations.prototype.set\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public set(key: string, value: string): void {\r\n        this.privMap.setProperty(key, value);\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might not be recognized.\r\n * @class NoMatchReason\r\n */\r\nexport enum NoMatchReason {\r\n\r\n    /**\r\n     * Indicates that speech was detected, but not recognized.\r\n     * @member NoMatchReason.NotRecognized\r\n     */\r\n    NotRecognized,\r\n\r\n    /**\r\n     * Indicates that the start of the audio stream contained only silence,\r\n     * and the service timed out waiting for speech.\r\n     * @member NoMatchReason.InitialSilenceTimeout\r\n     */\r\n    InitialSilenceTimeout,\r\n\r\n    /**\r\n     * Indicates that the start of the audio stream contained only noise,\r\n     * and the service timed out waiting for speech.\r\n     * @member NoMatchReason.InitialBabbleTimeout\r\n     */\r\n    InitialBabbleTimeout,\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionStatus, SimpleSpeechPhrase } from \"../../src/common.speech/Exports\";\r\nimport { IntentRecognitionResult, NoMatchReason, SpeechRecognitionResult, TranslationRecognitionResult } from \"./Exports\";\r\n\r\n/**\r\n * Contains detailed information for NoMatch recognition results.\r\n * @class NoMatchDetails\r\n */\r\nexport class NoMatchDetails {\r\n    private privReason: NoMatchReason;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {NoMatchReason} reason - The no-match reason.\r\n     */\r\n    private constructor(reason: NoMatchReason) {\r\n        this.privReason = reason;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of NoMatchDetails object for the NoMatch SpeechRecognitionResults.\r\n     * @member NoMatchDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult}\r\n     * result - The recognition result that was not recognized.\r\n     * @returns {NoMatchDetails} The no match details object being created.\r\n     */\r\n    public static fromResult(result: SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult): NoMatchDetails {\r\n        const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(result.json);\r\n\r\n        let reason: NoMatchReason = NoMatchReason.NotRecognized;\r\n\r\n        switch (simpleSpeech.RecognitionStatus) {\r\n            case RecognitionStatus.BabbleTimeout:\r\n                reason = NoMatchReason.InitialBabbleTimeout;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n                reason = NoMatchReason.InitialSilenceTimeout;\r\n                break;\r\n            default:\r\n                reason = NoMatchReason.NotRecognized;\r\n                break;\r\n        }\r\n\r\n        return new NoMatchDetails(reason);\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member NoMatchDetails.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {NoMatchReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): NoMatchReason {\r\n        return this.privReason;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationErrorCode, CancellationReason, TranslationRecognitionResult } from \"./Exports\";\r\n\r\n/**\r\n * Define payload of speech recognition canceled result events.\r\n * @class TranslationRecognitionCanceledEventArgs\r\n */\r\nexport class TranslationRecognitionCanceledEventArgs {\r\n    private privResult: TranslationRecognitionResult;\r\n    private privSessionId: string;\r\n    private privCancelReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionid - The session id.\r\n     * @param {CancellationReason} cancellationReason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {TranslationRecognitionResult} result - The result.\r\n     */\r\n    public constructor(\r\n        sessionid: string,\r\n        cancellationReason: CancellationReason,\r\n        errorDetails: string,\r\n        errorCode: CancellationErrorCode,\r\n        result: TranslationRecognitionResult) {\r\n        this.privCancelReason = cancellationReason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privResult = result;\r\n        this.privSessionId = sessionid;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): TranslationRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n\r\n    /**\r\n     * Specifies the session identifier.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the session identifier.\r\n     */\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privCancelReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationEventArgs } from \"./CancellationEventArgs\";\r\nimport { CancellationErrorCode, CancellationReason, IntentRecognitionEventArgs, IntentRecognitionResult } from \"./Exports\";\r\n\r\n/**\r\n * Define payload of intent recognition canceled result events.\r\n * @class IntentRecognitionCanceledEventArgs\r\n */\r\nexport class IntentRecognitionCanceledEventArgs extends IntentRecognitionEventArgs implements CancellationEventArgs {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} result - The result of the intent recognition.\r\n     * @param {string} offset - The offset.\r\n     * @param {IntentRecognitionResult} sessionId - The session id.\r\n     */\r\n    public constructor(\r\n        reason: CancellationReason,\r\n        errorDetails: string,\r\n        errorCode: CancellationErrorCode,\r\n        result?: IntentRecognitionResult,\r\n        offset?: number,\r\n        sessionId?: string) {\r\n        super(result, offset, sessionId);\r\n\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member IntentRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member IntentRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Contains detailed information about why a result was canceled.\r\n * @class CancellationDetailsBase\r\n */\r\nexport class CancellationDetailsBase {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - The error details, if provided.\r\n     */\r\n    protected constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member CancellationDetailsBase.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member CancellationDetailsBase.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get ErrorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationErrorCodePropertyName, EnumTranslation, SimpleSpeechPhrase } from \"../common.speech/Exports\";\r\nimport { CancellationDetailsBase } from \"./CancellationDetailsBase\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    RecognitionResult,\r\n    SpeechSynthesisResult\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Contains detailed information about why a result was canceled.\r\n * @class CancellationDetails\r\n */\r\nexport class CancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of CancellationDetails object for the canceled RecognitionResult.\r\n     * @member CancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {RecognitionResult | SpeechSynthesisResult} result - The result that was canceled.\r\n     * @returns {CancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: RecognitionResult | SpeechSynthesisResult): CancellationDetails {\r\n        let reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (result instanceof RecognitionResult && !!result.json) {\r\n            const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(result.json);\r\n            reason = EnumTranslation.implTranslateCancelResult(simpleSpeech.RecognitionStatus);\r\n        }\r\n\r\n        if (!!result.properties) {\r\n            errorCode = CancellationErrorCode[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError]) as keyof typeof CancellationErrorCode];\r\n        }\r\n\r\n        return new CancellationDetails(reason, result.errorDetails || EnumTranslation.implTranslateErrorDetails(errorCode), errorCode);\r\n    }\r\n\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines error code in case that CancellationReason is Error.\r\n * Added in version 1.1.0.\r\n */\r\nexport enum CancellationErrorCode {\r\n    /**\r\n     * Indicates that no error occurred during speech recognition.\r\n     */\r\n    NoError,\r\n\r\n    /**\r\n     * Indicates an authentication error.\r\n     */\r\n    AuthenticationFailure,\r\n\r\n    /**\r\n     * Indicates that one or more recognition parameters are invalid.\r\n     */\r\n    BadRequestParameters,\r\n\r\n    /**\r\n     * Indicates that the number of parallel requests exceeded the number of allowed\r\n     * concurrent transcriptions for the subscription.\r\n     */\r\n    TooManyRequests,\r\n\r\n    /**\r\n     * Indicates a connection error.\r\n     */\r\n    ConnectionFailure,\r\n\r\n    /**\r\n     * Indicates a time-out error when waiting for response from service.\r\n     */\r\n    ServiceTimeout,\r\n\r\n    /**\r\n     * Indicates that an error is returned by the service.\r\n     */\r\n    ServiceError,\r\n\r\n    /**\r\n     * Indicates an unexpected runtime error.\r\n     */\r\n    RuntimeError,\r\n\r\n    /**\r\n     * Indicates an quota overrun on existing key.\r\n     */\r\n    Forbidden,\r\n}\r\n",null,"//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { SessionEventArgs } from \"./Exports\";\r\n\r\n/**\r\n * Defines payload for connection events like Connected/Disconnected.\r\n * Added in version 1.2.0\r\n */\r\nexport class ConnectionEventArgs extends SessionEventArgs {\r\n}\r\n",null,"//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { SessionEventArgs } from \"./Exports\";\r\n\r\n/**\r\n * Defines payload for any Service message event\r\n * Added in version 1.9.0\r\n */\r\n\r\nexport class ServiceEventArgs extends SessionEventArgs {\r\n    private privJsonResult: string;\r\n    private privEventName: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} json - json payload of the USP message.\r\n     */\r\n    public constructor(json: string,  name: string, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privJsonResult = json;\r\n        this.privEventName = name;\r\n    }\r\n\r\n    public get jsonString(): string {\r\n        return this.privJsonResult;\r\n    }\r\n\r\n    public get eventName(): string {\r\n        return this.privEventName;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    DynamicGrammarBuilder,\r\n    ServiceRecognizerBase,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    ConversationTranscriber,\r\n    MeetingTranscriber,\r\n    Recognizer\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Allows additions of new phrases to improve speech recognition.\r\n *\r\n * Phrases added to the recognizer are effective at the start of the next recognition, or the next time the SpeechSDK must reconnect\r\n * to the speech service.\r\n */\r\nexport class PhraseListGrammar {\r\n    private privGrammerBuilder: DynamicGrammarBuilder;\r\n\r\n    private constructor(recogBase: ServiceRecognizerBase) {\r\n        this.privGrammerBuilder = recogBase.dynamicGrammar;\r\n    }\r\n\r\n    /**\r\n     * Creates a PhraseListGrammar from a given speech recognizer. Will accept any recognizer that derives from @class Recognizer.\r\n     * @param recognizer The recognizer to add phrase lists to.\r\n     */\r\n    public static fromRecognizer(recognizer: Recognizer | ConversationTranscriber | MeetingTranscriber): PhraseListGrammar {\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        return new PhraseListGrammar(recoBase);\r\n    }\r\n\r\n    /**\r\n     * Adds a single phrase to the current recognizer.\r\n     * @param phrase Phrase to add.\r\n     */\r\n    public addPhrase(phrase: string): void {\r\n        this.privGrammerBuilder.addPhrase(phrase);\r\n    }\r\n\r\n    /**\r\n     * Adds multiple phrases to the current recognizer.\r\n     * @param phrases Array of phrases to add.\r\n     */\r\n    public addPhrases(phrases: string[]): void {\r\n        this.privGrammerBuilder.addPhrase(phrases);\r\n    }\r\n\r\n    /**\r\n     * Clears all phrases added to the current recognizer.\r\n     */\r\n    public clear(): void {\r\n        this.privGrammerBuilder.clearPhrases();\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { Contracts } from \"./Contracts\";\r\nimport { PropertyCollection, PropertyId, ServicePropertyChannel, SpeechConfigImpl } from \"./Exports\";\r\nimport { OutputFormat } from \"./OutputFormat\";\r\n\r\n/**\r\n * Class that defines base configurations for dialog service connector\r\n * @class DialogServiceConfig\r\n */\r\nexport abstract class DialogServiceConfig {\r\n\r\n    /**\r\n     * Creates an instance of DialogService config.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string | PropertyId, def?: string): string;\r\n\r\n    /**\r\n     * @member DialogServiceConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     * @summary Sets a property value that will be passed to service using the specified channel.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param porxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to use for recognition.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member DialogServiceConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public set applicationId(value: string) { }\r\n\r\n    public static get DialogTypes(): { BotFramework: string; CustomCommands: string } {\r\n        return {\r\n            BotFramework: \"bot_framework\",\r\n            CustomCommands: \"custom_commands\"\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Dialog Service configuration.\r\n * @class DialogServiceConfigImpl\r\n */\r\nexport class DialogServiceConfigImpl extends DialogServiceConfig {\r\n\r\n    private privSpeechConfig: SpeechConfigImpl;\r\n\r\n    /**\r\n     * Creates an instance of dialogService config.\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechConfig = new SpeechConfigImpl();\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member DialogServiceConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechConfig.properties;\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechConfig.speechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to set.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechConfig.speechRecognitionLanguage = value;\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return this.privSpeechConfig.outputFormat;\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechConfig.outputFormat = value;\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to set.\r\n     * @param {string} value - The value.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechConfig.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to get.\r\n     * @param {string} def - The default value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n        void def;\r\n        return this.privSpeechConfig.getProperty(name);\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName?: string, proxyPassword?: string): void {\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyHostName, proxyHostName);\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyPort, `${proxyPort}`);\r\n        if (proxyUserName) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyUserName, proxyUserName);\r\n        }\r\n        if (proxyPassword) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyPassword, proxyPassword);\r\n        }\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\r\n        void channel;\r\n        this.privSpeechConfig.setServiceProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member DialogServiceConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a Bot Framework backend.\r\n * @class BotFrameworkConfig\r\n */\r\nexport class BotFrameworkConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of BotFrameworkConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates a bot framework configuration instance with the provided subscription information.\r\n     * @member BotFrameworkConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromSubscription(subscription: string, region: string, botId?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates a bot framework configuration instance for the specified authorization token and region.\r\n     * Note: The caller must ensure that an authorization token is valid. Before an authorization token expires, the\r\n     * caller must refresh it by setting the authorizationToken property on the corresponding\r\n     * DialogServiceConnector instance created with this config. The contents of configuration objects are copied\r\n     * when connectors are created, so setting authorizationToken on a DialogServiceConnector will not update the\r\n     * original configuration's authorization token. Create a new configuration instance or set the\r\n     * SpeechServiceAuthorization_Token property to update an existing instance if it will be used to create\r\n     * further DialogServiceConnectors.\r\n     * @member BotFrameworkConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param authorizationToken The authorization token associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromAuthorizationToken(\r\n        authorizationToken: string, region: string, botId?: string\r\n    ): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of a BotFrameworkConfig.\r\n     * This method is intended only for users who use a non-default service host. The standard resource path will be\r\n     * assumed. For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL) and then set the AuthorizationToken\r\n     * property on the created BotFrameworkConfig instance.\r\n     * Note: Added in version 1.15.0.\r\n     * @member BotFrameworkConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL | string} host - If a URL is provided, the fully-qualified host with protocol (e.g.\r\n     * wss://your.host.com:1234) will be used. If a string is provided, it will be embedded in\r\n     * wss://{host}.convai.speech.azure.us.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\r\n     * token must be set.\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromHost(\r\n        host: URL | string,\r\n        subscriptionKey?: string,\r\n        botId?: string): BotFrameworkConfig {\r\n\r\n        void botId;\r\n        Contracts.throwIfNullOrUndefined(host, \"host\");\r\n        const resolvedHost: URL = host instanceof URL ? host : new URL(`wss://${host}.convai.speech.azure.us`);\r\n        Contracts.throwIfNullOrUndefined(resolvedHost, \"resolvedHost\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Host, resolvedHost.toString());\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of a BotFrameworkConfig.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created BotFrameworkConfig instance to\r\n     * use the authorization token.\r\n     * Note: Added in version 1.15.0.\r\n     * @member BotFrameworkConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\r\n     * token must be set.\r\n     * @returns {BotFrameworkConfig} - A new bot framework configuration instance using the provided endpoint.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.toString());\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\r\n * @class CustomCommandsConfig\r\n */\r\nexport class CustomCommandsConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of CustomCommandsConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified subscription and region.\r\n     * @member CustomCommandsConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new bot framework config.\r\n     */\r\n    public static fromSubscription(applicationId: string, subscription: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member CustomCommandsConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param authorizationToken The authorization token associated with the application.\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new speech commands config.\r\n     */\r\n    public static fromAuthorizationToken(applicationId: string, authorizationToken: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    public set applicationId(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.setProperty(PropertyId.Conversation_ApplicationId, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to get.\r\n     */\r\n    public get applicationId(): string {\r\n        return this.getProperty(PropertyId.Conversation_ApplicationId);\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { DialogConnectionFactory } from \"../common.speech/DialogConnectorFactory\";\r\nimport {\r\n    DialogServiceAdapter,\r\n    IAgentConfig,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports\";\r\nimport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult\r\n} from \"./Exports\";\r\nimport { PropertyId } from \"./PropertyId\";\r\nimport { TurnStatusReceivedEventArgs } from \"./TurnStatusReceivedEventArgs\";\r\n\r\n/**\r\n * Dialog Service Connector\r\n * @class DialogServiceConnector\r\n */\r\nexport class DialogServiceConnector extends Recognizer {\r\n    private privIsDisposed: boolean;\r\n    private isTurnComplete: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the DialogServiceConnector.\r\n     * @constructor\r\n     * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(dialogConfig: DialogServiceConfig, audioConfig?: AudioConfig) {\r\n        const dialogServiceConfigImpl = dialogConfig as DialogServiceConfigImpl;\r\n        Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\r\n\r\n        super(audioConfig, dialogServiceConfigImpl.properties, new DialogConnectionFactory());\r\n\r\n        this.isTurnComplete = true;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = dialogServiceConfigImpl.properties.clone();\r\n\r\n        const agentConfig = this.buildAgentConfig();\r\n        this.privReco.agentConfig.set(agentConfig);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member DialogServiceConnector.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member DialogServiceConfig.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member DialogServiceConnector.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: DialogServiceConnector, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event activityReceived signals that an activity has been received.\r\n     * @member DialogServiceConnector.prototype.activityReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public activityReceived: (sender: DialogServiceConnector, event: ActivityReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * The event turnStatusReceived signals that a turn status message has been received. These messages are\r\n     * associated with both an interaction and a conversation. They are used to notify the client in the event\r\n     * of an interaction failure with the dialog backend, e.g. in the event of a network issue, timeout, crash,\r\n     * or other problem.\r\n     * @member DialogServiceConnector.prototype.turnStatusReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public turnStatusReceived: (sender: DialogServiceConnector, event: TurnStatusReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * Starts a connection to the service.\r\n     * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     * @member DialogServiceConnector.prototype.connect\r\n     * @function\r\n     * @public\r\n     */\r\n    public connect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.connect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\r\n     *\r\n     * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public disconnect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.disconnect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this DialogServiceConnector.\r\n     * @member DialogServiceConnector.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /** Gets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be empty\r\n     */\r\n    public get speechActivityTemplate(): string {\r\n        return this.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n    }\r\n\r\n    /** Sets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be null or empty.\r\n     * Note: it has to be a valid Json object.\r\n     */\r\n    public set speechActivityTemplate(speechActivityTemplate: string) {\r\n        this.properties.setProperty(PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and stops after the first utterance is recognized.\r\n     * @member DialogServiceConnector.prototype.listenOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the reco has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public listenOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        if (this.isTurnComplete) {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            const callbackHolder = async (): Promise<SpeechRecognitionResult> => {\r\n                await this.privReco.connect();\r\n                await this.implRecognizerStop();\r\n                this.isTurnComplete = false;\r\n\r\n                const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n                await this.privReco.recognize(RecognitionMode.Conversation, ret.resolve, ret.reject);\r\n\r\n                const e: SpeechRecognitionResult = await ret.promise;\r\n                await this.implRecognizerStop();\r\n\r\n                return e;\r\n            };\r\n\r\n            const retPromise: Promise<SpeechRecognitionResult> = callbackHolder();\r\n\r\n            retPromise.catch((): void => {\r\n                // Destroy the recognizer.\r\n                // We've done all we can here.\r\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                this.dispose(true).catch((): void => { });\r\n            });\r\n\r\n            marshalPromiseToCallbacks(retPromise.finally((): void => {\r\n                this.isTurnComplete = true;\r\n            }), cb, err);\r\n        }\r\n    }\r\n\r\n    public sendActivityAsync(activity: string, cb?: () => void, errCb?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((this.privReco as DialogServiceAdapter).sendMessage(activity), cb, errCb);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member DialogServiceConnector.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privIsDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privIsDisposed = true;\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private buildAgentConfig(): IAgentConfig {\r\n        const communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\r\n\r\n        return {\r\n            botInfo: {\r\n                commType: communicationType,\r\n                commandsCulture: undefined,\r\n                connectionId: this.properties.getProperty(PropertyId.Conversation_Agent_Connection_Id),\r\n                conversationId: this.properties.getProperty(PropertyId.Conversation_Conversation_Id, undefined),\r\n                fromId: this.properties.getProperty(PropertyId.Conversation_From_Id, undefined),\r\n                ttsAudioFormat: this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)\r\n            },\r\n            version: 0.2\r\n        };\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport { OutputFormatPropertyName } from \"../common.speech/Exports\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports\";\r\nimport { DialogServiceConfig, OutputFormat, PropertyId } from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport { AuthInfo, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport class DialogConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static readonly ApiKey: string = \"api\";\r\n    private static readonly BaseUrl: string = \"convai.speech\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        const applicationId: string = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\r\n        const dialogType: string = config.parameters.getProperty(PropertyId.Conversation_DialogType);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\r\n        const requestTurnStatus: string = config.parameters.getProperty(PropertyId.Conversation_Request_Bot_Status_Messages, \"true\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[HeaderNames.ConnectionId] = connectionId;\r\n        queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        queryParams[QueryParameterNames.Language] = language;\r\n        queryParams[QueryParameterNames.RequestBotStatusMessages] = requestTurnStatus;\r\n        if (applicationId) {\r\n            queryParams[QueryParameterNames.BotId] = applicationId;\r\n            if (dialogType === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                queryParams[HeaderNames.CustomCommandsAppId] = applicationId;\r\n            }\r\n        }\r\n\r\n        const resourceInfix: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"commands/\"\r\n            : \"\";\r\n        const version: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"v1\"\r\n            : dialogType === DialogServiceConfig.DialogTypes.BotFramework ? \"v3\"\r\n            : \"v0\";\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token != null && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        // The URL used for connection is chosen in a priority order of specification:\r\n        //  1. If a custom endpoint is provided, that URL is used verbatim.\r\n        //  2. If a custom host is provided (e.g. \"wss://my.custom.endpoint.com:1123\"), a URL is constructed from it.\r\n        //  3. If no custom connection details are provided, a URL is constructed from default values.\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, \"\");\r\n        if (!endpoint) {\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(\r\n                PropertyId.SpeechServiceConnection_Host,\r\n                `wss://${region}.${DialogConnectionFactory.BaseUrl}${hostSuffix}`);\r\n            const standardizedHost: string = host.endsWith(\"/\") ? host : host + \"/\";\r\n            endpoint = `${standardizedHost}${resourceInfix}${DialogConnectionFactory.ApiKey}/${version}`;\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ServicePropertiesPropertyName,\r\n} from \"../common.speech/Exports\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports\";\r\nimport { PropertyId } from \"../sdk/Exports\";\r\nimport { AuthInfo, IConnectionFactory, RecognizerConfig } from \"./Exports\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport abstract class ConnectionFactoryBase implements IConnectionFactory {\r\n\r\n    public static getHostSuffix(region: string): string {\r\n        if (!!region) {\r\n            if (region.toLowerCase().startsWith(\"china\")) {\r\n                return \".azure.cn\";\r\n            }\r\n            if (region.toLowerCase().startsWith(\"usgov\")) {\r\n                return \".azure.us\";\r\n            }\r\n        }\r\n        return \".microsoft.com\";\r\n    }\r\n\r\n    public abstract create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection;\r\n\r\n    protected setCommonUrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const propertyIdToParameterMap: Map<number, string> = new Map([\r\n            [PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging],\r\n            [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing],\r\n            [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity],\r\n            [PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, QueryParameterNames.EnableWordLevelTimestamps],\r\n            [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold],\r\n        ]);\r\n\r\n        propertyIdToParameterMap.forEach((parameterName: string, propertyId: PropertyId): void => {\r\n            this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\r\n        });\r\n\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        Object.keys(serviceProperties).forEach((value: string): void => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n\r\n    protected setUrlParameter(\r\n        propId: PropertyId,\r\n        parameterName: string,\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const value: string = config.parameters.getProperty(propId, undefined);\r\n\r\n        // FIXME: The .search() check will incorrectly match parameter name anywhere in the string\r\n        //        including e.g. the path portion, or even as a substring of other query parameters\r\n        if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\r\n            queryParams[parameterName] = value.toLocaleLowerCase();\r\n        }\r\n    }\r\n\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class QueryParameterNames {\r\n    public static BotId: string = \"botid\";\r\n    public static CustomSpeechDeploymentId: string = \"cid\";\r\n    public static CustomVoiceDeploymentId: string = \"deploymentId\";\r\n    public static EnableAudioLogging: string = \"storeAudio\";\r\n    public static EnableLanguageId: string = \"lidEnabled\";\r\n    public static EnableWordLevelTimestamps: string = \"wordLevelTimestamps\";\r\n    public static EndSilenceTimeoutMs: string = \"endSilenceTimeoutMs\";\r\n    public static SegmentationSilenceTimeoutMs: string = \"segmentationSilenceTimeoutMs\";\r\n    public static Format: string = \"format\";\r\n    public static InitialSilenceTimeoutMs: string = \"initialSilenceTimeoutMs\";\r\n    public static Language: string = \"language\";\r\n    public static Profanity: string = \"profanity\";\r\n    public static RequestBotStatusMessages: string = \"enableBotMessageStatus\";\r\n    public static StableIntermediateThreshold: string = \"stableIntermediateThreshold\";\r\n    public static StableTranslation: string = \"stableTranslation\";\r\n    public static TestHooks: string = \"testhooks\";\r\n    public static Postprocessing: string = \"postprocessing\";\r\n    public static CtsMeetingId: string = \"meetingId\";\r\n    public static CtsDeviceId: string = \"deviceId\";\r\n    public static CtsIsParticipant: string = \"isParticipant\";\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { PullAudioOutputStream } from \"./Audio/AudioOutputStream\";\r\n\r\ninterface IActivity {\r\n    conversation?: any;\r\n    id?: string;\r\n    replyToId?: string;\r\n    type?: string;\r\n    text?: string;\r\n    speak?: any;\r\n}\r\n\r\n/**\r\n * Defines contents of received message/events.\r\n * @class ActivityReceivedEventArgs\r\n */\r\nexport class ActivityReceivedEventArgs {\r\n    private privActivity: IActivity;\r\n    private privAudioStream: PullAudioOutputStream;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {any} activity - The activity..\r\n     */\r\n    public constructor(activity: any, audioStream?: PullAudioOutputStream) {\r\n        this.privActivity = activity as IActivity;\r\n        this.privAudioStream = audioStream;\r\n    }\r\n\r\n    /**\r\n     * Gets the received activity\r\n     * @member ActivityReceivedEventArgs.prototype.activity\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received activity.\r\n     */\r\n    public get activity(): any {\r\n        return this.privActivity;\r\n    }\r\n\r\n    public get audioStream(): PullAudioOutputStream {\r\n        return this.privAudioStream;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ITurnStatusResponsePayload,\r\n    TurnStatusResponsePayload\r\n    } from \"../common.speech/ServiceMessages/TurnStatusPayload\";\r\n\r\n/**\r\n * Defines contents of received message/events.\r\n * @class TurnStatusReceivedEventArgs\r\n */\r\nexport class TurnStatusReceivedEventArgs {\r\n    private privTurnStatus: ITurnStatusResponsePayload;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} turnStatus - The JSON-encoded turn status message.\r\n     */\r\n    public constructor(turnStatus: string) {\r\n        this.privTurnStatus = TurnStatusResponsePayload.fromJSON(turnStatus);\r\n    }\r\n\r\n    /**\r\n     * Gets the interaction identifier associated with this turn status event.\r\n     * @member TurnStatusReceivedEventArgs.prototype.interactionId\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received interaction id.\r\n     */\r\n    public get interactionId(): any {\r\n        return this.privTurnStatus.interactionId;\r\n    }\r\n\r\n    /**\r\n     * Gets the conversation identifier associated with this turn status event.\r\n     * @member TurnStatusReceivedEventArgs.prototype.conversationId\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received conversation id.\r\n     */\r\n    public get conversationId(): any {\r\n        return this.privTurnStatus.conversationId;\r\n    }\r\n\r\n    /**\r\n     * Gets the received turn status code.\r\n     * @member TurnStatusReceivedEventArgs.prototype.statusCode\r\n     * @function\r\n     * @public\r\n     * @returns {number} the received turn status.\r\n     */\r\n    public get statusCode(): number {\r\n        return this.privTurnStatus.statusCode; // eslint-disable-line @typescript-eslint/no-unsafe-return\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport interface ITurnStatusResponsePayload {\r\n    interactionId: string;\r\n    conversationId: string;\r\n    statusCode: any;\r\n}\r\n\r\nexport class TurnStatusResponsePayload implements ITurnStatusResponsePayload {\r\n    private privMessageStatusResponse: ITurnStatusResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privMessageStatusResponse = JSON.parse(json) as ITurnStatusResponsePayload;\r\n    }\r\n\r\n    public static fromJSON(json: string): TurnStatusResponsePayload {\r\n        return new TurnStatusResponsePayload(json);\r\n    }\r\n\r\n    public get interactionId(): string {\r\n        return this.privMessageStatusResponse.interactionId;\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privMessageStatusResponse.conversationId;\r\n    }\r\n\r\n    public get statusCode(): any {\r\n        // Payloads may contain a limited set of textual representations or a numeric status\r\n        // code. The textual values are here converted into numeric ones.\r\n        switch (this.privMessageStatusResponse.statusCode) {\r\n            case \"Success\":\r\n                return 200;\r\n            case \"Failed\":\r\n                return 400;\r\n            case \"TimedOut\":\r\n                return 429;\r\n            default:\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n                return this.privMessageStatusResponse.statusCode;\r\n        }\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines channels used to pass property settings to service.\r\n * Added in version 1.7.0.\r\n */\r\nexport enum ServicePropertyChannel {\r\n    /**\r\n     * Uses URI query parameter to pass property settings to service.\r\n     */\r\n    UriQueryParameter = 0.\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Profanity option.\r\n * Added in version 1.7.0.\r\n */\r\nexport enum ProfanityOption {\r\n    Masked = 0,\r\n    Removed = 1,\r\n    Raw = 2\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"../../common/Error\";\r\nimport { AudioStreamFormat } from \"../Exports\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\ntype AudioDataTypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array;\r\n/**\r\n * Base audio player class\r\n * TODO: Plays only PCM for now.\r\n * @class\r\n */\r\nexport class BaseAudioPlayer {\r\n\r\n    private audioContext: AudioContext = null;\r\n    private gainNode: GainNode = null;\r\n    private audioFormat: AudioStreamFormatImpl;\r\n    private autoUpdateBufferTimer: any = 0;\r\n    private samples: Float32Array;\r\n    private startTime: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} audioFormat audio stream format recognized by the player.\r\n     */\r\n    public constructor(audioFormat?: AudioStreamFormat) {\r\n        if (audioFormat === undefined) {\r\n            audioFormat = AudioStreamFormat.getDefaultInputFormat();\r\n        }\r\n        this.init(audioFormat);\r\n    }\r\n\r\n    /**\r\n     * play Audio sample\r\n     * @param newAudioData audio data to be played.\r\n     */\r\n    public playAudioSample(newAudioData: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\r\n        try {\r\n            this.ensureInitializedContext();\r\n            const audioData = this.formatAudioData(newAudioData);\r\n            const newSamplesData = new Float32Array(this.samples.length + audioData.length);\r\n            newSamplesData.set(this.samples, 0);\r\n            newSamplesData.set(audioData, this.samples.length);\r\n            this.samples = newSamplesData;\r\n            if (!!cb) {\r\n                cb();\r\n            }\r\n        } catch (e) {\r\n            if (!!err) {\r\n                err(e as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * stops audio and clears the buffers\r\n     */\r\n    public stopAudio(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.audioContext !== null) {\r\n            this.samples = new Float32Array();\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearInterval(this.autoUpdateBufferTimer);\r\n            this.audioContext.close().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.audioContext = null;\r\n        }\r\n    }\r\n\r\n    private init(audioFormat: AudioStreamFormat): void {\r\n        this.audioFormat = audioFormat as AudioStreamFormatImpl;\r\n        this.samples = new Float32Array();\r\n    }\r\n\r\n    private ensureInitializedContext(): void {\r\n        if (this.audioContext === null) {\r\n            this.createAudioContext();\r\n            const timerPeriod = 200;\r\n            this.autoUpdateBufferTimer = setInterval((): void => {\r\n                this.updateAudioBuffer();\r\n            }, timerPeriod);\r\n        }\r\n    }\r\n\r\n    private createAudioContext(): void {\r\n        // new ((window as any).AudioContext || (window as any).webkitAudioContext)();\r\n        this.audioContext = AudioStreamFormatImpl.getAudioContext();\r\n\r\n        // TODO: Various examples shows this gain node, it does not seem to be needed unless we plan\r\n        // to control the volume, not likely\r\n        this.gainNode = this.audioContext.createGain();\r\n        this.gainNode.gain.value = 1;\r\n        this.gainNode.connect(this.audioContext.destination);\r\n        this.startTime = this.audioContext.currentTime;\r\n    }\r\n\r\n    private formatAudioData(audioData: ArrayBuffer): Float32Array {\r\n        switch (this.audioFormat.bitsPerSample) {\r\n            case 8:\r\n                return this.formatArrayBuffer(new Int8Array(audioData), 128);\r\n            case 16:\r\n                return this.formatArrayBuffer(new Int16Array(audioData), 32768);\r\n            case 32:\r\n                return this.formatArrayBuffer(new Int32Array(audioData), 2147483648);\r\n            default:\r\n                throw new InvalidOperationError(\"Only WAVE_FORMAT_PCM (8/16/32 bps) format supported at this time\");\r\n        }\r\n    }\r\n\r\n    private formatArrayBuffer(audioData: AudioDataTypedArray, maxValue: number): Float32Array {\r\n        const float32Data = new Float32Array(audioData.length);\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            float32Data[i] = audioData[i] / maxValue;\r\n        }\r\n        return float32Data;\r\n    }\r\n\r\n    private updateAudioBuffer(): void {\r\n        if (this.samples.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const channelCount = this.audioFormat.channels;\r\n        const bufferSource = this.audioContext.createBufferSource();\r\n        const frameCount = this.samples.length / channelCount;\r\n        const audioBuffer = this.audioContext.createBuffer(channelCount, frameCount, this.audioFormat.samplesPerSec);\r\n\r\n        // TODO: Should we do the conversion in the pushAudioSample instead?\r\n        for (let channel = 0; channel < channelCount; channel++) {\r\n            // Fill in individual channel data\r\n            let channelOffset = channel;\r\n            const audioData = audioBuffer.getChannelData(channel);\r\n            for (let i = 0; i < this.samples.length; i++, channelOffset += channelCount) {\r\n                audioData[i] = this.samples[channelOffset];\r\n            }\r\n        }\r\n\r\n        if (this.startTime < this.audioContext.currentTime) {\r\n            this.startTime = this.audioContext.currentTime;\r\n        }\r\n\r\n        bufferSource.buffer = audioBuffer;\r\n        bufferSource.connect(this.gainNode);\r\n        bufferSource.start(this.startTime);\r\n\r\n        // Make sure we play the next sample after the current one.\r\n        this.startTime += audioBuffer.duration;\r\n\r\n        // Clear the samples for the next pushed data.\r\n        this.samples = new Float32Array();\r\n    }\r\n\r\n    private async playAudio(audioData: ArrayBuffer): Promise<void> {\r\n        if (this.audioContext === null) {\r\n            this.createAudioContext();\r\n        }\r\n        const source: AudioBufferSourceNode = this.audioContext.createBufferSource();\r\n        const destination: AudioDestinationNode = this.audioContext.destination;\r\n        await this.audioContext.decodeAudioData(audioData, (newBuffer: AudioBuffer): void => {\r\n            source.buffer = newBuffer;\r\n            source.connect(destination);\r\n            source.start(0);\r\n        });\r\n    }\r\n}\r\n",null,"//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport {\r\n    ConnectionMessage\r\n} from \"./Exports\";\r\n\r\nexport class ConnectionMessageEventArgs {\r\n\r\n    private privConnectionMessage: ConnectionMessage;\r\n\r\n    public constructor(message: ConnectionMessage) {\r\n        this.privConnectionMessage = message;\r\n    }\r\n\r\n    /**\r\n     * Gets the <see cref=\"ConnectionMessage\"/> associated with this <see cref=\"ConnectionMessageEventArgs\"/>.\r\n     */\r\n    public get message(): ConnectionMessage {\r\n        return this.privConnectionMessage;\r\n    }\r\n\r\n    /**\r\n     * Returns a string that represents the connection message event.\r\n     */\r\n    public toString(): string {\r\n        return \"Message: \" + this.privConnectionMessage.toString();\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { VoiceProfileType } from \"./Exports\";\r\n\r\n/**\r\n * Defines Voice Profile class for Speaker Recognition\r\n * @class VoiceProfile\r\n */\r\nexport class VoiceProfile {\r\n    private privId: string;\r\n    private privProfileType: VoiceProfileType;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} profileId - profileId of this Voice Profile.\r\n     * @param {VoiceProfileType} profileType - profileType of this Voice Profile.\r\n     */\r\n    public constructor(profileId: string, profileType: VoiceProfileType) {\r\n        this.privId = profileId;\r\n        this.privProfileType = profileType;\r\n    }\r\n\r\n    /**\r\n     * profileId of this Voice Profile instance\r\n     * @member VoiceProfile.prototype.profileId\r\n     * @function\r\n     * @public\r\n     * @returns {string} profileId of this Voice Profile instance.\r\n     */\r\n    public get profileId(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * profileType of this Voice Profile instance\r\n     * @member VoiceProfile.prototype.profileType\r\n     * @function\r\n     * @public\r\n     * @returns {VoiceProfileType} profile type of this Voice Profile instance.\r\n     */\r\n    public get profileType(): VoiceProfileType {\r\n        return this.privProfileType;\r\n    }\r\n\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    ResultReason\r\n} from \"./Exports\";\r\n\r\nexport interface EnrollmentResultDetails {\r\n    profileId: string;\r\n    enrollmentsCount: number;\r\n    enrollmentsLength: number;\r\n    enrollmentsSpeechLength: number;\r\n    remainingEnrollmentsCount: number;\r\n    remainingEnrollmentsSpeechLength: number;\r\n    audioLength: number;\r\n    audioSpeechLength: number;\r\n    enrollmentStatus: string;\r\n}\r\n\r\nexport interface EnrollmentResultJSON {\r\n    profileId: string;\r\n    enrollmentsCount: number;\r\n    enrollmentsLength: string;\r\n    enrollmentsSpeechLength: string;\r\n    remainingEnrollmentsCount: number;\r\n    remainingEnrollmentsSpeechLength: string;\r\n    audioLength: string;\r\n    audioSpeechLength: string;\r\n    enrollmentStatus: string;\r\n    remainingEnrollments?: number;\r\n    identificationProfileId?: string;\r\n    verificationProfileId?: string;\r\n}\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileEnrollmentResult\r\n */\r\nexport class VoiceProfileEnrollmentResult {\r\n    private privReason: ResultReason;\r\n    private privDetails: EnrollmentResultDetails;\r\n    private privProperties: PropertyCollection;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(reason: ResultReason, json: string, statusText: string) {\r\n        this.privReason = reason;\r\n        this.privProperties = new PropertyCollection();\r\n        if (this.privReason !== ResultReason.Canceled) {\r\n            if (!!json) {\r\n                this.privDetails = JSON.parse(json) as EnrollmentResultDetails;\r\n                if (this.privDetails.enrollmentStatus.toLowerCase() === \"enrolling\") {\r\n                    this.privReason = ResultReason.EnrollingVoiceProfile;\r\n                }\r\n            }\r\n        } else {\r\n            this.privErrorDetails = statusText;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\r\n        }\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get enrollmentsCount(): number {\r\n        return this.privDetails.enrollmentsCount;\r\n    }\r\n\r\n    public get enrollmentsLength(): number {\r\n        return this.privDetails.enrollmentsLength;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get enrollmentResultDetails(): EnrollmentResultDetails {\r\n        return this.privDetails;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    public static FromIdentificationProfileList(json: { value: EnrollmentResultJSON[] }): VoiceProfileEnrollmentResult[] {\r\n        const results: VoiceProfileEnrollmentResult[] = [];\r\n        for (const item of json.value) {\r\n            const reason: ResultReason = item.enrollmentStatus.toLowerCase() === \"enrolling\" ?\r\n                ResultReason.EnrollingVoiceProfile : item.enrollmentStatus.toLowerCase() === \"enrolled\" ?\r\n                ResultReason.EnrolledVoiceProfile : ResultReason.Canceled;\r\n            const result = new VoiceProfileEnrollmentResult(reason, null, null);\r\n            result.privDetails = this.getIdentificationDetails(item) as EnrollmentResultDetails;\r\n            results.push(result);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    public static FromVerificationProfileList(json: { value: EnrollmentResultJSON[] }): VoiceProfileEnrollmentResult[] {\r\n        const results: VoiceProfileEnrollmentResult[] = [];\r\n        for (const item of json.value) {\r\n            const reason: ResultReason = item.enrollmentStatus.toLowerCase() === \"enrolling\" ?\r\n                ResultReason.EnrollingVoiceProfile : item.enrollmentStatus.toLowerCase() === \"enrolled\" ?\r\n                ResultReason.EnrolledVoiceProfile : ResultReason.Canceled;\r\n            const result = new VoiceProfileEnrollmentResult(reason, null, null);\r\n            result.privDetails = this.getVerificationDetails(item) as EnrollmentResultDetails;\r\n            results.push(result);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    private static getIdentificationDetails(json: EnrollmentResultJSON): unknown {\r\n        return {\r\n            audioLength: json.audioLength ? parseFloat(json.audioLength) : 0,\r\n            audioSpeechLength: json.audioSpeechLength ? parseFloat(json.audioSpeechLength) : 0,\r\n            enrollmentStatus: json.enrollmentStatus,\r\n            enrollmentsCount: json.enrollmentsCount || 0,\r\n            enrollmentsLength: json.enrollmentsLength ? parseFloat(json.enrollmentsLength) : 0,\r\n            enrollmentsSpeechLength: json.enrollmentsSpeechLength ? parseFloat(json.enrollmentsSpeechLength) : 0,\r\n            profileId: json.profileId || json.identificationProfileId,\r\n            remainingEnrollmentsSpeechLength: json.remainingEnrollmentsSpeechLength ? parseFloat(json.remainingEnrollmentsSpeechLength) : 0\r\n        };\r\n    }\r\n\r\n    private static getVerificationDetails(json: EnrollmentResultJSON): unknown {\r\n        return {\r\n            audioLength: json.audioLength ? parseFloat(json.audioLength) : 0,\r\n            audioSpeechLength: json.audioSpeechLength ? parseFloat(json.audioSpeechLength) : 0,\r\n            enrollmentStatus: json.enrollmentStatus,\r\n            enrollmentsCount: json.enrollmentsCount,\r\n            enrollmentsLength: json.enrollmentsLength ? parseFloat(json.enrollmentsLength) : 0,\r\n            enrollmentsSpeechLength: json.enrollmentsSpeechLength ? parseFloat(json.enrollmentsSpeechLength) : 0,\r\n            profileId: json.profileId || json.verificationProfileId,\r\n            remainingEnrollmentsCount: json.remainingEnrollments || json.remainingEnrollmentsCount,\r\n            remainingEnrollmentsSpeechLength: json.remainingEnrollmentsSpeechLength ? parseFloat(json.remainingEnrollmentsSpeechLength) : 0\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * @class VoiceProfileEnrollmentCancellationDetails\r\n */\r\nexport class VoiceProfileEnrollmentCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of VoiceProfileEnrollmentCancellationDetails object for the canceled VoiceProfileEnrollmentResult.\r\n     * @member VoiceProfileEnrollmentCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileEnrollmentResult} result - The result that was canceled.\r\n     * @returns {VoiceProfileEnrollmentCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: VoiceProfileEnrollmentResult): VoiceProfileEnrollmentCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])]; //eslint-disable-line\r\n        }\r\n\r\n        return new VoiceProfileEnrollmentCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    ResultReason\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileResult\r\n */\r\nexport class VoiceProfileResult {\r\n    private privReason: ResultReason;\r\n    private privProperties: PropertyCollection;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(reason: ResultReason, statusText: string) {\r\n        this.privReason = reason;\r\n        this.privProperties = new PropertyCollection();\r\n        if (reason === ResultReason.Canceled) {\r\n            Contracts.throwIfNullOrUndefined(statusText, \"statusText\");\r\n            this.privErrorDetails = statusText;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\r\n        }\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n\r\n/**\r\n * @class VoiceProfileCancellationDetails\r\n */\r\nexport class VoiceProfileCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of VoiceProfileCancellationDetails object for the canceled VoiceProfileResult.\r\n     * @member VoiceProfileCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileResult} result - The result that was canceled.\r\n     * @returns {VoiceProfileCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: VoiceProfileResult): VoiceProfileCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])]; //eslint-disable-line\r\n        }\r\n\r\n        return new VoiceProfileCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    ResultReason,\r\n    VoiceProfileResult\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfilePhraseResult\r\n */\r\nexport class VoiceProfilePhraseResult extends VoiceProfileResult {\r\n    private privPhrases: string[] = [];\r\n    private privType: string;\r\n\r\n    public constructor(reason: ResultReason, statusText: string, type: string, phraseArray: string[]) {\r\n        super(reason, statusText);\r\n        Contracts.throwIfNullOrUndefined(phraseArray, \"phrase array\");\r\n        this.privType = type;\r\n        if (!!phraseArray && !!phraseArray[0]) {\r\n            this.privPhrases = phraseArray;\r\n        }\r\n    }\r\n\r\n    public get phrases(): string[] {\r\n        return this.privPhrases;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privType;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRestResponse\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    VoiceProfileConnectionFactory,\r\n    VoiceServiceRecognizer\r\n} from \"../common.speech/Exports\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioInputStream,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    ResultReason,\r\n    VoiceProfile,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfilePhraseResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Defines VoiceProfileClient class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class VoiceProfileClient\r\n */\r\nexport class VoiceProfileClient extends Recognizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privVoiceAdapter: VoiceServiceRecognizer;\r\n    private privDisposedVoiceAdapter: boolean;\r\n\r\n    /**\r\n     * VoiceProfileClient constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\r\n     */\r\n    public constructor(speechConfig: SpeechConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        super(AudioConfig.fromStreamInput(AudioInputStream.createPushStream()), speechConfigImpl.properties, new VoiceProfileConnectionFactory());\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.privVoiceAdapter = this.privReco as VoiceServiceRecognizer;\r\n        this.privDisposedVoiceAdapter = false;\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this VoiceProfileClient.\r\n     * @member VoiceProfileClient.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.createProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Type of Voice Profile to be created\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     * @return {Promise<VoiceProfile>} - Promise of a VoiceProfile.\r\n     */\r\n    public async createProfileAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfile> {\r\n        const profileIds: string[] = await this.privVoiceAdapter.createProfile(profileType, lang);\r\n        return new VoiceProfile(profileIds[0], profileType);\r\n    }\r\n\r\n    /**\r\n     * Get current information of a voice profile\r\n     * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to retrieve info for\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async retrieveEnrollmentResultAsync(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        return this.privVoiceAdapter.retrieveEnrollmentResult(profile);\r\n    }\r\n\r\n    /**\r\n     * Get all voice profiles on account with given voice profile type\r\n     * @member VoiceProfileClient.prototype.getAllProfilesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\r\n     * @return {Promise<VoiceProfileEnrollmentResult[]>} - Promise of an array of VoiceProfileEnrollmentResults.\r\n     */\r\n    public async getAllProfilesAsync(profileType: VoiceProfileType): Promise<VoiceProfileEnrollmentResult[]> {\r\n        return this.privVoiceAdapter.getAllProfiles(profileType);\r\n        /*\r\n        const result: { json: { value: EnrollmentResultJSON[] } } = await this.privAdapter.getProfiles(profileType);\r\n        if (profileType === VoiceProfileType.TextIndependentIdentification) {\r\n            return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json);\r\n        }\r\n        return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json);\r\n        */\r\n    }\r\n\r\n    /**\r\n     * Get valid authorization phrases for voice profile enrollment\r\n     * @member VoiceProfileClient.prototype.getActivationPhrasesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Profile Type to get activation phrases for\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     */\r\n    public async getActivationPhrasesAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfilePhraseResult> {\r\n        return this.privVoiceAdapter.getActivationPhrases(profileType, lang);\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.enrollProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to create enrollment for\r\n     * @param {AudioConfig} audioConfig source info from which to create enrollment\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async enrollProfileAsync(profile: VoiceProfile, audioConfig: AudioConfig): Promise<VoiceProfileEnrollmentResult> {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\r\n        this.audioConfig = audioConfig;\r\n        this.privVoiceAdapter.SpeakerAudioSource = configImpl;\r\n\r\n        return this.privVoiceAdapter.enrollProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Delete a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.deleteProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be deleted\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async deleteProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        return this.privVoiceAdapter.deleteProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Remove all enrollments for a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.resetProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be reset\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async resetProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        return this.privVoiceAdapter.resetProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Clean up object and close underlying connection\r\n     * @member VoiceProfileClient.prototype.close\r\n     * @function\r\n     * @async\r\n     * @public\r\n     */\r\n    public async close(): Promise<void> {\r\n        await this.dispose(true);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new VoiceServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedVoiceAdapter) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedVoiceAdapter = true;\r\n\r\n        if (disposing) {\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.properties);\r\n    }\r\n\r\n    private getResult(result: IRestResponse, successReason: ResultReason): VoiceProfileResult {\r\n        const response: VoiceProfileResult =\r\n            new VoiceProfileResult(\r\n                result.ok ? successReason : ResultReason.Canceled,\r\n                result.statusText\r\n            );\r\n        return (response);\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeakerRecognitionConnectionFactory,\r\n    SpeakerServiceRecognizer,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeakerIdentificationModel,\r\n    SpeakerRecognitionResult,\r\n    SpeakerVerificationModel,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Defines SpeakerRecognizer class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class SpeakerRecognizer\r\n */\r\nexport class SpeakerRecognizer extends Recognizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privDisposedSpeakerRecognizer: boolean;\r\n    private privAudioConfigImpl: AudioConfigImpl;\r\n    /**\r\n     * Initializes an instance of the SpeakerRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new SpeakerRecognitionConnectionFactory());\r\n        this.privAudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\r\n\r\n        this.privDisposedSpeakerRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeakerRecognizer.\r\n     * @member SpeakerRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Get recognition result for model using given audio\r\n     * @member SpeakerRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {SpeakerIdentificationModel | SpeakerVerificationModel} model Model containing Voice Profiles to be identified\r\n     * @param cb - Callback invoked once result is returned.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public async recognizeOnceAsync(model: SpeakerIdentificationModel | SpeakerVerificationModel): Promise<SpeakerRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n\r\n        return this.recognizeSpeakerOnceAsyncImpl(model);\r\n    }\r\n\r\n    /**\r\n     * Included for compatibility\r\n     * @member SpeakerRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     * @async\r\n     */\r\n    public async close(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n        await this.dispose(true);\r\n    }\r\n\r\n    protected async recognizeSpeakerOnceAsyncImpl(model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n\r\n        await this.implRecognizerStop();\r\n        const result: SpeakerRecognitionResult = await this.privReco.recognizeSpeaker(model);\r\n        await this.implRecognizerStop();\r\n\r\n        return result;\r\n    }\r\n\r\n    protected async implRecognizerStop(): Promise<void> {\r\n        if (this.privReco) {\r\n            await this.privReco.stopRecognizing();\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeakerServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedSpeakerRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedSpeakerRecognizer = true;\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel\";\r\nimport {\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines SpeakerIdentificationModel class for Speaker Recognition\r\n * Model contains a set of profiles against which to identify speaker(s)\r\n * @class SpeakerIdentificationModel\r\n */\r\nexport class SpeakerIdentificationModel implements SpeakerRecognitionModel {\r\n    private privVoiceProfiles: VoiceProfile[] = [];\r\n    private privProfileIds: string[] = [];\r\n\r\n    private constructor(profiles: VoiceProfile[]) {\r\n        Contracts.throwIfNullOrUndefined(profiles, \"VoiceProfiles\");\r\n        if (profiles.length === 0) {\r\n            throw new Error(\"Empty Voice Profiles array\");\r\n        }\r\n        for (const profile of profiles) {\r\n            if (profile.profileType !== VoiceProfileType.TextIndependentIdentification) {\r\n                throw new Error(\"Identification model can only be created from Identification profile: \" + profile.profileId);\r\n            }\r\n            this.privVoiceProfiles.push(profile);\r\n            this.privProfileIds.push(profile.profileId);\r\n        }\r\n    }\r\n    public static fromProfiles(profiles: VoiceProfile[]): SpeakerIdentificationModel {\r\n        return new SpeakerIdentificationModel(profiles);\r\n    }\r\n\r\n    public get voiceProfileIds(): string {\r\n        return this.privProfileIds.join(\",\");\r\n    }\r\n\r\n    public get profileIds(): string[] {\r\n        return this.privProfileIds;\r\n    }\r\n\r\n    public get scenario(): string {\r\n        return \"TextIndependentIdentification\";\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel\";\r\nimport {\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines SpeakerVerificationModel class for Speaker Recognition\r\n * Model contains a profile against which to verify a speaker\r\n * @class SpeakerVerificationModel\r\n */\r\nexport class SpeakerVerificationModel implements SpeakerRecognitionModel {\r\n    private privVoiceProfile: VoiceProfile;\r\n\r\n    private constructor(profile: VoiceProfile) {\r\n        Contracts.throwIfNullOrUndefined(profile, \"VoiceProfile\");\r\n        if (profile.profileType === VoiceProfileType.TextIndependentIdentification) {\r\n            throw new Error(\"Verification model cannot be created from Identification profile\");\r\n        }\r\n        this.privVoiceProfile = profile;\r\n    }\r\n\r\n    public static fromProfile(profile: VoiceProfile): SpeakerVerificationModel {\r\n        return new SpeakerVerificationModel(profile);\r\n    }\r\n\r\n    public get voiceProfile(): VoiceProfile {\r\n        return this.privVoiceProfile;\r\n    }\r\n\r\n    public get profileIds(): string[] {\r\n        return [ this.voiceProfile.profileId ];\r\n    }\r\n\r\n    public get scenario(): string {\r\n        if (this.voiceProfile.profileType === VoiceProfileType.TextDependentVerification) {\r\n            return \"TextDependentVerification\";\r\n        } else {\r\n            return \"TextIndependentVerification\";\r\n        }\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AutoDetectSourceLanguagesOpenRangeOptionName } from \"../common.speech/Exports\";\r\nimport {Contracts} from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SourceLanguageConfig,\r\n} from \"./Exports\";\r\nimport { LanguageIdMode } from \"./LanguageIdMode\";\r\n\r\n/**\r\n * Language auto detect configuration.\r\n * @class AutoDetectSourceLanguageConfig\r\n * Added in version 1.13.0.\r\n */\r\nexport class AutoDetectSourceLanguageConfig {\r\n    private privProperties: PropertyCollection;\r\n    private privLanguageIdMode: LanguageIdMode;\r\n\r\n    private constructor() {\r\n        this.privProperties = new PropertyCollection();\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"AtStart\");\r\n        this.privLanguageIdMode = LanguageIdMode.AtStart;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromOpenRange\r\n     * @function\r\n     * @public\r\n     * Only [[SpeechSynthesizer]] supports source language auto detection from open range,\r\n     * for [[Recognizer]], please use AutoDetectSourceLanguageConfig with specific source languages.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with open range.\r\n     */\r\n    public static fromOpenRange(): AutoDetectSourceLanguageConfig {\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, AutoDetectSourceLanguagesOpenRangeOptionName);\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string[]} languages Comma-separated string of languages (eg. \"en-US,fr-FR\") to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given languages.\r\n     */\r\n    public static fromLanguages(languages: string[]): AutoDetectSourceLanguageConfig {\r\n        Contracts.throwIfArrayEmptyOrWhitespace(languages, \"languages\");\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, languages.join());\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs\r\n     * @function\r\n     * @public\r\n     * @param {SourceLanguageConfig[]} configs SourceLanguageConfigs to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given SourceLanguageConfigs.\r\n     */\r\n    public static fromSourceLanguageConfigs(configs: SourceLanguageConfig[]): AutoDetectSourceLanguageConfig {\r\n        if (configs.length < 1) {\r\n            throw new Error(\"Expected non-empty SourceLanguageConfig array.\");\r\n        }\r\n        const autoConfig = new AutoDetectSourceLanguageConfig();\r\n        const langs: string[] = [];\r\n        configs.forEach((config: SourceLanguageConfig): void => {\r\n            langs.push(config.language);\r\n            if (config.endpointId !== undefined && config.endpointId !== \"\") {\r\n                const customProperty = config.language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                autoConfig.properties.setProperty(customProperty, config.endpointId);\r\n            }\r\n        });\r\n        autoConfig.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, langs.join());\r\n\r\n        return autoConfig;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets an auto detected language config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.mode\r\n     * @function\r\n     * @public\r\n     * @param {LanguageIdMode} mode LID mode desired.\r\n     * @summary Sets LID operation to desired mode\r\n     */\r\n    public set mode(mode: LanguageIdMode) {\r\n        if (mode === LanguageIdMode.Continuous) {\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"Continuous\");\r\n        } else { // LanguageIdMode.AtStart\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"1\");\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"AtStart\");\r\n        }\r\n        this.privLanguageIdMode = mode;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Language Identification mode\r\n * @class LanguageIdMode\r\n */\r\nexport enum LanguageIdMode {\r\n\r\n    /**\r\n     * Detect language at audio start\r\n     * @member LanguageIdMode.AtStart\r\n     */\r\n    AtStart,\r\n\r\n    /**\r\n     * Continuously detect language\r\n     * @member LanguageIdMode.Continuous\r\n     */\r\n    Continuous,\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    SpeechRecognitionResult,\r\n    ConversationTranscriptionResult\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Output format\r\n * @class AutoDetectSourceLanguageResult\r\n */\r\nexport class AutoDetectSourceLanguageResult {\r\n\r\n    private privLanguage: string;\r\n    private privLanguageDetectionConfidence: string;\r\n\r\n    private constructor(language: string, languageDetectionConfidence: string) {\r\n        Contracts.throwIfNullOrUndefined(language, \"language\");\r\n        Contracts.throwIfNullOrUndefined(languageDetectionConfidence, \"languageDetectionConfidence\");\r\n        this.privLanguage = language;\r\n        this.privLanguageDetectionConfidence = languageDetectionConfidence;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of AutoDetectSourceLanguageResult object from a SpeechRecognitionResult instance.\r\n     * @member AutoDetectSourceLanguageResult.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeechRecognitionResult} result - The recognition result.\r\n     * @returns {AutoDetectSourceLanguageResult} AutoDetectSourceLanguageResult object being created.\r\n     */\r\n    public static fromResult(result: SpeechRecognitionResult): AutoDetectSourceLanguageResult {\r\n        return new AutoDetectSourceLanguageResult(result.language, result.languageDetectionConfidence);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of AutoDetectSourceLanguageResult object from a ConversationTranscriptionResult instance.\r\n     * @member AutoDetectSourceLanguageResult.fromConversationTranscriptionResult\r\n     * @function\r\n     * @public\r\n     * @param {ConversationTranscriptionResult} result - The transcription result.\r\n     * @returns {AutoDetectSourceLanguageResult} AutoDetectSourceLanguageResult object being created.\r\n     */\r\n        public static fromConversationTranscriptionResult(result: ConversationTranscriptionResult): AutoDetectSourceLanguageResult {\r\n            return new AutoDetectSourceLanguageResult(result.language, result.languageDetectionConfidence);\r\n        }\r\n\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get languageDetectionConfidence(): string {\r\n        return this.privLanguageDetectionConfidence;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\n\r\n/**\r\n * Source Language configuration.\r\n * @class SourceLanguageConfig\r\n */\r\nexport class SourceLanguageConfig {\r\n    private privLanguage: string;\r\n    private privEndpointId: string;\r\n\r\n    private constructor(language: string, endpointId?: string) {\r\n        Contracts.throwIfNullOrUndefined(language, \"language\");\r\n        this.privLanguage = language;\r\n        this.privEndpointId = endpointId;\r\n    }\r\n\r\n    /**\r\n     * @member SourceLanguageConfig.fromLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} language language (eg. \"en-US\") value of config.\r\n     * @param {string?} endpointId endpointId of model bound to given language of config.\r\n     * @return {SourceLanguageConfig} Instance of SourceLanguageConfig\r\n     * @summary Creates an instance of the SourceLanguageConfig with the given language and optional endpointId.\r\n     * Added in version 1.13.0.\r\n     */\r\n    public static fromLanguage(language: string, endpointId?: string): SourceLanguageConfig {\r\n        return new SourceLanguageConfig(language, endpointId);\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get endpointId(): string {\r\n        return this.privEndpointId;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName, SpeakerResponse } from \"../common.speech/Exports\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n} from \"./Exports\";\r\n\r\nexport enum SpeakerRecognitionResultType {\r\n    Verify,\r\n    Identify\r\n}\r\n\r\n/**\r\n * Output format\r\n * @class SpeakerRecognitionResult\r\n */\r\nexport class SpeakerRecognitionResult {\r\n    private privReason: ResultReason;\r\n    private privProperties: PropertyCollection;\r\n    private privProfileId: string;\r\n    private privScore: number;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(response: SpeakerResponse, resultReason: ResultReason = ResultReason.RecognizedSpeaker, cancellationErrorCode: CancellationErrorCode = CancellationErrorCode.NoError, errorDetails: string = \"\") {\r\n        this.privProperties = new PropertyCollection();\r\n        const resultType = response.scenario === \"TextIndependentIdentification\" ? SpeakerRecognitionResultType.Identify : SpeakerRecognitionResultType.Verify;\r\n        this.privReason = resultReason;\r\n        if (this.privReason !== ResultReason.Canceled) {\r\n            if (resultType === SpeakerRecognitionResultType.Identify) {\r\n                this.privProfileId = response.identificationResult.identifiedProfile.profileId;\r\n                this.privScore = response.identificationResult.identifiedProfile.score;\r\n                this.privReason = ResultReason.RecognizedSpeakers;\r\n            } else {\r\n                this.privScore = response.verificationResult.score;\r\n                if (response.verificationResult.recognitionResult.toLowerCase() !== \"accept\") {\r\n                    this.privReason = ResultReason.NoMatch;\r\n                }\r\n                if (response.verificationResult.profileId !== undefined && response.verificationResult.profileId !== \"\") {\r\n                    this.privProfileId = response.verificationResult.profileId;\r\n                }\r\n            }\r\n        } else {\r\n            this.privErrorDetails = errorDetails;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[cancellationErrorCode]);\r\n        }\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_JsonResult, JSON.stringify(response));\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get profileId(): string {\r\n        return this.privProfileId;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    public get score(): number {\r\n        return this.privScore;\r\n    }\r\n}\r\n\r\n/**\r\n * @class SpeakerRecognitionCancellationDetails\r\n */\r\nexport class SpeakerRecognitionCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of SpeakerRecognitionCancellationDetails object for the canceled SpeakerRecognitionResult\r\n     * @member SpeakerRecognitionCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeakerRecognitionResult} result - The result that was canceled.\r\n     * @returns {SpeakerRecognitionCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: SpeakerRecognitionResult): SpeakerRecognitionCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = CancellationErrorCode[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError]) as keyof typeof CancellationErrorCode];\r\n        }\r\n\r\n        return new SpeakerRecognitionCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nexport { Conversation, ConversationImpl } from \"./Conversation\";\r\nexport { ConversationInfo } from \"./IConversation\";\r\nexport { ConversationCommon } from \"./ConversationCommon\";\r\nexport { ConversationExpirationEventArgs } from \"./ConversationExpirationEventArgs\";\r\nexport { ConversationParticipantsChangedEventArgs } from \"./ConversationParticipantsChangedEventArgs\";\r\nexport { ConversationTranslationCanceledEventArgs } from \"./ConversationTranslationCanceledEventArgs\";\r\nexport { ConversationTranslationEventArgs } from \"./ConversationTranslationEventArgs\";\r\nexport { ConversationTranslationResult } from \"./ConversationTranslationResult\";\r\nexport { ConversationTranslator } from \"./ConversationTranslator\";\r\nexport { ConversationTranscriber } from \"./ConversationTranscriber\";\r\nexport { IParticipant, Participant, User, VoiceSignature } from \"./IParticipant\";\r\nexport { ParticipantChangedReason } from \"./ParticipantChangedReason\";\r\nexport { ConversationHandler, ConversationTranscriptionHandler, IConversationTranslator } from \"./ConversationHandler\";\r\nexport { Meeting, MeetingImpl } from \"./Meeting\";\r\nexport { MeetingInfo } from \"./IMeeting\";\r\nexport { MeetingTranscriptionCanceledEventArgs } from \"./MeetingTranscriptionCanceledEventArgs\";\r\nexport { MeetingTranscriber } from \"./MeetingTranscriber\";\r\nexport { MeetingHandler, MeetingTranscriptionHandler } from \"./MeetingHandler\";\r\nexport { ConversationTranscriptionResult } from \"./ConversationTranscriptionResult\";\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    ConversationManager,\r\n    ConversationReceivedTranslationEventArgs,\r\n    ConversationRecognizer,\r\n    ConversationRecognizerFactory,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IAuthentication,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs,\r\n    TranscriberRecognizer\r\n} from \"../../common.speech/Exports\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslator,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechTranslationConfig,\r\n} from \"../Exports\";\r\nimport { SpeechTranslationConfigImpl } from \"../SpeechTranslationConfig\";\r\nimport { Callback, ConversationInfo, ConversationProperties, IConversation } from \"./IConversation\";\r\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant\";\r\n\r\nexport abstract class Conversation implements IConversation {\r\n\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    public abstract get authorizationToken(): string;\r\n\r\n    public abstract get config(): SpeechTranslationConfig;\r\n\r\n    public abstract get conversationId(): string;\r\n    public abstract get conversationInfo(): ConversationInfo;\r\n    public abstract get properties(): PropertyCollection;\r\n    public abstract get speechRecognitionLanguage(): string;\r\n    public abstract get participants(): Participant[];\r\n    public abstract set authorizationToken(value: string);\r\n    public abstract get isConnected(): boolean;\r\n\r\n    /**\r\n     * Create a conversation\r\n     * @param speechConfig\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public static createConversationAsync(speechConfig: SpeechTranslationConfig, arg2?: string | Callback, arg3?: Callback, arg4?: Callback): Conversation {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n        Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\r\n        if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\r\n            Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\r\n        }\r\n        let conversationImpl: ConversationImpl;\r\n        let cb: Callback;\r\n        let err: Callback;\r\n        if (typeof arg2 === \"string\") {\r\n            conversationImpl = new ConversationImpl(speechConfig, arg2);\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            marshalPromiseToCallbacks((async (): Promise<void> => {})(), arg3, arg4);\r\n        } else {\r\n            conversationImpl = new ConversationImpl(speechConfig);\r\n            cb = arg2;\r\n            err = arg3;\r\n            conversationImpl.createConversationAsync(\r\n                ((): void => {\r\n                    if (!!cb) {\r\n                        cb();\r\n                    }\r\n                }),\r\n                (error: any): void => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                });\r\n        }\r\n        return conversationImpl;\r\n\r\n    }\r\n\r\n    /** Start a conversation. */\r\n    public abstract startConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Delete a conversation. After this no one will be able to join the conversation. */\r\n    public abstract deleteConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** End a conversation. */\r\n    public abstract endConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Lock a conversation. This will prevent new participants from joining. */\r\n    public abstract lockConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Add Participant to Conversation. */\r\n    public abstract addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute all other participants in the conversation. After this no other participants will\r\n     * have their speech recognitions broadcast, nor be able to send text messages.\r\n     */\r\n    public abstract muteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Remove a participant from a conversation using the user id, Participant or User object\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unlocks a conversation. */\r\n    public abstract unlockConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unmute all other participants in the conversation. */\r\n    public abstract unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Unmute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n}\r\n\r\nexport class ConversationImpl extends Conversation implements IDisposable {\r\n\r\n    private privConfig: SpeechTranslationConfig;\r\n    private privProperties: PropertyCollection;\r\n    private privLanguage: string;\r\n    private privToken: string;\r\n    private privIsDisposed: boolean;\r\n    private privRoom: IInternalConversation;\r\n    private privManager: ConversationManager;\r\n    private privConversationRecognizer: ConversationRecognizer;\r\n    private privIsConnected: boolean;\r\n    private privParticipants: InternalParticipants;\r\n    private privIsReady: boolean;\r\n    private privConversationTranslator: ConversationTranslator;\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privConversationId: string;\r\n    private readonly privTextMessageMaxLength: number;\r\n\r\n    /**\r\n     * Create a conversation impl\r\n     * @param speechConfig\r\n     * @param {string} id - optional conversationId\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, id?: string) {\r\n        super();\r\n        this.privIsConnected = false;\r\n        this.privIsDisposed = false;\r\n        this.privConversationId = \"\";\r\n        this.privProperties = new PropertyCollection();\r\n        this.privManager = new ConversationManager();\r\n\r\n        // check the speech language\r\n        const language: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        if (!language) {\r\n            speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\r\n        }\r\n        this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        if (!id) {\r\n            // check the target language(s)\r\n            if (speechConfig.targetLanguages.length === 0) {\r\n                speechConfig.addTargetLanguage(this.privLanguage);\r\n            }\r\n\r\n            // check the profanity setting: speech and conversationTranslator should be in sync\r\n            const profanity: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceResponse_ProfanityOption]);\r\n            if (!profanity) {\r\n                speechConfig.setProfanity(ProfanityOption.Masked);\r\n            }\r\n            // check the nickname: it should pass this regex: ^\\w+([\\s-][\\w\\(\\)]+)*$\"\r\n            // TODO: specify the regex required. Nicknames must be unique or get the duplicate nickname error\r\n            // TODO: check what the max length is and if a truncation is required or if the service handles it without an error\r\n            let hostNickname: string = speechConfig.getProperty(PropertyId[PropertyId.ConversationTranslator_Name]);\r\n            if (hostNickname === undefined || hostNickname === null) {\r\n                hostNickname = \"Host\";\r\n            }\r\n            Contracts.throwIfNullOrTooLong(hostNickname, \"nickname\", 50);\r\n            Contracts.throwIfNullOrTooShort(hostNickname, \"nickname\", 2);\r\n            speechConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], hostNickname);\r\n\r\n        } else {\r\n            this.privConversationId = id;\r\n        }\r\n\r\n        // save the speech config for future usage\r\n        this.privConfig = speechConfig;\r\n\r\n        // save the config properties\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n        this.privProperties = configImpl.properties.clone();\r\n        this.privIsConnected = false;\r\n        this.privParticipants = new InternalParticipants();\r\n        this.privIsReady = false;\r\n        this.privTextMessageMaxLength = 1000;\r\n    }\r\n\r\n    // get the internal data about a conversation\r\n    public get room(): IInternalConversation {\r\n        return this.privRoom;\r\n    }\r\n\r\n    // get the wrapper for connecting to the websockets\r\n    public get connection(): ConversationRecognizer {\r\n        return this.privConversationRecognizer; // this.privConnection;\r\n    }\r\n\r\n    // get the config\r\n    public get config(): SpeechTranslationConfig {\r\n        return this.privConfig;\r\n    }\r\n\r\n    // get the conversation Id\r\n    public get conversationId(): string {\r\n        return this.privRoom ? this.privRoom.roomId : this.privConversationId;\r\n    }\r\n\r\n    // get the properties\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    // get the speech language\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get isMutedByHost(): boolean {\r\n        return this.privParticipants.me?.isHost ? false : this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    public get isConnected(): boolean {\r\n        return this.privIsConnected && this.privIsReady;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.toParticipants(true);\r\n    }\r\n\r\n    public get me(): Participant {\r\n        return this.toParticipant(this.privParticipants.me);\r\n    }\r\n\r\n    public get host(): Participant {\r\n        return this.toParticipant(this.privParticipants.host);\r\n    }\r\n\r\n    public get transcriberRecognizer(): TranscriberRecognizer {\r\n        return this.privTranscriberRecognizer;\r\n    }\r\n\r\n    public get conversationInfo(): ConversationInfo {\r\n        const convId: string = this.conversationId;\r\n        const p: TranscriptionParticipant[] = this.participants.map((part: Participant): TranscriptionParticipant => (\r\n            {\r\n                id: part.id,\r\n                preferredLanguage: part.preferredLanguage,\r\n                voice: part.voice\r\n            }\r\n        ));\r\n        const props: ConversationProperties = {};\r\n        for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\r\n            const val: string = this.properties.getProperty(key, \"\");\r\n            if (val !== \"\") {\r\n                props[key] = val;\r\n            }\r\n        }\r\n        const info: ConversationInfo = { id: convId, participants: p, conversationProperties: props };\r\n        return info;\r\n    }\r\n\r\n    private get canSend(): boolean {\r\n        return this.privIsConnected && !this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    private get canSendAsHost(): boolean {\r\n        return this.privIsConnected && this.privParticipants.me?.isHost;\r\n    }\r\n\r\n    // get / set the speech auth token\r\n    // eslint-disable-next-line @typescript-eslint/member-ordering\r\n    public get authorizationToken(): string {\r\n        return this.privToken;\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\r\n        this.privToken = value;\r\n    }\r\n\r\n    public set conversationTranslator(conversationTranslator: ConversationTranslator) {\r\n        this.privConversationTranslator = conversationTranslator;\r\n    }\r\n\r\n    public onToken(token: IAuthentication): void {\r\n        this.privConversationTranslator.onToken(token);\r\n    }\r\n\r\n    /**\r\n     * Create a new conversation as Host\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public createConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            this.privManager.createOrJoin(this.privProperties, undefined,\r\n                ((room: IInternalConversation): void => {\r\n                    if (!room) {\r\n                        this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\r\n                    }\r\n                    this.privRoom = room;\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a new conversation as host.\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // check if there is already a recognizer\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            // check if there is conversation data available\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);\r\n            // connect to the conversation websocket\r\n            this.privParticipants.meId = this.privRoom.participantId;\r\n            this.privConversationRecognizer = ConversationRecognizerFactory.fromConfig(this, this.privConfig);\r\n\r\n            // Because ConversationTranslator manually sets up and manages the connection, Conversation\r\n            // has to forward serviceRecognizer connection events that usually get passed automatically\r\n            this.privConversationRecognizer.connected = this.onConnected;\r\n            this.privConversationRecognizer.disconnected = this.onDisconnected;\r\n            this.privConversationRecognizer.canceled = this.onCanceled;\r\n\r\n            this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\r\n            this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\r\n            this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\r\n            this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\r\n            this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\r\n            this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\r\n            this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\r\n            this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\r\n\r\n            this.privConversationRecognizer.connect(this.privRoom.token,\r\n                ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Join a conversation as a participant.\r\n     * @param { IParticipant } participant - participant to add\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void {\r\n        Contracts.throwIfNullOrUndefined(participant, \"Participant\");\r\n        marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Join a conversation as a participant.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // TODO\r\n            // if (!!this.privConversationRecognizer) {\r\n            //     throw new Error(this.privErrors.permissionDeniedStart);\r\n            // }\r\n            Contracts.throwIfNullOrWhitespace(conversationId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\"));\r\n            // join the conversation\r\n            this.privManager.createOrJoin(this.privProperties, conversationId,\r\n                ((room: IInternalConversation): void => {\r\n                    Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\r\n                    this.privRoom = room;\r\n                    this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;\r\n                    // join callback\r\n                    if (!!cb) {\r\n                        cb(room.cognitiveSpeechAuthToken);\r\n                    }\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public deleteConversationAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.deleteConversationImplAsync(), cb, err);\r\n    }\r\n\r\n    public async deleteConversationImplAsync(): Promise<void> {\r\n            Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\r\n            await this.privManager.leave(this.privProperties, this.privRoom.token);\r\n\r\n            this.dispose();\r\n    }\r\n\r\n    /**\r\n     * Issues a request to close the client websockets\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public endConversationAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.endConversationImplAsync(), cb, err);\r\n    }\r\n\r\n    public endConversationImplAsync(): Promise<void> {\r\n        return this.close(true);\r\n    }\r\n\r\n    /**\r\n     * Issues a request to lock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public lockConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the user's permissions\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute a participant in the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, true), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to remove a participant from the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\r\n                // Assume this is a transcription participant\r\n                marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId as IParticipant), cb, err);\r\n            } else {\r\n                Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n                Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n                if (!this.canSendAsHost) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\r\n                }\r\n                let participantId = \"\";\r\n                if (typeof userId === \"string\") {\r\n                    participantId = userId;\r\n                } else if (userId.hasOwnProperty(\"id\")) {\r\n                    const participant: IParticipant = userId as IParticipant;\r\n                    participantId = participant.id;\r\n                } else if (userId.hasOwnProperty(\"userId\")) {\r\n                    const user: IUser = userId as IUser;\r\n                    participantId = user.userId;\r\n                }\r\n                Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n                // check the participant exists\r\n                const index: number = this.participants.findIndex((p: Participant): boolean => p.id === participantId);\r\n                if (index === -1) {\r\n                    this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n                }\r\n                if (!!this.privConversationRecognizer) {\r\n                    this.privConversationRecognizer.sendRequest(this.getEjectCommand(participantId), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                        ((error: any): void => {\r\n                            this.handleError(error, err);\r\n                        }));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unlock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unlockConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n                }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute all participants in the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute a participant in the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // TODO: is a max length check required?\r\n            if (message.length > this.privTextMessageMaxLength) {\r\n                this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMessageCommand(message), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set translated to languages\r\n     * @param {string[]} languages - languages to translate to\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public setTranslatedLanguagesAsync(languages: string[], cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfArrayEmptyOrWhitespace(languages, this.privErrors.invalidArgs.replace(\"{arg}\", \"languages\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getSetTranslateToLanguagesCommand(languages),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change nickname\r\n     * @param {string} nickname - new nickname for the room\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public changeNicknameAsync(nickname: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getChangeNicknameCommand(nickname),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this.privIsDisposed = true;\r\n        if (!!this.config) {\r\n            this.config.close();\r\n        }\r\n        this.privConfig = undefined;\r\n        this.privLanguage = undefined;\r\n        this.privProperties = undefined;\r\n        this.privRoom = undefined;\r\n        this.privToken = undefined;\r\n        this.privManager = undefined;\r\n        this.privIsConnected = false;\r\n        this.privIsReady = false;\r\n        this.privParticipants = undefined;\r\n    }\r\n\r\n    public async connectTranscriberRecognizer(recognizer: TranscriberRecognizer): Promise<void> {\r\n        if (!!this.privTranscriberRecognizer) {\r\n            await this.privTranscriberRecognizer.close();\r\n        }\r\n        await recognizer.enforceAudioGating();\r\n        this.privTranscriberRecognizer = recognizer;\r\n        this.privTranscriberRecognizer.conversation = this;\r\n    }\r\n\r\n    public getKeepAlive(): string {\r\n        const nickname: string = (!!this.me) ? this.me.displayName : \"default_nickname\";\r\n        return JSON.stringify({\r\n            id: \"0\",\r\n            nickname,\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.keepAlive\r\n        });\r\n    }\r\n\r\n    /** websocket callbacks */\r\n    /* eslint-disable @typescript-eslint/typedef */\r\n    private onConnected = (e: ConnectionEventArgs): void => {\r\n        this.privIsConnected = true;\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStarted) {\r\n                this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onDisconnected = (e: ConnectionEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStopped) {\r\n                this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        } finally {\r\n            void this.close(false);\r\n        }\r\n    };\r\n\r\n    private onCanceled = (r: ConversationRecognizer, e: ConversationTranslationCanceledEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.canceled) {\r\n                this.privConversationTranslator.canceled(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantUpdateCommandReceived = (r: ConversationRecognizer, e: ParticipantAttributeEventArgs): void => {\r\n        try {\r\n            const updatedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.id);\r\n            if (updatedParticipant !== undefined) {\r\n\r\n                switch (e.key) {\r\n                    case ConversationTranslatorCommandTypes.changeNickname:\r\n                        updatedParticipant.displayName = e.value as string;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setUseTTS:\r\n                        updatedParticipant.isUsingTts = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setProfanityFiltering:\r\n                        updatedParticipant.profanity = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setMute:\r\n                        updatedParticipant.isMuted = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setTranslateToLanguages:\r\n                        updatedParticipant.translateToLanguages = e.value as string[];\r\n                        break;\r\n                }\r\n                this.privParticipants.addOrUpdateParticipant(updatedParticipant);\r\n\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                            [this.toParticipant(updatedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onLockRoomCommandReceived = (): void => {\r\n        // TODO\r\n    };\r\n\r\n    private onMuteAllCommandReceived = (r: ConversationRecognizer, e: MuteAllEventArgs): void => {\r\n        try {\r\n            this.privParticipants.participants.forEach((p: IInternalParticipant): boolean => p.isMuted = (p.isHost ? false : e.isMuted));\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                        this.toParticipants(false), e.sessionId));\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantJoinCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\r\n            if (newParticipant !== undefined) {\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation,\r\n                            [this.toParticipant(newParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantLeaveCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const ejectedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.participant.id);\r\n            if (ejectedParticipant !== undefined) {\r\n                // remove the participant from the internal participants list\r\n                this.privParticipants.deleteParticipant(e.participant.id);\r\n                if (!!this.privConversationTranslator) {\r\n                    // notify subscribers that the participant has left the conversation\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation,\r\n                            [this.toParticipant(ejectedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onTranslationReceived = (r: ConversationRecognizer, e: ConversationReceivedTranslationEventArgs): void => {\r\n        try {\r\n            switch (e.command) {\r\n                case ConversationTranslatorMessageTypes.final:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribed(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.partial:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribing(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.instantMessage:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.textMessageReceived(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantsListReceived = (r: ConversationRecognizer, e: ParticipantsListEventArgs): void => {\r\n        try {\r\n            // check if the session token needs to be updated\r\n            if (e.sessionToken !== undefined && e.sessionToken !== null) {\r\n                this.privRoom.token = e.sessionToken;\r\n            }\r\n            // save the participants\r\n            this.privParticipants.participants = [...e.participants];\r\n            // enable the conversation\r\n            if (this.privParticipants.me !== undefined) {\r\n                this.privIsReady = true;\r\n            }\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\r\n            }\r\n            // if this is the host, update the nickname if needed\r\n            if (this.me.isHost) {\r\n                const nickname: string = this.privConversationTranslator?.properties.getProperty(PropertyId.ConversationTranslator_Name);\r\n                if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\r\n                    // issue a change nickname request\r\n                    this.changeNicknameAsync(nickname);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onConversationExpiration = (r: ConversationRecognizer, e: ConversationExpirationEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.conversationExpiration(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n    /* eslint-enable @typescript-eslint/typedef */\r\n\r\n    private addParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(participant);\r\n        if (newParticipant !== undefined) {\r\n            if (!!this.privTranscriberRecognizer) {\r\n                const conversationInfo = this.conversationInfo;\r\n                conversationInfo.participants = [participant];\r\n                return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"join\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        this.privParticipants.deleteParticipant(participant.id);\r\n        const conversationInfo = this.conversationInfo;\r\n        conversationInfo.participants = [participant];\r\n        return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"leave\");\r\n    }\r\n\r\n    private async close(dispose: boolean): Promise<void> {\r\n        try {\r\n            this.privIsConnected = false;\r\n            await this.privConversationRecognizer?.close();\r\n            this.privConversationRecognizer = undefined;\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.dispose();\r\n            }\r\n        } catch (e) {\r\n            // ignore error\r\n            throw e;\r\n        }\r\n        if (dispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /** Helpers */\r\n    private handleCallback(cb: () => void, err: (message: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    private handleError(error: any, err: (message: string) => void): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Participant Helpers */\r\n    private toParticipants(includeHost: boolean): Participant[] {\r\n\r\n        const participants: Participant[] = this.privParticipants.participants.map((p: IInternalParticipant): Participant => ( this.toParticipant(p) ) );\r\n        if (!includeHost) {\r\n            return participants.filter((p: Participant): boolean => p.isHost === false);\r\n        } else {\r\n            return participants;\r\n        }\r\n    }\r\n\r\n    private toParticipant(p: IInternalParticipant): Participant {\r\n        return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\r\n    }\r\n\r\n    private getMuteAllCommand(isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMuteAll,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getMuteCommand(participantId: string, isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMute,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getLockCommand(isLocked: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setLockState,\r\n            participantId: this.privRoom.participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isLocked\r\n        });\r\n    }\r\n\r\n    private getEjectCommand(participantId: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.ejectParticipant,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n        });\r\n    }\r\n\r\n    private getSetTranslateToLanguagesCommand(languages: string[]): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: languages\r\n        });\r\n    }\r\n\r\n    private getChangeNicknameCommand(nickname: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.changeNickname,\r\n            nickname,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: nickname\r\n        });\r\n    }\r\n\r\n    private getMessageCommand(message: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n        Contracts.throwIfNullOrWhitespace(message, \"message\");\r\n\r\n        return JSON.stringify({\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            text: message,\r\n            type: ConversationTranslatorMessageTypes.instantMessage\r\n        });\r\n    }\r\n\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AudioConfig,\r\n    SpeechTranslationConfig\r\n} from \"../Exports\";\r\nimport { Callback } from \"./IConversation\";\r\n\r\nexport class ConversationCommon {\r\n\r\n    protected privAudioConfig: AudioConfig;\r\n    protected privSpeechTranslationConfig: SpeechTranslationConfig;\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        this.privAudioConfig = audioConfig;\r\n    }\r\n\r\n    protected handleCallback(cb: Callback, err: Callback): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    protected handleError(error: any, err: Callback): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error);\r\n            }\r\n        }\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { SessionEventArgs } from \"../Exports\";\r\n\r\nexport class ConversationExpirationEventArgs extends SessionEventArgs {\r\n    private privExpirationTime: number;\r\n\r\n    public constructor(expirationTime: number, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privExpirationTime = expirationTime;\r\n    }\r\n\r\n    /** How much longer until the conversation expires (in minutes). */\r\n    public get expirationTime(): number {\r\n        return this.privExpirationTime;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { SessionEventArgs } from \"../Exports\";\r\nimport { ParticipantChangedReason } from \"./Exports\";\r\nimport { IParticipant } from \"./IParticipant\";\r\n\r\nexport class ConversationParticipantsChangedEventArgs extends SessionEventArgs {\r\n    private privReason: ParticipantChangedReason;\r\n    private privParticipant: IParticipant[];\r\n\r\n    public constructor(reason: ParticipantChangedReason, participants: IParticipant[], sessionId?: string) {\r\n        super(sessionId);\r\n        this.privReason = reason;\r\n        this.privParticipant = participants;\r\n    }\r\n\r\n    public get reason(): ParticipantChangedReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get participants(): IParticipant[] {\r\n        return this.privParticipant;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { CancellationEventArgsBase } from \"../CancellationEventArgsBase\";\r\n\r\nexport class ConversationTranslationCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { RecognitionEventArgs } from \"../Exports\";\r\nimport { ConversationTranslationResult } from \"./Exports\";\r\n\r\nexport class ConversationTranslationEventArgs extends RecognitionEventArgs {\r\n    private privResult: ConversationTranslationResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ConversationTranslationResult} result - The translation recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: ConversationTranslationResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @returns {ConversationTranslationResult} the recognition result.\r\n     */\r\n    public get result(): ConversationTranslationResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { PropertyCollection } from \"../PropertyCollection\";\r\nimport { ResultReason } from \"../ResultReason\";\r\nimport { TranslationRecognitionResult } from \"../TranslationRecognitionResult\";\r\nimport { Translations } from \"../Translations\";\r\n\r\nexport class ConversationTranslationResult extends TranslationRecognitionResult {\r\n    private privId: string;\r\n    private privOrigLang: string;\r\n\r\n    public constructor(participantId: string,\r\n                       translations: Translations,\r\n                       originalLanguage?: string,\r\n                       resultId?: string,\r\n                       reason?: ResultReason,\r\n                       text?: string,\r\n                       duration?: number,\r\n                       offset?: number,\r\n                       errorDetails?: string,\r\n                       json?: string,\r\n                       properties?: PropertyCollection) {\r\n        super(translations, resultId, reason, text, duration, offset, undefined, undefined, errorDetails, json, properties);\r\n        this.privId = participantId;\r\n        this.privOrigLang = originalLanguage;\r\n    }\r\n\r\n    /**\r\n     * The unique identifier for the participant this result is for.\r\n     */\r\n    public get participantId(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * The original language this result was in.\r\n     */\r\n    public get originalLang(): string {\r\n        return this.privOrigLang;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    IAuthentication,\r\n    ServicePropertiesPropertyName,\r\n} from \"../../common.speech/Exports\";\r\nimport { ConversationTranslatorConnectionFactory } from \"../../common.speech/Transcription/ConversationTranslatorConnectionFactory\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    IStringDictionary,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognizer\r\n} from \"../Exports\";\r\nimport { ConversationImpl } from \"./Conversation\";\r\nimport {\r\n    ConversationCommon,\r\n    ConversationExpirationEventArgs,\r\n    ConversationHandler,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    IConversationTranslator,\r\n    Participant\r\n} from \"./Exports\";\r\nimport { Callback, IConversation } from \"./IConversation\";\r\n\r\nexport enum SpeechState {\r\n    Inactive, Connecting, Connected\r\n}\r\n\r\n// child class of TranslationRecognizer meant only for use with ConversationTranslator\r\nclass ConversationTranslationRecognizer extends TranslationRecognizer {\r\n    private privTranslator: ConversationTranslator;\r\n    private privSpeechState: SpeechState;\r\n\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig: AudioConfig, translator: ConversationTranslator, convGetter: () => ConversationImpl) {\r\n\r\n        super(speechConfig, audioConfig, new ConversationTranslatorConnectionFactory(convGetter));\r\n\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        if (!!translator) {\r\n            this.privTranslator = translator;\r\n            this.sessionStarted = (): void => {\r\n                this.privSpeechState = SpeechState.Connected;\r\n            };\r\n\r\n            this.sessionStopped = (): void => {\r\n                this.privSpeechState = SpeechState.Inactive;\r\n            };\r\n\r\n            this.recognizing = (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs): void => {\r\n                if (!!this.privTranslator.recognizing) {\r\n                    this.privTranslator.recognizing(this.privTranslator, e);\r\n                }\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.recognized = async (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs): Promise<void> => {\r\n                // if there is an error connecting to the conversation service from the speech service the error will be returned in the ErrorDetails field.\r\n                if (e.result?.errorDetails) {\r\n                    await this.cancelSpeech();\r\n                    // TODO: format the error message contained in 'errorDetails'\r\n                    this.fireCancelEvent(e.result.errorDetails);\r\n                } else {\r\n                    if (!!this.privTranslator.recognized) {\r\n                        this.privTranslator.recognized(this.privTranslator, e);\r\n                    }\r\n                }\r\n                return;\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.canceled = async (): Promise<void> => {\r\n                if (this.privSpeechState !== SpeechState.Inactive) {\r\n                    try {\r\n                        await this.cancelSpeech();\r\n                    } catch (error) {\r\n                        this.privSpeechState = SpeechState.Inactive;\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    public get state(): SpeechState {\r\n        return this.privSpeechState;\r\n    }\r\n\r\n    public set state(newState: SpeechState) {\r\n        this.privSpeechState = newState;\r\n    }\r\n\r\n    public set authentication(token: IAuthentication) {\r\n        this.privReco.authentication = token;\r\n    }\r\n\r\n\r\n    public onConnection(): void {\r\n        this.privSpeechState = SpeechState.Connected;\r\n    }\r\n\r\n    public async onCancelSpeech(): Promise<void> {\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        await this.cancelSpeech();\r\n    }\r\n\r\n    /**\r\n     * Fire a cancel event\r\n     * @param error\r\n     */\r\n    private fireCancelEvent(error: string): void {\r\n        try {\r\n            if (!!this.privTranslator.canceled) {\r\n                const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n                    CancellationReason.Error,\r\n                    error,\r\n                    CancellationErrorCode.RuntimeError\r\n                    );\r\n\r\n                this.privTranslator.canceled(this.privTranslator, cancelEvent);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.stopContinuousRecognitionAsync();\r\n            await this.privReco?.disconnect();\r\n            this.privSpeechState = SpeechState.Inactive;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Join, leave or connect to a conversation.\r\n */\r\nexport class ConversationTranslator extends ConversationCommon implements IConversationTranslator, IDisposable {\r\n\r\n    public canceled: (sender: ConversationHandler, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: IConversationTranslator, event: ConversationExpirationEventArgs) => void;\r\n    public participantsChanged: (sender: IConversationTranslator, event: ConversationParticipantsChangedEventArgs) => void;\r\n    public sessionStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public sessionStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public textMessageReceived: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    // Callbacks for whole conversation results\r\n    public transcribed: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n    public transcribing: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    // Callbacks for detecting speech/translation results from self\r\n    public recognized: (sender: IConversationTranslator, event: TranslationRecognitionEventArgs) => void;\r\n    public recognizing: (sender: IConversationTranslator, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privProperties: PropertyCollection;\r\n    private privIsDisposed: boolean;\r\n    private privCTRecognizer: ConversationTranslationRecognizer;\r\n    private privIsSpeaking: boolean;\r\n    private privConversation: ConversationImpl;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privPlaceholderKey: string;\r\n    private privPlaceholderRegion: string;\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        super(audioConfig);\r\n        this.privIsDisposed = false;\r\n        this.privIsSpeaking = false;\r\n        this.privPlaceholderKey = \"abcdefghijklmnopqrstuvwxyz012345\";\r\n        this.privPlaceholderRegion = \"westus\";\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.privConversation?.participants;\r\n    }\r\n\r\n    private get canSpeak(): boolean {\r\n\r\n        // is there a Conversation websocket available and has the Recognizer been set up\r\n        if (!this.privConversation.isConnected || !this.privCTRecognizer) {\r\n            return false;\r\n        }\r\n\r\n        // is the user already speaking\r\n        if (this.privIsSpeaking || this.privCTRecognizer.state === SpeechState.Connected || this.privCTRecognizer.state === SpeechState.Connecting) {\r\n            return false;\r\n        }\r\n\r\n        // is the user muted\r\n        if (this.privConversation.isMutedByHost) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public onToken(token: IAuthentication): void {\r\n        this.privCTRecognizer.authentication = token;\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    /**\r\n     * Join a conversation. If this is the host, pass in the previously created Conversation object.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversation: IConversation, nickname: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversation: string | IConversation, nickname: string, param1?: string | Callback, param2?: Callback, param3?: Callback): void {\r\n\r\n        try {\r\n\r\n            if (typeof conversation === \"string\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                if (!!this.privConversation) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);\r\n                }\r\n\r\n                let lang: string = param1 as string;\r\n                if (lang === undefined || lang === null || lang === \"\") {\r\n                    lang = ConversationConnectionConfig.defaultLanguageCode;\r\n                }\r\n\r\n                // create a placeholder config\r\n                this.privSpeechTranslationConfig = SpeechTranslationConfig.fromSubscription(\r\n                    this.privPlaceholderKey,\r\n                    this.privPlaceholderRegion);\r\n                this.privSpeechTranslationConfig.setProfanity(ProfanityOption.Masked);\r\n                this.privSpeechTranslationConfig.addTargetLanguage(lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], nickname);\r\n\r\n                const propertyIdsToCopy: (string | PropertyId)[] = [\r\n                    PropertyId.SpeechServiceConnection_Host,\r\n                    PropertyId.ConversationTranslator_Host,\r\n                    PropertyId.SpeechServiceConnection_Endpoint,\r\n                    PropertyId.SpeechServiceConnection_ProxyHostName,\r\n                    PropertyId.SpeechServiceConnection_ProxyPassword,\r\n                    PropertyId.SpeechServiceConnection_ProxyPort,\r\n                    PropertyId.SpeechServiceConnection_ProxyUserName,\r\n                    \"ConversationTranslator_MultiChannelAudio\",\r\n                    \"ConversationTranslator_Region\"\r\n                ];\r\n\r\n                for (const prop of propertyIdsToCopy) {\r\n                    const value = this.privProperties.getProperty(prop);\r\n                    if (value) {\r\n                        const key = typeof prop === \"string\" ? prop : PropertyId[prop];\r\n                        this.privSpeechTranslationConfig.setProperty(key, value);\r\n                    }\r\n                }\r\n\r\n                const currentProperties  = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n                for (const prop of Object.keys(currentProperties)) {\r\n                    this.privSpeechTranslationConfig.setServiceProperty(prop, currentProperties[prop], ServicePropertyChannel.UriQueryParameter);\r\n                }\r\n\r\n                // join the conversation\r\n                this.privConversation = new ConversationImpl(this.privSpeechTranslationConfig);\r\n                this.privConversation.conversationTranslator = this;\r\n\r\n                this.privConversation.joinConversationAsync(\r\n                    conversation,\r\n                    nickname,\r\n                    lang,\r\n                    ((result: string): void => {\r\n\r\n                        if (!result) {\r\n                            this.handleError(new Error(this.privErrors.permissionDeniedConnect), param3);\r\n                        }\r\n\r\n                        this.privSpeechTranslationConfig.authorizationToken = result;\r\n                        this.privConversation.room.isHost = false;\r\n\r\n                        // connect to the ws\r\n                        this.privConversation.startConversationAsync(\r\n                            ((): void => {\r\n                                this.handleCallback(param2, param3);\r\n                            }),\r\n                            ((error: any): void => {\r\n                                this.handleError(error, param3);\r\n                            }));\r\n\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, param3);\r\n                    }));\r\n\r\n            } else if (typeof conversation === \"object\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                // save the nickname\r\n                this.privProperties.setProperty(PropertyId.ConversationTranslator_Name, nickname);\r\n                // ref the conversation object\r\n                this.privConversation = conversation as ConversationImpl;\r\n                // ref the conversation translator object\r\n                this.privConversation.conversationTranslator = this;\r\n                this.privConversation.room.isHost = true;\r\n\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                this.privSpeechTranslationConfig = conversation.config;\r\n\r\n                this.handleCallback(param1 as Callback, param2);\r\n            } else {\r\n                this.handleError(\r\n                    new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"invalid conversation type\")),\r\n                    param2);\r\n            }\r\n\r\n        } catch (error) {\r\n            this.handleError(error, typeof param1 === \"string\" ? param3 : param2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Leave the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public leaveConversationAsync(cb?: Callback, err?: Callback): void {\r\n\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n\r\n            // stop the speech websocket\r\n            await this.cancelSpeech();\r\n            // stop the websocket\r\n            await this.privConversation.endConversationImplAsync();\r\n            // https delete request\r\n            await this.privConversation.deleteConversationImplAsync();\r\n            this.dispose();\r\n\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n            Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", message));\r\n\r\n            this.privConversation.sendTextMessageAsync(message, cb, err);\r\n        } catch (error) {\r\n\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                if (this.privCTRecognizer === undefined) {\r\n                    await this.connectTranslatorRecognizer();\r\n                }\r\n                Contracts.throwIfNullOrUndefined(this.privCTRecognizer, this.privErrors.permissionDeniedSend);\r\n\r\n                if (!this.canSpeak) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n                }\r\n\r\n                await this.startContinuousRecognition();\r\n\r\n                this.privIsSpeaking = true;\r\n            } catch (error) {\r\n                this.privIsSpeaking = false;\r\n                await this.cancelSpeech();\r\n                throw error;\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stop speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                if (!this.privIsSpeaking) {\r\n                    // stop speech\r\n                    await this.cancelSpeech();\r\n                    return;\r\n                }\r\n\r\n                // stop the recognition but leave the websocket open\r\n                this.privIsSpeaking = false;\r\n                await new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n                    this.privCTRecognizer.stopContinuousRecognitionAsync(resolve, reject);\r\n                });\r\n\r\n            } catch (error) {\r\n                await this.cancelSpeech();\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string, success?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            if (this.isDisposed && !this.privIsSpeaking) {\r\n                return;\r\n            }\r\n            await this.cancelSpeech();\r\n            this.privIsDisposed = true;\r\n            this.privSpeechTranslationConfig.close();\r\n            this.privSpeechRecognitionLanguage = undefined;\r\n            this.privProperties = undefined;\r\n            this.privAudioConfig = undefined;\r\n            this.privSpeechTranslationConfig = undefined;\r\n            this.privConversation.dispose();\r\n            this.privConversation = undefined;\r\n        })(), success, err);\r\n    }\r\n\r\n    /**\r\n     * Cancel the speech websocket\r\n     */\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.privIsSpeaking = false;\r\n            await this.privCTRecognizer?.onCancelSpeech();\r\n            this.privCTRecognizer = undefined;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect to the speech translation recognizer.\r\n     * Currently there is no language validation performed before sending the SpeechLanguage code to the service.\r\n     * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'\r\n     * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'\r\n     */\r\n    private async connectTranslatorRecognizer(): Promise<void> {\r\n        try {\r\n\r\n            if (this.privAudioConfig === undefined) {\r\n                this.privAudioConfig = AudioConfig.fromDefaultMicrophoneInput();\r\n            }\r\n\r\n            // clear the temp subscription key if it's a participant joining\r\n            if (this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key])\r\n                === this.privPlaceholderKey) {\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Key], \"\");\r\n            }\r\n\r\n            const convGetter = (): ConversationImpl => this.privConversation;\r\n            this.privCTRecognizer = new ConversationTranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig, this, convGetter);\r\n        } catch (error) {\r\n            await this.cancelSpeech();\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the start speaking request\r\n     */\r\n    private startContinuousRecognition(): Promise<void> {\r\n        return new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n            this.privCTRecognizer.startContinuousRecognitionAsync(resolve, reject);\r\n        });\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    RestConfigBase,\r\n    WebsocketConnection,\r\n} from \"../../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../../common/Exports\";\r\nimport { StringUtils } from \"../../common/StringUtils\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport {\r\n    PropertyId\r\n} from \"../../sdk/Exports\";\r\nimport {\r\n    ConversationImpl\r\n} from \"../../sdk/Transcription/Conversation\";\r\nimport { HeaderNames } from \"../HeaderNames\";\r\nimport { QueryParameterNames } from \"../QueryParameterNames\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./../ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    TranscriberConnectionFactory,\r\n    TranslationConnectionFactory,\r\n    WebsocketMessageFormatter,\r\n} from \"./../Exports\";\r\n\r\n/**\r\n * Connection factory for the conversation translator. Handles connecting to the regular translator endpoint,\r\n * as well as the virtual microphone array transcription endpoint\r\n */\r\nexport class ConversationTranslatorConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static readonly CTS_VIRT_MIC_PATH: string = \"/speech/recognition/dynamicaudio\";\r\n\r\n    private privConvGetter: () => ConversationImpl;\r\n\r\n    public constructor(convGetter: () => ConversationImpl) {\r\n        super();\r\n\r\n        Contracts.throwIfNullOrUndefined(convGetter, \"convGetter\");\r\n        this.privConvGetter = convGetter;\r\n    }\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        const isVirtMicArrayEndpoint = config.parameters.getProperty(\"ConversationTranslator_MultiChannelAudio\", \"\").toUpperCase() === \"TRUE\";\r\n\r\n        const convInfo = this.privConvGetter().room;\r\n        const region = convInfo.cognitiveSpeechRegion || config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"\");\r\n\r\n        const replacementValues: IStringDictionary<string> = {\r\n            hostSuffix: ConnectionFactoryBase.getHostSuffix(region),\r\n            path: ConversationTranslatorConnectionFactory.CTS_VIRT_MIC_PATH,\r\n            region: encodeURIComponent(region)\r\n        };\r\n        replacementValues[QueryParameterNames.Language] = encodeURIComponent(config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"\"));\r\n        replacementValues[QueryParameterNames.CtsMeetingId] = encodeURIComponent(convInfo.roomId);\r\n        replacementValues[QueryParameterNames.CtsDeviceId] = encodeURIComponent(convInfo.participantId);\r\n        replacementValues[QueryParameterNames.CtsIsParticipant] = convInfo.isHost ? \"\" : (\"&\" + QueryParameterNames.CtsIsParticipant);\r\n\r\n        let endpointUrl: string = \"\";\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (isVirtMicArrayEndpoint) {\r\n            // connecting to the conversation transcription virtual microphone array endpoint\r\n            endpointUrl = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n            if (!endpointUrl) {\r\n                const hostName = config.parameters.getProperty(\r\n                    PropertyId.SpeechServiceConnection_Host,\r\n                    \"transcribe.{region}.cts.speech{hostSuffix}\");\r\n\r\n                endpointUrl = \"wss://\" + hostName + \"{path}\";\r\n            }\r\n\r\n            // because the region can change during a session, we support being passed a format string which we can then\r\n            // replace with the correct information.\r\n            endpointUrl = StringUtils.formatString(endpointUrl, replacementValues);\r\n\r\n            const parsedUrl = new URL(endpointUrl);\r\n            parsedUrl.searchParams.forEach((val: string, key: string): void => {\r\n                queryParams[key] = val;\r\n            });\r\n\r\n            const connFactory = new TranscriberConnectionFactory();\r\n            connFactory.setQueryParams(queryParams, config, endpointUrl);\r\n\r\n            // Some query parameters are required for the CTS endpoint, let's explicity set them here\r\n            queryParams[QueryParameterNames.CtsMeetingId] = replacementValues[QueryParameterNames.CtsMeetingId];\r\n            queryParams[QueryParameterNames.CtsDeviceId] = replacementValues[QueryParameterNames.CtsDeviceId];\r\n            if (!convInfo.isHost) {\r\n                queryParams[QueryParameterNames.CtsIsParticipant] = \"\"; // this doesn't have a value so set to an empty string\r\n            }\r\n\r\n            if (!(QueryParameterNames.Format in queryParams)) {\r\n                queryParams[QueryParameterNames.Format] = \"simple\";\r\n            }\r\n\r\n            parsedUrl.searchParams.forEach((val: string, key: string): void => {\r\n                parsedUrl.searchParams.set(key, queryParams[key]);\r\n                delete queryParams[key];\r\n            });\r\n\r\n            endpointUrl = parsedUrl.toString();\r\n\r\n        } else {\r\n            // connecting to regular translation endpoint\r\n            const connFactory = new TranslationConnectionFactory();\r\n\r\n            endpointUrl = connFactory.getEndpointUrl(config, true);\r\n            endpointUrl = StringUtils.formatString(endpointUrl, replacementValues);\r\n\r\n            connFactory.setQueryParams(queryParams, config, endpointUrl);\r\n        }\r\n\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        headers[RestConfigBase.configParams.token] = convInfo.token;\r\n        if (!!authInfo.token) {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"\").toUpperCase() === \"TRUE\";\r\n        return new WebsocketConnection(endpointUrl, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IStringDictionary } from \"./IDictionary\";\r\n\r\n/**\r\n * String helper functions\r\n */\r\nexport class StringUtils {\r\n\r\n    /**\r\n     * Formats a string by replacing the named {keys} in the string with the values contained in the replacement dictionary.\r\n     * @param format The format string that contains the parts to replace surrounded by {}. For example: \"wss://{region}.cts.speech.microsoft.com\".\r\n     * If your string needs to contain a { or } you can use the {{ and }} escape sequences respectively.\r\n     * @param replacements The dictionary of replacements. If a replacement is not found, it is replaced with an empty string\r\n     * @returns The formatted string. If you pass in a null or undefined format string, an empty string will be returned\r\n     */\r\n    public static formatString(format: string, replacements: IStringDictionary<string>): string {\r\n        if (!format) {\r\n            return \"\";\r\n        }\r\n\r\n        if (!replacements) {\r\n            return format;\r\n        }\r\n\r\n        let formatted: string = \"\";\r\n        let key: string = \"\";\r\n\r\n        const appendToFormatted = (str: string): void => {\r\n            formatted += str;\r\n        };\r\n        const appendToKey = (str: string): void => {\r\n            key += str;\r\n        };\r\n        let appendFunc: (str: string) => void = appendToFormatted;\r\n\r\n        for (let i = 0; i < format.length; i++) {\r\n            const c: string = format[i];\r\n            const next: string = i + 1 < format.length ? format[i + 1] : \"\";\r\n\r\n            switch (c) {\r\n                case \"{\":\r\n                    if (next === \"{\") {\r\n                        appendFunc(\"{\");\r\n                        i++;\r\n                    } else {\r\n                        appendFunc = appendToKey;\r\n                    }\r\n                    break;\r\n\r\n                case \"}\":\r\n                    if (next === \"}\") {\r\n                        appendFunc(\"}\");\r\n                        i++;\r\n                    } else {\r\n                        if (replacements.hasOwnProperty(key)) {\r\n                            formatted += replacements[key];\r\n                        }\r\n\r\n                        appendFunc = appendToFormatted;\r\n                        key = \"\";\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    appendFunc(c);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return formatted;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    // SpeechConnectionFactory,\r\n    ConversationTranscriberConnectionFactory,\r\n    SpeechServiceConfig,\r\n    ConversationTranscriptionServiceRecognizer,\r\n} from \"../../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports\";\r\nimport { AudioConfigImpl } from \"../Audio/AudioConfig\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    ConversationTranscriptionEventArgs,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n} from \"../Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"../SpeechConfig\";\r\n\r\n/**\r\n * Performs speech recognition with speaker separation from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class ConversationTranscriber\r\n */\r\nexport class ConversationTranscriber extends Recognizer {\r\n    private privDisposedRecognizer: boolean;\r\n\r\n    /**\r\n     * ConversationTranscriber constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechConfigImpl.properties, new ConversationTranscriberConnectionFactory());\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * ConversationTranscriber constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): ConversationTranscriber {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new ConversationTranscriber(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n\r\n    /**\r\n     * The event transcribing signals that an intermediate transcription result is received.\r\n     * @member ConversationTranscriber.prototype.transcribing\r\n     * @function\r\n     * @public\r\n     */\r\n    public transcribing: (sender: Recognizer, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * The event transcriber signals that a final recognition result is received.\r\n     * @member ConversationTranscriber.prototype.transcribed\r\n     * @function\r\n     * @public\r\n     */\r\n    public transcribed: (sender: Recognizer, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during transcription.\r\n     * @member ConversationTranscriber.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: ConversationTranscriptionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for transcription.\r\n     * @member ConversationTranscriber.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of transcription.\r\n     * @member ConversationTranscriber.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of transcription.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of transcription.\r\n     * @member ConversationTranscriber.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of transcription.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this conversation transcriber.\r\n     * @member ConversationTranscriber.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts conversation transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member ConversationTranscriber.prototype.startTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startTranscribingAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops conversation transcription.\r\n     * @member ConversationTranscriber.prototype.stopTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopTranscribingAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member ConversationTranscriber.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        recognizerConfig.isSpeakerDiarizationEnabled = true;\r\n        return new ConversationTranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { PropertyCollection } from \"../Exports\";\r\n\r\n/**\r\n * Represents a user in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IUser {\r\n    /** Gets the user's ID */\r\n    readonly userId: string;\r\n}\r\n\r\nexport class User implements IUser {\r\n    private privUserId: string;\r\n\r\n    public constructor(userId: string) {\r\n        this.privUserId = userId;\r\n    }\r\n\r\n    public get userId(): string {\r\n        return this.privUserId;\r\n    }\r\n}\r\n\r\nexport interface VoiceSignature {\r\n    Version: number;\r\n    Tag: string;\r\n    Data: string;\r\n}\r\n\r\nexport interface TranscriptionParticipant {\r\n    /** The unique identifier for the participant. */\r\n    readonly id: string;\r\n    /** The participant's preferred spoken language. */\r\n    readonly preferredLanguage: string;\r\n    /** The participant's voice signature */\r\n    readonly voice: string;\r\n}\r\n\r\n/**\r\n * Represents a participant in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IParticipant extends TranscriptionParticipant {\r\n    /** Gets the colour of the user's avatar as an HTML hex string (e.g. FF0000 for red). */\r\n    readonly avatar: string;\r\n    /**\r\n     * The participant's display name. Please note that there may be more than one participant\r\n     * with the same name. You can use <see cref=\"Id\"/> property to tell them apart.\r\n     */\r\n    readonly displayName: string;\r\n    /** Gets whether or not this participant is the host. */\r\n    readonly isHost: boolean;\r\n    /** Gets whether or not this participant is muted. */\r\n    readonly isMuted: boolean;\r\n    /** Gets whether or not the participant is using Text To Speech (TTS). */\r\n    readonly isUsingTts: boolean;\r\n    /** Contains properties of the participant. */\r\n    readonly properties: PropertyCollection;\r\n}\r\n\r\nexport class Participant implements IParticipant {\r\n    private privAvatar: string;\r\n    private privDisplayName: string;\r\n    private privId: string;\r\n    private privIsHost: boolean;\r\n    private privIsMuted: boolean;\r\n    private privIsUsingTts: boolean;\r\n    private privPreferredLanguage: string;\r\n    private privVoice: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor(id: string, avatar: string, displayName: string, isHost: boolean, isMuted: boolean, isUsingTts: boolean, preferredLanguage: string, voice?: string) {\r\n        this.privId = id;\r\n        this.privAvatar = avatar;\r\n        this.privDisplayName = displayName;\r\n        this.privIsHost = isHost;\r\n        this.privIsMuted = isMuted;\r\n        this.privIsUsingTts = isUsingTts;\r\n        this.privPreferredLanguage = preferredLanguage;\r\n        this.privVoice = voice;\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public get avatar(): string {\r\n        return this.privAvatar;\r\n    }\r\n\r\n    public get displayName(): string {\r\n        return this.privDisplayName;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get preferredLanguage(): string {\r\n        return this.privPreferredLanguage;\r\n    }\r\n\r\n    public get isHost(): boolean {\r\n        return this.privIsHost;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsMuted;\r\n    }\r\n\r\n    public get isUsingTts(): boolean {\r\n        return this.privIsUsingTts;\r\n    }\r\n\r\n    public get voice(): string {\r\n        return this.privVoice;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public static From(id: string, language: string, voice: string): IParticipant {\r\n        return new Participant(id, \"\", id, false, false, false, language, voice);\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nexport enum ParticipantChangedReason {\r\n    /** Participant has joined the conversation. */\r\n    JoinedConversation,\r\n\r\n    /** Participant has left the conversation. This could be voluntary, or involuntary\r\n     * (e.g. they are experiencing networking issues).\r\n     */\r\n    LeftConversation,\r\n\r\n    /** The participants' state has changed (e.g. they became muted, changed their nickname). */\r\n    Updated\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    ConversationManager,\r\n    ConversationReceivedTranslationEventArgs,\r\n    ConversationRecognizer,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs,\r\n    TranscriberRecognizer\r\n} from \"../../common.speech/Exports\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslator,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechTranslationConfig,\r\n} from \"../Exports\";\r\nimport { SpeechTranslationConfigImpl } from \"../SpeechTranslationConfig\";\r\nimport { Callback, MeetingInfo, MeetingProperties, IMeeting } from \"./IMeeting\";\r\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant\";\r\n\r\nexport abstract class Meeting implements IMeeting {\r\n\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    public abstract get authorizationToken(): string;\r\n\r\n    public abstract get config(): SpeechTranslationConfig;\r\n\r\n    public abstract get meetingId(): string;\r\n    public abstract get meetingInfo(): MeetingInfo;\r\n    public abstract get properties(): PropertyCollection;\r\n    public abstract get speechRecognitionLanguage(): string;\r\n    public abstract get participants(): Participant[];\r\n    public abstract set authorizationToken(value: string);\r\n    public abstract get isConnected(): boolean;\r\n\r\n    /**\r\n     * Create a meeting\r\n     * @param speechConfig\r\n     * @param meetingId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public static createMeetingAsync(speechConfig: SpeechTranslationConfig, meetingId: string, arg3?: Callback, arg4?: Callback): Meeting {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n        Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\r\n        Contracts.throwIfNull(meetingId, \"meetingId\");\r\n        if (meetingId.length === 0) {\r\n            throw new Error(\"meetingId cannot be empty\");\r\n        }\r\n        if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\r\n            Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\r\n        }\r\n        const meetingImpl = new MeetingImpl(speechConfig, meetingId);\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {})(), arg3, arg4);\r\n        return meetingImpl;\r\n    }\r\n\r\n    /** Start a meeting. */\r\n    public abstract startMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Delete a meeting. After this no one will be able to join the meeting. */\r\n    public abstract deleteMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** End a meeting. */\r\n    public abstract endMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Lock a meeting. This will prevent new participants from joining. */\r\n    public abstract lockMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Add Participant to Meeting. */\r\n    public abstract addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute all other participants in the Meeting. After this no other participants will\r\n     * have their speech recognitions broadcast, nor be able to send text messages.\r\n     */\r\n    public abstract muteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Remove a participant from a meeting using the user id, Participant or User object\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unlocks a meeting. */\r\n    public abstract unlockMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unmute all other participants in the meeting. */\r\n    public abstract unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Unmute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n}\r\n\r\nexport class MeetingImpl extends Meeting implements IDisposable {\r\n\r\n    private privConfig: SpeechTranslationConfig;\r\n    private privProperties: PropertyCollection;\r\n    private privLanguage: string;\r\n    private privToken: string;\r\n    private privIsDisposed: boolean;\r\n    private privRoom: IInternalConversation;\r\n    private privManager: ConversationManager;\r\n    private privConversationRecognizer: ConversationRecognizer;\r\n    private privIsConnected: boolean;\r\n    private privParticipants: InternalParticipants;\r\n    private privIsReady: boolean;\r\n    private privConversationTranslator: ConversationTranslator;\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privConversationId: string;\r\n    private readonly privTextMessageMaxLength: number;\r\n\r\n    /**\r\n     * Create a Meeting impl\r\n     * @param speechConfig\r\n     * @param {string} id - optional conversationId\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, id: string) {\r\n        super();\r\n        this.privIsConnected = false;\r\n        this.privIsDisposed = false;\r\n        this.privConversationId = \"\";\r\n        this.privProperties = new PropertyCollection();\r\n        this.privManager = new ConversationManager();\r\n\r\n        // check the speech language\r\n        const language: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        if (!language) {\r\n            speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\r\n        }\r\n        this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        this.privConversationId = id;\r\n\r\n        // save the speech config for future usage\r\n        this.privConfig = speechConfig;\r\n\r\n        // save the config properties\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n        this.privProperties = configImpl.properties.clone();\r\n        this.privIsConnected = false;\r\n        this.privParticipants = new InternalParticipants();\r\n        this.privIsReady = false;\r\n        this.privTextMessageMaxLength = 1000;\r\n    }\r\n\r\n    // get the internal data about a conversation\r\n    public get room(): IInternalConversation {\r\n        return this.privRoom;\r\n    }\r\n\r\n    // get the wrapper for connecting to the websockets\r\n    public get connection(): ConversationRecognizer {\r\n        return this.privConversationRecognizer; // this.privConnection;\r\n    }\r\n\r\n    // get the config\r\n    public get config(): SpeechTranslationConfig {\r\n        return this.privConfig;\r\n    }\r\n\r\n    // get the meeting Id\r\n    public get meetingId(): string {\r\n        return this.privRoom ? this.privRoom.roomId : this.privConversationId;\r\n    }\r\n\r\n    // get the properties\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    // get the speech language\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get isMutedByHost(): boolean {\r\n        return this.privParticipants.me?.isHost ? false : this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    public get isConnected(): boolean {\r\n        return this.privIsConnected && this.privIsReady;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.toParticipants(true);\r\n    }\r\n\r\n    public get me(): Participant {\r\n        return this.toParticipant(this.privParticipants.me);\r\n    }\r\n\r\n    public get host(): Participant {\r\n        return this.toParticipant(this.privParticipants.host);\r\n    }\r\n\r\n    public get transcriberRecognizer(): TranscriberRecognizer {\r\n        return this.privTranscriberRecognizer;\r\n    }\r\n\r\n    public get meetingInfo(): MeetingInfo {\r\n        const convId: string = this.meetingId;\r\n        const p: TranscriptionParticipant[] = this.participants.map((part: Participant): TranscriptionParticipant => (\r\n            {\r\n                id: part.id,\r\n                preferredLanguage: part.preferredLanguage,\r\n                voice: part.voice\r\n            }\r\n        ));\r\n        const props: MeetingProperties = {};\r\n        for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\r\n            const val: string = this.properties.getProperty(key, \"\");\r\n            if (val !== \"\") {\r\n                props[key] = val;\r\n            }\r\n        }\r\n        const info: MeetingInfo = { id: convId, participants: p, meetingProperties: props };\r\n        return info;\r\n    }\r\n\r\n    private get canSend(): boolean {\r\n        return this.privIsConnected && !this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    private get canSendAsHost(): boolean {\r\n        return this.privIsConnected && this.privParticipants.me?.isHost;\r\n    }\r\n\r\n    // get / set the speech auth token\r\n    // eslint-disable-next-line @typescript-eslint/member-ordering\r\n    public get authorizationToken(): string {\r\n        return this.privToken;\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\r\n        this.privToken = value;\r\n    }\r\n\r\n    /**\r\n     * Create a new meeting as Host\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public createMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            this.privManager.createOrJoin(this.privProperties, undefined,\r\n                ((room: IInternalConversation): void => {\r\n                    if (!room) {\r\n                        this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\r\n                    }\r\n                    this.privRoom = room;\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a new meeting as host.\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // check if there is already a recognizer\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            // check if there is conversation data available\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);\r\n            // connect to the conversation websocket\r\n            this.privParticipants.meId = this.privRoom.participantId;\r\n\r\n            // Because ConversationTranslator manually sets up and manages the connection, Conversation\r\n            // has to forward serviceRecognizer connection events that usually get passed automatically\r\n            this.privConversationRecognizer.connected = this.onConnected;\r\n            this.privConversationRecognizer.disconnected = this.onDisconnected;\r\n            this.privConversationRecognizer.canceled = this.onCanceled;\r\n\r\n            this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\r\n            this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\r\n            this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\r\n            this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\r\n            this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\r\n            this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\r\n            this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\r\n            this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\r\n\r\n            this.privConversationRecognizer.connect(this.privRoom.token,\r\n                ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Join a meeting as a participant.\r\n     * @param { IParticipant } participant - participant to add\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void {\r\n        Contracts.throwIfNullOrUndefined(participant, \"Participant\");\r\n        marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Join a meeting as a participant.\r\n     * @param meeting\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinMeetingAsync(meetingId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // TODO\r\n            // if (!!this.privConversationRecognizer) {\r\n            //     throw new Error(this.privErrors.permissionDeniedStart);\r\n            // }\r\n            Contracts.throwIfNullOrWhitespace(meetingId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\"));\r\n            // join the conversation\r\n            this.privManager.createOrJoin(this.privProperties, meetingId,\r\n                ((room: IInternalConversation): void => {\r\n                    Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\r\n                    this.privRoom = room;\r\n                    this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;\r\n                    // join callback\r\n                    if (!!cb) {\r\n                        cb(room.cognitiveSpeechAuthToken);\r\n                    }\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public deleteMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.deleteMeetingImplAsync(), cb, err);\r\n    }\r\n\r\n    public async deleteMeetingImplAsync(): Promise<void> {\r\n            Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\r\n            await this.privManager.leave(this.privProperties, this.privRoom.token);\r\n\r\n            this.dispose();\r\n    }\r\n\r\n    /**\r\n     * Issues a request to close the client websockets\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public endMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.endMeetingImplAsync(), cb, err);\r\n    }\r\n\r\n    public endMeetingImplAsync(): Promise<void> {\r\n        return this.close(true);\r\n    }\r\n\r\n    /**\r\n     * Issues a request to lock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public lockMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the user's permissions\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute a participant in the meeting\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, true), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to remove a participant from the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\r\n                // Assume this is a transcription participant\r\n                marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId as IParticipant), cb, err);\r\n            } else {\r\n                Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n                Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n                if (!this.canSendAsHost) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\r\n                }\r\n                let participantId = \"\";\r\n                if (typeof userId === \"string\") {\r\n                    participantId = userId;\r\n                } else if (userId.hasOwnProperty(\"id\")) {\r\n                    const participant: IParticipant = userId as IParticipant;\r\n                    participantId = participant.id;\r\n                } else if (userId.hasOwnProperty(\"userId\")) {\r\n                    const user: IUser = userId as IUser;\r\n                    participantId = user.userId;\r\n                }\r\n                Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n                // check the participant exists\r\n                const index: number = this.participants.findIndex((p: Participant): boolean => p.id === participantId);\r\n                if (index === -1) {\r\n                    this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n                }\r\n                if (!!this.privConversationRecognizer) {\r\n                    this.privConversationRecognizer.sendRequest(this.getEjectCommand(participantId), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                        ((error: any): void => {\r\n                            this.handleError(error, err);\r\n                        }));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unlock the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unlockMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n                }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute all participants in the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute a participant in the meeting\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // TODO: is a max length check required?\r\n            if (message.length > this.privTextMessageMaxLength) {\r\n                this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMessageCommand(message), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set translated to languages\r\n     * @param {string[]} languages - languages to translate to\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public setTranslatedLanguagesAsync(languages: string[], cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfArrayEmptyOrWhitespace(languages, this.privErrors.invalidArgs.replace(\"{arg}\", \"languages\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getSetTranslateToLanguagesCommand(languages),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change nickname\r\n     * @param {string} nickname - new nickname for the room\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public changeNicknameAsync(nickname: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getChangeNicknameCommand(nickname),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this.privIsDisposed = true;\r\n        if (!!this.config) {\r\n            this.config.close();\r\n        }\r\n        this.privConfig = undefined;\r\n        this.privLanguage = undefined;\r\n        this.privProperties = undefined;\r\n        this.privRoom = undefined;\r\n        this.privToken = undefined;\r\n        this.privManager = undefined;\r\n        this.privIsConnected = false;\r\n        this.privIsReady = false;\r\n        this.privParticipants = undefined;\r\n    }\r\n\r\n    public async connectTranscriberRecognizer(recognizer: TranscriberRecognizer): Promise<void> {\r\n        if (!!this.privTranscriberRecognizer) {\r\n            await this.privTranscriberRecognizer.close();\r\n        }\r\n        await recognizer.enforceAudioGating();\r\n        this.privTranscriberRecognizer = recognizer;\r\n        this.privTranscriberRecognizer.meeting = this;\r\n    }\r\n\r\n    public getKeepAlive(): string {\r\n        const nickname: string = (!!this.me) ? this.me.displayName : \"default_nickname\";\r\n        return JSON.stringify({\r\n            id: \"0\",\r\n            nickname,\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.keepAlive\r\n        });\r\n    }\r\n\r\n    /** websocket callbacks */\r\n    /* eslint-disable @typescript-eslint/typedef */\r\n    private onConnected = (e: ConnectionEventArgs): void => {\r\n        this.privIsConnected = true;\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStarted) {\r\n                this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onDisconnected = (e: ConnectionEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStopped) {\r\n                this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        } finally {\r\n            void this.close(false);\r\n        }\r\n    };\r\n\r\n    private onCanceled = (r: ConversationRecognizer, e: ConversationTranslationCanceledEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.canceled) {\r\n                this.privConversationTranslator.canceled(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantUpdateCommandReceived = (r: ConversationRecognizer, e: ParticipantAttributeEventArgs): void => {\r\n        try {\r\n            const updatedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.id);\r\n            if (updatedParticipant !== undefined) {\r\n\r\n                switch (e.key) {\r\n                    case ConversationTranslatorCommandTypes.changeNickname:\r\n                        updatedParticipant.displayName = e.value as string;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setUseTTS:\r\n                        updatedParticipant.isUsingTts = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setProfanityFiltering:\r\n                        updatedParticipant.profanity = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setMute:\r\n                        updatedParticipant.isMuted = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setTranslateToLanguages:\r\n                        updatedParticipant.translateToLanguages = e.value as string[];\r\n                        break;\r\n                }\r\n                this.privParticipants.addOrUpdateParticipant(updatedParticipant);\r\n\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                            [this.toParticipant(updatedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onLockRoomCommandReceived = (): void => {\r\n        // TODO\r\n    };\r\n\r\n    private onMuteAllCommandReceived = (r: ConversationRecognizer, e: MuteAllEventArgs): void => {\r\n        try {\r\n            this.privParticipants.participants.forEach((p: IInternalParticipant): boolean => p.isMuted = (p.isHost ? false : e.isMuted));\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                        this.toParticipants(false), e.sessionId));\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantJoinCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\r\n            if (newParticipant !== undefined) {\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation,\r\n                            [this.toParticipant(newParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantLeaveCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const ejectedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.participant.id);\r\n            if (ejectedParticipant !== undefined) {\r\n                // remove the participant from the internal participants list\r\n                this.privParticipants.deleteParticipant(e.participant.id);\r\n                if (!!this.privConversationTranslator) {\r\n                    // notify subscribers that the participant has left the conversation\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation,\r\n                            [this.toParticipant(ejectedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onTranslationReceived = (r: ConversationRecognizer, e: ConversationReceivedTranslationEventArgs): void => {\r\n        try {\r\n            switch (e.command) {\r\n                case ConversationTranslatorMessageTypes.final:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribed(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.partial:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribing(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.instantMessage:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.textMessageReceived(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantsListReceived = (r: ConversationRecognizer, e: ParticipantsListEventArgs): void => {\r\n        try {\r\n            // check if the session token needs to be updated\r\n            if (e.sessionToken !== undefined && e.sessionToken !== null) {\r\n                this.privRoom.token = e.sessionToken;\r\n            }\r\n            // save the participants\r\n            this.privParticipants.participants = [...e.participants];\r\n            // enable the conversation\r\n            if (this.privParticipants.me !== undefined) {\r\n                this.privIsReady = true;\r\n            }\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\r\n            }\r\n            // if this is the host, update the nickname if needed\r\n            if (this.me.isHost) {\r\n                const nickname: string = this.privConversationTranslator?.properties.getProperty(PropertyId.ConversationTranslator_Name);\r\n                if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\r\n                    // issue a change nickname request\r\n                    this.changeNicknameAsync(nickname);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onConversationExpiration = (r: ConversationRecognizer, e: ConversationExpirationEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.conversationExpiration(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n    /* eslint-enable @typescript-eslint/typedef */\r\n\r\n    private addParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(participant);\r\n        if (newParticipant !== undefined) {\r\n            if (!!this.privTranscriberRecognizer) {\r\n                const meetingInfo = this.meetingInfo;\r\n                meetingInfo.participants = [participant];\r\n                return this.privTranscriberRecognizer.pushMeetingEvent(meetingInfo, \"join\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        this.privParticipants.deleteParticipant(participant.id);\r\n        const meetingInfo = this.meetingInfo;\r\n        meetingInfo.participants = [participant];\r\n        return this.privTranscriberRecognizer.pushMeetingEvent(meetingInfo, \"leave\");\r\n    }\r\n\r\n    private async close(dispose: boolean): Promise<void> {\r\n        try {\r\n            this.privIsConnected = false;\r\n            await this.privConversationRecognizer?.close();\r\n            this.privConversationRecognizer = undefined;\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.dispose();\r\n            }\r\n        } catch (e) {\r\n            // ignore error\r\n            throw e;\r\n        }\r\n        if (dispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /** Helpers */\r\n    private handleCallback(cb: () => void, err: (message: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    private handleError(error: any, err: (message: string) => void): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Participant Helpers */\r\n    private toParticipants(includeHost: boolean): Participant[] {\r\n\r\n        const participants: Participant[] = this.privParticipants.participants.map((p: IInternalParticipant): Participant => ( this.toParticipant(p) ) );\r\n        if (!includeHost) {\r\n            return participants.filter((p: Participant): boolean => p.isHost === false);\r\n        } else {\r\n            return participants;\r\n        }\r\n    }\r\n\r\n    private toParticipant(p: IInternalParticipant): Participant {\r\n        return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\r\n    }\r\n\r\n    private getMuteAllCommand(isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingd\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMuteAll,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getMuteCommand(participantId: string, isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMute,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getLockCommand(isLocked: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setLockState,\r\n            participantId: this.privRoom.participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isLocked\r\n        });\r\n    }\r\n\r\n    private getEjectCommand(participantId: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.ejectParticipant,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n        });\r\n    }\r\n\r\n    private getSetTranslateToLanguagesCommand(languages: string[]): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: languages\r\n        });\r\n    }\r\n\r\n    private getChangeNicknameCommand(nickname: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.changeNickname,\r\n            nickname,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: nickname\r\n        });\r\n    }\r\n\r\n    private getMessageCommand(message: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n        Contracts.throwIfNullOrWhitespace(message, \"message\");\r\n\r\n        return JSON.stringify({\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            text: message,\r\n            type: ConversationTranslatorMessageTypes.instantMessage\r\n        });\r\n    }\r\n\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { CancellationEventArgsBase } from \"../CancellationEventArgsBase\";\r\n\r\nexport class MeetingTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { TranscriberRecognizer } from \"../../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationEventArgs,\r\n    Connection,\r\n    MeetingTranscriptionEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SessionEventArgs\r\n} from \"../Exports\";\r\nimport {\r\n    MeetingHandler,\r\n    MeetingImpl,\r\n    MeetingTranscriptionHandler\r\n} from \"./Exports\";\r\nimport { Callback, IMeeting } from \"./IMeeting\";\r\n\r\nexport class MeetingTranscriber implements MeetingTranscriptionHandler {\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during the meeting.\r\n     * @member MeetingTranscriber.prototype.MeetingCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public MeetingCanceled: (sender: MeetingHandler, event: CancellationEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during transcription.\r\n     * @member MeetingTranscriber.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: MeetingHandler, event: CancellationEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognized signals that a final meeting transcription result is received.\r\n      * @member MeetingTranscriber.prototype.transcribed\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribed: (sender: MeetingTranscriptionHandler, event: MeetingTranscriptionEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognizing signals that an intermediate meeting transcription result is received.\r\n      * @member MeetingTranscriber.prototype.transcribing\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribing: (sender: MeetingTranscriptionHandler, event: MeetingTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member MeetingTranscriber.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member MeetingTranscriber.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for meeting started events.\r\n     * @member MeetingTranscriber.prototype.MeetingStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public MeetingStarted: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for meeting stopped events.\r\n     * @member MeetingTranscriber.prototype.MeetingStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public meetingStopped: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    protected privAudioConfig: AudioConfig;\r\n    private privDisposedRecognizer: boolean;\r\n    private privRecognizer: TranscriberRecognizer;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * MeetingTranscriber constructor.\r\n     * @constructor\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        this.privAudioConfig = audioConfig;\r\n        this.privProperties = new PropertyCollection();\r\n        this.privRecognizer = undefined;\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member MeetingTranscriber.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this MeetingTranscriber.\r\n     * @member MeetingTranscriber.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this MeetingTranscriber.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privRecognizer.internalData;\r\n    }\r\n\r\n    /**\r\n     * @Deprecated\r\n     * @Obsolete\r\n     * Please use the Connection.fromRecognizer pattern to obtain a connection object\r\n     */\r\n    public get connection(): Connection {\r\n        return Connection.fromRecognizer(this.privRecognizer);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member MeetingTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member MeetingTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * @param {Meeting} meeting - meeting to be recognized\r\n     */\r\n    public joinMeetingAsync(meeting: IMeeting, cb?: Callback, err?: Callback): void {\r\n        /* eslint-disable no-console */\r\n        // console.log(\">> MeetingTranscriber::joinMeetingAsync\");\r\n        /* eslint-enable no-console */\r\n        const meetingImpl = meeting as MeetingImpl;\r\n        Contracts.throwIfNullOrUndefined(MeetingImpl, \"Meeting\");\r\n\r\n        // ref the meeting object\r\n        // create recognizer and subscribe to recognizer events\r\n        this.privRecognizer = new TranscriberRecognizer(meeting.config, this.privAudioConfig);\r\n        Contracts.throwIfNullOrUndefined(this.privRecognizer, \"Recognizer\");\r\n        this.privRecognizer.connectMeetingCallbacks(this);\r\n\r\n        marshalPromiseToCallbacks(meetingImpl.connectTranscriberRecognizer(this.privRecognizer), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts meeting transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member MeetingTranscriber.prototype.startTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.startContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts meeting transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member MeetingTranscriber.prototype.stopTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.stopContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Leave the current meeting. After this is called, you will no longer receive any events.\r\n     */\r\n    public leaveMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.disconnectCallbacks();\r\n        // eslint-disable-next-line\r\n        marshalPromiseToCallbacks((async (): Promise<void> => { return; })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member MeetingTranscriber.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member MeetingTranscriber.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n        if (!!this.privRecognizer) {\r\n            await this.privRecognizer.close();\r\n            this.privRecognizer = undefined;\r\n        }\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n        }\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"../Exports\";\r\n\r\n/**\r\n * Defines result of conversation transcription.\r\n * @class ConversationTranscriptionResult\r\n */\r\nexport class ConversationTranscriptionResult extends RecognitionResult {\r\n    private readonly privSpeakerId: string;\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} speakerId - speaker id for conversation transcription.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string,\r\n                       duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, speakerId?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\r\n        this.privSpeakerId = speakerId;\r\n    }\r\n\r\n    /**\r\n     * speaker id\r\n     * @member ConversationTranscriptionResult.prototype.speakerId\r\n     * @function\r\n     * @public\r\n     * @returns {string} id of speaker in given result\r\n     */\r\n    public get speakerId(): string {\r\n        return this.privSpeakerId;\r\n    }\r\n\r\n}\r\n",null,"/* eslint-disable @typescript-eslint/no-empty-function */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { PathLike } from \"fs\";\r\nimport { IRestResponse } from \"../common.browser/RestMessageAdapter\";\r\nimport {\r\n    AutoDetectSourceLanguagesOpenRangeOptionName,\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    OS,\r\n    SpeechServiceConfig,\r\n    SpeechSynthesisConnectionFactory,\r\n    SynthesisAdapterBase,\r\n    SynthesisRestAdapter,\r\n    SynthesizerConfig,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    createNoDashGuid,\r\n    IAudioDestination,\r\n    IStringDictionary,\r\n    marshalPromiseToCallbacks,\r\n    Queue\r\n} from \"../common/Exports\";\r\nimport { AudioOutputConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { AudioFileWriter } from \"./Audio/AudioFileWriter\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat\";\r\nimport {\r\n    PullAudioOutputStreamImpl,\r\n    PushAudioOutputStreamImpl\r\n} from \"./Audio/AudioOutputStream\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    AudioOutputStream,\r\n    AutoDetectSourceLanguageConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeechConfig,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisOutputFormat,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SynthesisVoicesResult,\r\n} from \"./Exports\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Defines the class SpeechSynthesizer for text to speech.\r\n * Updated in version 1.16.0\r\n * @class SpeechSynthesizer\r\n */\r\nexport class SpeechSynthesizer {\r\n    protected audioConfig: AudioConfig;\r\n    protected privAdapter: SynthesisAdapterBase;\r\n    protected privRestAdapter: SynthesisRestAdapter;\r\n    protected privProperties: PropertyCollection;\r\n    protected synthesisRequestQueue: Queue<SynthesisRequest>;\r\n\r\n    /**\r\n     * Defines event handler for synthesis start events.\r\n     * @member SpeechSynthesizer.prototype.synthesisStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisStarted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesizing events.\r\n     * @member SpeechSynthesizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis completed events.\r\n     * @member SpeechSynthesizer.prototype.synthesisCompleted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisCompleted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis cancelled events.\r\n     * @member SpeechSynthesizer.prototype.SynthesisCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public SynthesisCanceled: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for word boundary events\r\n     * @member SpeechSynthesizer.prototype.wordBoundary\r\n     * @function\r\n     * @public\r\n     */\r\n    public wordBoundary: (sender: SpeechSynthesizer, event: SpeechSynthesisWordBoundaryEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for bookmark reached events\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesizer.prototype.bookmarkReached\r\n     * @function\r\n     * @public\r\n     */\r\n    public bookmarkReached: (sender: SpeechSynthesizer, event: SpeechSynthesisBookmarkEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for viseme received event\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesizer.prototype.visemeReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public visemeReceived: (sender: SpeechSynthesizer, event: SpeechSynthesisVisemeEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeechSynthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeechSynthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeechSynthesizer.\r\n     * @member SpeechSynthesizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechSynthesizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Indicates if auto detect source language is enabled\r\n     * @member SpeechSynthesizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {boolean} if auto detect source language is enabled\r\n     */\r\n    public get autoDetectSourceLanguage(): boolean {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages) === AutoDetectSourceLanguagesOpenRangeOptionName;\r\n    }\r\n\r\n    private privDisposed: boolean;\r\n    private privConnectionFactory: ISynthesisConnectionFactory;\r\n    private privSynthesizing: boolean;\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer.\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        if (audioConfig !== null) {\r\n            if (audioConfig === undefined) {\r\n                this.audioConfig = (typeof window === \"undefined\") ? undefined : AudioConfig.fromDefaultSpeakerOutput();\r\n            } else {\r\n                this.audioConfig = audioConfig;\r\n            }\r\n        }\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.privDisposed = false;\r\n        this.privSynthesizing = false;\r\n        this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\r\n        this.synthesisRequestQueue = new Queue<SynthesisRequest>();\r\n        this.implCommonSynthesizeSetup();\r\n    }\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this synthesizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the synthesizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechSynthesizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        return new SpeechSynthesizer(speechConfig, audioConfig);\r\n    }\r\n\r\n    public buildSsml(text: string): string {\r\n        const languageToDefaultVoice: IStringDictionary<string>  = {\r\n            [\"af-ZA\"]: \"af-ZA-AdriNeural\",\r\n            [\"am-ET\"]: \"am-ET-AmehaNeural\",\r\n            [\"ar-AE\"]: \"ar-AE-FatimaNeural\",\r\n            [\"ar-BH\"]: \"ar-BH-AliNeural\",\r\n            [\"ar-DZ\"]: \"ar-DZ-AminaNeural\",\r\n            [\"ar-EG\"]: \"ar-EG-SalmaNeural\",\r\n            [\"ar-IQ\"]: \"ar-IQ-BasselNeural\",\r\n            [\"ar-JO\"]: \"ar-JO-SanaNeural\",\r\n            [\"ar-KW\"]: \"ar-KW-FahedNeural\",\r\n            [\"ar-LY\"]: \"ar-LY-ImanNeural\",\r\n            [\"ar-MA\"]: \"ar-MA-JamalNeural\",\r\n            [\"ar-QA\"]: \"ar-QA-AmalNeural\",\r\n            [\"ar-SA\"]: \"ar-SA-HamedNeural\",\r\n            [\"ar-SY\"]: \"ar-SY-AmanyNeural\",\r\n            [\"ar-TN\"]: \"ar-TN-HediNeural\",\r\n            [\"ar-YE\"]: \"ar-YE-MaryamNeural\",\r\n            [\"bg-BG\"]: \"bg-BG-BorislavNeural\",\r\n            [\"bn-BD\"]: \"bn-BD-NabanitaNeural\",\r\n            [\"bn-IN\"]: \"bn-IN-BashkarNeural\",\r\n            [\"ca-ES\"]: \"ca-ES-JoanaNeural\",\r\n            [\"cs-CZ\"]: \"cs-CZ-AntoninNeural\",\r\n            [\"cy-GB\"]: \"cy-GB-AledNeural\",\r\n            [\"da-DK\"]: \"da-DK-ChristelNeural\",\r\n            [\"de-AT\"]: \"de-AT-IngridNeural\",\r\n            [\"de-CH\"]: \"de-CH-JanNeural\",\r\n            [\"de-DE\"]: \"de-DE-KatjaNeural\",\r\n            [\"el-GR\"]: \"el-GR-AthinaNeural\",\r\n            [\"en-AU\"]: \"en-AU-NatashaNeural\",\r\n            [\"en-CA\"]: \"en-CA-ClaraNeural\",\r\n            [\"en-GB\"]: \"en-GB-LibbyNeural\",\r\n            [\"en-HK\"]: \"en-HK-SamNeural\",\r\n            [\"en-IE\"]: \"en-IE-ConnorNeural\",\r\n            [\"en-IN\"]: \"en-IN-NeerjaNeural\",\r\n            [\"en-KE\"]: \"en-KE-AsiliaNeural\",\r\n            [\"en-NG\"]: \"en-NG-AbeoNeural\",\r\n            [\"en-NZ\"]: \"en-NZ-MitchellNeural\",\r\n            [\"en-PH\"]: \"en-PH-JamesNeural\",\r\n            [\"en-SG\"]: \"en-SG-LunaNeural\",\r\n            [\"en-TZ\"]: \"en-TZ-ElimuNeural\",\r\n            [\"en-US\"]: \"en-US-JennyNeural\",\r\n            [\"en-ZA\"]: \"en-ZA-LeahNeural\",\r\n            [\"es-AR\"]: \"es-AR-ElenaNeural\",\r\n            [\"es-BO\"]: \"es-BO-MarceloNeural\",\r\n            [\"es-CL\"]: \"es-CL-CatalinaNeural\",\r\n            [\"es-CO\"]: \"es-CO-GonzaloNeural\",\r\n            [\"es-CR\"]: \"es-CR-JuanNeural\",\r\n            [\"es-CU\"]: \"es-CU-BelkysNeural\",\r\n            [\"es-DO\"]: \"es-DO-EmilioNeural\",\r\n            [\"es-EC\"]: \"es-EC-AndreaNeural\",\r\n            [\"es-ES\"]: \"es-ES-AlvaroNeural\",\r\n            [\"es-GQ\"]: \"es-GQ-JavierNeural\",\r\n            [\"es-GT\"]: \"es-GT-AndresNeural\",\r\n            [\"es-HN\"]: \"es-HN-CarlosNeural\",\r\n            [\"es-MX\"]: \"es-MX-DaliaNeural\",\r\n            [\"es-NI\"]: \"es-NI-FedericoNeural\",\r\n            [\"es-PA\"]: \"es-PA-MargaritaNeural\",\r\n            [\"es-PE\"]: \"es-PE-AlexNeural\",\r\n            [\"es-PR\"]: \"es-PR-KarinaNeural\",\r\n            [\"es-PY\"]: \"es-PY-MarioNeural\",\r\n            [\"es-SV\"]: \"es-SV-LorenaNeural\",\r\n            [\"es-US\"]: \"es-US-AlonsoNeural\",\r\n            [\"es-UY\"]: \"es-UY-MateoNeural\",\r\n            [\"es-VE\"]: \"es-VE-PaolaNeural\",\r\n            [\"et-EE\"]: \"et-EE-AnuNeural\",\r\n            [\"fa-IR\"]: \"fa-IR-DilaraNeural\",\r\n            [\"fi-FI\"]: \"fi-FI-SelmaNeural\",\r\n            [\"fil-PH\"]: \"fil-PH-AngeloNeural\",\r\n            [\"fr-BE\"]: \"fr-BE-CharlineNeural\",\r\n            [\"fr-CA\"]: \"fr-CA-SylvieNeural\",\r\n            [\"fr-CH\"]: \"fr-CH-ArianeNeural\",\r\n            [\"fr-FR\"]: \"fr-FR-DeniseNeural\",\r\n            [\"ga-IE\"]: \"ga-IE-ColmNeural\",\r\n            [\"gl-ES\"]: \"gl-ES-RoiNeural\",\r\n            [\"gu-IN\"]: \"gu-IN-DhwaniNeural\",\r\n            [\"he-IL\"]: \"he-IL-AvriNeural\",\r\n            [\"hi-IN\"]: \"hi-IN-MadhurNeural\",\r\n            [\"hr-HR\"]: \"hr-HR-GabrijelaNeural\",\r\n            [\"hu-HU\"]: \"hu-HU-NoemiNeural\",\r\n            [\"id-ID\"]: \"id-ID-ArdiNeural\",\r\n            [\"is-IS\"]: \"is-IS-GudrunNeural\",\r\n            [\"it-IT\"]: \"it-IT-IsabellaNeural\",\r\n            [\"ja-JP\"]: \"ja-JP-NanamiNeural\",\r\n            [\"jv-ID\"]: \"jv-ID-DimasNeural\",\r\n            [\"kk-KZ\"]: \"kk-KZ-AigulNeural\",\r\n            [\"km-KH\"]: \"km-KH-PisethNeural\",\r\n            [\"kn-IN\"]: \"kn-IN-GaganNeural\",\r\n            [\"ko-KR\"]: \"ko-KR-SunHiNeural\",\r\n            [\"lo-LA\"]: \"lo-LA-ChanthavongNeural\",\r\n            [\"lt-LT\"]: \"lt-LT-LeonasNeural\",\r\n            [\"lv-LV\"]: \"lv-LV-EveritaNeural\",\r\n            [\"mk-MK\"]: \"mk-MK-AleksandarNeural\",\r\n            [\"ml-IN\"]: \"ml-IN-MidhunNeural\",\r\n            [\"mr-IN\"]: \"mr-IN-AarohiNeural\",\r\n            [\"ms-MY\"]: \"ms-MY-OsmanNeural\",\r\n            [\"mt-MT\"]: \"mt-MT-GraceNeural\",\r\n            [\"my-MM\"]: \"my-MM-NilarNeural\",\r\n            [\"nb-NO\"]: \"nb-NO-PernilleNeural\",\r\n            [\"nl-BE\"]: \"nl-BE-ArnaudNeural\",\r\n            [\"nl-NL\"]: \"nl-NL-ColetteNeural\",\r\n            [\"pl-PL\"]: \"pl-PL-AgnieszkaNeural\",\r\n            [\"ps-AF\"]: \"ps-AF-GulNawazNeural\",\r\n            [\"pt-BR\"]: \"pt-BR-FranciscaNeural\",\r\n            [\"pt-PT\"]: \"pt-PT-DuarteNeural\",\r\n            [\"ro-RO\"]: \"ro-RO-AlinaNeural\",\r\n            [\"ru-RU\"]: \"ru-RU-SvetlanaNeural\",\r\n            [\"si-LK\"]: \"si-LK-SameeraNeural\",\r\n            [\"sk-SK\"]: \"sk-SK-LukasNeural\",\r\n            [\"sl-SI\"]: \"sl-SI-PetraNeural\",\r\n            [\"so-SO\"]: \"so-SO-MuuseNeural\",\r\n            [\"sr-RS\"]: \"sr-RS-NicholasNeural\",\r\n            [\"su-ID\"]: \"su-ID-JajangNeural\",\r\n            [\"sv-SE\"]: \"sv-SE-SofieNeural\",\r\n            [\"sw-KE\"]: \"sw-KE-RafikiNeural\",\r\n            [\"sw-TZ\"]: \"sw-TZ-DaudiNeural\",\r\n            [\"ta-IN\"]: \"ta-IN-PallaviNeural\",\r\n            [\"ta-LK\"]: \"ta-LK-KumarNeural\",\r\n            [\"ta-SG\"]: \"ta-SG-AnbuNeural\",\r\n            [\"te-IN\"]: \"te-IN-MohanNeural\",\r\n            [\"th-TH\"]: \"th-TH-PremwadeeNeural\",\r\n            [\"tr-TR\"]: \"tr-TR-AhmetNeural\",\r\n            [\"uk-UA\"]: \"uk-UA-OstapNeural\",\r\n            [\"ur-IN\"]: \"ur-IN-GulNeural\",\r\n            [\"ur-PK\"]: \"ur-PK-AsadNeural\",\r\n            [\"uz-UZ\"]: \"uz-UZ-MadinaNeural\",\r\n            [\"vi-VN\"]: \"vi-VN-HoaiMyNeural\",\r\n            [\"zh-CN\"]: \"zh-CN-XiaoxiaoNeural\",\r\n            [\"zh-HK\"]: \"zh-HK-HiuMaanNeural\",\r\n            [\"zh-TW\"]: \"zh-TW-HsiaoChenNeural\",\r\n            [\"zu-ZA\"]: \"zu-ZA-ThandoNeural\",\r\n        };\r\n\r\n        let language = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage, \"en-US\");\r\n        let voice = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice, \"\");\r\n        let ssml: string = SpeechSynthesizer.XMLEncode(text);\r\n        if (this.autoDetectSourceLanguage) {\r\n            language = \"en-US\";\r\n        } else {\r\n            voice = voice || languageToDefaultVoice[language];\r\n        }\r\n        if (voice) {\r\n            ssml = `<voice name='${voice}'>${ssml}</voice>`;\r\n        }\r\n        ssml = `<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xmlns:mstts='http://www.w3.org/2001/mstts' xmlns:emo='http://www.w3.org/2009/10/emotionml' xml:lang='${language}'>${ssml}</speak>`;\r\n        return ssml;\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on plain text.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakTextAsync\r\n     * @function\r\n     * @public\r\n     * @param text - Text to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakTextAsync(text: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(text, false, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on SSML.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakSsmlAsync\r\n     * @function\r\n     * @public\r\n     * @param ssml - SSML to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakSsmlAsync(ssml: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(ssml, true, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Get list of synthesis voices available.\r\n     * The task returns the synthesis voice result.\r\n     * @member SpeechSynthesizer.prototype.getVoicesAsync\r\n     * @function\r\n     * @async\r\n     * @public\r\n     * @param locale - Locale of voices in BCP-47 format; if left empty, get all available voices.\r\n     * @return {Promise<SynthesisVoicesResult>} - Promise of a SynthesisVoicesResult.\r\n     */\r\n    public async getVoicesAsync(locale: string = \"\"): Promise<SynthesisVoicesResult> {\r\n        return this.getVoices(locale);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechSynthesizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privAdapter;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member SpeechSynthesizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            if (this.privAdapter) {\r\n                await this.privAdapter.dispose();\r\n            }\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n    protected createSynthesizerConfig(speechConfig: SpeechServiceConfig): SynthesizerConfig {\r\n        return new SynthesizerConfig(\r\n            speechConfig,\r\n            this.privProperties);\r\n    }\r\n\r\n    // Creates the synthesis adapter\r\n    protected createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase {\r\n        return new SynthesisAdapterBase(authentication, connectionFactory,\r\n            synthesizerConfig, this, this.audioConfig as AudioOutputConfigImpl);\r\n    }\r\n\r\n    protected implCommonSynthesizeSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const synthesizerConfig = this.createSynthesizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        const subscriptionKey = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                },\r\n                (): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                });\r\n\r\n        this.privAdapter = this.createSynthesisAdapter(\r\n            authentication,\r\n            this.privConnectionFactory,\r\n            this.audioConfig,\r\n            synthesizerConfig);\r\n\r\n        this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(\r\n            SpeechSynthesisOutputFormat[this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined) as keyof typeof SpeechSynthesisOutputFormat]\r\n        );\r\n\r\n        this.privRestAdapter = new SynthesisRestAdapter(synthesizerConfig, authentication);\r\n    }\r\n\r\n    protected speakImpl(text: string, IsSsml: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privDisposed);\r\n            const requestId = createNoDashGuid();\r\n            let audioDestination;\r\n            if (dataStream instanceof PushAudioOutputStreamCallback) {\r\n                audioDestination = new PushAudioOutputStreamImpl(dataStream);\r\n            } else if (dataStream instanceof PullAudioOutputStream) {\r\n                audioDestination = dataStream as PullAudioOutputStreamImpl;\r\n            } else if (dataStream !== undefined) {\r\n                audioDestination = new AudioFileWriter(dataStream as PathLike);\r\n            } else {\r\n                audioDestination = undefined;\r\n            }\r\n            this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, IsSsml, (e: SpeechSynthesisResult): void => {\r\n                this.privSynthesizing = false;\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(e);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e as string);\r\n                        }\r\n                    }\r\n                }\r\n                cb = undefined;\r\n                /* eslint-disable no-empty */\r\n                this.adapterSpeak().catch((): void => { });\r\n\r\n            }, (e: string): void => {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }, audioDestination));\r\n\r\n            /* eslint-disable no-empty-function */\r\n            this.adapterSpeak().catch((): void => { });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n\r\n            // Destroy the synthesizer.\r\n            /* eslint-disable no-empty */\r\n            this.dispose(true).catch((): void => { });\r\n        }\r\n    }\r\n\r\n    protected async getVoices(locale: string): Promise<SynthesisVoicesResult> {\r\n        const requestId = createNoDashGuid();\r\n        const response: IRestResponse = await this.privRestAdapter.getVoicesList(requestId);\r\n        if (response.ok && Array.isArray(response.json)) {\r\n            let json = response.json;\r\n            if (!!locale && locale.length > 0) {\r\n                json = json.filter((item: { Locale: string }): boolean => !!item.Locale && item.Locale.toLowerCase() === locale.toLowerCase() );\r\n            }\r\n            return new SynthesisVoicesResult(requestId, json, undefined);\r\n        } else {\r\n            return new SynthesisVoicesResult(requestId, undefined, `Error: ${response.status}: ${response.statusText}`);\r\n        }\r\n   }\r\n\r\n    protected async adapterSpeak(): Promise<void> {\r\n        if (!this.privDisposed && !this.privSynthesizing) {\r\n            this.privSynthesizing = true;\r\n            const request: SynthesisRequest = await this.synthesisRequestQueue.dequeue();\r\n            return this.privAdapter.Speak(request.text, request.isSSML, request.requestId, request.cb, request.err, request.dataStream);\r\n        }\r\n    }\r\n\r\n    private static XMLEncode(text: string): string {\r\n        return text.replace(/&/g, \"&amp;\")\r\n            .replace(/</g, \"&lt;\")\r\n            .replace(/>/g, \"&gt;\")\r\n            .replace(/\"/g, \"&quot;\")\r\n            .replace(/'/g, \"&apos;\");\r\n    }\r\n}\r\n\r\nexport class SynthesisRequest {\r\n    public requestId: string;\r\n    public text: string;\r\n    public isSSML: boolean;\r\n    public cb: (e: SpeechSynthesisResult) => void;\r\n    public err: (e: string) => void;\r\n    public dataStream: IAudioDestination;\r\n\r\n    public constructor(requestId: string, text: string, isSSML: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: IAudioDestination) {\r\n        this.requestId = requestId;\r\n        this.text = text;\r\n        this.isSSML = isSSML;\r\n        this.cb = cb;\r\n        this.err = err;\r\n        this.dataStream = dataStream;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason } from \"./Exports\";\r\n\r\n/**\r\n * Base class for synthesis results\r\n * @class SynthesisResult\r\n * Added in version 1.20.0\r\n */\r\nexport class SynthesisResult {\r\n    private privResultId: string;\r\n    private privReason: ResultReason;\r\n    private privErrorDetails: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, errorDetails?: string, properties?: PropertyCollection) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privProperties = properties;\r\n    }\r\n\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member SynthesisResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    public get resultId(): string {\r\n        return this.privResultId;\r\n    }\r\n\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member SynthesisResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful synthesis, provides details of the occurred error.\r\n     * @member SynthesisResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * The set of properties exposed in the result.\r\n     * @member SynthesisResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    PropertyCollection,\r\n    ResultReason,\r\n    SynthesisResult\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines result of speech synthesis.\r\n * @class SpeechSynthesisResult\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisResult extends SynthesisResult {\r\n    private readonly privAudioData: ArrayBuffer;\r\n    private readonly privAudioDuration: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {ArrayBuffer} audioData - The synthesized audio binary.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     * @param {number} audioDuration - The audio duration.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, audioData?: ArrayBuffer,\r\n                errorDetails?: string, properties?: PropertyCollection, audioDuration?: number) {\r\n        super(resultId, reason, errorDetails, properties);\r\n        this.privAudioData = audioData;\r\n        this.privAudioDuration = audioDuration;\r\n    }\r\n\r\n    /**\r\n     * The synthesized audio data\r\n     * @member SpeechSynthesisResult.prototype.audioData\r\n     * @function\r\n     * @public\r\n     * @returns {ArrayBuffer} The synthesized audio data.\r\n     */\r\n    public get audioData(): ArrayBuffer {\r\n        return this.privAudioData;\r\n    }\r\n\r\n    /**\r\n     * The time duration of synthesized audio, in ticks (100 nanoseconds).\r\n     * @member SpeechSynthesisResult.prototype.audioDuration\r\n     * @function\r\n     * @public\r\n     * @returns {number} The time duration of synthesized audio.\r\n     */\r\n    public get audioDuration(): number {\r\n        return this.privAudioDuration;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisResult } from \"./Exports\";\r\n\r\n/**\r\n * Defines contents of speech synthesis events.\r\n * @class SpeechSynthesisEventArgs\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisEventArgs {\r\n    private readonly privResult: SpeechSynthesisResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechSynthesisResult} result - The speech synthesis result.\r\n     */\r\n    public constructor(result: SpeechSynthesisResult) {\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the synthesis result.\r\n     * @member SpeechSynthesisEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisResult} the synthesis result.\r\n     */\r\n    public get result(): SpeechSynthesisResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisBoundaryType } from \"./SpeechSynthesisBoundaryType\";\r\n\r\n/**\r\n * Defines contents of speech synthesis word boundary event.\r\n * @class SpeechSynthesisWordBoundaryEventArgs\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisWordBoundaryEventArgs {\r\n    private readonly privAudioOffset: number;\r\n    private readonly privDuration: number;\r\n    private readonly privText: string;\r\n    private readonly privWordLength: number;\r\n    private readonly privTextOffset: number;\r\n    private readonly privBoundaryType: SpeechSynthesisBoundaryType;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {number} duration - The audio duration.\r\n     * @param {string} text - The text.\r\n     * @param {number} wordLength - The length of the word.\r\n     * @param {number} textOffset - The text offset.\r\n     * @param {SpeechSynthesisBoundaryType} boundaryType - The boundary type\r\n     */\r\n    public constructor(audioOffset: number, duration: number, text: string, wordLength: number,\r\n                       textOffset: number, boundaryType: SpeechSynthesisBoundaryType) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privDuration = duration;\r\n        this.privText = text;\r\n        this.privWordLength = wordLength;\r\n        this.privTextOffset = textOffset;\r\n        this.privBoundaryType = boundaryType;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the duration, in ticks (100 nanoseconds).\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.duration\r\n     * @function\r\n     * @public\r\n     * @returns {number} Duration in 100 nanosecond increments.\r\n     */\r\n    public get duration(): number {\r\n        return this.privDuration;\r\n    }\r\n\r\n    /**\r\n     * Specifies the text of the word boundary event.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} the text.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n\r\n    /**\r\n     * Specifies the word length\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.wordLength\r\n     * @function\r\n     * @public\r\n     * @returns {number} the word length\r\n     */\r\n    public get wordLength(): number {\r\n        return this.privWordLength;\r\n    }\r\n\r\n    /**\r\n     * Specifies the text offset.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.textOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the text offset.\r\n     */\r\n    public get textOffset(): number {\r\n        return this.privTextOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the boundary type.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.boundaryType\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisBoundaryType} the boundary type.\r\n     */\r\n    public get boundaryType(): SpeechSynthesisBoundaryType {\r\n        return this.privBoundaryType;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines contents of speech synthesis bookmark event.\r\n * @class SpeechSynthesisBookmarkEventArgs\r\n * Added in version 1.16.0\r\n */\r\nexport class SpeechSynthesisBookmarkEventArgs {\r\n    private privAudioOffset: number;\r\n    private privText: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {string} text - The bookmark text.\r\n     */\r\n    public constructor(audioOffset: number, text: string) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privText = text;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the bookmark.\r\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} the bookmark text.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines contents of speech synthesis viseme event.\r\n * @class SpeechSynthesisVisemeEventArgs\r\n * Added in version 1.16.0\r\n */\r\nexport class SpeechSynthesisVisemeEventArgs {\r\n    private privAudioOffset: number;\r\n    private privVisemeId: number;\r\n    private privAnimation: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {number} visemeId - The viseme ID.\r\n     * @param {string} animation - The animation, could be in svg or other format.\r\n     */\r\n    public constructor(audioOffset: number, visemeId: number, animation: string) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privVisemeId = visemeId;\r\n        this.privAnimation = animation;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the viseme ID.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.visemeId\r\n     * @function\r\n     * @public\r\n     * @returns {number} the viseme ID.\r\n     */\r\n    public get visemeId(): number {\r\n        return this.privVisemeId;\r\n    }\r\n\r\n    /**\r\n     * Specifies the animation.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.animation\r\n     * @function\r\n     * @public\r\n     * @returns {string} the animation, could be in svg or other format.\r\n     */\r\n    public get animation(): string {\r\n        return this.privAnimation;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the boundary type of speech synthesis boundary event.\r\n * @class SpeechSynthesisBoundaryType\r\n * Added in version 1.21.0\r\n */\r\nexport enum SpeechSynthesisBoundaryType {\r\n    /**\r\n     * Indicates the boundary text is a word.\r\n     * @member SpeechSynthesisBoundaryType.Word\r\n     */\r\n    Word = \"WordBoundary\",\r\n\r\n    /**\r\n     * Indicates the boundary text is a punctuation.\r\n     * @member SpeechSynthesisBoundaryType.Punctuation\r\n     */\r\n    Punctuation = \"PunctuationBoundary\",\r\n\r\n    /**\r\n     * Indicates the boundary text is a sentence.\r\n     * @member SpeechSynthesisBoundaryType.Sentence\r\n     */\r\n    Sentence = \"SentenceBoundary\"\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason, SynthesisResult, VoiceInfo } from \"./Exports\";\r\n\r\n/**\r\n * Defines result of speech synthesis.\r\n * @class SynthesisVoicesResult\r\n * Added in version 1.20.0\r\n */\r\nexport class SynthesisVoicesResult extends SynthesisResult {\r\n    private privVoices: VoiceInfo[];\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param requestId - result id for request.\r\n     * @param json - json payload from endpoint.\r\n     */\r\n    public constructor(requestId: string, json: any, errorDetails: string ) {\r\n        if (Array.isArray(json)) {\r\n            super(requestId, ResultReason.VoicesListRetrieved, undefined, new PropertyCollection());\r\n            this.privVoices = [];\r\n            for (const item of json) {\r\n                this.privVoices.push(new VoiceInfo(item as { Name: string; LocalName: string; DisplayName: string; LocaleName: string; ShortName: string; Gender: string; VoiceType: string; Locale: string; StyleList: string[] }));\r\n            }\r\n        } else {\r\n            super(requestId, ResultReason.Canceled, errorDetails ? errorDetails : \"Error information unavailable\", new PropertyCollection());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The list of voices\r\n     * @member SynthesisVoicesResult.prototype.voices\r\n     * @function\r\n     * @public\r\n     * @returns {VoiceInfo[]} List of synthesized voices.\r\n     */\r\n    public get voices(): VoiceInfo[] {\r\n        return this.privVoices;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the gender of synthesis voices.\r\n * Added in version 1.20.0.\r\n */\r\nexport enum SynthesisVoiceGender {\r\n\r\n    /** Gender unknown */\r\n    Unknown,\r\n\r\n    /** Female voice */\r\n    Female,\r\n\r\n    /** Male voice */\r\n    Male\r\n}\r\n\r\nexport enum SynthesisVoiceType {\r\n    OnlineNeural = 1,\r\n    OnlineStandard = 2,\r\n    OfflineNeural = 3,\r\n    OfflineStandard = 4,\r\n}\r\n\r\n/**\r\n * Information about Speech Synthesis voice\r\n * Added in version 1.20.0.\r\n * @class VoiceInfo\r\n */\r\nexport class VoiceInfo {\r\n    private privName: string;\r\n    private privLocale: string;\r\n    private privShortName: string;\r\n    private privDisplayName: string;\r\n    private privLocalName: string;\r\n    private privLocaleName: string;\r\n    private privGender: SynthesisVoiceGender;\r\n    private privVoiceType: SynthesisVoiceType;\r\n    private privStyleList: string[] = [];\r\n    private privVoicePath: string;\r\n\r\n    public constructor(json: { Name: string; LocalName: string; DisplayName: string; ShortName: string; Gender: string; VoiceType: string; LocaleName: string ; Locale: string; StyleList: string[] }) {\r\n        this.privVoicePath = \"\";\r\n        if (!!json) {\r\n            this.privName = json.Name;\r\n            this.privLocale = json.Locale;\r\n            this.privShortName = json.ShortName;\r\n            this.privLocaleName = json.LocaleName;\r\n            this.privDisplayName = json.DisplayName;\r\n            this.privLocalName = json.LocalName;\r\n            this.privVoiceType = json.VoiceType.endsWith(\"Standard\") ? SynthesisVoiceType.OnlineStandard : SynthesisVoiceType.OnlineNeural;\r\n            this.privGender = json.Gender === \"Male\" ? SynthesisVoiceGender.Male : json.Gender === \"Female\" ? SynthesisVoiceGender.Female : SynthesisVoiceGender.Unknown;\r\n            if (!!json.StyleList && Array.isArray(json.StyleList)) {\r\n                for (const style of json.StyleList) {\r\n                    this.privStyleList.push(style);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public get name(): string {\r\n        return this.privName;\r\n    }\r\n\r\n    public get locale(): string {\r\n        return this.privLocale;\r\n    }\r\n\r\n    public get shortName(): string {\r\n        return this.privShortName;\r\n    }\r\n\r\n    public get displayName(): string {\r\n        return this.privDisplayName;\r\n    }\r\n\r\n    public get localName(): string {\r\n        return this.privLocalName;\r\n    }\r\n\r\n    public get localeName(): string {\r\n        return this.privLocaleName;\r\n    }\r\n\r\n    public get gender(): SynthesisVoiceGender {\r\n        return this.privGender;\r\n    }\r\n\r\n    public get voiceType(): SynthesisVoiceType {\r\n        return this.privVoiceType;\r\n    }\r\n\r\n    public get styleList(): string[] {\r\n        return this.privStyleList;\r\n    }\r\n\r\n    public get voicePath(): string {\r\n        return this.privVoicePath;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SynthesisAdapterBase } from \"../../common.speech/Exports\";\r\nimport {\r\n    BackgroundEvent,\r\n    createNoDashGuid,\r\n    Events,\r\n    IAudioDestination,\r\n    INumberDictionary\r\n} from \"../../common/Exports\";\r\nimport { AudioStreamFormat, IPlayer } from \"../Exports\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\nimport { PullAudioOutputStreamImpl } from \"./AudioOutputStream\";\r\nimport { AudioFormatTag } from \"./AudioStreamFormat\";\r\n\r\nconst MediaDurationPlaceholderSeconds = 60 * 30;\r\n\r\nconst AudioFormatToMimeType: INumberDictionary<string> = {\r\n    [AudioFormatTag.PCM]: \"audio/wav\",\r\n    [AudioFormatTag.MuLaw]: \"audio/x-wav\",\r\n    [AudioFormatTag.MP3]: \"audio/mpeg\",\r\n    [AudioFormatTag.OGG_OPUS]: \"audio/ogg\",\r\n    [AudioFormatTag.WEBM_OPUS]: \"audio/webm; codecs=opus\",\r\n    [AudioFormatTag.ALaw]: \"audio/x-wav\",\r\n    [AudioFormatTag.FLAC]: \"audio/flac\",\r\n};\r\n\r\n/**\r\n * Represents the speaker playback audio destination, which only works in browser.\r\n * Note: the SDK will try to use <a href=\"https://www.w3.org/TR/media-source/\">Media Source Extensions</a> to play audio.\r\n * Mp3 format has better supports on Microsoft Edge, Chrome and Safari (desktop), so, it's better to specify mp3 format for playback.\r\n * @class SpeakerAudioDestination\r\n * Updated in version 1.17.0\r\n */\r\nexport class SpeakerAudioDestination implements IAudioDestination, IPlayer {\r\n    private readonly privId: string;\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privAudio: HTMLAudioElement;\r\n    private privMediaSource: MediaSource;\r\n    private privSourceBuffer: SourceBuffer;\r\n    private privPlaybackStarted: boolean = false;\r\n    private privAudioBuffer: ArrayBuffer[];\r\n    private privAppendingToBuffer: boolean = false;\r\n    private privMediaSourceOpened: boolean = false;\r\n    private privIsClosed: boolean;\r\n    private privIsPaused: boolean;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privBytesReceived: number = 0;\r\n\r\n    public constructor(audioDestinationId?: string) {\r\n        this.privId = audioDestinationId ? audioDestinationId : createNoDashGuid();\r\n        this.privIsPaused = false;\r\n        this.privIsClosed = false;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privAudioBuffer !== undefined) {\r\n            this.privAudioBuffer.push(buffer);\r\n            this.updateSourceBuffer().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined) {\r\n            this.privAudioOutputStream.write(buffer);\r\n            this.privBytesReceived += buffer.byteLength;\r\n        }\r\n    }\r\n\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privIsClosed = true;\r\n        if (this.privSourceBuffer !== undefined) {\r\n            this.handleSourceBufferUpdateEnd().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined && typeof window !== \"undefined\") {\r\n            if ((this.privFormat.formatTag === AudioFormatTag.PCM || this.privFormat.formatTag === AudioFormatTag.MuLaw\r\n                || this.privFormat.formatTag === AudioFormatTag.ALaw) && this.privFormat.hasHeader === false) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\"Play back is not supported for raw PCM, mulaw or alaw format without header.\");\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            } else {\r\n                let receivedAudio = new ArrayBuffer(this.privBytesReceived);\r\n                this.privAudioOutputStream.read(receivedAudio).then((): void => {\r\n                    receivedAudio = SynthesisAdapterBase.addHeader(receivedAudio, this.privFormat);\r\n                    const audioBlob = new Blob([receivedAudio], { type: AudioFormatToMimeType[this.privFormat.formatTag] });\r\n                    this.privAudio.src = window.URL.createObjectURL(audioBlob);\r\n                    this.notifyPlayback().then((): void => {\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    }, (error: string): void => {\r\n                        if (!!err) {\r\n                            err(error);\r\n                        }\r\n                    });\r\n                }, (error: string): void => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            // unsupported format, call onAudioEnd directly.\r\n            if (!!this.onAudioEnd) {\r\n                this.onAudioEnd(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n        if (typeof (AudioContext) !== \"undefined\" || (typeof (window) !== \"undefined\" && typeof ((window as any).webkitAudioContext) !== \"undefined\")) {\r\n            this.privFormat = format as AudioOutputFormatImpl;\r\n            const mimeType: string = AudioFormatToMimeType[this.privFormat.formatTag];\r\n            if (mimeType === undefined) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\r\n                    `Unknown mimeType for format ${AudioFormatTag[this.privFormat.formatTag]}; playback is not supported.`);\r\n\r\n            } else if (typeof (MediaSource) !== \"undefined\" && MediaSource.isTypeSupported(mimeType)) {\r\n                this.privAudio = new Audio();\r\n                this.privAudioBuffer = [];\r\n                this.privMediaSource = new MediaSource();\r\n                this.privAudio.src = URL.createObjectURL(this.privMediaSource);\r\n                this.privAudio.load();\r\n                this.privMediaSource.onsourceopen = (): void => {\r\n                    this.privMediaSourceOpened = true;\r\n                    this.privMediaSource.duration = MediaDurationPlaceholderSeconds;\r\n                    this.privSourceBuffer = this.privMediaSource.addSourceBuffer(mimeType);\r\n                    this.privSourceBuffer.onupdate = (): void => {\r\n                        this.updateSourceBuffer().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdateend = (): void => {\r\n                        this.handleSourceBufferUpdateEnd().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdatestart = (): void => {\r\n                        this.privAppendingToBuffer = false;\r\n                    };\r\n                };\r\n                this.updateSourceBuffer().catch((reason: string): void => {\r\n                    Events.instance.onEvent(new BackgroundEvent(reason));\r\n                });\r\n\r\n            } else {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\r\n                    `Format ${AudioFormatTag[this.privFormat.formatTag]} could not be played by MSE, streaming playback is not enabled.`);\r\n                this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n                this.privAudioOutputStream.format = this.privFormat;\r\n                this.privAudio = new Audio();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get volume(): number {\r\n        return this.privAudio?.volume ?? -1;\r\n    }\r\n\r\n    public set volume(volume: number) {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.volume = volume;\r\n        }\r\n    }\r\n\r\n    public mute(): void {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.muted = true;\r\n        }\r\n    }\r\n\r\n    public unmute(): void {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.muted = false;\r\n        }\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsClosed;\r\n    }\r\n\r\n    public get currentTime(): number {\r\n        if (this.privAudio !== undefined) {\r\n            return this.privAudio.currentTime;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.pause();\r\n            this.privIsPaused = true;\r\n        }\r\n    }\r\n\r\n    public resume(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.play().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.privIsPaused = false;\r\n        }\r\n    }\r\n\r\n    public onAudioStart: (sender: IPlayer) => void;\r\n\r\n    public onAudioEnd: (sender: IPlayer) => void;\r\n\r\n    public get internalAudio(): HTMLAudioElement {\r\n        return this.privAudio;\r\n    }\r\n\r\n    private async updateSourceBuffer(): Promise<void> {\r\n        if (this.privAudioBuffer !== undefined && (this.privAudioBuffer.length > 0) && this.sourceBufferAvailable()) {\r\n            this.privAppendingToBuffer = true;\r\n            const binary = this.privAudioBuffer.shift();\r\n            try {\r\n                this.privSourceBuffer.appendBuffer(binary);\r\n            } catch (error) {\r\n                this.privAudioBuffer.unshift(binary);\r\n                // eslint-disable-next-line no-console\r\n                console.log(\r\n                    \"buffer filled, pausing addition of binaries until space is made\");\r\n                return;\r\n            }\r\n            await this.notifyPlayback();\r\n        } else if (this.canEndStream()) {\r\n            await this.handleSourceBufferUpdateEnd();\r\n        }\r\n    }\r\n\r\n    private async handleSourceBufferUpdateEnd(): Promise<void> {\r\n        if (this.canEndStream() && this.sourceBufferAvailable()) {\r\n            this.privMediaSource.endOfStream();\r\n            await this.notifyPlayback();\r\n        }\r\n    }\r\n\r\n    private async notifyPlayback(): Promise<void> {\r\n        if (!this.privPlaybackStarted && this.privAudio !== undefined) {\r\n            this.privPlaybackStarted = true;\r\n            if (!!this.onAudioStart) {\r\n                this.onAudioStart(this);\r\n            }\r\n            this.privAudio.onended = (): void => {\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            };\r\n            if (!this.privIsPaused) {\r\n                await this.privAudio.play();\r\n            }\r\n        }\r\n    }\r\n\r\n    private canEndStream(): boolean {\r\n        return (this.isClosed && this.privSourceBuffer !== undefined && (this.privAudioBuffer.length === 0)\r\n            && this.privMediaSourceOpened && !this.privAppendingToBuffer && this.privMediaSource.readyState === \"open\");\r\n    }\r\n\r\n    private sourceBufferAvailable(): boolean {\r\n        return (this.privSourceBuffer !== undefined && !this.privSourceBuffer.updating);\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase\";\r\n\r\n/**\r\n * Defines content of a RecognitionErrorEvent.\r\n * @class ConversationTranscriptionCanceledEventArgs\r\n */\r\nexport class ConversationTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase\";\r\n\r\n/**\r\n * Defines content of a MeetingTranscriptionCanceledEvent.\r\n * @class MeetingTranscriptionCanceledEventArgs\r\n */\r\nexport class MeetingTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the point system for pronunciation score calibration; default value is FivePoint.\r\n * Added in version 1.15.0\r\n * @class PronunciationAssessmentGradingSystem\r\n */\r\nexport enum PronunciationAssessmentGradingSystem {\r\n    /**\r\n     * Five point calibration\r\n     * @member PronunciationAssessmentGradingSystem.FivePoint\r\n     */\r\n    FivePoint = 1,\r\n\r\n    /**\r\n     * Hundred mark\r\n     * @member PronunciationAssessmentGradingSystem.HundredMark\r\n     */\r\n    HundredMark,\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the pronunciation evaluation granularity; default value is Phoneme.\r\n * Added in version 1.15.0\r\n * @class PronunciationAssessmentGranularity\r\n */\r\nexport enum PronunciationAssessmentGranularity {\r\n    /**\r\n     * Shows the score on the full text, word and phoneme level\r\n     * @member PronunciationAssessmentGranularity.Phoneme\r\n     */\r\n    Phoneme = 1,\r\n\r\n    /**\r\n     * Shows the score on the full text and word level\r\n     * @member PronunciationAssessmentGranularity.Word\r\n     */\r\n    Word,\r\n\r\n    /**\r\n     * Shows the score on the full text level only\r\n     * @member PronunciationAssessmentGranularity.FullText\r\n     */\r\n    FullText,\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ServiceRecognizerBase } from \"../common.speech/ServiceRecognizerBase\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    PronunciationAssessmentGradingSystem,\r\n    PronunciationAssessmentGranularity,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer\r\n} from \"./Exports\";\r\n\r\ninterface PronunciationAssessmentJSON {\r\n    referenceText: string;\r\n    gradingSystem: string;\r\n    granularity: string;\r\n    phonemeAlphabet: string;\r\n    nbestPhonemeCount: number;\r\n    dimension: string;\r\n    enableMiscue: boolean;\r\n}\r\n\r\n/**\r\n * Pronunciation assessment configuration.\r\n * @class PronunciationAssessmentConfig\r\n * Added in version 1.15.0.\r\n */\r\nexport class PronunciationAssessmentConfig {\r\n    private privProperties: PropertyCollection;\r\n    private privPhonemeAlphabet: string;\r\n    private privNBestPhonemeCount: number;\r\n\r\n    /**\r\n     * PronunciationAssessmentConfig constructor.\r\n     * @constructor\r\n     * @param {string} referenceText\r\n     * @param gradingSystem\r\n     * @param granularity\r\n     * @param enableMiscue\r\n     */\r\n    public constructor(referenceText: string,\r\n                       gradingSystem: PronunciationAssessmentGradingSystem = PronunciationAssessmentGradingSystem.FivePoint,\r\n                       granularity: PronunciationAssessmentGranularity = PronunciationAssessmentGranularity.Phoneme,\r\n                       enableMiscue: boolean = false) {\r\n        Contracts.throwIfNullOrUndefined(referenceText, \"referenceText\");\r\n        this.privProperties = new PropertyCollection();\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_GradingSystem, PronunciationAssessmentGradingSystem[gradingSystem]);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Granularity, PronunciationAssessmentGranularity[granularity]);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, String(enableMiscue));\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentConfig.fromJSON\r\n     * @function\r\n     * @public\r\n     * @param {string} json The json string containing the pronunciation assessment parameters.\r\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\r\n     * @summary Creates an instance of the PronunciationAssessmentConfig from json.\r\n     * This method is designed to support the pronunciation assessment parameters still in preview.\r\n     * Under normal circumstances, use the constructor instead.\r\n     */\r\n    public static fromJSON(json: string): PronunciationAssessmentConfig {\r\n        Contracts.throwIfNullOrUndefined(json, \"json\");\r\n        const config = new PronunciationAssessmentConfig(\"\");\r\n        config.privProperties = new PropertyCollection();\r\n        config.properties.setProperty(PropertyId.PronunciationAssessment_Json, json);\r\n        return config;\r\n    }\r\n\r\n    public toJSON(): string {\r\n        this.updateJson();\r\n        return this.privProperties.getProperty(PropertyId.PronunciationAssessment_Params);\r\n    }\r\n\r\n    public applyTo(recognizer: Recognizer): void {\r\n        this.updateJson();\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        recoBase.speechContext.setPronunciationAssessmentParams(this.properties.getProperty(PropertyId.PronunciationAssessment_Params), recoBase.isSpeakerDiarizationEnabled);\r\n    }\r\n\r\n    /**\r\n     * Gets the reference text.\r\n     * @member PronunciationAssessmentConfig.prototype.referenceText\r\n     * @function\r\n     * @public\r\n     * @returns {string} Reference text.\r\n     */\r\n    public get referenceText(): string {\r\n        return this.properties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the reference text.\r\n     * @member PronunciationAssessmentConfig.prototype.referenceText\r\n     * @function\r\n     * @public\r\n     * @param {string} referenceText - Reference text.\r\n     */\r\n    public set referenceText(referenceText: string) {\r\n        Contracts.throwIfNullOrWhitespace(referenceText, \"referenceText\");\r\n        this.properties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\r\n    }\r\n\r\n    /**\r\n     * Sets the phoneme alphabet.\r\n     * The valid values are \"SAPI\" (default) and \"IPA\".\r\n     * Added in version 1.20.0\r\n     * @member PronunciationAssessmentConfig.prototype.phonemeAlphabet\r\n     * @function\r\n     * @public\r\n     * @param {string} phonemeAlphabet - Phoneme alphabet.\r\n     */\r\n    public set phonemeAlphabet(phonemeAlphabet: string) {\r\n        Contracts.throwIfNullOrWhitespace(phonemeAlphabet, \"phonemeAlphabet\");\r\n        this.privPhonemeAlphabet = phonemeAlphabet;\r\n    }\r\n\r\n    /**\r\n     * Sets the boolean enableMiscue property.\r\n     * Added in version 1.26.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableMiscue\r\n     * @function\r\n     * @public\r\n     * @param {boolean} enableMiscue - enable miscue.\r\n     */\r\n    public set enableMiscue(enableMiscue: boolean) {\r\n        const enableMiscueString = enableMiscue ? \"true\" : \"false\";\r\n        this.properties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, enableMiscueString);\r\n    }\r\n\r\n    /**\r\n     * Gets the boolean enableMiscue property.\r\n     * Added in version 1.26.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableMiscue\r\n     * @function\r\n     * @public\r\n     * @return {boolean} enableMiscue - enable miscue.\r\n     */\r\n    public get enableMiscue(): boolean {\r\n        const enableMiscueString = this.properties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue, \"false\");\r\n        return (enableMiscueString.toLowerCase() === \"true\");\r\n    }\r\n\r\n    /**\r\n     * Sets the nbest phoneme count\r\n     * Added in version 1.20.0\r\n     * @member PronunciationAssessmentConfig.prototype.nbestPhonemeCount\r\n     * @function\r\n     * @public\r\n     * @param {number} nbestPhonemeCount - NBest phoneme count.\r\n     */\r\n    public set nbestPhonemeCount(nbestPhonemeCount: number) {\r\n        this.privNBestPhonemeCount = nbestPhonemeCount;\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets a pronunciation assessment config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    private updateJson(): void {\r\n        const jsonString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Json, \"{}\");\r\n        const paramsJson: PronunciationAssessmentJSON = JSON.parse(jsonString) as PronunciationAssessmentJSON;\r\n\r\n        const referenceText = this.privProperties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\r\n        if (referenceText) {\r\n            paramsJson.referenceText = referenceText;\r\n        }\r\n\r\n        const gradingSystem = this.privProperties.getProperty(PropertyId.PronunciationAssessment_GradingSystem);\r\n        if (gradingSystem) {\r\n            paramsJson.gradingSystem = gradingSystem;\r\n        }\r\n\r\n        const granularity = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Granularity);\r\n        if (granularity) {\r\n            paramsJson.granularity = granularity;\r\n        }\r\n\r\n        if (this.privPhonemeAlphabet) {\r\n            paramsJson.phonemeAlphabet = this.privPhonemeAlphabet;\r\n        }\r\n\r\n        if (this.privNBestPhonemeCount) {\r\n            paramsJson.nbestPhonemeCount = this.privNBestPhonemeCount;\r\n        }\r\n\r\n        // always set dimension to Comprehensive\r\n        paramsJson.dimension = \"Comprehensive\";\r\n\r\n        const enableMiscueString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue);\r\n        if (enableMiscueString) {\r\n            paramsJson.enableMiscue = this.enableMiscue;\r\n        }\r\n\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Params, JSON.stringify(paramsJson));\r\n    }\r\n\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Contracts} from \"./Contracts\";\r\nimport {\r\n    PropertyId,\r\n    RecognitionResult\r\n} from \"./Exports\";\r\n\r\ninterface AssessmentResult {\r\n    NBest: DetailResult[];\r\n}\r\n\r\ninterface DetailResult {\r\n    Words: WordResult[];\r\n    PronunciationAssessment: {\r\n        AccuracyScore: number;\r\n        CompletenessScore: number;\r\n        FluencyScore: number;\r\n        PronScore: number;\r\n    };\r\n}\r\n\r\ninterface WordResult {\r\n    Word: string;\r\n    Phonemes: {\r\n        Phoneme?: string;\r\n        PronunciationAssessment?: {\r\n            NBestPhonemes: { Phoneme: string }[];\r\n        };\r\n     }[];\r\n    PronunciationAssessment?: {\r\n        AccuracyScore: number;\r\n        ErrorType: string;\r\n    };\r\n    Syllables: { Syllable: string }[];\r\n}\r\n\r\n/**\r\n * Pronunciation assessment results.\r\n * @class PronunciationAssessmentResult\r\n * Added in version 1.15.0.\r\n */\r\nexport class PronunciationAssessmentResult {\r\n    private privPronJson: DetailResult;\r\n\r\n    private constructor(jsonString: string) {\r\n        const j = JSON.parse(jsonString) as AssessmentResult;\r\n        Contracts.throwIfNullOrUndefined(j.NBest[0], \"NBest\");\r\n        this.privPronJson = j.NBest[0];\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentResult.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {RecognitionResult} result The recognition result.\r\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\r\n     * @summary Creates an instance of the PronunciationAssessmentResult from recognition result.\r\n     */\r\n    public static fromResult(result: RecognitionResult): PronunciationAssessmentResult {\r\n        Contracts.throwIfNullOrUndefined(result, \"result\");\r\n        const json: string = result.properties.getProperty(PropertyId.SpeechServiceResponse_JsonResult);\r\n        Contracts.throwIfNullOrUndefined(json, \"json\");\r\n        return new PronunciationAssessmentResult(json);\r\n    }\r\n\r\n    /**\r\n     * Gets the detail result of pronunciation assessment.\r\n     * @member PronunciationAssessmentConfig.prototype.detailResult\r\n     * @function\r\n     * @public\r\n     * @returns {DetailResult} detail result.\r\n     */\r\n    public get detailResult(): DetailResult {\r\n        return this.privPronJson;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the pronunciation accuracy of the given speech, which indicates\r\n     * how closely the phonemes match a native speaker's pronunciation.\r\n     * @member PronunciationAssessmentResult.prototype.accuracyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Accuracy score.\r\n     */\r\n    public get accuracyScore(): number {\r\n        return this.detailResult.PronunciationAssessment.AccuracyScore;\r\n    }\r\n\r\n    /**\r\n     * The overall score indicating the pronunciation quality of the given speech.\r\n     * This is calculated from AccuracyScore, FluencyScore and CompletenessScore with weight.\r\n     * @member PronunciationAssessmentResult.prototype.pronunciationScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Pronunciation score.\r\n     */\r\n    public get pronunciationScore(): number {\r\n        return this.detailResult.PronunciationAssessment.PronScore;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the completeness of the given speech by calculating the ratio of pronounced words towards entire input.\r\n     * @member PronunciationAssessmentResult.prototype.completenessScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Completeness score.\r\n     */\r\n    public get completenessScore(): number {\r\n        return this.detailResult.PronunciationAssessment.CompletenessScore;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the fluency of the given speech.\r\n     * @member PronunciationAssessmentResult.prototype.fluencyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Fluency score.\r\n     */\r\n    public get fluencyScore(): number {\r\n        return this.detailResult.PronunciationAssessment.FluencyScore;\r\n    }\r\n}\r\n",null,"//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { ConsoleLoggingListener } from \"../common.browser/Exports\";\r\nimport { Events } from \"../common/Exports\";\r\nimport { LogLevel } from \"./LogLevel\";\r\n\r\n/**\r\n * Defines diagnostics API for managing console output\r\n * Added in version 1.21.0\r\n */\r\nexport class Diagnostics {\r\n    private static privListener: ConsoleLoggingListener = undefined;\r\n\r\n    public static SetLoggingLevel(logLevel: LogLevel): void {\r\n        this.privListener = new ConsoleLoggingListener(logLevel);\r\n        Events.instance.attachConsoleListener(this.privListener);\r\n    }\r\n\r\n    public static StartConsoleOutput(): void {\r\n        if (!!this.privListener) {\r\n            this.privListener.enableConsoleOutput = true;\r\n        }\r\n    }\r\n\r\n    public static StopConsoleOutput(): void {\r\n        if (!!this.privListener) {\r\n            this.privListener.enableConsoleOutput = false;\r\n        }\r\n    }\r\n\r\n    public static SetLogOutputPath(path: string): void {\r\n        if (typeof window === \"undefined\") {\r\n            if (!!this.privListener) {\r\n                this.privListener.logPath = path;\r\n            }\r\n        } else {\r\n            throw new Error(\"File system logging not available in browser.\");\r\n        }\r\n    }\r\n\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\n\r\nclass SpeakerRecognitionConnectionFactoryBase extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        endpointPath: string,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `wss://${region}.spr-frontend.speech${hostSuffix}`);\r\n            const scenario: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_SpeakerIdMode, \"TextIndependentIdentification\");\r\n            endpoint = `${host}/speaker/ws/${this.scenarioToPath(scenario)}/${endpointPath}`;\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        headers[HeaderNames.SpIDAuthKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    private scenarioToPath(mode: string): string {\r\n        switch (mode) {\r\n            case \"TextIndependentVerification\":\r\n            case \"2\":\r\n                return \"verification/text-independent\";\r\n            case \"TextDependentVerification\":\r\n            case \"1\":\r\n                return \"verification/text-dependent\";\r\n            default:\r\n                return \"identification/text-independent\";\r\n        }\r\n    }\r\n}\r\n\r\nexport class SpeakerRecognitionConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {\r\n    public create( config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        return super.create(config, authInfo, \"recognition\", connectionId);\r\n    }\r\n}\r\n\r\nexport class VoiceProfileConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {\r\n    public create( config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        return super.create(config, authInfo, \"profile\", connectionId);\r\n    }\r\n}\r\n\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"../common/Exports\";\r\n\r\nexport class SpeechRecognitionEvent extends PlatformEvent {\r\n    private privRequestId: string;\r\n    private privSessionId: string;\r\n\r\n    public constructor(eventName: string, requestId: string, sessionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n\r\n        this.privRequestId = requestId;\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n\r\nexport class RecognitionTriggeredEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"RecognitionTriggeredEvent\", requestId, sessionId);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class ListeningStartedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"ListeningStartedEvent\", requestId, sessionId);\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class ConnectingToServiceEvent extends SpeechRecognitionEvent {\r\n    private privAuthFetchEventid: string;\r\n\r\n    public constructor(requestId: string, authFetchEventid: string, sessionId: string) {\r\n        super(\"ConnectingToServiceEvent\", requestId, sessionId);\r\n        this.privAuthFetchEventid = authFetchEventid;\r\n    }\r\n\r\n    public get authFetchEventid(): string {\r\n        return this.privAuthFetchEventid;\r\n    }\r\n}\r\n\r\nexport class RecognitionStartedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, audioSourceId: string, audioNodeId: string, authFetchEventId: string, sessionId: string) {\r\n        super(\"RecognitionStartedEvent\", requestId, sessionId);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n\r\nexport enum RecognitionCompletionStatus {\r\n    Success,\r\n    AudioSourceError,\r\n    AudioSourceTimeout,\r\n    AuthTokenFetchError,\r\n    AuthTokenFetchTimeout,\r\n    UnAuthorized,\r\n    ConnectTimeout,\r\n    ConnectError,\r\n    ClientRecognitionActivityTimeout,\r\n    UnknownError,\r\n}\r\n\r\nexport class RecognitionEndedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAuthFetchEventId: string;\r\n    private privServiceTag: string;\r\n    private privStatus: RecognitionCompletionStatus;\r\n    private privError: string;\r\n\r\n    public constructor(\r\n        requestId: string,\r\n        audioSourceId: string,\r\n        audioNodeId: string,\r\n        authFetchEventId: string,\r\n        sessionId: string,\r\n        serviceTag: string,\r\n        status: RecognitionCompletionStatus,\r\n        error: string) {\r\n\r\n        super(\"RecognitionEndedEvent\", requestId, sessionId, status === RecognitionCompletionStatus.Success ? EventType.Info : EventType.Error);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privStatus = status;\r\n        this.privError = error;\r\n        this.privServiceTag = serviceTag;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n\r\n    public get serviceTag(): string {\r\n        return this.privServiceTag;\r\n    }\r\n\r\n    public get status(): RecognitionCompletionStatus {\r\n        return this.privStatus;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport { ConnectionOpenResponse } from \"../common/ConnectionOpenResponse\";\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IDisposable,\r\n    IStreamChunk,\r\n    MessageType,\r\n    ServiceEvent,\r\n    Timeout\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeakerRecognitionResult,\r\n    SpeechRecognitionResult,\r\n    OutputFormat\r\n} from \"../sdk/Exports\";\r\nimport { Callback } from \"../sdk/Transcription/IConversation\";\r\nimport {\r\n    AgentConfig,\r\n    DynamicGrammarBuilder,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionMode,\r\n    RequestSession,\r\n    SpeechContext,\r\n    SpeechDetected,\r\n    type,\r\n    OutputFormatPropertyName\r\n} from \"./Exports\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n} from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\ninterface CustomModel {\r\n    language: string;\r\n    endpoint: string;\r\n}\r\n\r\nexport interface PhraseDetection {\r\n    customModels?: CustomModel[];\r\n    onInterim?: { action: string };\r\n    onSuccess?: { action: string };\r\n    mode?: string;\r\n    INTERACTIVE?: Segmentation;\r\n    CONVERSATION?: Segmentation;\r\n    DICTATION?: Segmentation;\r\n    speakerDiarization?: SpeakerDiarization;\r\n}\r\n\r\nexport interface SpeakerDiarization {\r\n    mode?: string;\r\n    audioSessionId?: string;\r\n    audioOffsetMs?: number;\r\n    identityProvider?: string;\r\n}\r\n\r\nexport interface Segmentation {\r\n    segmentation: {\r\n        mode: \"Custom\";\r\n        segmentationSilenceTimeoutMs: number;\r\n    };\r\n}\r\n\r\nexport abstract class ServiceRecognizerBase implements IDisposable {\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection> = undefined;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection> = undefined;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privMustReportEndOfStream: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number = setTimeout;\r\n    private privAudioSource: IAudioSource;\r\n    private privIsLiveAudio: boolean = false;\r\n    private privAverageBytesPerMs: number = 0;\r\n    protected privSpeechContext: SpeechContext;\r\n    protected privRequestSession: RequestSession;\r\n    protected privConnectionId: string;\r\n    protected privDiarizationSessionId: string;\r\n    protected privRecognizerConfig: RecognizerConfig;\r\n    protected privRecognizer: Recognizer;\r\n    protected privSuccessCallback: (e: SpeechRecognitionResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n    protected privEnableSpeakerId: boolean = false;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n\r\n        this.privEnableSpeakerId = recognizerConfig.isSpeakerDiarizationEnabled;\r\n        this.privMustReportEndOfStream = false;\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privAudioSource = audioSource;\r\n        this.privRecognizerConfig = recognizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privRecognizer = recognizer;\r\n        this.privRequestSession = new RequestSession(this.privAudioSource.id());\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privDynamicGrammar = new DynamicGrammarBuilder();\r\n        this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\r\n        this.privAgentConfig = new AgentConfig();\r\n        const webWorkerLoadType: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.WebWorkerLoadType, \"on\").toLowerCase();\r\n        if (webWorkerLoadType === \"on\" && typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n        } else {\r\n            if (typeof window !== \"undefined\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privSetTimeout = window.setTimeout.bind(window);\r\n            }\r\n        }\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode === 1003 ||\r\n                    connectionClosedEvent.statusCode === 1007 ||\r\n                    connectionClosedEvent.statusCode === 1002 ||\r\n                    connectionClosedEvent.statusCode === 4000 ||\r\n                    this.privRequestSession.numConnectionAttempts > this.privRecognizerConfig.maxRetryCount\r\n                ) {\r\n                    void this.cancelRecognitionLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n\r\n        if (this.privEnableSpeakerId) {\r\n            this.privDiarizationSessionId = createNoDashGuid();\r\n        }\r\n\r\n        this.setLanguageIdJson();\r\n        this.setOutputDetailLevelJson();\r\n    }\r\n\r\n    protected setSpeechSegmentationTimeoutJson(): void{\r\n        const speechSegmentationTimeout: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.Speech_SegmentationSilenceTimeoutMs, undefined);\r\n        if (speechSegmentationTimeout !== undefined) {\r\n            const mode = this.recognitionMode === RecognitionMode.Conversation ? \"CONVERSATION\" :\r\n                this.recognitionMode === RecognitionMode.Dictation ? \"DICTATION\" : \"INTERACTIVE\";\r\n            const segmentationSilenceTimeoutMs: number = parseInt(speechSegmentationTimeout, 10);\r\n            const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n            phraseDetection.mode = mode;\r\n            phraseDetection[mode] = {\r\n                segmentation: {\r\n                    mode: \"Custom\",\r\n                    segmentationSilenceTimeoutMs\r\n                }\r\n            };\r\n            this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n        }\r\n    }\r\n\r\n    protected setLanguageIdJson(): void {\r\n        if (this.privRecognizerConfig.autoDetectSourceLanguages !== undefined) {\r\n            const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n            const sourceLanguages: string[] = this.privRecognizerConfig.autoDetectSourceLanguages.split(\",\");\r\n\r\n            let speechContextLidMode;\r\n            if (this.privRecognizerConfig.languageIdMode === \"Continuous\") {\r\n                speechContextLidMode = \"DetectContinuous\";\r\n            } else {// recognizerConfig.languageIdMode === \"AtStart\"\r\n                speechContextLidMode = \"DetectAtAudioStart\";\r\n            }\r\n\r\n            this.privSpeechContext.setSection(\"languageId\", {\r\n                Priority: \"PrioritizeLatency\",\r\n                languages: sourceLanguages,\r\n                mode: speechContextLidMode,\r\n                onSuccess: { action: \"Recognize\" },\r\n                onUnknown: { action: \"None\" }\r\n            });\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"Auto\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"Always\"\r\n                }\r\n            });\r\n            const customModels: CustomModel[] = this.privRecognizerConfig.sourceLanguageModels;\r\n            if (customModels !== undefined) {\r\n                phraseDetection.customModels = customModels;\r\n                phraseDetection.onInterim = { action: \"None\" };\r\n                phraseDetection.onSuccess = { action: \"None\" };\r\n            }\r\n            this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n        }\r\n    }\r\n\r\n    protected setOutputDetailLevelJson(): void {\r\n        if (this.privEnableSpeakerId) {\r\n            const requestWordLevelTimestamps: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase();\r\n            if (requestWordLevelTimestamps === \"true\") {\r\n                this.privSpeechContext.setWordLevelTimings();\r\n            } else {\r\n                const outputFormat: string = this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n                if (outputFormat === OutputFormat[OutputFormat.Detailed].toLocaleLowerCase()) {\r\n                    this.privSpeechContext.setDetailedOutputFormat();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public get isSpeakerDiarizationEnabled(): boolean {\r\n        return this.privEnableSpeakerId;\r\n    }\r\n\r\n    public get audioSource(): IAudioSource {\r\n        return this.privAudioSource;\r\n    }\r\n\r\n    public get speechContext(): SpeechContext {\r\n        return this.privSpeechContext;\r\n    }\r\n\r\n    public get dynamicGrammar(): DynamicGrammarBuilder {\r\n        return this.privDynamicGrammar;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public set conversationTranslatorToken(token: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\r\n    }\r\n\r\n    public set voiceProfileType(type: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.SpeechServiceConnection_SpeakerIdMode, type);\r\n    }\r\n\r\n    public set authentication(auth: IAuthentication) {\r\n        this.privAuthentication = auth;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            try {\r\n                const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n                await connection.dispose(reason);\r\n            } catch (error) {\r\n                // The connection is in a bad state. But we're trying to kill it, so...\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognizerConfig.recognitionMode;\r\n    }\r\n\r\n    protected recognizeOverride: (recoMode: RecognitionMode, sc: (e: SpeechRecognitionResult) => void, ec: (e: string) => void) => Promise<void> = undefined;\r\n\r\n    public recognizeSpeaker: (model: SpeakerRecognitionModel) => Promise<SpeakerRecognitionResult> = undefined;\r\n\r\n    public async recognize(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<void> {\r\n\r\n        if (this.recognizeOverride !== undefined) {\r\n            await this.recognizeOverride(recoMode, successCallback, errorCallBack);\r\n            return;\r\n        }\r\n        // Clear the existing configuration promise to force a re-transmission of config and context.\r\n        this.privConnectionConfigurationPromise = undefined;\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n        this.setSpeechSegmentationTimeoutJson();\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        let audioNode: ReplayableAudioNode;\r\n\r\n        try {\r\n            const audioStreamNode: IAudioStreamNode = await this.audioSource.attach(this.privRequestSession.audioNodeId);\r\n            const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n            const deviceInfo: ISpeechConfigAudioDevice = await this.audioSource.deviceInfo;\r\n            this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === type.Microphones;\r\n\r\n            audioNode = new ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\r\n            await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n            this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        } catch (error) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n            throw error;\r\n        }\r\n\r\n        try {\r\n            await conPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\r\n            return;\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        audioSendPromise.catch(async (error: string): Promise<void> => {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return;\r\n    }\r\n\r\n    public async stopRecognizing(): Promise<void> {\r\n        if (this.privRequestSession.isRecognizing) {\r\n            try {\r\n                await this.audioSource.turnOff();\r\n                await this.sendFinalAudio();\r\n                await this.privRequestSession.onStopRecognizing();\r\n                await this.privRequestSession.turnCompletionPromise;\r\n            } finally {\r\n                await this.privRequestSession.dispose();\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public connectAsync(cb?: Callback, err?: Callback): void {\r\n        this.connectImpl().then((): void => {\r\n            try {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n        }, (reason: any): void => {\r\n            try {\r\n                if (!!err) {\r\n                    err(reason);\r\n                }\r\n                /* eslint-disable no-empty */\r\n            } catch (error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    protected disconnectOverride: () => Promise<void> = undefined;\r\n\r\n    public async disconnect(): Promise<void> {\r\n        await this.cancelRecognitionLocal(CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        if (this.disconnectOverride !== undefined) {\r\n            await this.disconnectOverride();\r\n        }\r\n\r\n        if (this.privConnectionPromise !== undefined) {\r\n            try {\r\n                await (await this.privConnectionPromise).dispose();\r\n            } catch (error) {\r\n\r\n            }\r\n        }\r\n        this.privConnectionPromise = undefined;\r\n    }\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public sendMessage(message: string): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload));\r\n    }\r\n\r\n    public set activityTemplate(messagePayload: string) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n\r\n    public get activityTemplate(): string {\r\n        return this.privActivityTemplate;\r\n    }\r\n\r\n    protected abstract processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): Promise<boolean>;\r\n\r\n    protected async sendTelemetryData(): Promise<void> {\r\n        const telemetryData = this.privRequestSession.getTelemetry();\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\r\n            this.privIsDisposed ||\r\n            null === telemetryData) {\r\n            return;\r\n        }\r\n\r\n        if (!!ServiceRecognizerBase.telemetryData) {\r\n            try {\r\n                ServiceRecognizerBase.telemetryData(telemetryData);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"telemetry\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            telemetryData));\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected abstract cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void;\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognitionLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n\r\n            this.cancelRecognition(\r\n                this.privRequestSession.sessionId,\r\n                this.privRequestSession.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected receiveMessageOverride: () => Promise<void> = undefined;\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            let connection = await this.fetchConnection();\r\n            const message = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                if (!this.privRequestSession.isRecognizing) {\r\n                    return;\r\n                } else {\r\n                    return this.receiveMessage();\r\n                }\r\n            }\r\n\r\n            this.privServiceHasSentMessage = true;\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privMustReportEndOfStream = true;\r\n                        this.privRequestSession.onServiceTurnStartResponse();\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n                        let json: string;\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        await this.sendTelemetryData();\r\n                        if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\r\n                            this.privMustReportEndOfStream = false;\r\n                            await this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\r\n                        }\r\n                        const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                        await this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\r\n                        if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                            if (!!this.privRecognizer.sessionStopped) {\r\n                                this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                            }\r\n                            return;\r\n                        } else {\r\n                            connection = await this.fetchConnection();\r\n                            await this.sendPrePayloadJSON(connection);\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        if (!await this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n                }\r\n            }\r\n            return this.receiveMessage();\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private updateSpeakerDiarizationAudioOffset(): void {\r\n        const bytesSent: number = this.privRequestSession.recognitionBytesSent;\r\n        const audioOffsetMs: number = bytesSent / this.privAverageBytesPerMs;\r\n        this.privSpeechContext.setSpeakerDiarizationAudioOffsetMs(audioOffsetMs);\r\n    }\r\n\r\n    protected sendSpeechContext(connection: IConnection, generateNewRequestId: boolean): Promise<void> {\r\n        if (this.privEnableSpeakerId) {\r\n            this.updateSpeakerDiarizationAudioOffset();\r\n        }\r\n        const speechContextJson = this.speechContext.toJSON();\r\n        if (generateNewRequestId) {\r\n            this.privRequestSession.onSpeechContext();\r\n        }\r\n\r\n        if (speechContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.context\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected sendPrePayloadJSONOverride: (connection: IConnection) => Promise<void> = undefined;\r\n\r\n    protected noOp(): Promise<void> {\r\n        // operation not supported\r\n        return;\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendPrePayloadJSON(connection: IConnection, generateNewRequestId: boolean = true): Promise<void> {\r\n        if (this.sendPrePayloadJSONOverride !== undefined) {\r\n            return this.sendPrePayloadJSONOverride(connection);\r\n        }\r\n\r\n        await this.sendSpeechContext(connection, generateNewRequestId);\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected async sendWaveHeader(connection: IConnection): Promise<void> {\r\n        const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n        // this.writeBufferToConsole(format.header);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Binary,\r\n            \"audio\",\r\n            this.privRequestSession.requestId,\r\n            \"audio/x-wav\",\r\n            format.header\r\n        ));\r\n    }\r\n\r\n    protected postConnectImplOverride: (connection: Promise<IConnection>) => Promise<IConnection> = undefined;\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    protected connectImpl(): Promise<IConnection> {\r\n        if (this.privConnectionPromise !== undefined) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n\r\n        this.privConnectionPromise = this.retryableConnect();\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch((): void => { });\r\n\r\n        if (this.postConnectImplOverride !== undefined) {\r\n            return this.postConnectImplOverride(this.privConnectionPromise);\r\n        }\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n    protected handleSpeechPhraseMessage: (textBody: string) => Promise<void> = undefined;\r\n    protected handleSpeechHypothesisMessage: (textBody: string) => void = undefined;\r\n\r\n    protected sendSpeechServiceConfig(connection: IConnection, requestSession: RequestSession, SpeechServiceConfigJson: string): Promise<void> {\r\n        requestSession.onSpeechContext();\r\n        // filter out anything that is not required for the service to work.\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\r\n            const withTelemetry: { context: { system: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { system: string } };\r\n\r\n            const replacement: any = {\r\n                context: {\r\n                    system: withTelemetry.context.system,\r\n                },\r\n            };\r\n\r\n            SpeechServiceConfigJson = JSON.stringify(replacement);\r\n        }\r\n\r\n        if (this.privRecognizerConfig.parameters.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() === \"true\") {\r\n            const json: { context: { DisableReferenceChannel: string; MicSpec: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { DisableReferenceChannel: string; MicSpec: string } };\r\n            json.context.DisableReferenceChannel = \"True\";\r\n            json.context.MicSpec = \"1_0_0\";\r\n            SpeechServiceConfigJson = JSON.stringify(json);\r\n        }\r\n\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                requestSession.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    protected async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    protected async sendAudio(audioStreamNode: IAudioStreamNode): Promise<void> {\r\n        const audioFormat: AudioStreamFormatImpl = await this.audioSource.format;\r\n        this.privAverageBytesPerMs = audioFormat.avgBytesPerSec / 1000;\r\n        // The time we last sent data to the service.\r\n        let nextSendTime: number = Date.now();\r\n\r\n        // Max amount to send before we start to throttle\r\n        const fastLaneSizeMs: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\r\n        const maxSendUnthrottledBytes: number = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\r\n        const startRecogNumber: number = this.privRequestSession.recogNumber;\r\n\r\n        const readAndUploadCycle = async (): Promise<void> => {\r\n            // If speech is done, stop sending audio.\r\n            if (!this.privIsDisposed &&\r\n                !this.privRequestSession.isSpeechEnded &&\r\n                this.privRequestSession.isRecognizing &&\r\n                this.privRequestSession.recogNumber === startRecogNumber) {\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const audioStreamChunk: IStreamChunk<ArrayBuffer> = await audioStreamNode.read();\r\n                // we have a new audio chunk to upload.\r\n                if (this.privRequestSession.isSpeechEnded) {\r\n                    // If service already recognized audio end then don't send any more audio\r\n                    return;\r\n                }\r\n\r\n                let payload: ArrayBuffer;\r\n                let sendDelay: number;\r\n\r\n                if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                    payload = null;\r\n                    sendDelay = 0;\r\n                } else {\r\n                    payload = audioStreamChunk.buffer;\r\n\r\n                    this.privRequestSession.onAudioSent(payload.byteLength);\r\n\r\n                    if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\r\n                        sendDelay = 0;\r\n                    } else {\r\n                        sendDelay = Math.max(0, nextSendTime - Date.now());\r\n                    }\r\n                }\r\n\r\n                if (0 !== sendDelay) {\r\n                    await this.delay(sendDelay);\r\n                }\r\n\r\n                if (payload !== null) {\r\n                    nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\r\n                }\r\n\r\n                // Are we still alive?\r\n                if (!this.privIsDisposed &&\r\n                    !this.privRequestSession.isSpeechEnded &&\r\n                    this.privRequestSession.isRecognizing &&\r\n                    this.privRequestSession.recogNumber === startRecogNumber) {\r\n                    connection.send(\r\n                        new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)\r\n                    ).catch((): void => {\r\n                        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                        this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch((): void => { });\r\n                    });\r\n\r\n                    if (!audioStreamChunk?.isEnd) {\r\n                        // this.writeBufferToConsole(payload);\r\n                        // Regardless of success or failure, schedule the next upload.\r\n                        // If the underlying connection was broken, the next cycle will\r\n                        // get a new connection and re-transmit missing audio automatically.\r\n                        return readAndUploadCycle();\r\n                    } else {\r\n                        // the audio stream has been closed, no need to schedule next\r\n                        // read-upload cycle.\r\n                        if (!this.privIsLiveAudio) {\r\n                            this.privRequestSession.onSpeechEnded();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        return readAndUploadCycle();\r\n    }\r\n\r\n    private async retryableConnect(): Promise<IConnection> {\r\n        let isUnAuthorized: boolean = false;\r\n\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        const sessionId: string = this.privRequestSession.sessionId;\r\n        this.privConnectionId = (sessionId !== undefined) ? sessionId : createNoDashGuid();\r\n\r\n        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n        let lastStatusCode: number = 0;\r\n        let lastReason: string = \"\";\r\n\r\n        while (this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount) {\r\n\r\n            // Get the auth information for the connection. This is a bit of overkill for the current API surface, but leaving the plumbing in place to be able to raise a developer-customer\r\n            // facing event when a connection fails to let them try and provide new auth information.\r\n            const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n            const auth: AuthInfo = await authPromise;\r\n\r\n            await this.privRequestSession.onAuthCompleted(false);\r\n\r\n            // Create the connection\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId);\r\n            // Attach the telemetry handlers.\r\n            this.privRequestSession.listenForServiceTelemetry(connection.events);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent): void => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n\r\n            const response: ConnectionOpenResponse = await connection.open();\r\n            // 200 == everything is fine.\r\n            if (response.statusCode === 200) {\r\n                await this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 1006) {\r\n                isUnAuthorized = true;\r\n            }\r\n\r\n            lastStatusCode = response.statusCode;\r\n            lastReason = response.reason;\r\n\r\n            this.privRequestSession.onRetryConnection();\r\n        }\r\n\r\n        await this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason);\r\n        return Promise.reject(`Unable to contact server. StatusCode: ${lastStatusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${lastReason}`);\r\n    }\r\n\r\n    private delay(delayMs: number): Promise<void> {\r\n        return new Promise((resolve: () => void): number => this.privSetTimeout(resolve, delayMs));\r\n    }\r\n\r\n    private writeBufferToConsole(buffer: ArrayBuffer): void {\r\n        let out: string = \"Buffer Size: \";\r\n        if (null === buffer) {\r\n            out += \"null\";\r\n        } else {\r\n            const readView: Uint8Array = new Uint8Array(buffer);\r\n            out += `${buffer.byteLength}\\r\\n`;\r\n            for (let i: number = 0; i < buffer.byteLength; i++) {\r\n                out += readView[i].toString(16).padStart(2, \"0\") + \" \";\r\n                if (((i + 1) % 16) === 0) {\r\n                    // eslint-disable-next-line no-console\r\n                    console.info(out);\r\n                    out = \"\";\r\n                }\r\n            }\r\n        }\r\n        // eslint-disable-next-line no-console\r\n        console.info(out);\r\n    }\r\n\r\n    private async sendFinalAudio(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null));\r\n        return;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendPrePayloadJSON(connection, false);\r\n        return connection;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError, ConnectionMessage, IStringDictionary, MessageType } from \"../common/Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\n\r\nexport class SpeechConnectionMessage extends ConnectionMessage {\r\n\r\n    private privPath: string;\r\n    private privRequestId: string;\r\n    private privContentType: string;\r\n    private privStreamId: string;\r\n    private privAdditionalHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        path: string,\r\n        requestId: string,\r\n        contentType: string,\r\n        body: any,\r\n        streamId?: string,\r\n        additionalHeaders?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (!path) {\r\n            throw new ArgumentNullError(\"path\");\r\n        }\r\n\r\n        if (!requestId) {\r\n            throw new ArgumentNullError(\"requestId\");\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[HeaderNames.Path] = path;\r\n        headers[HeaderNames.RequestId] = requestId;\r\n        headers[HeaderNames.RequestTimestamp] = new Date().toISOString();\r\n        if (contentType) {\r\n            headers[HeaderNames.ContentType] = contentType;\r\n        }\r\n\r\n        if (streamId) {\r\n            headers[HeaderNames.RequestStreamId] = streamId;\r\n        }\r\n\r\n        if (additionalHeaders) {\r\n            for (const headerName in additionalHeaders) {\r\n                if (headerName) {\r\n                    headers[headerName] = additionalHeaders[headerName];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (id) {\r\n            super(messageType, body, headers, id);\r\n        } else {\r\n            super(messageType, body, headers);\r\n        }\r\n\r\n        this.privPath = path;\r\n        this.privRequestId = requestId;\r\n        this.privContentType = contentType;\r\n        this.privStreamId = streamId;\r\n        this.privAdditionalHeaders = additionalHeaders;\r\n    }\r\n\r\n    public get path(): string {\r\n        return this.privPath;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get contentType(): string {\r\n        return this.privContentType;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public get additionalHeaders(): IStringDictionary<string> {\r\n        return this.privAdditionalHeaders;\r\n    }\r\n\r\n    public static fromConnectionMessage(message: ConnectionMessage): SpeechConnectionMessage {\r\n        let path = null;\r\n        let requestId = null;\r\n        let contentType = null;\r\n        // let requestTimestamp = null;\r\n        let streamId = null;\r\n        const additionalHeaders: IStringDictionary<string> = {};\r\n\r\n        if (message.headers) {\r\n            for (const headerName in message.headers) {\r\n                if (headerName) {\r\n                    if (headerName.toLowerCase() === HeaderNames.Path.toLowerCase()) {\r\n                        path = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestId.toLowerCase()) {\r\n                        requestId = message.headers[headerName];\r\n                    // } else if (headerName.toLowerCase() === HeaderNames.RequestTimestamp.toLowerCase()) {\r\n                       //  requestTimestamp = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.ContentType.toLowerCase()) {\r\n                        contentType = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestStreamId.toLowerCase()) {\r\n                        streamId = message.headers[headerName];\r\n                    } else {\r\n                        additionalHeaders[headerName] = message.headers[headerName];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return new SpeechConnectionMessage(\r\n            message.messageType,\r\n            path,\r\n            requestId,\r\n            contentType,\r\n            message.body,\r\n            streamId,\r\n            additionalHeaders,\r\n            message.id);\r\n    }\r\n}\r\n",null,"import { IAudioSource } from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    ResultReason,\r\n    SpeechRecognitionResult\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis\r\n} from \"./Exports\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport class ConversationServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.handleSpeechPhraseMessage = async (textBody: string): Promise<void> => this.handleSpeechPhrase(textBody);\r\n        this.handleSpeechHypothesisMessage = (textBody: string): void => this.handleSpeechHypothesis(textBody);\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        void connectionMessage;\r\n        return;\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        void result;\r\n        void offset;\r\n        void sessionId;\r\n        return;\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        void result;\r\n        void duration;\r\n        void sessionId;\r\n        return;\r\n    }\r\n\r\n    protected async processSpeechMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        let processed: boolean = false;\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                if (!!this.handleSpeechHypothesisMessage) {\r\n                    this.handleSpeechHypothesisMessage(connectionMessage.textBody);\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                if (!!this.handleSpeechPhraseMessage) {\r\n                    await this.handleSpeechPhraseMessage(connectionMessage.textBody);\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n            // Implementing to allow inheritance\r\n            void sessionId;\r\n            void requestId;\r\n            void cancellationReason;\r\n            void errorCode;\r\n            void error;\r\n        }\r\n\r\n    protected async handleSpeechPhrase(textBody: string): Promise<void> {\r\n\r\n        const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(textBody);\r\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, textBody);\r\n        const simpleOffset = simple.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n        let offset = simpleOffset;\r\n\r\n        this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n        if (ResultReason.Canceled === resultReason) {\r\n            const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n            const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n            await this.cancelRecognitionLocal(\r\n                cancelReason,\r\n                cancellationErrorCode,\r\n                EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n        } else {\r\n            if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                    result = new SpeechRecognitionResult(\r\n                        this.privRequestSession.requestId,\r\n                        resultReason,\r\n                        simple.DisplayText,\r\n                        simple.Duration,\r\n                        simpleOffset,\r\n                        simple.Language,\r\n                        simple.LanguageDetectionConfidence,\r\n                        simple.SpeakerId,\r\n                        undefined,\r\n                        textBody,\r\n                        resultProps);\r\n                } else {\r\n                    const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(textBody);\r\n                    const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                    const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                    result = new SpeechRecognitionResult(\r\n                        this.privRequestSession.requestId,\r\n                        resultReason,\r\n                        detailed.Text,\r\n                        detailed.Duration,\r\n                        totalOffset,\r\n                        detailed.Language,\r\n                        detailed.LanguageDetectionConfidence,\r\n                        detailed.SpeakerId,\r\n                        undefined,\r\n                        offsetCorrectedJson,\r\n                        resultProps);\r\n\r\n                        offset = result.offset;\r\n                }\r\n\r\n                this.handleRecognizedCallback(result, offset, this.privRequestSession.sessionId);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected handleSpeechHypothesis(textBody: string): void {\r\n        const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(textBody);\r\n        const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, textBody);\r\n\r\n        const result = new SpeechRecognitionResult(\r\n            this.privRequestSession.requestId,\r\n            ResultReason.RecognizingSpeech,\r\n            hypothesis.Text,\r\n            hypothesis.Duration,\r\n            offset,\r\n            hypothesis.Language,\r\n            hypothesis.LanguageDetectionConfidence,\r\n            hypothesis.SpeakerId,\r\n            undefined,\r\n            textBody,\r\n            resultProps);\r\n\r\n        this.privRequestSession.onHypothesis(offset);\r\n\r\n        this.handleRecognizingCallback(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports\";\r\n\r\nexport enum RecognitionMode {\r\n    Interactive,\r\n    Conversation,\r\n    Dictation,\r\n}\r\n\r\nexport enum SpeechResultFormat {\r\n    Simple,\r\n    Detailed,\r\n}\r\n\r\nexport class RecognizerConfig {\r\n    private privRecognitionMode: RecognitionMode;\r\n    private privLanguageIdMode: string;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privRecognitionActivityTimeout: number;\r\n    private privParameters: PropertyCollection;\r\n    private privMaxRetryCount: number;\r\n    private privEnableSpeakerId: boolean;\r\n\r\n    public constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n        this.privMaxRetryCount = parseInt(parameters.getProperty(\"SPEECH-Error-MaxRetryCount\", \"4\"), 10);\r\n        this.privLanguageIdMode = parameters.getProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, undefined);\r\n        this.privEnableSpeakerId = false;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognitionMode;\r\n    }\r\n\r\n    public set recognitionMode(value: RecognitionMode) {\r\n        this.privRecognitionMode = value;\r\n        this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\r\n        this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n\r\n    public get recognitionActivityTimeout(): number {\r\n        return this.privRecognitionActivityTimeout;\r\n    }\r\n\r\n    public get isContinuousRecognition(): boolean {\r\n        return this.privRecognitionMode !== RecognitionMode.Interactive;\r\n    }\r\n\r\n    public get languageIdMode(): string {\r\n        return this.privLanguageIdMode;\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);\r\n    }\r\n\r\n    public get recognitionEndpointVersion(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, undefined);\r\n    }\r\n\r\n    public get sourceLanguageModels(): { language: string; endpoint: string }[] {\r\n        const models: { language: string; endpoint: string }[] = [];\r\n        let modelsExist: boolean = false;\r\n        if (this.autoDetectSourceLanguages !== undefined) {\r\n            for (const language of this.autoDetectSourceLanguages.split(\",\")) {\r\n                const customProperty = language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                const modelId: string = this.parameters.getProperty(customProperty, undefined);\r\n                if (modelId !== undefined) {\r\n                    models.push( { language, endpoint: modelId });\r\n                    modelsExist = true;\r\n                } else {\r\n                    models.push( { language, endpoint: \"\" } );\r\n                }\r\n            }\r\n        }\r\n        return modelsExist ? models : undefined;\r\n    }\r\n\r\n    public get maxRetryCount(): number {\r\n        return this.privMaxRetryCount;\r\n    }\r\n\r\n    public get isSpeakerDiarizationEnabled(): boolean {\r\n        return this.privEnableSpeakerId;\r\n    }\r\n\r\n    public set isSpeakerDiarizationEnabled(value: boolean) {\r\n        this.privEnableSpeakerId = value;\r\n    }\r\n}\r\n\r\n// The config is serialized and sent as the Speech.Config\r\nexport class SpeechServiceConfig {\r\n    private context: Context;\r\n    private recognition: string;\r\n\r\n    public constructor(context: Context) {\r\n        this.context = context;\r\n    }\r\n\r\n    public serialize(): string {\r\n        return JSON.stringify(this, (key: any, value: { [k: string]: any }): any => {\r\n            if (value && typeof value === \"object\") {\r\n                const replacement: { [k: string ]: any } = {};\r\n                for (const k in value) {\r\n                    if (Object.hasOwnProperty.call(value, k)) {\r\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                        replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\r\n                    }\r\n                }\r\n                return replacement;\r\n            }\r\n            return value;\r\n        });\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.context;\r\n    }\r\n\r\n    public get Recognition(): string {\r\n        return this.recognition;\r\n    }\r\n\r\n    public set Recognition(value: string) {\r\n        this.recognition = value.toLowerCase();\r\n    }\r\n}\r\n\r\nexport class Context {\r\n    public system: System;\r\n    public os: OS;\r\n    public audio: ISpeechConfigAudio;\r\n\r\n    public constructor(os: OS) {\r\n        this.system = new System();\r\n        this.os = os;\r\n    }\r\n}\r\n\r\nexport class System {\r\n    public name: string;\r\n    public version: string;\r\n    public build: string;\r\n    public lang: string;\r\n\r\n    public constructor() {\r\n        // Note: below will be patched for official builds.\r\n        const SPEECHSDK_CLIENTSDK_VERSION = \"1.32.0\";\r\n\r\n        this.name = \"SpeechSDK\";\r\n        this.version = SPEECHSDK_CLIENTSDK_VERSION;\r\n        this.build = \"JavaScript\";\r\n        this.lang = \"JavaScript\";\r\n    }\r\n}\r\n\r\nexport class OS {\r\n    public platform: string;\r\n    public name: string;\r\n    public version: string;\r\n\r\n    public constructor(platform: string, name: string, version: string) {\r\n        this.platform = platform;\r\n        this.name = name;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport class Device {\r\n    public manufacturer: string;\r\n    public model: string;\r\n    public version: string;\r\n\r\n    public constructor(manufacturer: string, model: string, version: string) {\r\n        this.manufacturer = manufacturer;\r\n        this.model = model;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport interface ISpeechConfigAudio {\r\n    source?: ISpeechConfigAudioDevice;\r\n    playback?: ISpeechConfigAudioDevice;\r\n}\r\n\r\nexport interface ISpeechConfigAudioDevice {\r\n    manufacturer: string;\r\n    model: string;\r\n    connectivity: connectivity;\r\n    type: type;\r\n    samplerate: number;\r\n    bitspersample: number;\r\n    channelcount: number;\r\n}\r\n\r\nexport enum connectivity {\r\n    Bluetooth = \"Bluetooth\",\r\n    Wired = \"Wired\",\r\n    WiFi = \"WiFi\",\r\n    Cellular = \"Cellular\",\r\n    InBuilt = \"InBuilt\",\r\n    Unknown = \"Unknown\",\r\n}\r\n\r\nexport enum type {\r\n    Phone = \"Phone\",\r\n    Speaker = \"Speaker\",\r\n    Car = \"Car\",\r\n    Headset = \"Headset\",\r\n    Thermostat = \"Thermostat\",\r\n    Microphones = \"Microphones\",\r\n    Deskphone = \"Deskphone\",\r\n    RemoteControl = \"RemoteControl\",\r\n    Unknown = \"Unknown\",\r\n    File = \"File\",\r\n    Stream = \"Stream\",\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionCompletionStatus } from \"../../src/common.speech/Exports\";\r\nimport { TranslationStatus } from \"./TranslationStatus\";\r\n\r\nexport interface ITranslations {\r\n    TranslationStatus: TranslationStatus;\r\n    Translations: ITranslation[];\r\n    FailureReason: string;\r\n}\r\n\r\nexport interface ITranslation {\r\n    Language: string;\r\n    Text?: string;\r\n    DisplayText?: string;\r\n}\r\n\r\nexport interface ISpeechEndDetectedResult {\r\n    Offset?: number;\r\n}\r\n\r\n// turn.start\r\nexport interface ITurnStart {\r\n    context: ITurnStartContext;\r\n}\r\n\r\nexport interface ITurnStartContext {\r\n    serviceTag: string;\r\n}\r\n\r\nexport interface IResultErrorDetails {\r\n    errorText: string;\r\n    recogSate: RecognitionCompletionStatus;\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports\";\r\n\r\nconst CRLF: string = \"\\r\\n\";\r\n\r\nexport class WebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    public toConnectionMessage(message: RawWebsocketMessage): Promise<ConnectionMessage> {\r\n        const deferral = new Deferred<ConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const textMessage: string = message.textContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: string = null;\r\n\r\n                if (textMessage) {\r\n                    const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\r\n                    if (headerBodySplit && headerBodySplit.length > 0) {\r\n                        headers = this.parseHeaders(headerBodySplit[0]);\r\n                        if (headerBodySplit.length > 1) {\r\n                            body = headerBodySplit[1];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const binaryMessage: ArrayBuffer = message.binaryContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: ArrayBuffer = null;\r\n\r\n                if (!binaryMessage || binaryMessage.byteLength < 2) {\r\n                    throw new Error(\"Invalid binary message format. Header length missing.\");\r\n                }\r\n\r\n                const dataView = new DataView(binaryMessage);\r\n                const headerLength = dataView.getInt16(0);\r\n\r\n                if (binaryMessage.byteLength < headerLength + 2) {\r\n                    throw new Error(\"Invalid binary message format. Header content missing.\");\r\n                }\r\n\r\n                let headersString = \"\";\r\n                for (let i = 0; i < headerLength; i++) {\r\n                    headersString += String.fromCharCode((dataView).getInt8(i + 2));\r\n                }\r\n\r\n                headers = this.parseHeaders(headersString);\r\n\r\n                if (binaryMessage.byteLength > headerLength + 2) {\r\n                    body = binaryMessage.slice(2 + headerLength);\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    public fromConnectionMessage(message: ConnectionMessage): Promise<RawWebsocketMessage> {\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${this.makeHeaders(message)}${CRLF}${message.textBody ? message.textBody : \"\"}`;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const headersString = this.makeHeaders(message);\r\n                const content = message.binaryBody;\r\n\r\n                const headerBuffer = this.stringToArrayBuffer(headersString);\r\n                const headerInt8Array = new Int8Array(headerBuffer);\r\n                const headerLength = headerInt8Array.byteLength;\r\n\r\n                const payloadInt8Array = new Int8Array(2 + headerLength + (content ? content.byteLength : 0));\r\n                payloadInt8Array[0] = ((headerLength >> 8) & 0xff);\r\n                payloadInt8Array[1] = headerLength & 0xff;\r\n                payloadInt8Array.set(headerInt8Array, 2);\r\n\r\n                if (content) {\r\n                    const bodyInt8Array = new Int8Array(content);\r\n                    payloadInt8Array.set(bodyInt8Array, 2 + headerLength);\r\n                }\r\n\r\n                const payload: ArrayBuffer = payloadInt8Array.buffer;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    private makeHeaders(message: ConnectionMessage): string {\r\n        let headersString: string = \"\";\r\n\r\n        if (message.headers) {\r\n            for (const header in message.headers) {\r\n                if (header) {\r\n                    headersString += `${header}: ${message.headers[header]}${CRLF}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        return headersString;\r\n    }\r\n\r\n    private parseHeaders(headersString: string): IStringDictionary<string> {\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (headersString) {\r\n            const headerMatches = headersString.match(/[^\\r\\n]+/g);\r\n            if (headers) {\r\n                for (const header of headerMatches) {\r\n                    if (header) {\r\n                        const separatorIndex = header.indexOf(\":\");\r\n                        const headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;\r\n                        const headerValue =\r\n                            separatorIndex > 0 && header.length > (separatorIndex + 1) ?\r\n                                header.substr(separatorIndex + 1).trim() :\r\n                                \"\";\r\n\r\n                        headers[headerName] = headerValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    private stringToArrayBuffer(str: string): ArrayBuffer {\r\n        const buffer = new ArrayBuffer(str.length);\r\n        const view = new DataView(buffer);\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(i, str.charCodeAt(i));\r\n        }\r\n        return buffer;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly interactiveRelativeUri: string = \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n    private readonly conversationRelativeUri: string = \"/speech/recognition/conversation/cognitiveservices/v1\";\r\n    private readonly dictationRelativeUri: string = \"/speech/recognition/dictation/cognitiveservices/v1\";\r\n    private readonly universalUri: string = \"/speech/universal/v\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (!endpoint || endpoint.search(QueryParameterNames.Format) === -1) {\r\n            queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            switch (config.recognitionMode) {\r\n                case RecognitionMode.Conversation:\r\n                    if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\r\n                        endpoint = host + this.dictationRelativeUri;\r\n                    } else {\r\n                        if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                            endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                        } else {\r\n                            endpoint = host + this.conversationRelativeUri;\r\n                        }\r\n                    }\r\n                    break;\r\n                case RecognitionMode.Dictation:\r\n                    endpoint = host + this.dictationRelativeUri;\r\n                    break;\r\n                default:\r\n                    if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                        endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                    } else {\r\n                        endpoint = host + this.interactiveRelativeUri; // default is interactive\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n\r\n        const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n\r\n        // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final\r\n        // URI that was used to make the connection (including query parameters).\r\n        const uri: string = webSocketConnection.uri;\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, uri);\r\n\r\n        return webSocketConnection;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class ConversationTranscriberConnectionFactory extends ConnectionFactoryBase {\r\n    private readonly universalUri: string = \"/speech/universal/v2\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setV2UrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            endpoint = `${host}${this.universalUri}`;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n\r\n        const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n\r\n        // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final\r\n        // URI that was used to make the connection (including query parameters).\r\n        const uri: string = webSocketConnection.uri;\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, uri);\r\n\r\n        return webSocketConnection;\r\n    }\r\n\r\n    protected setV2UrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const propertyIdToParameterMap: Map<number, string> = new Map([\r\n            [PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging],\r\n            [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing],\r\n            [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity],\r\n            [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold],\r\n        ]);\r\n\r\n        propertyIdToParameterMap.forEach((parameterName: string, propertyId: PropertyId): void => {\r\n            this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\r\n        });\r\n\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        Object.keys(serviceProperties).forEach((value: string): void => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    OutputFormatPropertyName,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class TranscriberConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly multiaudioRelativeUri: string = \"/speech/recognition/multiaudio\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"centralus\");\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const hostDefault: string = \"wss://transcribe.\" + region + \".cts.speech\" + hostSuffix + this.multiaudioRelativeUri;\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, hostDefault);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        this.setQueryParams(queryParams, config, endpoint);\r\n\r\n        if (!endpoint) {\r\n            endpoint = host;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    public setQueryParams(queryParams: IStringDictionary<string>, config: RecognizerConfig, endpointUrl: string): void {\r\n\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId && !(QueryParameterNames.CustomSpeechDeploymentId in queryParams)) {\r\n            queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n        }\r\n\r\n        if (language && !(QueryParameterNames.Language in queryParams)) {\r\n            queryParams[QueryParameterNames.Language] = language;\r\n        }\r\n\r\n        const wordLevelTimings: boolean = config.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase() === \"true\";\r\n        const detailed: boolean = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) !== OutputFormat[OutputFormat.Simple];\r\n        if (wordLevelTimings || detailed) {\r\n            queryParams[QueryParameterNames.Format] = OutputFormat[OutputFormat.Detailed].toLowerCase();\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpointUrl);\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../common/Exports\";\r\nimport { StringUtils } from \"../common/StringUtils\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        const endpoint: string = this.getEndpointUrl(config);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n        this.setQueryParams(queryParams, config, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    public getEndpointUrl(config: RecognizerConfig, returnRegionPlaceholder?: boolean): string {\r\n\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n\r\n        let endpointUrl: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpointUrl) {\r\n            if (config.autoDetectSourceLanguages !== undefined) {\r\n                const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.stt.speech\" + hostSuffix);\r\n                endpointUrl = host + \"/speech/universal/v2\";\r\n            } else {\r\n                const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.s2s.speech\" + hostSuffix);\r\n                endpointUrl = host + \"/speech/translation/cognitiveservices/v1\";\r\n            }\r\n        }\r\n\r\n        if (returnRegionPlaceholder === true) {\r\n            return endpointUrl;\r\n        }\r\n\r\n        return StringUtils.formatString(endpointUrl, { region });\r\n    }\r\n\r\n    public setQueryParams(queryParams: IStringDictionary<string>, config: RecognizerConfig, endpointUrl: string): void {\r\n\r\n        queryParams.from = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n        queryParams.to = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages);\r\n        queryParams.scenario = config.recognitionMode === RecognitionMode.Interactive ? \"interactive\" :\r\n            config.recognitionMode === RecognitionMode.Conversation ? \"conversation\" : \"\";\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpointUrl);\r\n        this.setUrlParameter(\r\n            PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n            QueryParameterNames.StableTranslation,\r\n            config,\r\n            queryParams,\r\n            endpointUrl\r\n        );\r\n\r\n        const translationVoice: string =  config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n        if (translationVoice !== undefined) {\r\n            queryParams.voice = translationVoice;\r\n            queryParams.features = \"texttospeech\";\r\n        }\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport { PropertyId } from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    SynthesizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { ISynthesisConnectionFactory } from \"./ISynthesisConnectionFactory\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class SpeechSynthesisConnectionFactory implements ISynthesisConnectionFactory {\r\n\r\n    private readonly synthesisUri: string = \"/cognitiveservices/websocket/v1\";\r\n\r\n    public create(\r\n        config: SynthesizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const hostPrefix = (endpointId === undefined) ? \"tts\" : \"voice\";\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".\" + hostPrefix + \".speech\" + hostSuffix);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        if (!endpoint) {\r\n            endpoint = host + this.synthesisUri;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        if (endpointId !== undefined) {\r\n            headers[QueryParameterNames.CustomVoiceDeploymentId] = endpointId;\r\n        }\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromParameters(config.parameters), enableCompression, connectionId);\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ResultReason\r\n} from \"../sdk/Exports\";\r\nimport { RecognitionStatus } from \"./Exports\";\r\n\r\nexport class EnumTranslation {\r\n    public static implTranslateRecognitionResult(recognitionStatus: RecognitionStatus): ResultReason {\r\n        let reason = ResultReason.Canceled;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n                reason = ResultReason.RecognizedSpeech;\r\n                break;\r\n            case RecognitionStatus.NoMatch:\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.EndOfDictation:\r\n                reason = ResultReason.NoMatch;\r\n                break;\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = ResultReason.Canceled;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelResult(recognitionStatus: RecognitionStatus): CancellationReason {\r\n        let reason = CancellationReason.EndOfStream;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n            case RecognitionStatus.EndOfDictation:\r\n            case RecognitionStatus.NoMatch:\r\n                reason = CancellationReason.EndOfStream;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = CancellationReason.Error;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelErrorCode(recognitionStatus: RecognitionStatus): CancellationErrorCode {\r\n        let reason: CancellationErrorCode = CancellationErrorCode.NoError;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Error:\r\n                reason = CancellationErrorCode.ServiceError;\r\n                break;\r\n            case RecognitionStatus.TooManyRequests:\r\n                reason = CancellationErrorCode.TooManyRequests;\r\n                break;\r\n            case RecognitionStatus.BadRequest:\r\n                reason = CancellationErrorCode.BadRequestParameters;\r\n                break;\r\n            case RecognitionStatus.Forbidden:\r\n                reason = CancellationErrorCode.Forbidden;\r\n                break;\r\n            default:\r\n                reason = CancellationErrorCode.NoError;\r\n                break;\r\n        }\r\n\r\n        return reason;\r\n\r\n    }\r\n\r\n    public static implTranslateErrorDetails(cancellationErrorCode: CancellationErrorCode): string {\r\n        let errorDetails: string = \"The speech service encountered an internal error and could not continue.\";\r\n        switch (cancellationErrorCode) {\r\n            case CancellationErrorCode.Forbidden:\r\n                errorDetails = \"The recognizer is using a free subscription that ran out of quota.\";\r\n                break;\r\n            case CancellationErrorCode.BadRequestParameters:\r\n                errorDetails = \"Invalid parameter or unsupported audio format in the request.\";\r\n                break;\r\n            case CancellationErrorCode.TooManyRequests:\r\n                errorDetails = \"The number of parallel requests exceeded the number of allowed concurrent transcriptions.\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return errorDetails;\r\n    }\r\n\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * @class SynthesisStatus\r\n * @private\r\n */\r\nexport enum SynthesisStatus {\r\n    /**\r\n     * The response contains valid audio data.\r\n     * @member SynthesisStatus.Success\r\n     */\r\n    Success,\r\n\r\n    /**\r\n     * Indicates the end of audio data. No valid audio data is included in the message.\r\n     * @member SynthesisStatus.SynthesisEnd\r\n     */\r\n    SynthesisEnd,\r\n\r\n    /**\r\n     * Indicates an error occurred during synthesis data processing.\r\n     * @member SynthesisStatus.Error\r\n     */\r\n    Error,\r\n}\r\n\r\nexport enum RecognitionStatus {\r\n    Success,\r\n    NoMatch,\r\n    InitialSilenceTimeout,\r\n    BabbleTimeout,\r\n    Error,\r\n    EndOfDictation,\r\n    TooManyRequests,\r\n    BadRequest,\r\n    Forbidden,\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SynthesisStatus } from \"../Exports\";\r\n\r\n// translation.synthesis.end\r\nexport interface ITranslationSynthesisEnd {\r\n    SynthesisStatus?: SynthesisStatus;\r\n    FailureReason?: string;\r\n    Status?: SynthesisStatus;\r\n}\r\n\r\nexport class TranslationSynthesisEnd implements ITranslationSynthesisEnd {\r\n    private privSynthesisEnd: ITranslationSynthesisEnd;\r\n\r\n    private constructor(json: string) {\r\n        this.privSynthesisEnd = JSON.parse(json) as ITranslationSynthesisEnd;\r\n        if (!!this.privSynthesisEnd.SynthesisStatus) {\r\n            this.privSynthesisEnd.SynthesisStatus = SynthesisStatus[this.privSynthesisEnd.SynthesisStatus as unknown as keyof typeof SynthesisStatus];\r\n        }\r\n        if (!!this.privSynthesisEnd.Status) {\r\n            this.privSynthesisEnd.SynthesisStatus = SynthesisStatus[this.privSynthesisEnd.Status as unknown as keyof typeof SynthesisStatus];\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationSynthesisEnd {\r\n        return new TranslationSynthesisEnd(json);\r\n    }\r\n\r\n    public get SynthesisStatus(): SynthesisStatus {\r\n        return this.privSynthesisEnd.SynthesisStatus;\r\n    }\r\n\r\n    public get FailureReason(): string {\r\n        return this.privSynthesisEnd.FailureReason;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ITranslations } from \"../Exports\";\r\nimport { TranslationStatus } from \"../TranslationStatus\";\r\n\r\n// translation.hypothesis\r\nexport interface ITranslationHypothesis {\r\n    Duration: number;\r\n    Offset: number;\r\n    Text: string;\r\n    Translation: ITranslations;\r\n}\r\n\r\nexport class TranslationHypothesis implements ITranslationHypothesis {\r\n    private privTranslationHypothesis: ITranslationHypothesis;\r\n\r\n    private constructor(json: string) {\r\n        this.privTranslationHypothesis = JSON.parse(json) as ITranslationHypothesis;\r\n        this.privTranslationHypothesis.Translation.TranslationStatus = TranslationStatus[this.privTranslationHypothesis.Translation.TranslationStatus as unknown as keyof typeof TranslationStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationHypothesis {\r\n        return new TranslationHypothesis(json);\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privTranslationHypothesis.Duration;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privTranslationHypothesis.Offset;\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privTranslationHypothesis.Text;\r\n    }\r\n\r\n    public get Translation(): ITranslations {\r\n        return this.privTranslationHypothesis.Translation;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { IPrimaryLanguage, ITranslations, RecognitionStatus } from \"../Exports\";\r\nimport { TranslationStatus } from \"../TranslationStatus\";\r\n\r\n// translation.phrase\r\nexport interface ITranslationPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    Offset: number;\r\n    Duration: number;\r\n    Translation?: ITranslations;\r\n    Text: string;\r\n    DisplayText?: string;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n}\r\n\r\nexport class TranslationPhrase implements ITranslationPhrase {\r\n    private privTranslationPhrase: ITranslationPhrase;\r\n\r\n    private constructor(phrase: ITranslationPhrase) {\r\n        this.privTranslationPhrase = phrase;\r\n        this.privTranslationPhrase.RecognitionStatus = RecognitionStatus[this.privTranslationPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n        if (this.privTranslationPhrase.Translation !== undefined) {\r\n            this.privTranslationPhrase.Translation.TranslationStatus = TranslationStatus[this.privTranslationPhrase.Translation.TranslationStatus as unknown as keyof typeof TranslationStatus];\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationPhrase {\r\n        return new TranslationPhrase(JSON.parse(json) as ITranslationPhrase);\r\n    }\r\n\r\n    public static fromTranslationResponse(translationResponse: { SpeechPhrase: ITranslationPhrase }): TranslationPhrase {\r\n        Contracts.throwIfNullOrUndefined(translationResponse, \"translationResponse\");\r\n        const phrase: ITranslationPhrase = translationResponse.SpeechPhrase;\r\n        translationResponse.SpeechPhrase = undefined;\r\n        phrase.Translation = (translationResponse as unknown as ITranslations);\r\n        phrase.Text = phrase.DisplayText;\r\n        return new TranslationPhrase(phrase);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privTranslationPhrase.RecognitionStatus;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privTranslationPhrase.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privTranslationPhrase.Duration;\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privTranslationPhrase.Text;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privTranslationPhrase.PrimaryLanguage?.Language;\r\n    }\r\n\r\n    public get Confidence(): string {\r\n        return this.privTranslationPhrase.PrimaryLanguage?.Confidence;\r\n    }\r\n\r\n    public get Translation(): ITranslations {\r\n        return this.privTranslationPhrase.Translation;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionEvent,\r\n    IAudioSource,\r\n    MessageType,\r\n    TranslationStatus,\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionResult,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationRecognizer,\r\n    Translations,\r\n    TranslationSynthesisEventArgs,\r\n    TranslationSynthesisResult,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ConversationServiceRecognizer,\r\n    EnumTranslation,\r\n    RecognitionStatus,\r\n    SynthesisStatus,\r\n    TranslationHypothesis,\r\n    TranslationPhrase,\r\n    TranslationSynthesisEnd,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { ITranslationPhrase } from \"./ServiceMessages/TranslationPhrase\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class TranslationServiceRecognizer extends ConversationServiceRecognizer {\r\n    private privTranslationRecognizer: TranslationRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        translationRecognizer: TranslationRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer);\r\n        this.privTranslationRecognizer = translationRecognizer;\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\r\n                this.privTranslationRecognizer.onConnection();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        let processed: boolean = await this.processSpeechMessages(connectionMessage);\r\n        if (processed) {\r\n            return true;\r\n        }\r\n\r\n        const handleTranslationPhrase = async (translatedPhrase: TranslationPhrase): Promise<void> => {\r\n            this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset + translatedPhrase.Duration);\r\n\r\n            if (translatedPhrase.RecognitionStatus === RecognitionStatus.Success) {\r\n\r\n                // OK, the recognition was successful. How'd the translation do?\r\n                const result: TranslationRecognitionEventArgs = this.fireEventForResult(translatedPhrase, resultProps);\r\n                if (!!this.privTranslationRecognizer.recognized) {\r\n                    try {\r\n                        this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!this.privSuccessCallback) {\r\n                    try {\r\n                        this.privSuccessCallback(result.result);\r\n                    } catch (e) {\r\n                        if (!!this.privErrorCallback) {\r\n                            this.privErrorCallback(e as string);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    this.privSuccessCallback = undefined;\r\n                    this.privErrorCallback = undefined;\r\n                }\r\n            } else {\r\n                const reason: ResultReason = EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\r\n\r\n                const result = new TranslationRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    reason,\r\n                    translatedPhrase.Text,\r\n                    translatedPhrase.Duration,\r\n                    this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset,\r\n                    translatedPhrase.Language,\r\n                    translatedPhrase.Confidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                if (reason === ResultReason.Canceled) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(translatedPhrase.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && reason === ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        const ev = new TranslationRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privTranslationRecognizer.recognized) {\r\n                            try {\r\n                                this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n            }\r\n\r\n        };\r\n\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"translation.hypothesis\":\r\n\r\n                const result: TranslationRecognitionEventArgs = this.fireEventForResult(TranslationHypothesis.fromJSON(connectionMessage.textBody), resultProps);\r\n                this.privRequestSession.onHypothesis(this.privRequestSession.currentTurnAudioOffset + result.offset);\r\n\r\n                if (!!this.privTranslationRecognizer.recognizing) {\r\n                    try {\r\n                        this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            case \"translation.response\":\r\n                const phrase: { SpeechPhrase: ITranslationPhrase } = JSON.parse(connectionMessage.textBody) as { SpeechPhrase: ITranslationPhrase };\r\n                if (!!phrase.SpeechPhrase) {\r\n                    await handleTranslationPhrase(TranslationPhrase.fromTranslationResponse(phrase));\r\n                }\r\n                break;\r\n            case \"translation.phrase\":\r\n                await handleTranslationPhrase(TranslationPhrase.fromJSON(connectionMessage.textBody));\r\n                break;\r\n\r\n            case \"translation.synthesis\":\r\n                this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);\r\n                processed = true;\r\n                break;\r\n\r\n            case \"audio.end\":\r\n            case \"translation.synthesis.end\":\r\n                const synthEnd: TranslationSynthesisEnd = TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);\r\n\r\n                switch (synthEnd.SynthesisStatus) {\r\n                    case SynthesisStatus.Error:\r\n                        if (!!this.privTranslationRecognizer.synthesizing) {\r\n                            const result = new TranslationSynthesisResult(ResultReason.Canceled, undefined);\r\n                            const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, this.privRequestSession.sessionId);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n\r\n                        if (!!this.privTranslationRecognizer.canceled) {\r\n                            // And raise a canceled event to send the rich(er) error message back.\r\n                            const canceledResult: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                                this.privRequestSession.sessionId,\r\n                                CancellationReason.Error,\r\n                                synthEnd.FailureReason,\r\n                                CancellationErrorCode.ServiceError,\r\n                                null);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                        break;\r\n                    case SynthesisStatus.Success:\r\n                        this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privTranslationRecognizer.canceled) {\r\n\r\n            const cancelEvent: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                sessionId,\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined);\r\n\r\n            try {\r\n                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: TranslationRecognitionResult = new TranslationRecognitionResult(\r\n                undefined, // Translations\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Druation\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // LanguageDetectionConfidence\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* eslint-disable no-empty */\r\n                this.privSuccessCallback = undefined;\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        try {\r\n            const ev = new TranslationRecognitionEventArgs(TranslationRecognitionResult.fromSpeechRecognitionResult(result), duration, sessionId);\r\n            this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, ev);\r\n            /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        try {\r\n            const ev = new TranslationRecognitionEventArgs(TranslationRecognitionResult.fromSpeechRecognitionResult(result), offset, sessionId);\r\n            this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: TranslationHypothesis | TranslationPhrase, properties: PropertyCollection): TranslationRecognitionEventArgs {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResult.Translation.Translations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResult.Translation.Translations) {\r\n                translations.set(translation.Language, translation.Text || translation.DisplayText);\r\n            }\r\n        }\r\n\r\n        let resultReason: ResultReason;\r\n        let language: string;\r\n        let confidence: string;\r\n        if (serviceResult instanceof TranslationPhrase) {\r\n            if (!!serviceResult.Translation && serviceResult.Translation.TranslationStatus === TranslationStatus.Success) {\r\n                resultReason = ResultReason.TranslatedSpeech;\r\n            } else {\r\n                resultReason = ResultReason.RecognizedSpeech;\r\n            }\r\n            language = serviceResult.Language;\r\n            confidence = serviceResult.Confidence;\r\n        } else {\r\n            resultReason = ResultReason.TranslatingSpeech;\r\n        }\r\n\r\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new TranslationRecognitionResult(\r\n            translations,\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.Text,\r\n            serviceResult.Duration,\r\n            offset,\r\n            language,\r\n            confidence,\r\n            serviceResult.Translation.FailureReason,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new TranslationRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private sendSynthesisAudio(audio: ArrayBuffer, sessionId: string): void {\r\n        const reason = (undefined === audio) ? ResultReason.SynthesizingAudioCompleted : ResultReason.SynthesizingAudio;\r\n        const result = new TranslationSynthesisResult(reason, audio);\r\n        const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, sessionId);\r\n\r\n        if (!!this.privTranslationRecognizer.synthesizing) {\r\n            try {\r\n                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// speech.endDetected\r\nexport interface ISpeechDetected {\r\n    Offset: number;\r\n}\r\n\r\nexport class SpeechDetected implements ISpeechDetected {\r\n    private privSpeechStartDetected: ISpeechDetected;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechStartDetected = JSON.parse(json) as ISpeechDetected;\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechDetected {\r\n        return new SpeechDetected(json);\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechStartDetected.Offset;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage } from \"./SimpleSpeechPhrase\";\r\n\r\n// speech.hypothesis\r\nexport interface ISpeechHypothesis {\r\n    Text: string;\r\n    Offset: number;\r\n    Duration: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport class SpeechHypothesis implements ISpeechHypothesis {\r\n    private privSpeechHypothesis: ISpeechHypothesis;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechHypothesis = JSON.parse(json) as ISpeechHypothesis;\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechHypothesis {\r\n        return new SpeechHypothesis(json);\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privSpeechHypothesis.Text;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechHypothesis.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSpeechHypothesis.Duration;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Language;\r\n    }\r\n\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Confidence;\r\n    }\r\n\r\n    public get SpeakerId(): string {\r\n        return this.privSpeechHypothesis.SpeakerId;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// speech.keyword\r\nexport interface ISpeechKeyword {\r\n    Status: string;\r\n    Text: string;\r\n    Offset: number;\r\n    Duration: number;\r\n}\r\n\r\nexport class SpeechKeyword implements ISpeechKeyword {\r\n    private privSpeechKeyword: ISpeechKeyword;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechKeyword = JSON.parse(json) as ISpeechKeyword;\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechKeyword {\r\n        return new SpeechKeyword(json);\r\n    }\r\n\r\n    public get Status(): string {\r\n        return this.privSpeechKeyword.Status;\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privSpeechKeyword.Text;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechKeyword.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSpeechKeyword.Duration;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    SpeechRecognizer,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privSpeechRecognizer: SpeechRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        speechRecognizer: SpeechRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\r\n        this.privSpeechRecognizer = speechRecognizer;\r\n\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined, // Speaker Id\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privSpeechRecognizer.recognizing) {\r\n                    try {\r\n                        this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                            const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                            const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                totalOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                offsetCorrectedJson,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privSpeechRecognizer.recognized) {\r\n                            try {\r\n                                this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privSpeechRecognizer.canceled) {\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    ConversationTranscriptionEventArgs,\r\n    ConversationTranscriptionResult,\r\n    ConversationTranscriber,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\nimport { PhraseDetection, SpeakerDiarization } from \"./ServiceRecognizerBase\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class ConversationTranscriptionServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privConversationTranscriber: ConversationTranscriber;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        conversationTranscriber: ConversationTranscriber) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, conversationTranscriber);\r\n        this.privConversationTranscriber = conversationTranscriber;\r\n        this.setSpeakerDiarizationJson();\r\n    }\r\n\r\n    protected setSpeakerDiarizationJson(): void {\r\n        if (this.privEnableSpeakerId) {\r\n            const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n            const speakerDiarization: SpeakerDiarization = {};\r\n            speakerDiarization.mode = \"Anonymous\";\r\n            speakerDiarization.audioSessionId = this.privDiarizationSessionId;\r\n            speakerDiarization.audioOffsetMs = 0;\r\n            phraseDetection.speakerDiarization = speakerDiarization;\r\n            this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n        }\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: ConversationTranscriptionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new ConversationTranscriptionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined, // Speaker Id\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new ConversationTranscriptionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privConversationTranscriber.transcribing) {\r\n                    try {\r\n                        this.privConversationTranscriber.transcribing(this.privConversationTranscriber, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new ConversationTranscriptionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                simple.SpeakerId,\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                            const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                            const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                            result = new ConversationTranscriptionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                totalOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                simple.SpeakerId,\r\n                                undefined,\r\n                                offsetCorrectedJson,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: ConversationTranscriptionEventArgs = new ConversationTranscriptionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privConversationTranscriber.transcribed) {\r\n                            try {\r\n                                this.privConversationTranscriber.transcribed(this.privConversationTranscriber, event);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privConversationTranscriber.canceled) {\r\n            const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privConversationTranscriber.canceled(this.privConversationTranscriber, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    MeetingTranscriptionCanceledEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport { ConversationInfo, MeetingInfo } from \"../sdk/Transcription/Exports\";\r\nimport { ConversationProperties } from \"../sdk/Transcription/IConversation\";\r\nimport { MeetingProperties } from \"../sdk/Transcription/IMeeting\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ConversationServiceRecognizer,\r\n    TranscriberRecognizer\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class TranscriptionServiceRecognizer extends ConversationServiceRecognizer {\r\n\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        transcriber: TranscriberRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, transcriber);\r\n        this.privTranscriberRecognizer = transcriber;\r\n        this.sendPrePayloadJSONOverride = (connection: IConnection): Promise<void> => this.sendTranscriptionStartJSON(connection);\r\n        if (this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps) === \"true\") {\r\n            this.privSpeechContext.setWordLevelTimings();\r\n        }\r\n    }\r\n\r\n    public async sendSpeechEventAsync(info: ConversationInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    public async sendMeetingSpeechEventAsync(info: MeetingInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createMeetingSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        return this.processSpeechMessages(connectionMessage);\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        try {\r\n            const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, offset, sessionId);\r\n            this.privTranscriberRecognizer.recognized(this.privTranscriberRecognizer, event);\r\n            if (!!this.privSuccessCallback) {\r\n                try {\r\n                    this.privSuccessCallback(result);\r\n                } catch (e) {\r\n                    if (!!this.privErrorCallback) {\r\n                        this.privErrorCallback(e as string);\r\n                    }\r\n                }\r\n                // Only invoke the call back once.\r\n                // and if it's successful don't invoke the\r\n                // error after that.\r\n                this.privSuccessCallback = undefined;\r\n                this.privErrorCallback = undefined;\r\n            }\r\n        /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        try {\r\n            const ev = new SpeechRecognitionEventArgs(result, duration, sessionId);\r\n            this.privTranscriberRecognizer.recognizing(this.privTranscriberRecognizer, ev);\r\n            /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (this.privTranscriberRecognizer.IsMeetingRecognizer()) {\r\n            if (!!this.privTranscriberRecognizer.canceled) {\r\n                const cancelEvent: MeetingTranscriptionCanceledEventArgs = new MeetingTranscriptionCanceledEventArgs(\r\n                    cancellationReason,\r\n                    error,\r\n                    errorCode,\r\n                    undefined,\r\n                    sessionId);\r\n                try {\r\n                    this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        } else {\r\n            if (!!this.privTranscriberRecognizer.canceled) {\r\n                const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\r\n                    cancellationReason,\r\n                    error,\r\n                    errorCode,\r\n                    undefined,\r\n                    sessionId);\r\n                try {\r\n                    this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendTranscriptionStartJSON(connection: IConnection): Promise<void> {\r\n        await this.sendSpeechContext(connection, true);\r\n        if (this.privTranscriberRecognizer.IsMeetingRecognizer()) {\r\n            const info: MeetingInfo = this.privTranscriberRecognizer.getMeetingInfo();\r\n            const payload: { [id: string]: any } = this.createMeetingSpeechEventPayload(info, \"start\");\r\n            await this.sendSpeechEvent(connection, payload);\r\n        } else {\r\n            const info: ConversationInfo = this.privTranscriberRecognizer.getConversationInfo();\r\n            const payload: { [id: string]: any } = this.createSpeechEventPayload(info, \"start\");\r\n            await this.sendSpeechEvent(connection, payload);\r\n        }\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected sendSpeechEvent(connection: IConnection, payload: { [id: string]: any }): Promise<void> {\r\n        const speechEventJson = JSON.stringify(payload);\r\n\r\n        if (speechEventJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.event\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechEventJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    private createSpeechEventPayload(info: ConversationInfo, command: string): { [id: string]: any } {\r\n        const eventDict: { id: string; name: string; meeting: ConversationProperties } = { id: \"meeting\", name: command, meeting: info.conversationProperties };\r\n        eventDict.meeting.id = info.id;\r\n        eventDict.meeting.attendees = info.participants;\r\n        return eventDict;\r\n    }\r\n\r\n    private createMeetingSpeechEventPayload(info: MeetingInfo, command: string): { [id: string]: any } {\r\n        const eventDict: { id: string; name: string; meeting: MeetingProperties } = { id: \"meeting\", name: command, meeting: info.meetingProperties };\r\n        eventDict.meeting.id = info.id;\r\n        eventDict.meeting.attendees = info.participants;\r\n        return eventDict;\r\n    }\r\n\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage, RecognitionStatus } from \"../Exports\";\r\n\r\n// speech.phrase for detailed\r\nexport interface IDetailedSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    NBest: IPhrase[];\r\n    Duration?: number;\r\n    Offset?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    DisplayText?: string;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport interface IPhrase {\r\n    Confidence?: number;\r\n    Lexical: string;\r\n    ITN: string;\r\n    MaskedITN: string;\r\n    Display?: string;\r\n    DisplayText?: string;\r\n    Words?: IWord[];\r\n    DisplayWords?: IWord[];\r\n}\r\n\r\nexport interface IWord {\r\n    Word: string;\r\n    Offset: number;\r\n    Duration: number;\r\n}\r\n\r\nexport class DetailedSpeechPhrase implements IDetailedSpeechPhrase {\r\n    private privDetailedSpeechPhrase: IDetailedSpeechPhrase;\r\n\r\n    private constructor(json: string) {\r\n        this.privDetailedSpeechPhrase = JSON.parse(json) as IDetailedSpeechPhrase;\r\n        this.privDetailedSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privDetailedSpeechPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): DetailedSpeechPhrase {\r\n        return new DetailedSpeechPhrase(json);\r\n    }\r\n\r\n    public getJsonWithCorrectedOffsets(baseOffset: number): string {\r\n        if (!!this.privDetailedSpeechPhrase.NBest) {\r\n            let firstWordOffset: number;\r\n            for (const phrase of this.privDetailedSpeechPhrase.NBest) {\r\n                if (!!phrase.Words && !!phrase.Words[0]) {\r\n                    firstWordOffset = phrase.Words[0].Offset;\r\n                    break;\r\n                }\r\n            }\r\n            if (!!firstWordOffset && firstWordOffset < baseOffset) {\r\n                const offset: number = baseOffset - firstWordOffset;\r\n                for (const details of this.privDetailedSpeechPhrase.NBest) {\r\n                    if (!!details.Words) {\r\n                        for (const word of details.Words) {\r\n                            word.Offset += offset;\r\n                        }\r\n                    }\r\n                    if (!!details.DisplayWords) {\r\n                        for (const word of details.DisplayWords) {\r\n                            word.Offset += offset;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return JSON.stringify(this.privDetailedSpeechPhrase);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privDetailedSpeechPhrase.RecognitionStatus;\r\n    }\r\n    public get NBest(): IPhrase[] {\r\n        return this.privDetailedSpeechPhrase.NBest;\r\n    }\r\n    public get Duration(): number {\r\n        return this.privDetailedSpeechPhrase.Duration;\r\n    }\r\n    public get Offset(): number {\r\n        return this.privDetailedSpeechPhrase.Offset;\r\n    }\r\n    public get Language(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n    public get Text(): string {\r\n        if (!!this.privDetailedSpeechPhrase.NBest && this.privDetailedSpeechPhrase.NBest[0]) {\r\n            return this.privDetailedSpeechPhrase.NBest[0].Display || this.privDetailedSpeechPhrase.NBest[0].DisplayText;\r\n        }\r\n        return this.privDetailedSpeechPhrase.DisplayText;\r\n    }\r\n    public get SpeakerId(): string {\r\n        return this.privDetailedSpeechPhrase.SpeakerId;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionStatus } from \"../Exports\";\r\n\r\n// speech.phrase\r\nexport interface ISimpleSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    DisplayText: string;\r\n    Offset?: number;\r\n    Duration?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport interface IPrimaryLanguage {\r\n    Language: string;\r\n    Confidence: string;\r\n}\r\n\r\nexport class SimpleSpeechPhrase implements ISimpleSpeechPhrase {\r\n    private privSimpleSpeechPhrase: ISimpleSpeechPhrase;\r\n\r\n    private constructor(json: string) {\r\n        this.privSimpleSpeechPhrase = JSON.parse(json) as ISimpleSpeechPhrase;\r\n        this.privSimpleSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privSimpleSpeechPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): SimpleSpeechPhrase {\r\n        return new SimpleSpeechPhrase(json);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privSimpleSpeechPhrase.RecognitionStatus;\r\n    }\r\n\r\n    public get DisplayText(): string {\r\n        return this.privSimpleSpeechPhrase.DisplayText;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSimpleSpeechPhrase.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSimpleSpeechPhrase.Duration;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n\r\n    public get SpeakerId(): string {\r\n        return this.privSimpleSpeechPhrase.SpeakerId;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { LanguageUnderstandingModelImpl } from \"../sdk/LanguageUnderstandingModel\";\r\n\r\n/**\r\n * @class AddedLmIntent\r\n */\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class AddedLmIntent {\r\n    public modelImpl: LanguageUnderstandingModelImpl;\r\n    public intentName: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param modelImpl - The model.\r\n     * @param intentName - The intent name.\r\n     */\r\n    public constructor(modelImpl: LanguageUnderstandingModelImpl, intentName: string) {\r\n        this.modelImpl = modelImpl;\r\n        this.intentName = intentName;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    Deferred,\r\n    IAudioSource,\r\n    MessageType,\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    IntentRecognizer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    AddedLmIntent,\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    IntentResponse,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class IntentServiceRecognizer extends ServiceRecognizerBase {\r\n    private privIntentRecognizer: IntentRecognizer;\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent };\r\n    private privIntentDataSent: boolean;\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n    private privPendingIntentArgs: IntentRecognitionEventArgs;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: IntentRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privIntentRecognizer = recognizer;\r\n        this.privIntentDataSent = false;\r\n    }\r\n\r\n    public setIntents(addedIntents: { [id: string]: AddedLmIntent }, umbrellaIntent: AddedLmIntent): void {\r\n        this.privAddedLmIntents = addedIntents;\r\n        this.privUmbrellaIntent = umbrellaIntent;\r\n        this.privIntentDataSent = true;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: IntentRecognitionResult;\r\n        let ev: IntentRecognitionEventArgs;\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n                const speechHypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingIntent,\r\n                    speechHypothesis.Text,\r\n                    speechHypothesis.Duration,\r\n                    speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                    speechHypothesis.Language,\r\n                    speechHypothesis.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(result.offset);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privIntentRecognizer.recognizing) {\r\n                    try {\r\n                        this.privIntentRecognizer.recognizing(this.privIntentRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus),\r\n                    simple.DisplayText,\r\n                    simple.Duration,\r\n                    simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                    simple.Language,\r\n                    simple.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                const sendEvent: () => void = (): void => {\r\n                    if (!!this.privIntentRecognizer.recognized) {\r\n                        try {\r\n                            this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\r\n                            /* eslint-disable no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                };\r\n\r\n                // If intent data was sent, the terminal result for this recognizer is an intent being found.\r\n                // If no intent data was sent, the terminal event is speech recognition being successful.\r\n                if (false === this.privIntentDataSent || ResultReason.NoMatch === ev.result.reason) {\r\n                    // Advance the buffers.\r\n                    this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\r\n                    sendEvent();\r\n                } else {\r\n                    // Squirrel away the args, when the response event arrives it will build upon them\r\n                    // and then return\r\n                    this.privPendingIntentArgs = ev;\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"response\":\r\n                // Response from LUIS\r\n                ev = this.privPendingIntentArgs;\r\n                this.privPendingIntentArgs = undefined;\r\n\r\n                if (undefined === ev) {\r\n                    if (\"\" === connectionMessage.textBody) {\r\n                        // This condition happens if there is nothing but silence in the\r\n                        // audio sent to the service.\r\n                        return;\r\n                    }\r\n\r\n                    // Odd... Not sure this can happen\r\n                    ev = new IntentRecognitionEventArgs(new IntentRecognitionResult(), 0, this.privRequestSession.sessionId);\r\n                }\r\n\r\n                const intentResponse: IntentResponse = IntentResponse.fromJSON(connectionMessage.textBody);\r\n\r\n                // If LUIS didn't return anything, send the existing event, else\r\n                // modify it to show the match.\r\n                // See if the intent found is in the list of intents asked for.\r\n\r\n                if (null !== intentResponse && !!intentResponse.topScoringIntent && !!intentResponse.topScoringIntent.intent) {\r\n                    let addedIntent: AddedLmIntent = this.privAddedLmIntents[intentResponse.topScoringIntent.intent];\r\n\r\n                    if (this.privUmbrellaIntent !== undefined) {\r\n                        addedIntent = this.privUmbrellaIntent;\r\n                    }\r\n\r\n                    if (!!addedIntent) {\r\n                        const intentId = addedIntent === undefined || addedIntent.intentName === undefined ? intentResponse.topScoringIntent.intent : addedIntent.intentName;\r\n                        let reason = ev.result.reason;\r\n\r\n                        if (undefined !== intentId) {\r\n                            reason = ResultReason.RecognizedIntent;\r\n                        }\r\n\r\n                        // make sure, properties is set.\r\n                        const properties = (undefined !== ev.result.properties) ?\r\n                            ev.result.properties : new PropertyCollection();\r\n\r\n                        properties.setProperty(PropertyId.LanguageUnderstandingServiceResponse_JsonResult, connectionMessage.textBody);\r\n\r\n                        ev = new IntentRecognitionEventArgs(\r\n                            new IntentRecognitionResult(\r\n                                intentId,\r\n                                ev.result.resultId,\r\n                                reason,\r\n                                ev.result.text,\r\n                                ev.result.duration,\r\n                                ev.result.offset,\r\n                                undefined,\r\n                                undefined,\r\n                                ev.result.errorDetails,\r\n                                ev.result.json,\r\n                                properties),\r\n                            ev.offset,\r\n                            ev.sessionId);\r\n\r\n                    }\r\n                }\r\n                this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\r\n\r\n                if (!!this.privIntentRecognizer.recognized) {\r\n                    try {\r\n                        this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!this.privSuccessCallback) {\r\n                    try {\r\n                        this.privSuccessCallback(ev.result);\r\n                    } catch (e) {\r\n                        if (!!this.privErrorCallback) {\r\n                            this.privErrorCallback(e as string);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    this.privSuccessCallback = undefined;\r\n                    this.privErrorCallback = undefined;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privIntentRecognizer.canceled) {\r\n\r\n            const cancelEvent: IntentRecognitionCanceledEventArgs = new IntentRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privIntentRecognizer.canceled(this.privIntentRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: IntentRecognitionResult = new IntentRecognitionResult(\r\n                undefined, // Intent Id\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // LanguageDetectionConfidence\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// response\r\n\r\nexport interface IIntentResponse {\r\n    query?: string;\r\n    topScoringIntent?: ISingleIntent;\r\n    entities?: IIntentEntity[];\r\n}\r\n\r\nexport interface IIntentEntity {\r\n    entity: string;\r\n    type: string;\r\n    startIndex: number;\r\n    endIndex: number;\r\n    score: number;\r\n}\r\n\r\nexport interface ISingleIntent {\r\n    intent: string;\r\n    score: number;\r\n}\r\n\r\nexport class IntentResponse implements IIntentResponse {\r\n    private privIntentResponse: IIntentResponse;\r\n\r\n    private constructor(json: string) {\r\n        if (json === \"\") {\r\n            this.privIntentResponse = {};\r\n        } else {\r\n            this.privIntentResponse = JSON.parse(json) as IIntentResponse;\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): IntentResponse {\r\n        return new IntentResponse(json);\r\n    }\r\n\r\n    public get query(): string {\r\n        return this.privIntentResponse.query;\r\n    }\r\n\r\n    public get topScoringIntent(): ISingleIntent {\r\n        return this.privIntentResponse.topScoringIntent;\r\n    }\r\n\r\n    public get entities(): IIntentEntity[] {\r\n        return this.privIntentResponse.entities;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\n\r\nexport interface SpeakerResponse {\r\n    scenario: string;\r\n    status: SpeakerStatus;\r\n    verificationResult?: VerificationResult;\r\n    identificationResult?: IdentificationResult;\r\n}\r\n\r\nexport interface SpeakerStatus {\r\n    statusCode: string;\r\n    reason: string;\r\n}\r\n\r\nexport interface VerificationResult {\r\n    recognitionResult: string;\r\n    profileId: string;\r\n    score: number;\r\n}\r\n\r\nexport interface IdentificationResult {\r\n    identifiedProfile: ProfileScore;\r\n    profilesRanking: ProfileScore[];\r\n}\r\n\r\nexport interface ProfileScore {\r\n    profileId: string;\r\n    score: number;\r\n}\r\n\r\nexport interface EnrollmentResponse {\r\n    scenario: string;\r\n    status: SpeakerStatus;\r\n    enrollment: EnrollmentStatus;\r\n    profiles: IProfile[];\r\n}\r\n\r\nexport interface ProfileResponse {\r\n    scenario: string;\r\n    operation: string;\r\n    status: SpeakerStatus;\r\n    profiles: IProfile[];\r\n    profileId?: string;\r\n}\r\n\r\nexport interface ProfilePhraseResponse {\r\n    status: SpeakerStatus;\r\n    passPhraseType: string;\r\n    locale: string;\r\n    phrases: string[];\r\n}\r\n\r\nexport interface IProfile {\r\n    profileId: string;\r\n    profileStatus: string;\r\n    enrollmentStatus: string;\r\n    enrollmentCount: number;\r\n    enrollmentLength: number;\r\n    enrollmentSpeechLength: number;\r\n    remainingEnrollmentCount: number;\r\n    remainingEnrollmentLength: number;\r\n    remainingEnrollmentSpeechLength: number;\r\n    locale: string;\r\n    passPhrase: string;\r\n}\r\n\r\nexport interface EnrollmentStatus {\r\n    profileId: string;\r\n    enrollmentStatus: string;\r\n    enrollmentLength: number;\r\n    enrollmentSpeechLength: number;\r\n    remainingEnrollmentCount: number;\r\n    remainingEnrollmentSpeechLength: number;\r\n    audioLength: number;\r\n    audioSpeechLength: number;\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    IDetachable,\r\n    IEventSource,\r\n    PlatformEvent\r\n} from \"../common/Exports\";\r\nimport {\r\n    ConnectingToServiceEvent,\r\n    ListeningStartedEvent,\r\n    RecognitionStartedEvent,\r\n    RecognitionTriggeredEvent,\r\n    SpeechRecognitionEvent,\r\n} from \"./RecognitionEvents\";\r\nimport { ServiceTelemetryListener } from \"./ServiceTelemetryListener.Internal\";\r\n\r\nexport class RequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privServiceTelemetryListener: ServiceTelemetryListener;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAudioNode: ReplayableAudioNode;\r\n    private privAuthFetchEventId: string;\r\n    private privIsAudioNodeDetached: boolean = false;\r\n    private privIsRecognizing: boolean = false;\r\n    private privIsSpeechEnded: boolean = false;\r\n    private privTurnStartAudioOffset: number = 0;\r\n    private privLastRecoOffset: number = 0;\r\n    private privHypothesisReceived: boolean = false;\r\n    private privBytesSent: number = 0;\r\n    private privRecognitionBytesSent: number = 0;\r\n    private privRecogNumber: number = 0;\r\n    private privSessionId: string;\r\n    private privTurnDeferral: Deferred<void>;\r\n    private privInTurn: boolean = false;\r\n    private privConnectionAttempts: number = 0;\r\n\r\n    public constructor(audioSourceId: string) {\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privAudioNodeId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred<void>();\r\n\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get turnCompletionPromise(): Promise<void> {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n\r\n    public get isSpeechEnded(): boolean {\r\n        return this.privIsSpeechEnded;\r\n    }\r\n\r\n    public get isRecognizing(): boolean {\r\n        return this.privIsRecognizing;\r\n    }\r\n\r\n    public get currentTurnAudioOffset(): number {\r\n        return this.privTurnStartAudioOffset;\r\n    }\r\n\r\n    public get recogNumber(): number {\r\n        return this.privRecogNumber;\r\n    }\r\n\r\n    public get numConnectionAttempts(): number {\r\n        return this.privConnectionAttempts;\r\n    }\r\n\r\n    // The number of bytes sent for the current connection.\r\n    // Counter is reset to 0 each time a connection is established.\r\n    public get bytesSent(): number {\r\n        return this.privBytesSent;\r\n    }\r\n\r\n    // The number of bytes sent for the current recognition.\r\n    // Counter is reset to 0 each time recognition is started.\r\n    public get recognitionBytesSent(): number {\r\n        return this.privRecognitionBytesSent;\r\n    }\r\n\r\n    public listenForServiceTelemetry(eventSource: IEventSource<PlatformEvent>): void {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privDetachables.push(eventSource.attachListener(this.privServiceTelemetryListener));\r\n        }\r\n    }\r\n\r\n    public startNewRecognition(): void {\r\n        this.privRecognitionBytesSent = 0;\r\n        this.privIsSpeechEnded = false;\r\n        this.privIsRecognizing = true;\r\n        this.privTurnStartAudioOffset = 0;\r\n        this.privLastRecoOffset = 0;\r\n        this.privRecogNumber++;\r\n        this.privServiceTelemetryListener = new ServiceTelemetryListener(this.privRequestId, this.privAudioSourceId, this.privAudioNodeId);\r\n        this.onEvent(new RecognitionTriggeredEvent(this.requestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n    }\r\n\r\n    public async onAudioSourceAttachCompleted(audioNode: ReplayableAudioNode, isError: boolean): Promise<void> {\r\n        this.privAudioNode = audioNode;\r\n        this.privIsAudioNodeDetached = false;\r\n\r\n        if (isError) {\r\n            await this.onComplete();\r\n        } else {\r\n            this.onEvent(new ListeningStartedEvent(this.privRequestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n        }\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string, connectionId: string): void {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privSessionId = connectionId;\r\n        this.onEvent(new ConnectingToServiceEvent(this.privRequestId, this.privAuthFetchEventId, this.privSessionId));\r\n    }\r\n\r\n    public async onAuthCompleted(isError: boolean): Promise<void> {\r\n        if (isError) {\r\n            await this.onComplete();\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public async onConnectionEstablishCompleted(statusCode: number, reason?: string): Promise<void> {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new RecognitionStartedEvent(this.requestId, this.privAudioSourceId, this.privAudioNodeId, this.privAuthFetchEventId, this.privSessionId));\r\n            if (!!this.privAudioNode) {\r\n                this.privAudioNode.replay();\r\n            }\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privBytesSent = 0;\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            await this.onComplete();\r\n        }\r\n    }\r\n\r\n    public async onServiceTurnEndResponse(continuousRecognition: boolean): Promise<void> {\r\n        this.privTurnDeferral.resolve();\r\n\r\n        if (!continuousRecognition || this.isSpeechEnded) {\r\n            await this.onComplete();\r\n            this.privInTurn = false;\r\n        } else {\r\n            // Start a new request set.\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privAudioNode.replay();\r\n        }\r\n    }\r\n\r\n    public onSpeechContext(): void {\r\n        this.privRequestId = createNoDashGuid();\r\n    }\r\n\r\n    public onServiceTurnStartResponse(): void {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            this.privTurnDeferral.promise.then().catch((): void => { });\r\n        }\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public onHypothesis(offset: number): void {\r\n        if (!this.privHypothesisReceived) {\r\n            this.privHypothesisReceived = true;\r\n            this.privServiceTelemetryListener.hypothesisReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        }\r\n    }\r\n\r\n    public onPhraseRecognized(offset: number): void {\r\n        this.privServiceTelemetryListener.phraseReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        this.onServiceRecognized(offset);\r\n    }\r\n\r\n    public onServiceRecognized(offset: number): void {\r\n        this.privLastRecoOffset = offset;\r\n        this.privHypothesisReceived = false;\r\n        this.privAudioNode.shrinkBuffers(offset);\r\n        this.privConnectionAttempts = 0;\r\n    }\r\n\r\n    public onAudioSent(bytesSent: number): void {\r\n        this.privBytesSent += bytesSent;\r\n        this.privRecognitionBytesSent += bytesSent;\r\n    }\r\n\r\n    public onRetryConnection(): void {\r\n        this.privConnectionAttempts++;\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n\r\n            if (!!this.privServiceTelemetryListener) {\r\n                this.privServiceTelemetryListener.dispose();\r\n            }\r\n            this.privIsRecognizing = false;\r\n        }\r\n    }\r\n\r\n    public getTelemetry(): string {\r\n        if (this.privServiceTelemetryListener.hasTelemetry) {\r\n            return this.privServiceTelemetryListener.getTelemetry();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public async onStopRecognizing(): Promise<void> {\r\n        await this.onComplete();\r\n    }\r\n\r\n    // Should be called with the audioNode for this session has indicated that it is out of speech.\r\n    public onSpeechEnded(): void {\r\n        this.privIsSpeechEnded = true;\r\n    }\r\n\r\n    protected onEvent(event: SpeechRecognitionEvent): void {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privServiceTelemetryListener.onEvent(event);\r\n        }\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private async onComplete(): Promise<void> {\r\n        if (!!this.privIsRecognizing) {\r\n            this.privIsRecognizing = false;\r\n            await this.detachAudioNode();\r\n        }\r\n    }\r\n\r\n    private async detachAudioNode(): Promise<void> {\r\n        if (!this.privIsAudioNodeDetached) {\r\n            this.privIsAudioNodeDetached = true;\r\n            if (this.privAudioNode) {\r\n                await this.privAudioNode.detach();\r\n            }\r\n        }\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEstablishErrorEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionStartEvent,\r\n    IEventListener,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n} from \"../common/Exports\";\r\nimport { ConnectingToServiceEvent, RecognitionTriggeredEvent } from \"./RecognitionEvents\";\r\n\r\nexport interface ITelemetry {\r\n    Metrics: IMetric[];\r\n    ReceivedMessages: IStringDictionary<string[]>;\r\n}\r\n\r\nexport interface IMetric {\r\n    End?: string;\r\n    Error?: string;\r\n    Id?: string;\r\n    Name?: string;\r\n    Start?: string;\r\n    PhraseLatencyMs?: number[];\r\n    FirstHypothesisLatencyMs?: number[];\r\n}\r\n\r\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\r\n    private privIsDisposed: boolean = false;\r\n\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    private privListeningTriggerMetric: IMetric = null;\r\n    private privMicMetric: IMetric = null;\r\n    private privConnectionEstablishMetric: IMetric = null;\r\n\r\n    private privMicStartTime: string;\r\n\r\n    private privConnectionId: string;\r\n    private privConnectionStartTime: string;\r\n\r\n    private privReceivedMessages: IStringDictionary<string[]>;\r\n    private privPhraseLatencies: number[];\r\n    private privHypothesisLatencies: number[];\r\n\r\n    public constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n\r\n        this.privReceivedMessages = {};\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n    }\r\n\r\n    public phraseReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privPhraseLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public hypothesisReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public onEvent(e: PlatformEvent): void {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (e instanceof RecognitionTriggeredEvent && e.requestId === this.privRequestId) {\r\n            this.privListeningTriggerMetric = {\r\n                End: e.eventTime,\r\n                Name: \"ListeningTrigger\",\r\n                Start: e.eventTime,\r\n            };\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachingEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioSourceErrorEvent && e.audioSourceId === this.privAudioSourceId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeErrorEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeDetachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectingToServiceEvent && e.requestId === this.privRequestId) {\r\n            this.privConnectionId = e.sessionId;\r\n        }\r\n\r\n        if (e instanceof ConnectionStartEvent && e.connectionId === this.privConnectionId) {\r\n            this.privConnectionStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishedEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishErrorEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Error: this.getConnectionError(e.statusCode),\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionMessageReceivedEvent && e.connectionId === this.privConnectionId) {\r\n            if (e.message && e.message.headers && e.message.headers.path) {\r\n                if (!this.privReceivedMessages[e.message.headers.path]) {\r\n                    this.privReceivedMessages[e.message.headers.path] = new Array<string>();\r\n                }\r\n                const maxMessagesToSend = 50;\r\n                if (this.privReceivedMessages[e.message.headers.path].length < maxMessagesToSend) {\r\n                    this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public getTelemetry(): string {\r\n        const metrics = new Array<IMetric>();\r\n\r\n        if (this.privListeningTriggerMetric) {\r\n            metrics.push(this.privListeningTriggerMetric);\r\n        }\r\n\r\n        if (this.privMicMetric) {\r\n            metrics.push(this.privMicMetric);\r\n        }\r\n\r\n        if (this.privConnectionEstablishMetric) {\r\n            metrics.push(this.privConnectionEstablishMetric);\r\n        }\r\n\r\n        if (this.privPhraseLatencies.length > 0) {\r\n            metrics.push({\r\n                PhraseLatencyMs: this.privPhraseLatencies,\r\n            });\r\n        }\r\n\r\n        if (this.privHypothesisLatencies.length > 0) {\r\n            metrics.push({\r\n                FirstHypothesisLatencyMs: this.privHypothesisLatencies,\r\n            });\r\n        }\r\n\r\n        const telemetry: ITelemetry = {\r\n            Metrics: metrics,\r\n            ReceivedMessages: this.privReceivedMessages,\r\n        };\r\n\r\n        const json = JSON.stringify(telemetry);\r\n\r\n        // We dont want to send the same telemetry again. So clean those out.\r\n        this.privReceivedMessages = {};\r\n        this.privListeningTriggerMetric = null;\r\n        this.privMicMetric = null;\r\n        this.privConnectionEstablishMetric = null;\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n        return json;\r\n    }\r\n\r\n    // Determines if there are any telemetry events to send to the service.\r\n    public get hasTelemetry(): boolean {\r\n        return (Object.keys(this.privReceivedMessages).length !== 0 ||\r\n            this.privListeningTriggerMetric !== null ||\r\n            this.privMicMetric !== null ||\r\n            this.privConnectionEstablishMetric !== null ||\r\n            this.privPhraseLatencies.length !== 0 ||\r\n            this.privHypothesisLatencies.length !== 0);\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    private getConnectionError(statusCode: number): string {\r\n        /*\r\n        -- Websocket status codes --\r\n        NormalClosure = 1000,\r\n        EndpointUnavailable = 1001,\r\n        ProtocolError = 1002,\r\n        InvalidMessageType = 1003,\r\n        Empty = 1005,\r\n        InvalidPayloadData = 1007,\r\n        PolicyViolation = 1008,\r\n        MessageTooBig = 1009,\r\n        MandatoryExtension = 1010,\r\n        InternalServerError = 1011\r\n        */\r\n\r\n        switch (statusCode) {\r\n            case 400:\r\n            case 1002:\r\n            case 1003:\r\n            case 1005:\r\n            case 1007:\r\n            case 1008:\r\n            case 1009: return \"BadRequest\";\r\n            case 401: return \"Unauthorized\";\r\n            case 403: return \"Forbidden\";\r\n            case 503:\r\n            case 1001: return \"ServerUnavailable\";\r\n            case 500:\r\n            case 1011: return \"ServerError\";\r\n            case 408:\r\n            case 504: return \"Timeout\";\r\n            default: return \"statuscode:\" + statusCode.toString();\r\n        }\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    DynamicGrammarBuilder,\r\n    IDynamicGrammar,\r\n} from \"./Exports\";\r\n\r\ninterface Context {\r\n    [section: string]: any;\r\n}\r\n\r\ninterface PhraseContext {\r\n    [section: string]: any;\r\n    phraseDetection?: {\r\n        enrichment?: {\r\n            pronunciationAssessment: any;\r\n        };\r\n        speakerDiarization?: {\r\n            mode?: string;\r\n            audioSessionId?: string;\r\n            audioOffsetMs?: number;\r\n            identityProvider?: string;\r\n        };\r\n        mode?: string;\r\n    };\r\n    phraseOutput?: {\r\n        detailed?: {\r\n            options?: string[];\r\n        };\r\n        format?: any;\r\n    };\r\n}\r\n\r\n/**\r\n * Represents the JSON used in the speech.context message sent to the speech service.\r\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\r\n */\r\nexport class SpeechContext {\r\n    private privContext: PhraseContext = {};\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n\r\n    public constructor(dynamicGrammar: DynamicGrammarBuilder) {\r\n        this.privDynamicGrammar = dynamicGrammar;\r\n    }\r\n\r\n    /**\r\n     * Gets a section of the speech.context object.\r\n     * @param sectionName Name of the section to get.\r\n     * @return string or Context JSON serializable object that represents the value.\r\n     */\r\n    public getSection(sectionName: string): string | Context {\r\n        return (this.privContext[sectionName] || {}) as string | Context;\r\n    }\r\n\r\n    /**\r\n     * Adds a section to the speech.context object.\r\n     * @param sectionName Name of the section to add.\r\n     * @param value JSON serializable object that represents the value.\r\n     */\r\n    public setSection(sectionName: string, value: string | Context): void {\r\n        this.privContext[sectionName] = value;\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * This is only used by pronunciation assessment config.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public setPronunciationAssessmentParams(params: string, isSpeakerDiarizationEnabled: boolean = false): void {\r\n        if (this.privContext.phraseDetection === undefined) {\r\n            this.privContext.phraseDetection = {\r\n                enrichment: {\r\n                    pronunciationAssessment: {}\r\n                }\r\n            };\r\n        }\r\n        if (this.privContext.phraseDetection.enrichment === undefined) {\r\n            this.privContext.phraseDetection.enrichment = {\r\n                pronunciationAssessment: {}\r\n            };\r\n        }\r\n        this.privContext.phraseDetection.enrichment.pronunciationAssessment = JSON.parse(params) as Context;\r\n        if (isSpeakerDiarizationEnabled) {\r\n            this.privContext.phraseDetection.mode = \"Conversation\";\r\n        }\r\n        this.setWordLevelTimings();\r\n        this.privContext.phraseOutput.detailed.options.push(\"PronunciationAssessment\");\r\n        if (this.privContext.phraseOutput.detailed.options.indexOf(\"SNR\") === -1) {\r\n            this.privContext.phraseOutput.detailed.options.push(\"SNR\");\r\n        }\r\n    }\r\n\r\n    public setDetailedOutputFormat(): void {\r\n        if (this.privContext.phraseOutput === undefined) {\r\n            this.privContext.phraseOutput = {\r\n                detailed: {\r\n                    options: []\r\n                },\r\n                format: {}\r\n            };\r\n        }\r\n        if (this.privContext.phraseOutput.detailed === undefined) {\r\n            this.privContext.phraseOutput.detailed = {\r\n                options: []\r\n            };\r\n        }\r\n        this.privContext.phraseOutput.format = \"Detailed\";\r\n    }\r\n\r\n    public setWordLevelTimings(): void {\r\n        if (this.privContext.phraseOutput === undefined) {\r\n            this.privContext.phraseOutput = {\r\n                detailed: {\r\n                    options: []\r\n                },\r\n                format: {}\r\n            };\r\n        }\r\n        if (this.privContext.phraseOutput.detailed === undefined) {\r\n            this.privContext.phraseOutput.detailed = {\r\n                options: []\r\n            };\r\n        }\r\n        this.privContext.phraseOutput.format = \"Detailed\";\r\n        if (this.privContext.phraseOutput.detailed.options.indexOf(\"WordTimings\") === -1) {\r\n            this.privContext.phraseOutput.detailed.options.push(\"WordTimings\");\r\n        }\r\n    }\r\n\r\n    public setSpeakerDiarizationAudioOffsetMs(audioOffsetMs: number): void {\r\n        this.privContext.phraseDetection.speakerDiarization.audioOffsetMs = audioOffsetMs;\r\n    }\r\n\r\n    public toJSON(): string {\r\n\r\n        const dgi: IDynamicGrammar = this.privDynamicGrammar.generateGrammarObject();\r\n        this.setSection(\"dgi\", dgi);\r\n\r\n        const ret: string = JSON.stringify(this.privContext);\r\n        return ret;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IDynamicGrammar,\r\n    IDynamicGrammarGeneric,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Responsible for building the object to be sent to the speech service to support dynamic grammars.\r\n * @class DynamicGrammarBuilder\r\n */\r\nexport class DynamicGrammarBuilder {\r\n\r\n    private privPhrases: string[];\r\n    private privGrammars: string[];\r\n\r\n    // Adds one more reference phrases to the dynamic grammar to send.\r\n    // All added phrases are generic phrases.\r\n    public addPhrase(phrase: string | string[]): void {\r\n        if (!this.privPhrases) {\r\n            this.privPhrases = [];\r\n        }\r\n\r\n        if (phrase instanceof Array) {\r\n            this.privPhrases = this.privPhrases.concat(phrase);\r\n        } else {\r\n            this.privPhrases.push(phrase);\r\n        }\r\n    }\r\n\r\n    // Clears all phrases stored in the current object.\r\n    public clearPhrases(): void {\r\n        this.privPhrases = undefined;\r\n    }\r\n\r\n    // Adds one or more reference grammars to the current grammar.\r\n    public addReferenceGrammar(grammar: string | string[]): void {\r\n        if (!this.privGrammars) {\r\n            this.privGrammars = [];\r\n        }\r\n\r\n        if (grammar instanceof Array) {\r\n            this.privGrammars = this.privGrammars.concat(grammar);\r\n        } else {\r\n            this.privGrammars.push(grammar);\r\n        }\r\n    }\r\n\r\n    // clears all grammars stored on the recognizer.\r\n    public clearGrammars(): void {\r\n        this.privGrammars = undefined;\r\n    }\r\n\r\n    // Generates an object that represents the dynamic grammar used by the Speech Service.\r\n    // This is done by building an object with the correct layout based on the phrases and reference grammars added to this instance\r\n    // of a DynamicGrammarBuilder\r\n    public generateGrammarObject(): IDynamicGrammar {\r\n        if (this.privGrammars === undefined && this.privPhrases === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        const retObj: IDynamicGrammar = {};\r\n        retObj.ReferenceGrammars = this.privGrammars;\r\n\r\n        if (undefined !== this.privPhrases && 0 !== this.privPhrases.length) {\r\n            const retPhrases: IDynamicGrammarGeneric[] = [];\r\n\r\n            this.privPhrases.forEach((value: string): void => {\r\n                retPhrases.push({\r\n                    Text: value,\r\n                });\r\n            });\r\n\r\n            retObj.Groups = [{ Type: \"Generic\", Items: retPhrases }];\r\n        }\r\n\r\n        return retObj;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// Interfaces in this file represent the various nodes in the JSON that the speech service accepts\r\n// for dynamic grammars.\r\n\r\n/**\r\n * Top level grammar node\r\n */\r\nexport interface IDynamicGrammar {\r\n    ReferenceGrammars?: string[];\r\n    Groups?: IDynamicGrammarGroup[];\r\n}\r\n\r\n/**\r\n * Group of Dynamic Grammar items of a common type.\r\n */\r\nexport interface IDynamicGrammarGroup {\r\n    Type: string;\r\n    Name?: string;\r\n    SubstringMatch?: string; // None, LeftRooted, PartialName\r\n    Items: IDynamicGrammarPeople[] | IDynamicGrammarGeneric[];\r\n}\r\n\r\nexport interface IDynamicGrammarPeople {\r\n    Name: string;\r\n    First?: string;\r\n    Middle?: string;\r\n    Last?: string;\r\n    Synonyms?: string[];\r\n    Weight?: number;\r\n}\r\n\r\n/**\r\n * Generic phrase based dynamic grammars\r\n */\r\nexport interface IDynamicGrammarGeneric {\r\n    Text: string;\r\n    Synonyms?: string[];\r\n    Weight?: number;\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ReplayableAudioNode\r\n} from \"../common.browser/Exports\";\r\nimport { SendingAgentContextMessageEvent } from \"../common/DialogEvents\";\r\nimport {\r\n    BackgroundEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    createGuid,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    DialogEvent,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n    ServiceEvent,\r\n} from \"../common/Exports\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport {\r\n    ActivityReceivedEventArgs,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    DialogServiceConfig,\r\n    DialogServiceConnector,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    TurnStatusReceivedEventArgs,\r\n} from \"../sdk/Exports\";\r\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechDetected,\r\n    SpeechHypothesis,\r\n    SpeechKeyword,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognitionMode, RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { ActivityPayloadResponse } from \"./ServiceMessages/ActivityResponsePayload\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport class DialogServiceAdapter extends ServiceRecognizerBase {\r\n    private privDialogServiceConnector: DialogServiceConnector;\r\n\r\n    private privDialogAudioSource: IAudioSource;\r\n\r\n    private privConnectionLoop: Promise<void>;\r\n    private terminateMessageLoop: boolean;\r\n    private agentConfigSent: boolean;\r\n    private privLastResult: SpeechRecognitionResult;\r\n    private privEvents: EventSource<DialogEvent>;\r\n\r\n    // Turns are of two kinds:\r\n    // 1: SR turns, end when the SR result is returned and then turn end.\r\n    // 2: Service turns where an activity is sent by the service along with the audio.\r\n    private privTurnStateManager: DialogServiceTurnStateManager;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        dialogServiceConnector: DialogServiceConnector) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, dialogServiceConnector);\r\n\r\n        this.privEvents = new EventSource<DialogEvent>();\r\n        this.privDialogServiceConnector = dialogServiceConnector;\r\n        this.receiveMessageOverride = (): Promise<void> => this.receiveDialogMessageOverride();\r\n        this.privTurnStateManager = new DialogServiceTurnStateManager();\r\n        this.recognizeOverride =\r\n            (recoMode: RecognitionMode, successCallback: (e: SpeechRecognitionResult) => void, errorCallback: (e: string) => void): Promise<void> =>\r\n            this.listenOnce(recoMode, successCallback, errorCallback);\r\n        this.postConnectImplOverride = (connection: Promise<IConnection>): Promise<IConnection> => this.dialogConnectImpl(connection);\r\n        this.configConnectionOverride = (connection: IConnection): Promise<IConnection> => this.configConnection(connection);\r\n        this.disconnectOverride = (): Promise<void> => this.privDisconnect();\r\n        this.privDialogAudioSource = audioSource;\r\n\r\n        this.agentConfigSent = false;\r\n        this.privLastResult = null;\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                this.terminateMessageLoop = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async sendMessage(message: string): Promise<void> {\r\n        const interactionGuid: string = createGuid();\r\n        const requestId: string = createNoDashGuid();\r\n\r\n        const agentMessage: any = {\r\n            context: {\r\n                interactionId: interactionGuid\r\n            },\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n            messagePayload: JSON.parse(message),\r\n            version: 0.5\r\n        };\r\n\r\n        const agentMessageJson = JSON.stringify(agentMessage);\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"agent\",\r\n            requestId,\r\n            \"application/json\",\r\n            agentMessageJson));\r\n\r\n    }\r\n\r\n    protected async privDisconnect(): Promise<void> {\r\n        await this.cancelRecognition(this.privRequestSession.sessionId,\r\n            this.privRequestSession.requestId,\r\n            CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        this.terminateMessageLoop = true;\r\n        this.agentConfigSent = false;\r\n        return;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        let result: SpeechRecognitionResult;\r\n        let processed: boolean;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.phrase\":\r\n                const speechPhrase: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + speechPhrase.Offset + speechPhrase.Duration);\r\n\r\n                if (speechPhrase.RecognitionStatus !== RecognitionStatus.TooManyRequests && speechPhrase.RecognitionStatus !== RecognitionStatus.Error) {\r\n                    const args: SpeechRecognitionEventArgs = this.fireEventForResult(speechPhrase, resultProps);\r\n                    this.privLastResult = args.result;\r\n\r\n                    if (!!this.privDialogServiceConnector.recognized) {\r\n                        try {\r\n                            this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, args);\r\n                            /* eslint-disable no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.hypothesis\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privDialogServiceConnector.recognizing) {\r\n                    try {\r\n                        this.privDialogServiceConnector.recognizing(this.privDialogServiceConnector, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.keyword\":\r\n                const keyword: SpeechKeyword = SpeechKeyword.fromJSON(connectionMessage.textBody);\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    keyword.Status === \"Accepted\" ? ResultReason.RecognizedKeyword : ResultReason.NoMatch,\r\n                    keyword.Text,\r\n                    keyword.Duration,\r\n                    keyword.Offset,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                if (keyword.Status !== \"Accepted\") {\r\n                    this.privLastResult = result;\r\n                }\r\n\r\n                const event = new SpeechRecognitionEventArgs(result, result.duration, result.resultId);\r\n\r\n                if (!!this.privDialogServiceConnector.recognized) {\r\n                    try {\r\n                        this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, event);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"audio\":\r\n                {\r\n                    const audioRequestId = connectionMessage.requestId.toUpperCase();\r\n                    const turn = this.privTurnStateManager.GetTurn(audioRequestId);\r\n                    try {\r\n                        // Empty binary message signals end of stream.\r\n                        if (!connectionMessage.binaryBody) {\r\n                            turn.endAudioStream();\r\n                        } else {\r\n                            turn.audioStream.write(connectionMessage.binaryBody);\r\n                        }\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            case \"response\":\r\n                {\r\n                    this.handleResponseMessage(connectionMessage);\r\n\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        this.terminateMessageLoop = true;\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n        }\r\n\r\n        if (!!this.privDialogServiceConnector.canceled) {\r\n            const properties: PropertyCollection = new PropertyCollection();\r\n            properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n\r\n            try {\r\n                this.privDialogServiceConnector.canceled(this.privDialogServiceConnector, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n\r\n            if (!!this.privSuccessCallback) {\r\n                const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                    undefined, // ResultId\r\n                    ResultReason.Canceled,\r\n                    undefined, // Text\r\n                    undefined, // Duration\r\n                    undefined, // Offset\r\n                    undefined, // Language\r\n                    undefined, // Language Detection Confidence\r\n                    undefined, // Speaker Id\r\n                    error,\r\n                    undefined, // Json\r\n                    properties);\r\n                try {\r\n                    this.privSuccessCallback(result);\r\n                    this.privSuccessCallback = undefined;\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async listenOnce(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallback: (e: string) => void\r\n    ): Promise<void> {\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallback;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privDialogAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages();\r\n\r\n        const node: IAudioStreamNode = await this.privDialogAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privDialogAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privDialogAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, async (error: string): Promise<void> => {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n    }\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    private dialogConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\r\n        this.privConnectionLoop = this.startMessageLoop();\r\n        return connection;\r\n    }\r\n\r\n    private receiveDialogMessageOverride(): Promise<void> {\r\n\r\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\r\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\r\n\r\n        const loop = async (): Promise<void> => {\r\n            try {\r\n                const isDisposed: boolean = this.isDisposed();\r\n                const terminateMessageLoop = (!this.isDisposed() && this.terminateMessageLoop);\r\n                if (isDisposed || terminateMessageLoop) {\r\n                    // We're done.\r\n                    communicationCustodian.resolve(undefined);\r\n                    return;\r\n                }\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const message: ConnectionMessage = await connection.read();\r\n\r\n                if (!message) {\r\n                    return loop();\r\n                }\r\n\r\n                const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        {\r\n                            const turnRequestId = connectionMessage.requestId.toUpperCase();\r\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\r\n\r\n                            // turn started by the service\r\n                            if (turnRequestId !== audioSessionReqId) {\r\n                                this.privTurnStateManager.StartTurn(turnRequestId);\r\n                            } else {\r\n                                this.privRequestSession.onServiceTurnStartResponse();\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n\r\n                        let json: string;\r\n\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n\r\n                        this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\r\n\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        {\r\n                            const turnEndRequestId = connectionMessage.requestId.toUpperCase();\r\n\r\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\r\n\r\n                            // turn started by the service\r\n                            if (turnEndRequestId !== audioSessionReqId) {\r\n                                this.privTurnStateManager.CompleteTurn(turnEndRequestId);\r\n                            } else {\r\n                                // Audio session turn\r\n\r\n                                const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                                await this.privRequestSession.onServiceTurnEndResponse(false);\r\n\r\n                                if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                                    if (!!this.privRecognizer.sessionStopped) {\r\n                                        this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                                    }\r\n                                }\r\n\r\n                                // report result to promise.\r\n                                if (!!this.privSuccessCallback && this.privLastResult) {\r\n                                    try {\r\n                                        this.privSuccessCallback(this.privLastResult);\r\n                                        this.privLastResult = null;\r\n                                    } catch (e) {\r\n                                        if (!!this.privErrorCallback) {\r\n                                            this.privErrorCallback(e as string);\r\n                                        }\r\n                                    }\r\n                                    // Only invoke the call back once.\r\n                                    // and if it's successful don't invoke the\r\n                                    // error after that.\r\n                                    this.privSuccessCallback = undefined;\r\n                                    this.privErrorCallback = undefined;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        try {\r\n                            const processed = await this.processTypeSpecificMessages(connectionMessage);\r\n                            if (!processed) {\r\n                                if (!!this.serviceEvents) {\r\n                                    this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                                }\r\n                            }\r\n                        } catch (e) {\r\n                            //\r\n                        }\r\n                }\r\n                const ret: Promise<void> = loop();\r\n\r\n                return ret;\r\n            } catch (error) {\r\n                this.terminateMessageLoop = true;\r\n                communicationCustodian.resolve();\r\n            }\r\n        };\r\n\r\n        loop().catch((reason: string): void => {\r\n            Events.instance.onEvent(new BackgroundEvent(reason));\r\n        });\r\n\r\n        return communicationCustodian.promise;\r\n    }\r\n\r\n    private async startMessageLoop(): Promise<void> {\r\n\r\n        this.terminateMessageLoop = false;\r\n\r\n        try {\r\n            await this.receiveDialogMessageOverride();\r\n        } catch (error) {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error as string);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configConnection(connection: IConnection): Promise<IConnection> {\r\n        if (this.terminateMessageLoop) {\r\n            this.terminateMessageLoop = false;\r\n            return Promise.reject(\"Connection to service terminated.\");\r\n        }\r\n\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendAgentConfig(connection);\r\n        return connection;\r\n    }\r\n\r\n    private async sendPreAudioMessages(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.addKeywordContextData();\r\n        await this.sendSpeechContext(connection, true);\r\n        await this.sendAgentContext(connection);\r\n        await this.sendWaveHeader(connection);\r\n    }\r\n\r\n    private sendAgentConfig(connection: IConnection): Promise<void> {\r\n        if (this.agentConfig && !this.agentConfigSent) {\r\n\r\n            if (this.privRecognizerConfig\r\n                .parameters\r\n                .getProperty(PropertyId.Conversation_DialogType) === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                const config = this.agentConfig.get();\r\n                config.botInfo.commandsCulture = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-us\");\r\n                this.agentConfig.set(config);\r\n            }\r\n            this.onEvent(new SendingAgentContextMessageEvent(this.agentConfig));\r\n\r\n            const agentConfigJson = this.agentConfig.toJsonString();\r\n\r\n            // guard against sending this multiple times on one connection\r\n            this.agentConfigSent = true;\r\n\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"agent.config\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                agentConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    private sendAgentContext(connection: IConnection): Promise<void> {\r\n        const guid: string = createGuid();\r\n\r\n        const speechActivityTemplate = this.privDialogServiceConnector.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n\r\n        const agentContext: any = {\r\n            channelData: \"\",\r\n            context: {\r\n                interactionId: guid\r\n            },\r\n            messagePayload: typeof speechActivityTemplate === undefined ? undefined : speechActivityTemplate,\r\n            version: 0.5\r\n        };\r\n\r\n        const agentContextJson = JSON.stringify(agentContext);\r\n\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speech.agent.context\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            agentContextJson));\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: SimpleSpeechPhrase, properties: PropertyCollection): SpeechRecognitionEventArgs {\r\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(serviceResult.RecognitionStatus);\r\n\r\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new SpeechRecognitionResult(\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.DisplayText,\r\n            serviceResult.Duration,\r\n            offset,\r\n            serviceResult.Language,\r\n            serviceResult.LanguageDetectionConfidence,\r\n            undefined,\r\n            undefined,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new SpeechRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private handleResponseMessage(responseMessage: SpeechConnectionMessage): void {\r\n        // \"response\" messages can contain either \"message\" (activity) or \"MessageStatus\" data. Fire the appropriate\r\n        // event according to the message type that's specified.\r\n        const responsePayload: { messageType: string } = JSON.parse(responseMessage.textBody) as { messageType: string };\r\n        switch (responsePayload.messageType.toLowerCase()) {\r\n            case \"message\":\r\n                const responseRequestId = responseMessage.requestId.toUpperCase();\r\n                const activityPayload: ActivityPayloadResponse = ActivityPayloadResponse.fromJSON(responseMessage.textBody);\r\n                const turn = this.privTurnStateManager.GetTurn(responseRequestId);\r\n\r\n                // update the conversation Id\r\n                if (activityPayload.conversationId) {\r\n                    const updateAgentConfig = this.agentConfig.get();\r\n                    updateAgentConfig.botInfo.conversationId = activityPayload.conversationId;\r\n                    this.agentConfig.set(updateAgentConfig);\r\n                }\r\n\r\n                const pullAudioOutputStream: PullAudioOutputStreamImpl = turn.processActivityPayload(\r\n                    activityPayload,\r\n                    AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(this.privDialogServiceConnector.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)));\r\n                const activity = new ActivityReceivedEventArgs(activityPayload.messagePayload, pullAudioOutputStream);\r\n                if (!!this.privDialogServiceConnector.activityReceived) {\r\n                    try {\r\n                        this.privDialogServiceConnector.activityReceived(this.privDialogServiceConnector, activity);\r\n                        /* eslint-disable-next-line no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case \"messagestatus\":\r\n                if (!!this.privDialogServiceConnector.turnStatusReceived) {\r\n                    try {\r\n                        this.privDialogServiceConnector.turnStatusReceived(\r\n                            this.privDialogServiceConnector,\r\n                            new TurnStatusReceivedEventArgs(responseMessage.textBody));\r\n                        /* eslint-disable-next-line no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                break;\r\n\r\n            default:\r\n                Events.instance.onEvent(\r\n                    new BackgroundEvent(`Unexpected response of type ${responsePayload.messageType}. Ignoring.`));\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onEvent(event: DialogEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private addKeywordContextData(): void {\r\n        const keywordPropertyValue: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-KeywordsToDetect\");\r\n        if (keywordPropertyValue === undefined) {\r\n            return;\r\n        }\r\n\r\n        const keywordOffsetPropertyValue: string = this.privRecognizerConfig.parameters\r\n            .getProperty(\"SPEECH-KeywordsToDetect-Offsets\");\r\n        const keywordDurationPropertyValue: string = this.privRecognizerConfig.parameters\r\n            .getProperty(\"SPEECH-KeywordsToDetect-Durations\");\r\n\r\n        const keywords = keywordPropertyValue.split(\";\");\r\n        const keywordOffsets = keywordOffsetPropertyValue === undefined ? [] : keywordOffsetPropertyValue.split(\";\");\r\n        const keywordDurations = keywordDurationPropertyValue === undefined ? [] : keywordDurationPropertyValue.split(\";\");\r\n\r\n        const keywordDefinitionArray = [];\r\n        for (let i = 0; i < keywords.length; i++) {\r\n            const definition: { [section: string]: any } = {};\r\n            definition.text = keywords[i];\r\n            if (i < keywordOffsets.length) {\r\n                definition.offset = Number(keywordOffsets[i]);\r\n            }\r\n            if (i < keywordDurations.length) {\r\n                definition.duration = Number(keywordDurations[i]);\r\n            }\r\n            keywordDefinitionArray.push(definition);\r\n        }\r\n\r\n        this.speechContext.setSection(\"invocationSource\", \"VoiceActivationWithKeyword\");\r\n        this.speechContext.setSection(\"keywordDetection\", [{\r\n            clientDetectedKeywords: keywordDefinitionArray,\r\n            onReject: { action: \"EndOfTurn\" },\r\n            type: \"startTrigger\"\r\n        }]);\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"../common/Error\";\r\nimport { DialogServiceTurnState } from \"./DialogServiceTurnState\";\r\n\r\nexport class DialogServiceTurnStateManager {\r\n    private privTurnMap: Map<string, DialogServiceTurnState>;\r\n\r\n    public constructor() {\r\n        this.privTurnMap = new Map<string, DialogServiceTurnState>();\r\n        return;\r\n    }\r\n\r\n    public StartTurn(id: string): DialogServiceTurnState {\r\n        if (this.privTurnMap.has(id)) {\r\n            throw new InvalidOperationError(\"Service error: There is already a turn with id:\" + id);\r\n        }\r\n        const turnState: DialogServiceTurnState = new DialogServiceTurnState(this, id);\r\n        this.privTurnMap.set(id, turnState);\r\n        return this.privTurnMap.get(id);\r\n    }\r\n\r\n    public GetTurn(id: string): DialogServiceTurnState {\r\n        return this.privTurnMap.get(id);\r\n    }\r\n\r\n    public CompleteTurn(id: string): DialogServiceTurnState {\r\n        if (!this.privTurnMap.has(id)) {\r\n            throw new InvalidOperationError(\"Service error: Received turn end for an unknown turn id:\" + id);\r\n        }\r\n        const turnState = this.privTurnMap.get(id);\r\n        turnState.complete();\r\n        this.privTurnMap.delete(id);\r\n        return turnState;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport { AudioOutputStream, PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream\";\r\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager\";\r\nimport { ActivityPayloadResponse, MessageDataStreamType } from \"./ServiceMessages/ActivityResponsePayload\";\r\n\r\nexport class DialogServiceTurnState {\r\n    private privRequestId: string;\r\n    private privIsCompleted: boolean;\r\n    private privAudioStream: PullAudioOutputStreamImpl;\r\n    private privTimeoutToken: any;\r\n    private privTurnManager: DialogServiceTurnStateManager;\r\n\r\n    public constructor(manager: DialogServiceTurnStateManager, requestId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privIsCompleted = false;\r\n        this.privAudioStream = null;\r\n        this.privTurnManager = manager;\r\n        this.resetTurnEndTimeout();\r\n    }\r\n\r\n    public get audioStream(): PullAudioOutputStreamImpl {\r\n        // Called when is needed to stream.\r\n        this.resetTurnEndTimeout();\r\n        return this.privAudioStream;\r\n    }\r\n\r\n    public processActivityPayload(payload: ActivityPayloadResponse, audioFormat?: AudioOutputFormatImpl): PullAudioOutputStreamImpl {\r\n        if (payload.messageDataStreamType === MessageDataStreamType.TextToSpeechAudio) {\r\n            this.privAudioStream = AudioOutputStream.createPullStream() as PullAudioOutputStreamImpl;\r\n            this.privAudioStream.format = (audioFormat !== undefined) ? audioFormat : AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        return this.privAudioStream;\r\n    }\r\n\r\n    public endAudioStream(): void {\r\n        if (this.privAudioStream !== null && !this.privAudioStream.isClosed) {\r\n            this.privAudioStream.close();\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearTimeout(this.privTimeoutToken);\r\n        }\r\n        this.endAudioStream();\r\n    }\r\n\r\n    private resetTurnEndTimeout(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearTimeout(this.privTimeoutToken);\r\n        }\r\n        this.privTimeoutToken = setTimeout((): void => {\r\n            this.privTurnManager.CompleteTurn(this.privRequestId);\r\n            return;\r\n        }, 2000);\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// response\r\n\r\nexport interface IActivityPayloadResponse {\r\n    conversationId: string;\r\n    messageDataStreamType: number;\r\n    messagePayload: string | object;\r\n    version: number;\r\n}\r\n\r\nexport class ActivityPayloadResponse implements IActivityPayloadResponse {\r\n    private privActivityResponse: IActivityPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privActivityResponse = JSON.parse(json) as IActivityPayloadResponse;\r\n    }\r\n\r\n    public static fromJSON(json: string): ActivityPayloadResponse {\r\n        return new ActivityPayloadResponse(json);\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privActivityResponse.conversationId;\r\n    }\r\n\r\n    public get messageDataStreamType(): number {\r\n        return this.privActivityResponse.messageDataStreamType;\r\n    }\r\n\r\n    public get messagePayload(): string | object {\r\n        return this.privActivityResponse.messagePayload;\r\n    }\r\n\r\n    public get version(): number {\r\n        return this.privActivityResponse.version;\r\n    }\r\n}\r\n\r\nexport enum MessageDataStreamType {\r\n    None = 0,\r\n    TextToSpeechAudio = 1,\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Represents the JSON used in the agent.config message sent to the speech service.\r\n */\r\nexport class AgentConfig {\r\n    private iPrivConfig: IAgentConfig;\r\n\r\n    public toJsonString(): string {\r\n        return JSON.stringify(this.iPrivConfig);\r\n    }\r\n\r\n    public get(): IAgentConfig {\r\n        return this.iPrivConfig;\r\n    }\r\n\r\n    /**\r\n     * Setter for the agent.config object.\r\n     * @param value a JSON serializable object.\r\n     */\r\n    public set(value: IAgentConfig): void {\r\n        this.iPrivConfig = value;\r\n    }\r\n}\r\n\r\nexport interface IAgentConfig {\r\n    botInfo: {\r\n        commType: string;\r\n        connectionId: string;\r\n        conversationId: string;\r\n        fromId: string;\r\n        commandsCulture: string;\r\n        ttsAudioFormat: string;\r\n    };\r\n    version: number;\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport { ConversationManager } from \"./ConversationManager\";\r\nexport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\r\nexport { ConversationRecognizerFactory } from \"./ConversationTranslatorRecognizer\";\r\nexport { TranscriberRecognizer } from \"./TranscriberRecognizer\";\r\nexport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs } from \"./ConversationTranslatorEventArgs\";\r\nexport {\r\n    ConversationRecognizer,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants} from \"./ConversationTranslatorInterfaces\";\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRequestOptions,\r\n    IRestParams,\r\n    IRestResponse,\r\n    RestMessageAdapter,\r\n    RestRequestType\r\n} from \"../../common.browser/Exports\";\r\nimport { IErrorMessages, IStringDictionary } from \"../../common/Exports\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { PropertyCollection, PropertyId } from \"../../sdk/Exports\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\r\nimport { IConversationResponseError, IInternalConversation } from \"./ConversationTranslatorInterfaces\";\r\n\r\nexport class ConversationManager {\r\n\r\n    private privRequestParams: IRestParams;\r\n    private privErrors: IErrorMessages;\r\n    private privHost: string;\r\n    private privApiVersion: string;\r\n    private privRestPath: string;\r\n    private privRestAdapter: RestMessageAdapter;\r\n\r\n    public constructor() {\r\n        //\r\n        this.privRequestParams = ConversationConnectionConfig.configParams;\r\n        this.privErrors = ConversationConnectionConfig.restErrors;\r\n        this.privHost = ConversationConnectionConfig.host;\r\n        this.privApiVersion = ConversationConnectionConfig.apiVersion;\r\n        this.privRestPath = ConversationConnectionConfig.restPath;\r\n        this.privRestAdapter = new RestMessageAdapter({});\r\n    }\r\n\r\n    /**\r\n     * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\r\n     * @param args\r\n     * @param conversationCode\r\n     * @param callback\r\n     * @param errorCallback\r\n     */\r\n    public createOrJoin(args: PropertyCollection, conversationCode: string, cb?: (c: any) => void, err?: (e: string) => void): void {\r\n\r\n        try {\r\n\r\n            Contracts.throwIfNullOrUndefined(args, \"args\");\r\n\r\n            const languageCode: string = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig.defaultLanguageCode);\r\n            const nickname: string = args.getProperty(PropertyId.ConversationTranslator_Name, \"conversation_host\");\r\n            const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n            const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n            const subscriptionKey: string = args.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n            const subscriptionRegion: string = args.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const authToken: string = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n\r\n            Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\r\n            Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n            Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\r\n\r\n            const queryParams: IStringDictionary<string> = {};\r\n            queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n            queryParams[this.privRequestParams.languageCode] = languageCode;\r\n            queryParams[this.privRequestParams.nickname] = nickname;\r\n\r\n            const headers: IStringDictionary<string> = {};\r\n            if (correlationId) {\r\n                headers[this.privRequestParams.correlationId] = correlationId;\r\n            }\r\n            headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig.clientAppId;\r\n\r\n            if (conversationCode !== undefined) {\r\n                queryParams[this.privRequestParams.roomId] = conversationCode;\r\n            } else {\r\n                Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\r\n                headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\r\n                if (subscriptionKey) {\r\n                    headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\r\n                } else if (authToken) {\r\n                    headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;\r\n                } else {\r\n                    Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\r\n                }\r\n            }\r\n\r\n            const config: IRequestOptions = {};\r\n            config.headers = headers;\r\n            this.privRestAdapter.options = config;\r\n\r\n            const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n            // TODO: support a proxy and certificate validation\r\n            this.privRestAdapter.request(RestRequestType.Post, endpoint, queryParams, null).then((response: IRestResponse): void => {\r\n\r\n                const requestId: string = RestMessageAdapter.extractHeaderValue(this.privRequestParams.requestId, response.headers);\r\n\r\n                if (!response.ok) {\r\n                    if (!!err) {\r\n                        // get the error\r\n                        let errorMessage: string = this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\r\n                        let errMessageRaw: IConversationResponseError;\r\n                        try {\r\n                            errMessageRaw = JSON.parse(response.data) as IConversationResponseError;\r\n                            errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;\r\n                        } catch (e) {\r\n                            errorMessage += ` [${response.data}]`;\r\n                        }\r\n                        if (requestId) {\r\n                            errorMessage += ` ${requestId}`;\r\n                        }\r\n\r\n                        err(errorMessage);\r\n                    }\r\n                    return;\r\n                }\r\n                const conversation: IInternalConversation = JSON.parse(response.data) as IInternalConversation;\r\n                if (conversation) {\r\n                    conversation.requestId = requestId;\r\n                }\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(conversation);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e as string);\r\n                        }\r\n                    }\r\n                    cb = undefined;\r\n                }\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            }).catch( (): void => { });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\r\n     * @param args\r\n     * @param sessionToken\r\n     * @param callback\r\n     */\r\n    public leave(args: PropertyCollection, sessionToken: string): Promise<void> {\r\n        return new Promise<void>((resolve: () => void, reject: (reason: string) => void): void => {\r\n            try {\r\n\r\n                Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n                Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\r\n\r\n                const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n                const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n\r\n                const queryParams: IStringDictionary<string> = {};\r\n                queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n                queryParams[this.privRequestParams.sessionToken] = sessionToken;\r\n\r\n                const headers: IStringDictionary<string> = {};\r\n                if (correlationId) {\r\n                    headers[this.privRequestParams.correlationId] = correlationId;\r\n                }\r\n\r\n                const config: IRequestOptions = {};\r\n                config.headers = headers;\r\n                this.privRestAdapter.options = config;\r\n\r\n                const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n                // TODO: support a proxy and certificate validation\r\n                this.privRestAdapter.request(RestRequestType.Delete, endpoint, queryParams, null).then((response: IRestResponse): void => {\r\n\r\n                    if (!response.ok) {\r\n                        // ignore errors on delete\r\n                    }\r\n\r\n                    resolve();\r\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                }).catch( (): void => {});\r\n\r\n            } catch (error) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    reject(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    reject(error as string);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n",null,"\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    RestConfigBase\r\n} from \"../../common.browser/RestConfigBase\";\r\n\r\nexport class ConversationConnectionConfig extends RestConfigBase {\r\n\r\n    private static readonly privHost: string = \"dev.microsofttranslator.com\";\r\n    private static readonly privRestPath: string = \"/capito/room\";\r\n    private static readonly privApiVersion: string = \"2.0\";\r\n    private static readonly privDefaultLanguageCode: string = \"en-US\";\r\n    private static readonly privClientAppId: string = \"FC539C22-1767-4F1F-84BC-B4D811114F15\";\r\n    private static readonly privWebSocketPath: string = \"/capito/translate\";\r\n    private static readonly privTranscriptionEventKeys: string[] = [\"iCalUid\", \"callId\", \"organizer\", \"FLAC\", \"MTUri\", \"DifferentiateGuestSpeakers\", \"audiorecording\", \"Threadid\", \"OrganizerMri\", \"OrganizerTenantId\", \"UserToken\"];\r\n\r\n    public static get host(): string {\r\n        return ConversationConnectionConfig.privHost;\r\n    }\r\n\r\n    public static get apiVersion(): string {\r\n        return ConversationConnectionConfig.privApiVersion;\r\n    }\r\n\r\n    public static get clientAppId(): string {\r\n        return ConversationConnectionConfig.privClientAppId;\r\n    }\r\n\r\n    public static get defaultLanguageCode(): string {\r\n        return ConversationConnectionConfig.privDefaultLanguageCode;\r\n    }\r\n\r\n    public static get restPath(): string {\r\n        return ConversationConnectionConfig.privRestPath;\r\n    }\r\n\r\n    public static get webSocketPath(): string {\r\n        return ConversationConnectionConfig.privWebSocketPath;\r\n    }\r\n\r\n    public static get transcriptionEventKeys(): string[] {\r\n        return ConversationConnectionConfig.privTranscriptionEventKeys;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IErrorMessages } from \"../common/Exports\";\r\n/**\r\n * HTTP request helper\r\n */\r\nexport interface IRequestOptions {\r\n    headers?: {[key: string]: string};\r\n    ignoreCache?: boolean;\r\n    timeout?: number;\r\n}\r\n\r\nexport interface IRestParams {\r\n    apiVersion: string;\r\n    authorization: string;\r\n    clientAppId: string;\r\n    contentTypeKey: string;\r\n    correlationId: string;\r\n    languageCode: string;\r\n    nickname: string;\r\n    profanity: string;\r\n    requestId: string;\r\n    roomId: string;\r\n    sessionToken: string;\r\n    subscriptionKey: string;\r\n    subscriptionRegion: string;\r\n    token: string;\r\n}\r\n\r\nexport class RestConfigBase {\r\n\r\n    public static get requestOptions(): IRequestOptions {\r\n        return RestConfigBase.privDefaultRequestOptions;\r\n    }\r\n\r\n    public static get configParams(): IRestParams {\r\n        return RestConfigBase.privDefaultParams;\r\n    }\r\n\r\n    public static get restErrors(): IErrorMessages {\r\n        return RestConfigBase.privRestErrors;\r\n    }\r\n\r\n    private static readonly privDefaultRequestOptions: IRequestOptions = {\r\n        headers: {\r\n            Accept: \"application/json\",\r\n        },\r\n        ignoreCache: false,\r\n        timeout: 10000,\r\n    };\r\n\r\n    private static readonly privRestErrors: IErrorMessages = {\r\n        authInvalidSubscriptionKey: \"You must specify either an authentication token to use, or a Cognitive Speech subscription key.\",\r\n        authInvalidSubscriptionRegion: \"You must specify the Cognitive Speech region to use.\",\r\n        invalidArgs: \"Required input not found: {arg}.\",\r\n        invalidCreateJoinConversationResponse: \"Creating/Joining conversation failed with HTTP {status}.\",\r\n        invalidParticipantRequest: \"The requested participant was not found.\",\r\n        permissionDeniedConnect: \"Required credentials not found.\",\r\n        permissionDeniedConversation: \"Invalid operation: only the host can {command} the conversation.\",\r\n        permissionDeniedParticipant: \"Invalid operation: only the host can {command} a participant.\",\r\n        permissionDeniedSend: \"Invalid operation: the conversation is not in a connected state.\",\r\n        permissionDeniedStart: \"Invalid operation: there is already an active conversation.\",\r\n    };\r\n\r\n    private static readonly privDefaultParams: IRestParams = {\r\n        apiVersion: \"api-version\",\r\n        authorization: \"Authorization\",\r\n        clientAppId: \"X-ClientAppId\",\r\n        contentTypeKey: \"Content-Type\",\r\n        correlationId: \"X-CorrelationId\",\r\n        languageCode: \"language\",\r\n        nickname: \"nickname\",\r\n        profanity: \"profanity\",\r\n        requestId: \"X-RequestId\",\r\n        roomId: \"roomid\",\r\n        sessionToken: \"token\",\r\n        subscriptionKey: \"Ocp-Apim-Subscription-Key\",\r\n        subscriptionRegion: \"Ocp-Apim-Subscription-Region\",\r\n        token: \"X-CapitoToken\",\r\n    };\r\n\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../../common.speech/Exports\";\r\nimport {\r\n    BackgroundEvent,\r\n    Events,\r\n    Timeout,\r\n} from \"../../common/Exports\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    Connection,\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig\r\n} from \"../../sdk/Exports\";\r\nimport { SpeechTranslationConfigImpl } from \"../../sdk/SpeechTranslationConfig\";\r\nimport { ConversationImpl } from \"../../sdk/Transcription/Conversation\";\r\nimport { Callback, IConversation } from \"../../sdk/Transcription/IConversation\";\r\nimport { ConversationConnectionFactory } from \"./ConversationConnectionFactory\";\r\nimport { ConversationServiceAdapter } from \"./ConversationServiceAdapter\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs\r\n} from \"./ConversationTranslatorEventArgs\";\r\nimport {\r\n    ConversationRecognizer,\r\n} from \"./ConversationTranslatorInterfaces\";\r\n\r\nexport class ConversationRecognizerFactory {\r\n    public static fromConfig(conversation: IConversation, speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig): ConversationRecognizer {\r\n        return new ConversationTranslatorRecognizer(conversation, speechConfig, audioConfig);\r\n    }\r\n}\r\n\r\n/**\r\n * Sends messages to the Conversation Translator websocket and listens for incoming events containing websocket messages.\r\n * Based off the recognizers in the SDK folder.\r\n */\r\nexport class ConversationTranslatorRecognizer extends Recognizer implements ConversationRecognizer {\r\n\r\n    private privIsDisposed: boolean;\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privConnection: Connection;\r\n    private privConversation: ConversationImpl;\r\n    private privTimeoutToken: any;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number;\r\n    private privClearTimeout: (id: number) => void;\r\n\r\n    public constructor(conversation: IConversation, speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const serviceConfigImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(serviceConfigImpl, \"speechConfig\");\r\n        const conversationImpl = conversation as ConversationImpl;\r\n        Contracts.throwIfNull(conversationImpl, \"conversationImpl\");\r\n\r\n        super(audioConfig, serviceConfigImpl.properties, new ConversationConnectionFactory());\r\n\r\n        this.privConversation = conversationImpl;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = serviceConfigImpl.properties.clone();\r\n        this.privConnection = Connection.fromRecognizer(this);\r\n        const webWorkerLoadType: string = this.privProperties.getProperty(PropertyId.WebWorkerLoadType, \"on\").toLowerCase();\r\n        if (webWorkerLoadType === \"on\" && typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n            this.privClearTimeout = Timeout.clearTimeout;\r\n        } else {\r\n            if (typeof window !== \"undefined\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privSetTimeout = window.setTimeout.bind(window);\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privClearTimeout = window.clearTimeout.bind(window);\r\n            } else {\r\n                this.privSetTimeout = setTimeout;\r\n                this.privClearTimeout = clearTimeout;\r\n            }\r\n        }\r\n    }\r\n\r\n    public canceled: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    public lockRoomCommandReceived: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\r\n    public muteAllCommandReceived: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\r\n    public participantJoinCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantLeaveCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantUpdateCommandReceived: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    public connectionOpened: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public connectionClosed: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public translationReceived: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    public participantsListReceived: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\r\n    public participantsChanged: (sender: ConversationRecognizer, event: ConversationParticipantsChangedEventArgs) => void;\r\n\r\n    public set connected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.connected = cb;\r\n    }\r\n\r\n    public set disconnected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.disconnected = cb;\r\n    }\r\n\r\n    /**\r\n     * Return the speech language used by the recognizer\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Return the properties for the recognizer\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    /**\r\n     * Connect to the recognizer\r\n     * @param token\r\n     */\r\n    public connect(token: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n            this.privReco.conversationTranslatorToken = token;\r\n            this.resetConversationTimeout();\r\n            this.privReco.connectAsync(cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disconnect from the recognizer\r\n     */\r\n    public disconnect(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (this.privTimeoutToken !== undefined) {\r\n               // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n               this.privClearTimeout(this.privTimeoutToken);\r\n            }\r\n            this.privReco.disconnect().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the mute all participants command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     * @param isMuted\r\n     */\r\n    public sendRequest(command: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            this.sendMessage(command, cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle update of service auth token (#694)\r\n     */\r\n    public onToken(token: IAuthentication): void {\r\n        this.privConversation.onToken(token);\r\n    }\r\n\r\n    /**\r\n     * Close and dispose the recognizer\r\n     */\r\n    public async close(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            if (!!this.privConnection) {\r\n                this.privConnection.closeConnection();\r\n                this.privConnection.close();\r\n            }\r\n            this.privConnection = undefined;\r\n            await this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose the recognizer\r\n     * @param disposing\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n        if (disposing) {\r\n            if (this.privTimeoutToken !== undefined) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                this.privClearTimeout(this.privTimeoutToken);\r\n            }\r\n            this.privIsDisposed = true;\r\n            if (!!this.privConnection) {\r\n                this.privConnection.closeConnection();\r\n                this.privConnection.close();\r\n                this.privConnection = undefined;\r\n            }\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the config for the recognizer\r\n     * @param speechConfig\r\n     */\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    /**\r\n     * Create the service recognizer.\r\n     * The audio source is redundnant here but is required by the implementation.\r\n     * @param authentication\r\n     * @param connectionFactory\r\n     * @param audioConfig\r\n     * @param recognizerConfig\r\n     */\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new ConversationServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private sendMessage(msg: string, cb?: Callback, err?: Callback): void {\r\n        const withAsync = this.privReco as ConversationServiceAdapter;\r\n        const PromiseToEmptyCallback = <T>(promise: Promise<T>, cb?: Callback, err?: Callback): void => {\r\n            if (promise !== undefined) {\r\n                promise.then((): void => {\r\n                    try {\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(`'Unhandled error on promise callback: ${e as string}'`);\r\n                        }\r\n                    }\r\n                }, (reason: any): void => {\r\n                    try {\r\n                        if (!!err) {\r\n                            err(reason);\r\n                        }\r\n                        // eslint-disable-next-line no-empty\r\n                    } catch (error) { }\r\n                });\r\n            } else {\r\n                if (!!err) {\r\n                    err(\"Null promise\");\r\n                }\r\n            }\r\n        };\r\n\r\n        PromiseToEmptyCallback(withAsync.sendMessageAsync(msg), cb, err);\r\n        this.resetConversationTimeout();\r\n    }\r\n\r\n    private resetConversationTimeout(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            this.privClearTimeout(this.privTimeoutToken);\r\n        }\r\n\r\n        this.privTimeoutToken = this.privSetTimeout((): void => {\r\n            this.sendRequest(this.privConversation.getKeepAlive());\r\n        }, 60000);\r\n    }\r\n\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ProxyInfo, WebsocketConnection } from \"../../common.browser/Exports\";\r\nimport { createGuid, IConnection, IStringDictionary } from \"../../common/Exports\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { PropertyId } from \"../../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"../ConnectionFactoryBase\";\r\nimport { AuthInfo, RecognizerConfig } from \"../Exports\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\r\nimport { ConversationWebsocketMessageFormatter } from \"./ConversationWebsocketMessageFormatter\";\r\n\r\n/**\r\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\r\n * The conversation must already have been started or joined.\r\n */\r\nexport class ConversationConnectionFactory extends ConnectionFactoryBase  {\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n\r\n        const endpointHost: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Host, ConversationConnectionConfig.host);\r\n        const correlationId: string = config.parameters.getProperty(PropertyId.ConversationTranslator_CorrelationId, createGuid());\r\n\r\n        const endpoint: string = `wss://${endpointHost}${ConversationConnectionConfig.webSocketPath}`;\r\n        const token: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Token, undefined);\r\n        Contracts.throwIfNullOrUndefined(token, \"token\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[ConversationConnectionConfig.configParams.apiVersion] = ConversationConnectionConfig.apiVersion;\r\n        queryParams[ConversationConnectionConfig.configParams.token] = token;\r\n        queryParams[ConversationConnectionConfig.configParams.correlationId] = correlationId;\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    RawWebsocketMessage,\r\n} from \"../../common/Exports\";\r\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage\";\r\n\r\n/**\r\n * Based off WebsocketMessageFormatter. The messages for Conversation Translator have some variations from the Speech messages.\r\n */\r\nexport class ConversationWebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    /**\r\n     * Format incoming messages: text (speech partial/final, IM) or binary (tts)\r\n     */\r\n    public toConnectionMessage(message: RawWebsocketMessage): Promise<ConversationConnectionMessage> {\r\n        const deferral = new Deferred<ConversationConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const incomingMessage: ConversationConnectionMessage = new ConversationConnectionMessage(message.messageType, message.textContent, {}, message.id);\r\n                deferral.resolve(incomingMessage);\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                deferral.resolve(new ConversationConnectionMessage(message.messageType, message.binaryContent, undefined, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    /**\r\n     * Format outgoing messages: text (commands or IM)\r\n     */\r\n    public fromConnectionMessage(message: ConnectionMessage): Promise<RawWebsocketMessage> {\r\n\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${message.textBody ? message.textBody : \"\"}`;\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ConnectionMessage, IStringDictionary, MessageType } from \"../../common/Exports\";\r\n\r\nexport class ConversationConnectionMessage extends ConnectionMessage {\r\n    private privConversationMessageType: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n            super(messageType, body, headers, id);\r\n            const json: { type: string } = JSON.parse(this.textBody) as { type: string };\r\n            if (json.type !== undefined) {\r\n                this.privConversationMessageType = json.type;\r\n            }\r\n    }\r\n\r\n    public get conversationMessageType(): string {\r\n        return this.privConversationMessageType;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationExpirationEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationResult,\r\n    ResultReason,\r\n    Translations\r\n} from \"../../sdk/Exports\";\r\nimport {\r\n    CognitiveTokenAuthentication,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase\r\n} from \"../Exports\";\r\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage\";\r\nimport { ConversationRequestSession } from \"./ConversationRequestSession\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs\r\n} from \"./ConversationTranslatorEventArgs\";\r\nimport {\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalParticipant\r\n} from \"./ConversationTranslatorInterfaces\";\r\nimport { ConversationTranslatorRecognizer } from \"./ConversationTranslatorRecognizer\";\r\nimport {\r\n    CommandResponsePayload,\r\n    IParticipantPayloadResponse,\r\n    IParticipantsListPayloadResponse,\r\n    ITranslationResponsePayload,\r\n    ParticipantPayloadResponse,\r\n    ParticipantsListPayloadResponse,\r\n    SpeechResponsePayload,\r\n    TextResponsePayload\r\n} from \"./ServiceMessages/Exports\";\r\n\r\n/**\r\n * The service adapter handles sending and receiving messages to the Conversation Translator websocket.\r\n */\r\nexport class ConversationServiceAdapter extends ServiceRecognizerBase {\r\n    private privConversationServiceConnector: ConversationTranslatorRecognizer;\r\n    private privConversationConnectionFactory: IConnectionFactory;\r\n    private privConversationAuthFetchEventId: string;\r\n    private privConversationAuthentication: IAuthentication;\r\n    private privConversationRequestSession: ConversationRequestSession;\r\n    private privConnectionConfigPromise: Promise<IConnection> = undefined;\r\n    private privConnectionLoop: Promise<void>;\r\n    private terminateMessageLoop: boolean;\r\n    private privLastPartialUtteranceId: string;\r\n    private privConversationIsDisposed: boolean;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        conversationServiceConnector: ConversationTranslatorRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, conversationServiceConnector);\r\n\r\n        this.privLastPartialUtteranceId = \"\";\r\n        this.privConversationServiceConnector = conversationServiceConnector;\r\n        this.privConversationAuthentication = authentication;\r\n        this.receiveMessageOverride = (): Promise<void> => this.receiveConversationMessageOverride();\r\n        this.recognizeOverride = (): Promise<void> => this.noOp();\r\n        this.postConnectImplOverride = (connection: Promise<IConnection>): Promise<IConnection> => this.conversationConnectImpl(connection);\r\n        this.configConnectionOverride = (): Promise<IConnection> => this.configConnection();\r\n        this.disconnectOverride = (): Promise<void> => this.privDisconnect();\r\n        this.privConversationRequestSession = new ConversationRequestSession(createNoDashGuid());\r\n        this.privConversationConnectionFactory = connectionFactory;\r\n        this.privConversationIsDisposed = false;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return super.isDisposed() || this.privConversationIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privConversationIsDisposed = true;\r\n        if (this.privConnectionConfigPromise !== undefined) {\r\n            const connection: IConnection = await this.privConnectionConfigPromise;\r\n            await connection.dispose(reason);\r\n        }\r\n        await super.dispose(reason);\r\n    }\r\n\r\n    public async sendMessage(message: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new ConversationConnectionMessage(\r\n            MessageType.Text,\r\n            message));\r\n    }\r\n\r\n    public async sendMessageAsync(message: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n\r\n        await connection.send(new ConversationConnectionMessage(MessageType.Text, message));\r\n    }\r\n\r\n    protected privDisconnect(): Promise<void> {\r\n        if (this.terminateMessageLoop) {\r\n            return;\r\n        }\r\n        this.cancelRecognition(this.privConversationRequestSession.sessionId,\r\n            this.privConversationRequestSession.requestId,\r\n            CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        this.terminateMessageLoop = true;\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/require-await\r\n    protected async processTypeSpecificMessages(): Promise<boolean> {\r\n        return true;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        this.terminateMessageLoop = true;\r\n\r\n        const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n            cancellationReason,\r\n            error,\r\n            errorCode,\r\n            undefined,\r\n            sessionId);\r\n\r\n        try {\r\n            if (!!this.privConversationServiceConnector.canceled) {\r\n                this.privConversationServiceConnector.canceled(this.privConversationServiceConnector, cancelEvent);\r\n            }\r\n        } catch {\r\n            // continue on error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Establishes a websocket connection to the end point.\r\n     */\r\n    protected async conversationConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\r\n        this.privConnectionLoop = this.startMessageLoop();\r\n        return connection;\r\n    }\r\n\r\n    /**\r\n     * Process incoming websocket messages\r\n     */\r\n    private async receiveConversationMessageOverride(): Promise<void> {\r\n        if (this.isDisposed() || this.terminateMessageLoop) {\r\n            return Promise.resolve();\r\n        }\r\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\r\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\r\n\r\n        try {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            const message: ConversationConnectionMessage = await connection.read() as ConversationConnectionMessage;\r\n            if (this.isDisposed() || this.terminateMessageLoop) {\r\n                // We're done.\r\n                communicationCustodian.resolve();\r\n                return Promise.resolve();\r\n            }\r\n\r\n            if (!message) {\r\n                return this.receiveConversationMessageOverride();\r\n            }\r\n\r\n            const sessionId: string = this.privConversationRequestSession.sessionId;\r\n            const conversationMessageType: string = message.conversationMessageType.toLowerCase();\r\n            let sendFinal: boolean = false;\r\n\r\n            try {\r\n                switch (conversationMessageType) {\r\n                    case \"info\":\r\n                    case \"participant_command\":\r\n                    case \"command\":\r\n                        const commandPayload: CommandResponsePayload = CommandResponsePayload.fromJSON(message.textBody);\r\n                        switch (commandPayload.command.toLowerCase()) {\r\n\r\n                            /**\r\n                             * 'ParticpantList' is the first message sent to the user after the websocket connection has opened.\r\n                             * The consuming client must wait for this message to arrive\r\n                             * before starting to send their own data.\r\n                             */\r\n                            case \"participantlist\":\r\n\r\n                                const participantsPayload: IParticipantsListPayloadResponse = ParticipantsListPayloadResponse.fromJSON(message.textBody);\r\n\r\n                                const participantsResult: IInternalParticipant[] = participantsPayload.participants.map((p: IParticipantPayloadResponse): IInternalParticipant => {\r\n                                    const participant: IInternalParticipant = {\r\n                                        avatar: p.avatar,\r\n                                        displayName: p.nickname,\r\n                                        id: p.participantId,\r\n                                        isHost: p.ishost,\r\n                                        isMuted: p.ismuted,\r\n                                        isUsingTts: p.usetts,\r\n                                        preferredLanguage: p.locale\r\n                                    };\r\n                                    return participant;\r\n                                });\r\n\r\n                                if (!!this.privConversationServiceConnector.participantsListReceived) {\r\n                                    this.privConversationServiceConnector.participantsListReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantsListEventArgs(participantsPayload.roomid, participantsPayload.token,\r\n                                            participantsPayload.translateTo, participantsPayload.profanityFilter,\r\n                                            participantsPayload.roomProfanityFilter, participantsPayload.roomLocked,\r\n                                            participantsPayload.muteAll, participantsResult, sessionId));\r\n                                }\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetTranslateToLanguages' represents the list of languages being used in the Conversation by all users(?).\r\n                             * This is sent at the start of the Conversation\r\n                             */\r\n                            case \"settranslatetolanguages\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetProfanityFiltering' lets the client set the level of profanity filtering.\r\n                             * If sent by the participant the setting will effect only their own profanity level.\r\n                             * If sent by the host, the setting will effect all participants including the host.\r\n                             * Note: the profanity filters differ from Speech Service (?): 'marked', 'raw', 'removed', 'tagged'\r\n                             */\r\n                            case \"setprofanityfiltering\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setProfanityFiltering,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetMute' is sent if the participant has been muted by the host.\r\n                             * Check the 'participantId' to determine if the current user has been muted.\r\n                             */\r\n                            case \"setmute\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setMute,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetMuteAll' is sent if the Conversation has been muted by the host.\r\n                             */\r\n                            case \"setmuteall\":\r\n\r\n                                if (!!this.privConversationServiceConnector.muteAllCommandReceived) {\r\n                                    this.privConversationServiceConnector.muteAllCommandReceived(this.privConversationServiceConnector,\r\n                                        new MuteAllEventArgs(commandPayload.value as boolean, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'RoomExpirationWarning' is sent towards the end of the Conversation session to give a timeout warning.\r\n                             */\r\n                            case \"roomexpirationwarning\":\r\n\r\n                                if (!!this.privConversationServiceConnector.conversationExpiration) {\r\n                                    this.privConversationServiceConnector.conversationExpiration(this.privConversationServiceConnector,\r\n                                        new ConversationExpirationEventArgs(commandPayload.value as number, this.privConversationRequestSession.sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetUseTts' is sent as a confirmation if the user requests TTS to be turned on or off.\r\n                             */\r\n                            case \"setusetts\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setUseTTS,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetLockState' is set if the host has locked or unlocked the Conversation.\r\n                             */\r\n                            case \"setlockstate\":\r\n\r\n                                if (!!this.privConversationServiceConnector.lockRoomCommandReceived) {\r\n                                    this.privConversationServiceConnector.lockRoomCommandReceived(this.privConversationServiceConnector,\r\n                                        new LockRoomEventArgs(commandPayload.value as boolean, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'ChangeNickname' is received if a user changes their display name.\r\n                             * Any cached particpiants list should be updated to reflect the display name.\r\n                             */\r\n                            case \"changenickname\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.changeNickname,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'JoinSession' is sent when a user joins the Conversation.\r\n                             */\r\n                            case \"joinsession\":\r\n\r\n                                const joinParticipantPayload: ParticipantPayloadResponse = ParticipantPayloadResponse.fromJSON(message.textBody);\r\n\r\n                                const joiningParticipant: IInternalParticipant = {\r\n                                    avatar: joinParticipantPayload.avatar,\r\n                                    displayName: joinParticipantPayload.nickname,\r\n                                    id: joinParticipantPayload.participantId,\r\n                                    isHost: joinParticipantPayload.ishost,\r\n                                    isMuted: joinParticipantPayload.ismuted,\r\n                                    isUsingTts: joinParticipantPayload.usetts,\r\n                                    preferredLanguage: joinParticipantPayload.locale,\r\n                                };\r\n\r\n                                if (!!this.privConversationServiceConnector.participantJoinCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantJoinCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantEventArgs(\r\n                                            joiningParticipant,\r\n                                            sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'LeaveSession' is sent when a user leaves the Conversation'.\r\n                             */\r\n                            case \"leavesession\":\r\n\r\n                                const leavingParticipant: IInternalParticipant = {\r\n                                    id: commandPayload.participantId\r\n                                };\r\n\r\n                                if (!!this.privConversationServiceConnector.participantLeaveCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantLeaveCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantEventArgs(leavingParticipant, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'DisconnectSession' is sent when a user is disconnected from the session (e.g. network problem).\r\n                             * Check the 'ParticipantId' to check whether the message is for the current user.\r\n                             */\r\n                            case \"disconnectsession\":\r\n\r\n                                // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n                                const disconnectParticipant: IInternalParticipant = {\r\n                                    id: commandPayload.participantId\r\n                                };\r\n\r\n                                break;\r\n\r\n                            case \"token\":\r\n                                const token = new CognitiveTokenAuthentication(\r\n                                    (): Promise<string> => {\r\n                                        const authorizationToken = commandPayload.token;\r\n                                        return Promise.resolve(authorizationToken);\r\n                                    },\r\n                                    (): Promise<string> => {\r\n                                        const authorizationToken = commandPayload.token;\r\n                                        return Promise.resolve(authorizationToken);\r\n                                    });\r\n                                this.authentication = token;\r\n                                this.privConversationServiceConnector.onToken(token);\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * Message not recognized.\r\n                             */\r\n                            default:\r\n                                break;\r\n                        }\r\n                        break;\r\n\r\n                    /**\r\n                     * 'partial' (or 'hypothesis') represents a unfinalized speech message.\r\n                     */\r\n                    case \"partial\":\r\n\r\n                    /**\r\n                     * 'final' (or 'phrase') represents a finalized speech message.\r\n                     */\r\n                    case \"final\":\r\n\r\n                        const speechPayload: SpeechResponsePayload = SpeechResponsePayload.fromJSON(message.textBody);\r\n                        const conversationResultReason: ResultReason = (conversationMessageType === \"final\") ? ResultReason.TranslatedParticipantSpeech : ResultReason.TranslatingParticipantSpeech;\r\n\r\n                        const speechResult: ConversationTranslationResult = new ConversationTranslationResult(speechPayload.participantId,\r\n                            this.getTranslations(speechPayload.translations),\r\n                            speechPayload.language,\r\n                            speechPayload.id,\r\n                            conversationResultReason,\r\n                            speechPayload.recognition,\r\n                            undefined,\r\n                            undefined,\r\n                            message.textBody,\r\n                            undefined);\r\n\r\n                        if (speechPayload.isFinal) {\r\n                            // check the length, sometimes empty finals are returned\r\n                            if (speechResult.text !== undefined && speechResult.text.length > 0) {\r\n                                sendFinal = true;\r\n                            } else if (speechPayload.id === this.privLastPartialUtteranceId) {\r\n                                // send final as normal. We had a non-empty partial for this same utterance\r\n                                // so sending the empty final is important\r\n                                sendFinal = true;\r\n                            } else {\r\n                                // suppress unneeded final\r\n                            }\r\n\r\n                            if (sendFinal) {\r\n                                if (!!this.privConversationServiceConnector.translationReceived) {\r\n                                    this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                        new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.final, speechResult, sessionId));\r\n                                }\r\n                            }\r\n                        } else if (speechResult.text !== undefined) {\r\n                            this.privLastPartialUtteranceId = speechPayload.id;\r\n                            if (!!this.privConversationServiceConnector.translationReceived) {\r\n                                this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                    new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.partial, speechResult, sessionId));\r\n                            }\r\n                        }\r\n\r\n                        break;\r\n\r\n                    /**\r\n                     * \"translated_message\" is a text message or instant message (IM).\r\n                     */\r\n                    case \"translated_message\":\r\n\r\n                        const textPayload: TextResponsePayload = TextResponsePayload.fromJSON(message.textBody);\r\n                        // TODO: (Native parity) a result reason should be set based whether the participantId is ours or not\r\n\r\n                        const textResult: ConversationTranslationResult = new ConversationTranslationResult(textPayload.participantId,\r\n                            this.getTranslations(textPayload.translations),\r\n                            textPayload.language,\r\n                            undefined,\r\n                            undefined,\r\n                            textPayload.originalText,\r\n                            undefined,\r\n                            undefined,\r\n                            undefined,\r\n                            message.textBody,\r\n                            undefined);\r\n\r\n                        if (!!this.privConversationServiceConnector.translationReceived) {\r\n                            this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.instantMessage, textResult, sessionId));\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        // ignore any unsupported message types\r\n                        break;\r\n                }\r\n            } catch (e) {\r\n                // continue\r\n            }\r\n            return this.receiveConversationMessageOverride();\r\n        } catch (e) {\r\n            this.terminateMessageLoop = true;\r\n        }\r\n\r\n        return communicationCustodian.promise;\r\n    }\r\n\r\n    private async startMessageLoop(): Promise<void> {\r\n        if (this.isDisposed()) {\r\n            return Promise.resolve();\r\n        }\r\n        this.terminateMessageLoop = false;\r\n\r\n        const messageRetrievalPromise = this.receiveConversationMessageOverride();\r\n\r\n        try {\r\n            const r = await messageRetrievalPromise;\r\n            return r;\r\n        } catch (error) {\r\n            this.cancelRecognition(this.privRequestSession ? this.privRequestSession.sessionId : \"\", this.privRequestSession ? this.privRequestSession.requestId : \"\", CancellationReason.Error, CancellationErrorCode.RuntimeError, error as string);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint\r\n    private configConnection(): Promise<IConnection> {\r\n        if (this.isDisposed()) {\r\n            return Promise.resolve<IConnection>(undefined);\r\n        }\r\n        if (this.privConnectionConfigPromise !== undefined) {\r\n            return this.privConnectionConfigPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigPromise = undefined;\r\n                    return this.configConnection();\r\n                }\r\n                return this.privConnectionConfigPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigPromise = undefined;\r\n                return this.configConnection();\r\n            });\r\n        }\r\n        if (this.terminateMessageLoop) {\r\n            return Promise.resolve<IConnection>(undefined);\r\n        }\r\n\r\n        this.privConnectionConfigPromise = this.connectImpl().then((connection: IConnection): IConnection => connection);\r\n\r\n        return this.privConnectionConfigPromise;\r\n    }\r\n\r\n    private getTranslations(serviceResultTranslations: ITranslationResponsePayload[]): Translations {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResultTranslations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResultTranslations) {\r\n                translations.set(translation.lang, translation.translation);\r\n            }\r\n        }\r\n\r\n        return translations;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IDetachable,\r\n} from \"../../common/Exports\";\r\n\r\n/**\r\n * Placeholder class for the Conversation Request Session. Based off RequestSession.\r\n * TODO: define what telemetry is required.\r\n */\r\nexport class ConversationRequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privRequestCompletionDeferral: Deferred<void>;\r\n    private privSessionId: string;\r\n\r\n    public constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privRequestCompletionDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get completionPromise(): Promise<void> {\r\n        return this.privRequestCompletionDeferral.promise;\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string, connectionId: string): void {\r\n        this.privSessionId = connectionId;\r\n    }\r\n\r\n    public onAuthCompleted(isError: boolean): void {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted(statusCode: number): void {\r\n        if (statusCode === 200) {\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceTurnEndResponse(continuousRecognition: boolean): void {\r\n        if (!continuousRecognition) {\r\n            this.onComplete();\r\n        } else {\r\n            this.privRequestId = createNoDashGuid();\r\n        }\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete(): void {\r\n        //\r\n    }\r\n\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\nimport { ConversationTranslationResult, SessionEventArgs } from \"../../sdk/Exports\";\r\nimport { IInternalParticipant } from \"./ConversationTranslatorInterfaces\";\r\n\r\nexport class MuteAllEventArgs extends SessionEventArgs {\r\n    private privIsMuted: boolean;\r\n\r\n    public constructor(isMuted: boolean, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privIsMuted = isMuted;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsMuted;\r\n    }\r\n}\r\n\r\nexport class LockRoomEventArgs extends SessionEventArgs {\r\n    private privIsLocked: boolean;\r\n\r\n    public constructor(isLocked: boolean, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privIsLocked = isLocked;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsLocked;\r\n    }\r\n}\r\n\r\nexport class ParticipantEventArgs extends SessionEventArgs {\r\n    private privParticipant: IInternalParticipant;\r\n\r\n    public constructor(participant: IInternalParticipant, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privParticipant = participant;\r\n    }\r\n\r\n    public get participant(): IInternalParticipant {\r\n        return this.privParticipant;\r\n    }\r\n}\r\n\r\nexport class ParticipantAttributeEventArgs extends SessionEventArgs {\r\n    private privValue: boolean | number | string | string[];\r\n    private privKey: string;\r\n    private privParticipantId: string;\r\n\r\n    public constructor(participantId: string, key: string, value: boolean | number | string |  string[], sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privKey = key;\r\n        this.privValue = value;\r\n        this.privParticipantId = participantId;\r\n    }\r\n\r\n    public get value(): boolean | number | string |  string[] {\r\n        return this.privValue;\r\n    }\r\n\r\n    public get key(): string {\r\n        return this.privKey;\r\n    }\r\n    public get id(): string {\r\n        return this.privParticipantId;\r\n    }\r\n}\r\n\r\nexport class ParticipantsListEventArgs extends SessionEventArgs {\r\n\r\n    private privRoomId: string;\r\n    private privSessionToken: string;\r\n    private privTranslateTo: string[];\r\n    private privProfanityFilter: string;\r\n    private privRoomProfanityFilter: string;\r\n    private privIsRoomLocked: boolean;\r\n    private privIsMuteAll: boolean;\r\n    private privParticipants: IInternalParticipant[];\r\n\r\n    public constructor(conversationId: string, token: string, translateTo: string[], profanityFilter: string,\r\n                       roomProfanityFilter: string, isRoomLocked: boolean, isMuteAll: boolean, participants: IInternalParticipant[], sessionId?: string) {\r\n        super(sessionId);\r\n        this.privRoomId = conversationId;\r\n        this.privSessionToken = token;\r\n        this.privTranslateTo = translateTo;\r\n        this.privProfanityFilter = profanityFilter;\r\n        this.privRoomProfanityFilter = roomProfanityFilter;\r\n        this.privIsRoomLocked = isRoomLocked;\r\n        this.privIsRoomLocked = isMuteAll;\r\n        this.privParticipants = participants;\r\n    }\r\n    public get sessionToken(): string {\r\n        return this.privSessionToken;\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privRoomId;\r\n    }\r\n\r\n    public get translateTo(): string[] {\r\n        return this.privTranslateTo;\r\n    }\r\n\r\n    public get profanityFilter(): string {\r\n        return this.privProfanityFilter;\r\n    }\r\n\r\n    public get roomProfanityFilter(): string {\r\n        return this.privRoomProfanityFilter;\r\n    }\r\n\r\n    public get isRoomLocked(): boolean {\r\n        return this.privIsRoomLocked;\r\n    }\r\n\r\n    public get isMuteAll(): boolean {\r\n        return this.privIsMuteAll;\r\n    }\r\n\r\n    public get participants(): IInternalParticipant[] {\r\n        return this.privParticipants;\r\n    }\r\n}\r\n\r\nexport class ConversationReceivedTranslationEventArgs {\r\n    private privPayload: ConversationTranslationResult;\r\n    private privCommand: string;\r\n    private privSessionId: string;\r\n\r\n    public constructor(command: string, payload: ConversationTranslationResult,  sessionId?: string) {\r\n        this.privPayload = payload;\r\n        this.privCommand = command;\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    public get payload(): ConversationTranslationResult {\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get command(): string {\r\n        return this.privCommand;\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    SessionEventArgs,\r\n    } from \"../../sdk/Exports\";\r\n// import { ConversationClient } from \"./ConversationConnection\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs } from \"./ConversationTranslatorEventArgs\";\r\n\r\n/**\r\n * Internal conversation data\r\n */\r\nexport interface IInternalConversation {\r\n    // the token to use for connecting to the Speech Service\r\n    cognitiveSpeechAuthToken: string;\r\n    // the region to use for connecting to the Speech Service\r\n    cognitiveSpeechRegion: string;\r\n    // the unique id of the user who started or joined the Conversation\r\n    participantId: string;\r\n    // a descriptive name for the Conversation\r\n    name: string;\r\n    // a descriptive name for the Conversation\r\n    description: string;\r\n    // the speech model ID for custom speech\r\n    speechModel: string;\r\n    // represents the level of speech supported in the Conversation (0: everyone can speak, 2: only host can speak, 3: no-one can speak)\r\n    modalities: number;\r\n    // ?\r\n    isApproved: boolean;\r\n    // the mute flag has been set at conversation level and only the host can speak\r\n    isMuted: boolean;\r\n    // the 5 character conversation Id\r\n    roomId: string;\r\n    // the hex color string to represent a user. If there are many users this hex color may be reused (?).\r\n    avatar: string;\r\n    // the token to use when calling the websocket\r\n    token: string;\r\n    // used for tracking the session and help with troubleshooting problems in the logs\r\n    correlationId: string;\r\n    // extracted from the headers\r\n    requestId: string;\r\n    // set programmatically\r\n    isHost: boolean;\r\n}\r\n\r\n/**\r\n * The user who is participating in the conversation.\r\n */\r\nexport interface IInternalParticipant {\r\n    avatar?: string;\r\n    displayName?: string;\r\n    id?: string;\r\n    isHost?: boolean;\r\n    isMuted?: boolean;\r\n    isUsingTts?: boolean;\r\n    profanity?: boolean;\r\n    preferredLanguage?: string;\r\n    translateToLanguages?: string[];\r\n    voice?: string;\r\n}\r\n\r\n/** Users participating in the conversation */\r\nexport class InternalParticipants {\r\n\r\n    public constructor(public participants: IInternalParticipant[] = [], public meId?: string) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Add or update a participant\r\n     * @param value\r\n     */\r\n    public addOrUpdateParticipant(value: IInternalParticipant): IInternalParticipant {\r\n        if (value === undefined) {\r\n            return;\r\n        }\r\n\r\n        const exists: number = this.getParticipantIndex(value.id);\r\n        if (exists > -1) {\r\n            this.participants.splice(exists, 1, value);\r\n        } else {\r\n            this.participants.push(value);\r\n        }\r\n\r\n        // ensure it was added ok\r\n        return this.getParticipant(value.id);\r\n    }\r\n\r\n    /**\r\n     * Find the participant's position in the participants list.\r\n     * @param id\r\n     */\r\n    public getParticipantIndex(id: string): number {\r\n        return this.participants.findIndex((p: IInternalParticipant): boolean => p.id === id);\r\n    }\r\n\r\n    /**\r\n     * Find the participant by id.\r\n     * @param id\r\n     */\r\n    public getParticipant(id: string): IInternalParticipant {\r\n        return this.participants.find((p: IInternalParticipant): boolean => p.id === id);\r\n    }\r\n\r\n    /**\r\n     * Remove a participant from the participants list.\r\n     */\r\n    public deleteParticipant(id: string): void {\r\n        this.participants = this.participants.filter((p: IInternalParticipant): boolean => p.id !== id);\r\n    }\r\n\r\n    /**\r\n     * Helper to return the conversation host.\r\n     */\r\n    public get host(): IInternalParticipant {\r\n        return this.participants.find((p: IInternalParticipant): boolean => p.isHost === true );\r\n    }\r\n\r\n    /**\r\n     * Helper to return the current user.\r\n     */\r\n    public get me(): IInternalParticipant {\r\n        return this.getParticipant(this.meId);\r\n    }\r\n}\r\n\r\n/**\r\n * Recognizer for handling Conversation Translator websocket messages\r\n */\r\nexport interface ConversationRecognizer {\r\n    isDisposed(): boolean;\r\n    sendRequest: (command: string, cb?: () => void, err?: (e: string) => void) => void;\r\n    cancelSpeech?: () => Promise<void>;\r\n    close?: () => Promise<void>;\r\n    conversationExpiration?: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    connected?: (e: ConnectionEventArgs) => void;\r\n    disconnected?: (e: ConnectionEventArgs) => void;\r\n    canceled?: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    connectionOpened?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    connectionClosed?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    participantsListReceived?: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\r\n    translationReceived?: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    lockRoomCommandReceived?: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\r\n    muteAllCommandReceived?: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\r\n    participantJoinCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    participantLeaveCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    participantUpdateCommandReceived?: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    connect?: (token: string, cb?: () => void, err?: (e: string) => void) => void;\r\n}\r\n\r\n/**\r\n * Error message returned from the Conversation Translator websocket\r\n */\r\nexport interface IConversationResponseErrorMessage {\r\n    code: string;\r\n    message: string;\r\n}\r\n\r\n/**\r\n * Error returned from the Conversation Translator websocket\r\n */\r\nexport interface IConversationResponseError {\r\n    error: IConversationResponseErrorMessage;\r\n}\r\n\r\n/**\r\n * Base message command\r\n */\r\nexport interface IClientMessage {\r\n    type: any;\r\n}\r\n\r\n/**\r\n * Command message\r\n */\r\nexport interface ICommandMessage extends IClientMessage {\r\n    command?: string;\r\n}\r\n\r\n/**\r\n * Text message command\r\n */\r\nexport interface IInstantMessageCommand extends ICommandMessage {\r\n    roomId: string;\r\n    nickname?: string;\r\n    participantId: string;\r\n    text: string;\r\n}\r\n\r\n/**\r\n * Lock command\r\n */\r\nexport interface ILockConversationCommand extends ICommandMessage {\r\n    id?: string; // incoming ws\r\n    nickname?: string; // incoming ws\r\n    participantId: string; // host - incoming ws\r\n    roomid: string;\r\n    value: boolean;\r\n}\r\n\r\n/**\r\n * Mute all command\r\n */\r\nexport interface IMuteAllCommand extends ICommandMessage {\r\n    roomid: string;\r\n    nickname?: string;  // incoming ws\r\n    participantId: string; // host\r\n    value: boolean;\r\n    id?: string; // incoming ws\r\n}\r\n\r\n/**\r\n * Mute participant command\r\n */\r\nexport interface IMuteCommand extends ICommandMessage {\r\n    roomid: string;\r\n    nickname?: string;\r\n    participantId: string; // participant\r\n    value: boolean;\r\n    id?: string; // incoming ws\r\n}\r\n\r\n/**\r\n * Remove participant command\r\n */\r\nexport interface IEjectParticipantCommand extends ICommandMessage {\r\n    roomid: string;\r\n    participantId: string; // participant\r\n}\r\n\r\n/**\r\n * Change nickname command\r\n */\r\nexport interface IChangeNicknameCommand extends ICommandMessage {\r\n    roomid: string;\r\n    participantId: string;\r\n    nickname: string;\r\n    value: string;\r\n}\r\n\r\n/**\r\n * List of command message types\r\n */\r\nexport const ConversationTranslatorMessageTypes = {\r\n    command: \"command\",\r\n    final: \"final\",\r\n    info: \"info\",\r\n    instantMessage: \"instant_message\",\r\n    keepAlive: \"keep_alive\",\r\n    partial: \"partial\",\r\n    participantCommand: \"participant_command\",\r\n    translatedMessage: \"translated_message\"\r\n};\r\n\r\n/**\r\n * List of command types\r\n */\r\nexport const ConversationTranslatorCommandTypes = {\r\n    changeNickname: \"ChangeNickname\",\r\n    disconnectSession: \"DisconnectSession\",\r\n    ejectParticipant: \"EjectParticipant\",\r\n    instant_message: \"instant_message\",\r\n    joinSession: \"JoinSession\",\r\n    leaveSession: \"LeaveSession\",\r\n    participantList: \"ParticipantList\",\r\n    roomExpirationWarning: \"RoomExpirationWarning\",\r\n    setLockState: \"SetLockState\",\r\n    setMute: \"SetMute\",\r\n    setMuteAll: \"SetMuteAll\",\r\n    setProfanityFiltering: \"SetProfanityFiltering\",\r\n    setTranslateToLanguages: \"SetTranslateToLanguages\",\r\n    setUseTTS: \"SetUseTTS\"\r\n};\r\n\r\n/**\r\n * HTTP response helper\r\n */\r\nexport interface IResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: <T>() => T;\r\n    headers: string;\r\n}\r\n",null,"export { CommandResponsePayload } from \"./CommandResponsePayload\";\r\nexport { IParticipantsListPayloadResponse, IParticipantPayloadResponse, ParticipantsListPayloadResponse, ParticipantPayloadResponse } from \"./ParticipantResponsePayload\";\r\nexport { ITranslationResponsePayload, SpeechResponsePayload, TextResponsePayload } from \"./TranslationResponsePayload\";\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the payload for incoming websocket commands\r\n */\r\nexport interface ICommandResponsePayload {\r\n    type: string;\r\n    command?: string;\r\n    id?: string; // incoming ws\r\n    nickname?: string; // incoming ws\r\n    participantId?: string;\r\n    roomid?: string;\r\n    value: boolean | number | string;\r\n    token?: string;\r\n}\r\n\r\nconst parseCommandResponse = (json: string): ICommandResponsePayload => JSON.parse(json) as ICommandResponsePayload;\r\n\r\nexport class CommandResponsePayload implements ICommandResponsePayload {\r\n    private privCommandResponse: ICommandResponsePayload;\r\n\r\n    public constructor(json: string) {\r\n        this.privCommandResponse = parseCommandResponse(json);\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privCommandResponse.type;\r\n    }\r\n    public get command(): string {\r\n        return this.privCommandResponse.command;\r\n    }\r\n    public get id(): string {\r\n        return this.privCommandResponse.id;\r\n    }\r\n    public get nickname(): string {\r\n        return this.privCommandResponse.nickname;\r\n    }\r\n    public get participantId(): string {\r\n        return this.privCommandResponse.participantId;\r\n    }\r\n    public get roomid(): string {\r\n        return this.privCommandResponse.roomid;\r\n    }\r\n    public get value(): boolean | number | string {\r\n        return this.privCommandResponse.value;\r\n    }\r\n    public get token(): string {\r\n        return this.privCommandResponse.token;\r\n    }\r\n\r\n    public static fromJSON(json: string): CommandResponsePayload {\r\n        return new CommandResponsePayload(json);\r\n    }\r\n\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n/**\r\n * Defines the payload for incoming list of participants\r\n */\r\nexport interface IParticipantsListPayloadResponse {\r\n    roomid: string;\r\n    id: string;\r\n    command: string;\r\n    participants: IParticipantPayloadResponse[];\r\n    token: string;\r\n    translateTo: string[];\r\n    profanityFilter: string;\r\n    roomProfanityFilter: string;\r\n    roomLocked: boolean;\r\n    muteAll: boolean;\r\n    type: string;\r\n}\r\n\r\n/**\r\n * Defines the payload for incoming participant\r\n */\r\nexport interface IParticipantPayloadResponse {\r\n    nickname: string;\r\n    locale: string;\r\n    usetts: boolean;\r\n    ismuted: boolean;\r\n    ishost: boolean;\r\n    participantId: string;\r\n    avatar?: string;\r\n}\r\n\r\nconst parseListResponse = (json: string): IParticipantsListPayloadResponse => JSON.parse(json) as IParticipantsListPayloadResponse;\r\nconst parseParticipantResponse = (json: string): IParticipantPayloadResponse => JSON.parse(json) as IParticipantPayloadResponse;\r\n\r\nexport class ParticipantsListPayloadResponse implements IParticipantsListPayloadResponse {\r\n    private privParticipantsPayloadResponse: IParticipantsListPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privParticipantsPayloadResponse = parseListResponse(json);\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privParticipantsPayloadResponse.roomid;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privParticipantsPayloadResponse.id;\r\n    }\r\n\r\n    public get command(): string {\r\n        return this.privParticipantsPayloadResponse.command;\r\n    }\r\n\r\n    public get participants(): IParticipantPayloadResponse[] {\r\n        return this.privParticipantsPayloadResponse.participants;\r\n    }\r\n\r\n    public get token(): string {\r\n        return this.privParticipantsPayloadResponse.token;\r\n    }\r\n\r\n    public get translateTo(): string[] {\r\n        return this.privParticipantsPayloadResponse.translateTo;\r\n    }\r\n\r\n    public get profanityFilter(): string {\r\n        return this.privParticipantsPayloadResponse.profanityFilter;\r\n    }\r\n\r\n    public get roomProfanityFilter(): string {\r\n        return this.privParticipantsPayloadResponse.roomProfanityFilter;\r\n    }\r\n\r\n    public get roomLocked(): boolean {\r\n        return this.privParticipantsPayloadResponse.roomLocked;\r\n    }\r\n\r\n    public get muteAll(): boolean {\r\n        return this.privParticipantsPayloadResponse.muteAll;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privParticipantsPayloadResponse.type;\r\n    }\r\n\r\n    public static fromJSON(json: string): ParticipantsListPayloadResponse {\r\n        return new ParticipantsListPayloadResponse(json);\r\n    }\r\n\r\n}\r\n\r\nexport class ParticipantPayloadResponse implements IParticipantPayloadResponse {\r\n\r\n    private privParticipantPayloadResponse: IParticipantPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privParticipantPayloadResponse = parseParticipantResponse(json);\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privParticipantPayloadResponse.nickname;\r\n    }\r\n\r\n    public get locale(): string {\r\n        return this.privParticipantPayloadResponse.locale;\r\n    }\r\n\r\n    public get usetts(): boolean {\r\n        return this.privParticipantPayloadResponse.usetts;\r\n    }\r\n\r\n    public get ismuted(): boolean {\r\n        return this.privParticipantPayloadResponse.ismuted;\r\n    }\r\n\r\n    public get ishost(): boolean {\r\n        return this.privParticipantPayloadResponse.ishost;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privParticipantPayloadResponse.participantId;\r\n    }\r\n\r\n    public get avatar(): string {\r\n        return this.privParticipantPayloadResponse.avatar;\r\n    }\r\n\r\n    public static fromJSON(json: string): ParticipantPayloadResponse {\r\n        return new ParticipantPayloadResponse(json);\r\n    }\r\n\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n/**\r\n * Defines the payload for incoming translation messages\r\n */\r\nexport interface ITranslationResponsePayload {\r\n    lang: string;\r\n    translation: string;\r\n}\r\n\r\nexport interface ITranslationCommandMessage {\r\n    translations: ITranslationResponsePayload[];\r\n    id: string;\r\n    language: string;\r\n    nickname: string;\r\n    participantId: string;\r\n    roomid: string;\r\n    timestamp: string;\r\n    type: string;\r\n}\r\n\r\nexport interface ISpeechResponsePayload extends ITranslationCommandMessage {\r\n    recognition: string;\r\n    isFinal: boolean;\r\n}\r\n\r\nexport interface ITextResponsePayload extends ITranslationCommandMessage {\r\n    originalText: string;\r\n}\r\n\r\nconst parseSpeechResponse = (json: string): ISpeechResponsePayload => JSON.parse(json) as ISpeechResponsePayload;\r\nconst parseTextResponse = (json: string): ITextResponsePayload => JSON.parse(json) as ITextResponsePayload;\r\n\r\nexport class SpeechResponsePayload implements ISpeechResponsePayload {\r\n\r\n    private privSpeechResponse: ISpeechResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechResponse = parseSpeechResponse(json);\r\n    }\r\n\r\n    public get recognition(): string {\r\n        return this.privSpeechResponse.recognition;\r\n    }\r\n\r\n    public get translations(): ITranslationResponsePayload[] {\r\n        return this.privSpeechResponse.translations;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privSpeechResponse.id;\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privSpeechResponse.language;\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privSpeechResponse.nickname;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privSpeechResponse.participantId;\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privSpeechResponse.roomid;\r\n    }\r\n\r\n    public get timestamp(): string {\r\n        return this.privSpeechResponse.timestamp;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privSpeechResponse.type;\r\n    }\r\n\r\n    public get isFinal(): boolean {\r\n        return this.privSpeechResponse.type === \"final\";\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechResponsePayload {\r\n        return new SpeechResponsePayload(json);\r\n    }\r\n\r\n}\r\n\r\nexport class TextResponsePayload implements ITextResponsePayload {\r\n\r\n    private privTextResponse: ITextResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privTextResponse = parseTextResponse(json);\r\n    }\r\n\r\n    public get originalText(): string {\r\n        return this.privTextResponse.originalText;\r\n    }\r\n\r\n    public get translations(): ITranslationResponsePayload[] {\r\n        return this.privTextResponse.translations;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privTextResponse.id;\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privTextResponse.language;\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privTextResponse.nickname;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privTextResponse.participantId;\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privTextResponse.roomid;\r\n    }\r\n\r\n    public get timestamp(): string {\r\n        return this.privTextResponse.timestamp;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privTextResponse.type;\r\n    }\r\n\r\n    public static fromJSON(json: string): TextResponsePayload {\r\n        return new TextResponsePayload(json);\r\n    }\r\n\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig\";\r\nimport { AudioStreamFormatImpl } from \"../../sdk/Audio/AudioStreamFormat\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationEventArgs,\r\n    Conversation,\r\n    ConversationInfo,\r\n    Meeting,\r\n    MeetingInfo,\r\n    MeetingTranscriber,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechTranslationConfig,\r\n    SpeechTranslationConfigImpl,\r\n} from \"../../sdk/Exports\";\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranscriberConnectionFactory,\r\n    TranscriptionServiceRecognizer,\r\n} from \"../Exports\";\r\n\r\nexport class TranscriberRecognizer extends Recognizer {\r\n\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    public canceled: (sender: Recognizer, event: CancellationEventArgs) => void;\r\n\r\n    private privDisposedRecognizer: boolean;\r\n    private privConversation: Conversation;\r\n    private privMeeting: Meeting;\r\n    private isMeetingRecognizer: boolean;\r\n\r\n    /**\r\n     * TranscriberRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechTranslationConfig - Non-audio configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechTranslationConfig: SpeechTranslationConfig, audioConfig: AudioConfig) {\r\n        const speechTranslationConfigImpl: SpeechTranslationConfigImpl = speechTranslationConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(speechTranslationConfigImpl, \"speechTranslationConfig\");\r\n\r\n        const audioConfigImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNull(audioConfigImpl, \"audioConfigImpl\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechTranslationConfigImpl.speechRecognitionLanguage,\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechTranslationConfigImpl.properties, new TranscriberConnectionFactory());\r\n        this.privDisposedRecognizer = false;\r\n        this.isMeetingRecognizer = false;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    public set conversation(c: Conversation) {\r\n        Contracts.throwIfNullOrUndefined(c, \"Conversation\");\r\n        this.isMeetingRecognizer = false;\r\n        this.privConversation = c;\r\n    }\r\n\r\n    public getConversationInfo(): ConversationInfo {\r\n        Contracts.throwIfNullOrUndefined(this.privConversation, \"Conversation\");\r\n        return this.privConversation.conversationInfo;\r\n    }\r\n\r\n    public set meeting(m: Meeting) {\r\n        Contracts.throwIfNullOrUndefined(m, \"Meeting\");\r\n        this.isMeetingRecognizer = true;\r\n        this.privMeeting = m;\r\n    }\r\n\r\n    public getMeetingInfo(): MeetingInfo {\r\n        Contracts.throwIfNullOrUndefined(this.privMeeting, \"Meeting\");\r\n        return this.privMeeting.meetingInfo;\r\n    }\r\n\r\n    public IsMeetingRecognizer(): boolean {\r\n        return this.isMeetingRecognizer;\r\n    }\r\n\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    public async close(): Promise<void> {\r\n        if (!this.privDisposedRecognizer) {\r\n            await this.dispose(true);\r\n        }\r\n    }\r\n\r\n    // Push async join/leave conversation message via serviceRecognizer\r\n    public async pushConversationEvent(conversationInfo: ConversationInfo, command: string): Promise<void> {\r\n        const reco = (this.privReco) as TranscriptionServiceRecognizer;\r\n        Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\r\n        await reco.sendSpeechEventAsync(conversationInfo, command);\r\n    }\r\n\r\n    // Push async join/leave meeting message via serviceRecognizer\r\n    public async pushMeetingEvent(meetingInfo: MeetingInfo, command: string): Promise<void> {\r\n        const reco = (this.privReco) as TranscriptionServiceRecognizer;\r\n        Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\r\n        await reco.sendMeetingSpeechEventAsync(meetingInfo, command);\r\n    }\r\n\r\n    public async enforceAudioGating(): Promise<void> {\r\n        const audioConfigImpl = this.audioConfig as AudioConfigImpl;\r\n        const format: AudioStreamFormatImpl = await audioConfigImpl.format;\r\n        const channels = format.channels;\r\n        if (channels === 1) {\r\n            if (this.properties.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() !== \"true\") {\r\n                throw new Error(\"Single channel audio configuration for MeetingTranscriber is currently under private preview, please contact diarizationrequest@microsoft.com for more details\");\r\n            }\r\n        } else if (channels !== 8) {\r\n            throw new Error(`Unsupported audio configuration: Detected ${channels}-channel audio`);\r\n        }\r\n        return;\r\n    }\r\n\r\n    public connectMeetingCallbacks(transcriber: MeetingTranscriber): void {\r\n        this.isMeetingRecognizer = true;\r\n        this.canceled = (s: any, e: CancellationEventArgs): void => {\r\n            if (!!transcriber.canceled) {\r\n                transcriber.canceled(transcriber, e);\r\n            }\r\n        };\r\n        this.recognizing = (s: any, e: SpeechRecognitionEventArgs): void => {\r\n            if (!!transcriber.transcribing) {\r\n                transcriber.transcribing(transcriber, e);\r\n            }\r\n        };\r\n        this.recognized = (s: any, e: SpeechRecognitionEventArgs): void => {\r\n            if (!!transcriber.transcribed) {\r\n                transcriber.transcribed(transcriber, e);\r\n            }\r\n        };\r\n        this.sessionStarted = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.sessionStarted) {\r\n                transcriber.sessionStarted(transcriber, e);\r\n            }\r\n        };\r\n        this.sessionStopped = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.sessionStopped) {\r\n                transcriber.sessionStopped(transcriber, e);\r\n            }\r\n        };\r\n    }\r\n\r\n    public disconnectCallbacks(): void {\r\n        this.canceled = undefined;\r\n        this.recognizing = undefined;\r\n        this.recognized = undefined;\r\n        this.sessionStarted = undefined;\r\n        this.sessionStopped = undefined;\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member ConversationTranscriber.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(\r\n            speechConfig,\r\n            this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new TranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisBoundaryType } from \"../../sdk/Exports\";\r\n\r\nexport enum MetadataType {\r\n    WordBoundary = \"WordBoundary\",\r\n    Bookmark = \"Bookmark\",\r\n    Viseme = \"Viseme\",\r\n    SentenceBoundary = \"SentenceBoundary\",\r\n    SessionEnd = \"SessionEnd\",\r\n}\r\n\r\nexport interface ISynthesisMetadata {\r\n    Type: MetadataType;\r\n    Data: {\r\n        Offset: number;\r\n        Duration: number;\r\n        text: {\r\n            Text: string;\r\n            Length: number;\r\n            BoundaryType: SpeechSynthesisBoundaryType;\r\n        };\r\n        Bookmark: string;\r\n        VisemeId: number;\r\n        AnimationChunk: string;\r\n        IsLastAnimation: boolean;\r\n    };\r\n}\r\n\r\n// audio.metadata\r\nexport interface ISynthesisAudioMetadata {\r\n    Metadata: ISynthesisMetadata[];\r\n}\r\n\r\nexport class SynthesisAudioMetadata implements ISynthesisAudioMetadata {\r\n    private privSynthesisAudioMetadata: ISynthesisAudioMetadata;\r\n\r\n    private constructor(json: string) {\r\n        this.privSynthesisAudioMetadata = JSON.parse(json) as ISynthesisAudioMetadata;\r\n    }\r\n\r\n    public static fromJSON(json: string): SynthesisAudioMetadata {\r\n        return new SynthesisAudioMetadata(json);\r\n    }\r\n\r\n    public get Metadata(): ISynthesisMetadata[] {\r\n        return this.privSynthesisAudioMetadata.Metadata;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    IAudioDestination\r\n} from \"../common/Exports\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream\";\r\nimport { ISynthesisMetadata, MetadataType } from \"./ServiceMessages/SynthesisAudioMetadata\";\r\nimport { SynthesisAdapterBase } from \"./SynthesisAdapterBase\";\r\nimport {\r\n    ConnectingToSynthesisServiceEvent,\r\n    SpeechSynthesisEvent,\r\n    SynthesisStartedEvent,\r\n    SynthesisTriggeredEvent,\r\n} from \"./SynthesisEvents\";\r\n\r\nexport interface ISynthesisResponseContext {\r\n    serviceTag: string;\r\n}\r\n\r\nexport interface ISynthesisResponseAudio {\r\n    type: string;\r\n    streamId: string;\r\n}\r\n\r\nexport interface ISynthesisResponse {\r\n    context: ISynthesisResponseContext;\r\n    audio: ISynthesisResponseAudio;\r\n}\r\n\r\nexport class SynthesisTurn {\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public set streamId(value: string) {\r\n        this.privStreamId = value;\r\n    }\r\n\r\n    public get audioOutputFormat(): AudioOutputFormatImpl {\r\n        return this.privAudioOutputFormat;\r\n    }\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n    }\r\n\r\n    public get turnCompletionPromise(): Promise<void> {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n\r\n    public get isSynthesisEnded(): boolean {\r\n        return this.privIsSynthesisEnded;\r\n    }\r\n\r\n    public get isSynthesizing(): boolean {\r\n        return this.privIsSynthesizing;\r\n    }\r\n\r\n    public get currentTextOffset(): number {\r\n        return this.privTextOffset;\r\n    }\r\n\r\n    public get currentSentenceOffset(): number {\r\n        return this.privSentenceOffset;\r\n    }\r\n\r\n    // The number of bytes received for current turn\r\n    public get bytesReceived(): number {\r\n        return this.privBytesReceived;\r\n    }\r\n\r\n    public get audioDuration(): number {\r\n        return this.privAudioDuration;\r\n    }\r\n\r\n    private privIsDisposed: boolean = false;\r\n    private privAuthFetchEventId: string;\r\n    private privIsSynthesizing: boolean = false;\r\n    private privIsSynthesisEnded: boolean = false;\r\n    private privBytesReceived: number = 0;\r\n    private privRequestId: string;\r\n    private privStreamId: string;\r\n    private privTurnDeferral: Deferred<void>;\r\n    private privInTurn: boolean = false;\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privReceivedAudio: ArrayBuffer;\r\n    private privReceivedAudioWithHeader: ArrayBuffer;\r\n    private privTextOffset: number = 0;\r\n    private privNextSearchTextIndex: number = 0;\r\n    private privSentenceOffset: number = 0;\r\n    private privNextSearchSentenceIndex: number = 0;\r\n    private privPartialVisemeAnimation: string;\r\n    private privRawText: string;\r\n    private privIsSSML: boolean;\r\n    private privTurnAudioDestination: IAudioDestination;\r\n    private privAudioDuration: number;\r\n\r\n    public constructor() {\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred<void>();\r\n\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n\r\n    public async getAllReceivedAudio(): Promise<ArrayBuffer> {\r\n        if (!!this.privReceivedAudio) {\r\n            return Promise.resolve(this.privReceivedAudio);\r\n        }\r\n        if (!this.privIsSynthesisEnded) {\r\n            return null;\r\n        }\r\n        await this.readAllAudioFromStream();\r\n        return Promise.resolve(this.privReceivedAudio);\r\n    }\r\n\r\n    public async getAllReceivedAudioWithHeader(): Promise<ArrayBuffer> {\r\n        if (!!this.privReceivedAudioWithHeader) {\r\n            return this.privReceivedAudioWithHeader;\r\n        }\r\n        if (!this.privIsSynthesisEnded) {\r\n            return null;\r\n        }\r\n        if (this.audioOutputFormat.hasHeader) {\r\n            const audio: ArrayBuffer = await this.getAllReceivedAudio();\r\n            this.privReceivedAudioWithHeader = SynthesisAdapterBase.addHeader(audio, this.audioOutputFormat);\r\n            return this.privReceivedAudioWithHeader;\r\n        } else {\r\n            return this.getAllReceivedAudio();\r\n        }\r\n    }\r\n\r\n    public startNewSynthesis(requestId: string, rawText: string, isSSML: boolean, audioDestination?: IAudioDestination): void {\r\n        this.privIsSynthesisEnded = false;\r\n        this.privIsSynthesizing = true;\r\n        this.privRequestId = requestId;\r\n        this.privRawText = rawText;\r\n        this.privIsSSML = isSSML;\r\n        this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n        this.privAudioOutputStream.format = this.privAudioOutputFormat;\r\n        this.privReceivedAudio = null;\r\n        this.privReceivedAudioWithHeader = null;\r\n        this.privBytesReceived = 0;\r\n        this.privTextOffset = 0;\r\n        this.privNextSearchTextIndex = 0;\r\n        this.privSentenceOffset = 0;\r\n        this.privNextSearchSentenceIndex = 0;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        if (audioDestination !== undefined) {\r\n            this.privTurnAudioDestination = audioDestination;\r\n            this.privTurnAudioDestination.format = this.privAudioOutputFormat;\r\n        }\r\n        this.onEvent(new SynthesisTriggeredEvent(this.requestId, undefined, audioDestination === undefined ? undefined : audioDestination.id()));\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string): void {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.onEvent(new ConnectingToSynthesisServiceEvent(this.privRequestId, this.privAuthFetchEventId));\r\n    }\r\n\r\n    public onAuthCompleted(isError: boolean): void {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted(statusCode: number): void {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new SynthesisStartedEvent(this.requestId, this.privAuthFetchEventId));\r\n            this.privBytesReceived = 0;\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceResponseMessage(responseJson: string): void {\r\n        const response: ISynthesisResponse = JSON.parse(responseJson) as ISynthesisResponse;\r\n        this.streamId = response.audio.streamId;\r\n    }\r\n\r\n    public onServiceTurnEndResponse(): void {\r\n        this.privInTurn = false;\r\n        this.privTurnDeferral.resolve();\r\n        this.onComplete();\r\n    }\r\n\r\n    public onServiceTurnStartResponse(): void {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            this.privTurnDeferral.promise.then().catch((): void => { });\r\n        }\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public onAudioChunkReceived(data: ArrayBuffer): void {\r\n        if (this.isSynthesizing) {\r\n            this.privAudioOutputStream.write(data);\r\n            this.privBytesReceived += data.byteLength;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.write(data);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onTextBoundaryEvent(metadata: ISynthesisMetadata): void {\r\n        this.updateTextOffset(metadata.Data.text.Text, metadata.Type);\r\n    }\r\n\r\n    public onVisemeMetadataReceived(metadata: ISynthesisMetadata): void {\r\n        if (metadata.Data.AnimationChunk !== undefined) {\r\n            this.privPartialVisemeAnimation += metadata.Data.AnimationChunk;\r\n        }\r\n    }\r\n\r\n    public onSessionEnd(metadata: ISynthesisMetadata): void {\r\n        this.privAudioDuration = metadata.Data.Offset;\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n        }\r\n    }\r\n\r\n    public onStopSynthesizing(): void {\r\n        this.onComplete();\r\n    }\r\n\r\n    /**\r\n     * Gets the viseme animation string (merged from animation chunk), and clears the internal\r\n     * partial animation.\r\n     */\r\n    public getAndClearVisemeAnimation(): string {\r\n        const animation: string = this.privPartialVisemeAnimation;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        return animation;\r\n    }\r\n\r\n    protected onEvent(event: SpeechSynthesisEvent): void {\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    /**\r\n     * Check if the text is an XML(SSML) tag\r\n     * @param text\r\n     * @private\r\n     */\r\n    private static isXmlTag(text: string): boolean {\r\n        return text.length >= 2 && text[0] === \"<\" && text[text.length - 1] === \">\";\r\n    }\r\n\r\n    private updateTextOffset(text: string, type: MetadataType): void {\r\n        if (type === MetadataType.WordBoundary) {\r\n            this.privTextOffset = this.privRawText.indexOf(text, this.privNextSearchTextIndex);\r\n            if (this.privTextOffset >= 0) {\r\n                this.privNextSearchTextIndex = this.privTextOffset + text.length;\r\n                if (this.privIsSSML) {\r\n                    if (this.withinXmlTag(this.privTextOffset) && !SynthesisTurn.isXmlTag(text)) {\r\n                        this.updateTextOffset(text, type);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.privSentenceOffset = this.privRawText.indexOf(text, this.privNextSearchSentenceIndex);\r\n            if (this.privSentenceOffset >= 0) {\r\n                this.privNextSearchSentenceIndex = this.privSentenceOffset + text.length;\r\n                if (this.privIsSSML) {\r\n                    if (this.withinXmlTag(this.privSentenceOffset) && !SynthesisTurn.isXmlTag(text)) {\r\n                        this.updateTextOffset(text, type);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete(): void {\r\n        if (this.privIsSynthesizing) {\r\n            this.privIsSynthesizing = false;\r\n            this.privIsSynthesisEnded = true;\r\n            this.privAudioOutputStream.close();\r\n            this.privInTurn = false;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.close();\r\n                this.privTurnAudioDestination = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    private async readAllAudioFromStream(): Promise<void> {\r\n        if (this.privIsSynthesisEnded) {\r\n            this.privReceivedAudio = new ArrayBuffer(this.bytesReceived);\r\n            try {\r\n                await this.privAudioOutputStream.read(this.privReceivedAudio);\r\n            } catch (e) {\r\n                this.privReceivedAudio = new ArrayBuffer(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if current idx is in XML(SSML) tag\r\n     * @param idx\r\n     * @private\r\n     */\r\n    private withinXmlTag(idx: number): boolean {\r\n        return this.privRawText.indexOf(\"<\", idx + 1) > this.privRawText.indexOf(\">\", idx + 1);\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IConnection,\r\n    IDisposable,\r\n    MessageType,\r\n    ServiceEvent,\r\n} from \"../common/Exports\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SpeechSynthesizer,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    AgentConfig,\r\n    CancellationErrorCodePropertyName,\r\n    ISynthesisConnectionFactory,\r\n    MetadataType,\r\n    SynthesisAudioMetadata,\r\n    SynthesisContext,\r\n    SynthesisTurn,\r\n    SynthesizerConfig\r\n} from \"./Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport class SynthesisAdapterBase implements IDisposable {\r\n    protected privSynthesisTurn: SynthesisTurn;\r\n    protected privConnectionId: string;\r\n    protected privSynthesizerConfig: SynthesizerConfig;\r\n    protected privSpeechSynthesizer: SpeechSynthesizer;\r\n    protected privSuccessCallback: (e: SpeechSynthesisResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public get synthesisContext(): SynthesisContext {\r\n        return this.privSynthesisContext;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    protected speakOverride: (ssml: string, requestId: string, sc: (e: SpeechSynthesisResult) => void, ec: (e: string) => void) => void = undefined;\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    public set activityTemplate(messagePayload: string) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n    public get activityTemplate(): string {\r\n        return this.privActivityTemplate;\r\n    }\r\n\r\n    protected receiveMessageOverride: () => void = undefined;\r\n\r\n    protected connectImplOverride: (isUnAuthorized: boolean) => void = undefined;\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n        this.privSynthesisTurn.audioOutputFormat = format;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.format = format;\r\n        }\r\n        if (this.synthesisContext !== undefined) {\r\n            this.synthesisContext.audioOutputFormat = format;\r\n        }\r\n    }\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: ISynthesisConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection> = undefined;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection>;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privSynthesisContext: SynthesisContext;\r\n    private privAgentConfig: AgentConfig;\r\n    private privActivityTemplate: string;\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privSessionAudioDestination: IAudioDestination;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        speechSynthesizer: SpeechSynthesizer,\r\n        audioDestination: IAudioDestination) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!synthesizerConfig) {\r\n            throw new ArgumentNullError(\"synthesizerConfig\");\r\n        }\r\n\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privSynthesizerConfig = synthesizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privSpeechSynthesizer = speechSynthesizer;\r\n        this.privSessionAudioDestination = audioDestination;\r\n        this.privSynthesisTurn = new SynthesisTurn();\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privSynthesisContext = new SynthesisContext(this.privSpeechSynthesizer);\r\n        this.privAgentConfig = new AgentConfig();\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode !== 1000) {\r\n                    this.cancelSynthesisLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public static addHeader(audio: ArrayBuffer, format: AudioOutputFormatImpl): ArrayBuffer {\r\n        if (!format.hasHeader) {\r\n            return audio;\r\n        }\r\n        format.updateHeader(audio.byteLength);\r\n        const tmp = new Uint8Array(audio.byteLength + format.header.byteLength);\r\n        tmp.set(new Uint8Array(format.header), 0);\r\n        tmp.set(new Uint8Array(audio), format.header.byteLength);\r\n        return tmp.buffer;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.close();\r\n        }\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n            await connection.dispose(reason);\r\n        }\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privSynthesisTurn.requestId, contentType, payload));\r\n    }\r\n\r\n    public async Speak(\r\n        text: string,\r\n        isSSML: boolean,\r\n        requestId: string,\r\n        successCallback: (e: SpeechSynthesisResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n        audioDestination: IAudioDestination,\r\n    ): Promise<void> {\r\n\r\n        let ssml: string;\r\n\r\n        if (isSSML) {\r\n            ssml = text;\r\n        } else {\r\n            ssml = this.privSpeechSynthesizer.buildSsml(text);\r\n        }\r\n\r\n        if (this.speakOverride !== undefined) {\r\n            return this.speakOverride(ssml, requestId, successCallback, errorCallBack);\r\n        }\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);\r\n\r\n        try {\r\n            await this.connectImpl();\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSynthesisContext(connection);\r\n            await this.sendSsmlMessage(connection, ssml, requestId);\r\n            const synthesisStartEventArgs: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                new SpeechSynthesisResult(\r\n                    requestId,\r\n                    ResultReason.SynthesizingAudioStarted,\r\n                )\r\n            );\r\n\r\n            if (!!this.privSpeechSynthesizer.synthesisStarted) {\r\n                this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer, synthesisStartEventArgs);\r\n            }\r\n\r\n            void this.receiveMessage();\r\n        } catch (e) {\r\n            this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, e as string);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesis(\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n        const result: SpeechSynthesisResult = new SpeechSynthesisResult(\r\n            requestId,\r\n            ResultReason.Canceled,\r\n            undefined,\r\n            error,\r\n            properties\r\n        );\r\n\r\n        if (!!this.privSpeechSynthesizer.SynthesisCanceled) {\r\n            const cancelEvent: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(result);\r\n            try {\r\n                this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesisLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        if (!!this.privSynthesisTurn.isSynthesizing) {\r\n            this.privSynthesisTurn.onStopSynthesizing();\r\n\r\n            this.cancelSynthesis(\r\n                this.privSynthesisTurn.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            const message: ConnectionMessage = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                if (!this.privSynthesisTurn.isSynthesizing) {\r\n                    return;\r\n                } else {\r\n                    return this.receiveMessage();\r\n                }\r\n            }\r\n\r\n\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privSynthesisTurn.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privSynthesisTurn.onServiceTurnStartResponse();\r\n                        break;\r\n                    case \"response\":\r\n                        this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);\r\n                        break;\r\n                    case \"audio\":\r\n                        if (this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase()\r\n                            && !!connectionMessage.binaryBody) {\r\n                            this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);\r\n                            if (!!this.privSpeechSynthesizer.synthesizing) {\r\n                                try {\r\n                                    const audioWithHeader = SynthesisAdapterBase.addHeader(connectionMessage.binaryBody, this.privSynthesisTurn.audioOutputFormat);\r\n                                    const ev: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                                        new SpeechSynthesisResult(\r\n                                            this.privSynthesisTurn.requestId,\r\n                                            ResultReason.SynthesizingAudio,\r\n                                            audioWithHeader));\r\n                                    this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer, ev);\r\n                                } catch (error) {\r\n                                    // Not going to let errors in the event handler\r\n                                    // trip things up.\r\n                                }\r\n                            }\r\n                            if (this.privSessionAudioDestination !== undefined) {\r\n                                this.privSessionAudioDestination.write(connectionMessage.binaryBody);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"audio.metadata\":\r\n                        const metadataList = SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;\r\n                        for (const metadata of metadataList) {\r\n                            switch (metadata.Type) {\r\n                                case MetadataType.WordBoundary:\r\n                                case MetadataType.SentenceBoundary:\r\n                                    this.privSynthesisTurn.onTextBoundaryEvent(metadata);\r\n\r\n                                    const wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs = new SpeechSynthesisWordBoundaryEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.Duration,\r\n                                        metadata.Data.text.Text,\r\n                                        metadata.Data.text.Length,\r\n                                        metadata.Type === MetadataType.WordBoundary\r\n                                            ? this.privSynthesisTurn.currentTextOffset : this.privSynthesisTurn.currentSentenceOffset,\r\n                                        metadata.Data.text.BoundaryType);\r\n\r\n                                    if (!!this.privSpeechSynthesizer.wordBoundary) {\r\n                                        try {\r\n                                            this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer, wordBoundaryEventArgs);\r\n                                        } catch (error) {\r\n                                            // Not going to let errors in the event handler\r\n                                            // trip things up.\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                                case MetadataType.Bookmark:\r\n                                    const bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs = new SpeechSynthesisBookmarkEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.Bookmark);\r\n\r\n                                    if (!!this.privSpeechSynthesizer.bookmarkReached) {\r\n                                        try {\r\n                                            this.privSpeechSynthesizer.bookmarkReached(this.privSpeechSynthesizer, bookmarkEventArgs);\r\n                                        } catch (error) {\r\n                                            // Not going to let errors in the event handler\r\n                                            // trip things up.\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                                case MetadataType.Viseme:\r\n                                    this.privSynthesisTurn.onVisemeMetadataReceived(metadata);\r\n                                    if (metadata.Data.IsLastAnimation) {\r\n                                        const visemeEventArgs: SpeechSynthesisVisemeEventArgs = new SpeechSynthesisVisemeEventArgs(\r\n                                            metadata.Data.Offset,\r\n                                            metadata.Data.VisemeId,\r\n                                            this.privSynthesisTurn.getAndClearVisemeAnimation());\r\n\r\n                                        if (!!this.privSpeechSynthesizer.visemeReceived) {\r\n                                            try {\r\n                                                this.privSpeechSynthesizer.visemeReceived(this.privSpeechSynthesizer, visemeEventArgs);\r\n                                            } catch (error) {\r\n                                                // Not going to let errors in the event handler\r\n                                                // trip things up.\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                                case MetadataType.SessionEnd:\r\n                                    this.privSynthesisTurn.onSessionEnd(metadata);\r\n                                    break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"turn.end\":\r\n                        this.privSynthesisTurn.onServiceTurnEndResponse();\r\n                        let result: SpeechSynthesisResult;\r\n                        try {\r\n                            const audioBuffer: ArrayBuffer = await this.privSynthesisTurn.getAllReceivedAudioWithHeader();\r\n                            result = new SpeechSynthesisResult(\r\n                                this.privSynthesisTurn.requestId,\r\n                                ResultReason.SynthesizingAudioCompleted,\r\n                                audioBuffer,\r\n                                undefined,\r\n                                undefined,\r\n                                this.privSynthesisTurn.audioDuration\r\n                            );\r\n                            if (!!this.privSuccessCallback) {\r\n                                this.privSuccessCallback(result);\r\n                            }\r\n                        } catch (error) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(error as string);\r\n                            }\r\n                        }\r\n                        if (this.privSpeechSynthesizer.synthesisCompleted) {\r\n                            try {\r\n                                this.privSpeechSynthesizer.synthesisCompleted(\r\n                                    this.privSpeechSynthesizer,\r\n                                    new SpeechSynthesisEventArgs(result)\r\n                                );\r\n                            } catch (e) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n\r\n                        if (!this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n\r\n                }\r\n            }\r\n\r\n            return this.receiveMessage();\r\n\r\n        } catch (e) {\r\n            // TODO: What goes here?\r\n        }\r\n    }\r\n\r\n    protected sendSynthesisContext(connection: IConnection): Promise<void> {\r\n        const synthesisContextJson = this.synthesisContext.toJSON();\r\n\r\n        if (synthesisContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"synthesis.context\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                synthesisContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected connectImpl(isUnAuthorized: boolean = false): Promise<IConnection> {\r\n        if (this.privConnectionPromise != null) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = null;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = null;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        this.privConnectionId = createNoDashGuid();\r\n\r\n        this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId);\r\n\r\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n\r\n        this.privConnectionPromise = authPromise.then(async (result: AuthInfo): Promise<IConnection> => {\r\n            this.privSynthesisTurn.onAuthCompleted(false);\r\n\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privSynthesizerConfig, result, this.privConnectionId);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent): void => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n            const response = await connection.open();\r\n            if (response.statusCode === 200) {\r\n                this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                return this.connectImpl(true);\r\n            } else {\r\n                this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.reject(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privSynthesizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);\r\n            }\r\n        }, (error: string): Promise<IConnection> => {\r\n            this.privSynthesisTurn.onAuthCompleted(true);\r\n            throw new Error(error);\r\n        });\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch((): void => { });\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n    protected sendSpeechServiceConfig(connection: IConnection, SpeechServiceConfigJson: string): Promise<void> {\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n    }\r\n\r\n    protected sendSsmlMessage(connection: IConnection, ssml: string, requestId: string): Promise<void> {\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"ssml\",\r\n            requestId,\r\n            \"application/ssml+xml\",\r\n            ssml));\r\n    }\r\n\r\n    private async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = undefined;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        await this.sendSpeechServiceConfig(connection, this.privSynthesizerConfig.SpeechServiceConfig.serialize());\r\n        return connection;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"../common/Exports\";\r\n\r\nexport class SpeechSynthesisEvent extends PlatformEvent {\r\n    private privRequestId: string;\r\n\r\n    public constructor(eventName: string, requestId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n\r\n        this.privRequestId = requestId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n}\r\n\r\nexport class SynthesisTriggeredEvent extends SpeechSynthesisEvent {\r\n    private privSessionAudioDestinationId: string;\r\n    private privTurnAudioDestinationId: string;\r\n\r\n    public constructor(requestId: string, sessionAudioDestinationId: string, turnAudioDestinationId: string) {\r\n        super(\"SynthesisTriggeredEvent\", requestId);\r\n\r\n        this.privSessionAudioDestinationId = sessionAudioDestinationId;\r\n        this.privTurnAudioDestinationId = turnAudioDestinationId;\r\n    }\r\n\r\n    public get audioSessionDestinationId(): string {\r\n        return this.privSessionAudioDestinationId;\r\n    }\r\n\r\n    public get audioTurnDestinationId(): string {\r\n        return this.privTurnAudioDestinationId;\r\n    }\r\n}\r\n\r\nexport class ConnectingToSynthesisServiceEvent extends SpeechSynthesisEvent {\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, authFetchEventId: string) {\r\n        super(\"ConnectingToSynthesisServiceEvent\", requestId);\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n\r\nexport class SynthesisStartedEvent extends SpeechSynthesisEvent {\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, authFetchEventId: string) {\r\n        super(\"SynthesisStartedEvent\", requestId);\r\n\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n",null,"import {\r\n    IRequestOptions,\r\n    IRestResponse,\r\n    RestConfigBase,\r\n    RestMessageAdapter,\r\n    RestRequestType,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    PropertyId,\r\n} from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport { AuthInfo, IAuthentication, SynthesizerConfig } from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\n\r\n/**\r\n * Implements methods for speaker recognition classes, sending requests to endpoint\r\n * and parsing response into expected format\r\n * @class SynthesisRestAdapter\r\n */\r\nexport class SynthesisRestAdapter {\r\n    private privRestAdapter: RestMessageAdapter;\r\n    private privUri: string;\r\n    private privAuthentication: IAuthentication;\r\n\r\n    public constructor(config: SynthesizerConfig, authentication: IAuthentication) {\r\n\r\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.tts.speech${hostSuffix}`);\r\n        }\r\n        this.privUri = `${endpoint}/cognitiveservices/voices/list`;\r\n\r\n        const options: IRequestOptions = RestConfigBase.requestOptions;\r\n        this.privRestAdapter = new RestMessageAdapter(options);\r\n        this.privAuthentication = authentication;\r\n    }\r\n\r\n    /**\r\n     * Sends list voices request to endpoint.\r\n     * @function\r\n     * @public\r\n     * @param connectionId - guid for connectionId\r\n     * @returns {Promise<IRestResponse>} rest response to status request\r\n     */\r\n    public getVoicesList(connectionId: string): Promise<IRestResponse> {\r\n        this.privRestAdapter.setHeaders(HeaderNames.ConnectionId, connectionId);\r\n        return this.privAuthentication.fetch(connectionId).then((authInfo: AuthInfo): Promise<IRestResponse> => {\r\n            this.privRestAdapter.setHeaders(authInfo.headerName, authInfo.token);\r\n            return this.privRestAdapter.request(RestRequestType.Get, this.privUri);\r\n        });\r\n    }\r\n\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"../sdk/Exports\";\r\nimport {Context, SpeechServiceConfig} from \"./Exports\";\r\n\r\nexport enum SynthesisServiceType {\r\n    Standard,\r\n    Custom,\r\n}\r\n\r\nexport class SynthesizerConfig {\r\n    private privSynthesisServiceType: SynthesisServiceType = SynthesisServiceType.Standard;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privParameters: PropertyCollection;\r\n\r\n    public constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get synthesisServiceType(): SynthesisServiceType {\r\n        return this.privSynthesisServiceType;\r\n    }\r\n\r\n    public set synthesisServiceType(value: SynthesisServiceType) {\r\n        this.privSynthesisServiceType = value;\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport { PropertyId, SpeechSynthesizer } from \"../sdk/Exports\";\r\n\r\n/**\r\n * Represents the JSON used in the synthesis.context message sent to the speech service.\r\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\r\n */\r\nexport class SynthesisContext {\r\n    private privContext: { [section: string]: any } = {};\r\n    private privSpeechSynthesizer: SpeechSynthesizer;\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n\r\n    public constructor(speechSynthesizer: SpeechSynthesizer) {\r\n        this.privSpeechSynthesizer = speechSynthesizer;\r\n    }\r\n\r\n    /**\r\n     * Adds a section to the synthesis.context object.\r\n     * @param sectionName Name of the section to add.\r\n     * @param value JSON serializable object that represents the value.\r\n     */\r\n    public setSection(sectionName: string, value: string | object): void {\r\n        this.privContext[sectionName] = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the audio output format for synthesis context generation.\r\n     * @param format {AudioOutputFormatImpl} the output format\r\n     */\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n    }\r\n\r\n    public toJSON(): string {\r\n\r\n        const synthesisSection: ISynthesisSection = this.buildSynthesisContext();\r\n        this.setSection(\"synthesis\", synthesisSection);\r\n\r\n        return JSON.stringify(this.privContext);\r\n    }\r\n\r\n    private buildSynthesisContext(): ISynthesisSection {\r\n        return {\r\n            audio: {\r\n                metadataOptions: {\r\n                    bookmarkEnabled: (!!this.privSpeechSynthesizer.bookmarkReached),\r\n                    punctuationBoundaryEnabled: this.privSpeechSynthesizer.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestPunctuationBoundary, (!!this.privSpeechSynthesizer.wordBoundary)),\r\n                    sentenceBoundaryEnabled: this.privSpeechSynthesizer.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestSentenceBoundary, false),\r\n                    sessionEndEnabled: true,\r\n                    visemeEnabled: (!!this.privSpeechSynthesizer.visemeReceived),\r\n                    wordBoundaryEnabled: this.privSpeechSynthesizer.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestWordBoundary, (!!this.privSpeechSynthesizer.wordBoundary)),\r\n                },\r\n                outputFormat: this.privAudioOutputFormat.requestAudioFormatString,\r\n            },\r\n            language: {\r\n                autoDetection: this.privSpeechSynthesizer.autoDetectSourceLanguage\r\n            }\r\n        } as ISynthesisSection;\r\n    }\r\n}\r\n\r\ninterface ISynthesisSection {\r\n    audio: {\r\n        outputFormat: string;\r\n        metadataOptions: {\r\n            bookmarkEnabled: boolean;\r\n            wordBoundaryEnabled: string;\r\n            punctuationBoundaryEnabled: string;\r\n            visemeEnabled: boolean;\r\n            sentenceBoundaryEnabled: string;\r\n            sessionEndEnabled: boolean;\r\n        };\r\n    };\r\n    language: {\r\n        autoDetection: boolean;\r\n    };\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"../sdk/Exports\";\r\nimport { Context } from \"./Exports\";\r\n\r\nexport class SpeakerRecognitionConfig {\r\n    private privParameters: PropertyCollection;\r\n    private privContext: Context;\r\n\r\n    public constructor(\r\n        context: Context,\r\n        parameters: PropertyCollection) {\r\n        this.privContext = context ? context : new Context(null);\r\n        this.privParameters = parameters;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.privContext;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport {\r\n    Deferred,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    SpeakerRecognitionResult,\r\n    SpeakerRecognizer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ISpeechConfigAudioDevice,\r\n    SpeakerResponse,\r\n    ServiceRecognizerBase,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\ninterface SpeakerContext {\r\n    scenario: string;\r\n    profileIds: string[];\r\n    features: {\r\n        interimResult: string;\r\n        progressiveDetection: string;\r\n    };\r\n}\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class SpeakerServiceRecognizer extends ServiceRecognizerBase {\r\n    private privSpeakerRecognizer: SpeakerRecognizer;\r\n    private privSpeakerAudioSource: IAudioSource;\r\n    private privResultDeferral: Deferred<SpeakerRecognitionResult>;\r\n    private privSpeakerModel: SpeakerRecognitionModel;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: SpeakerRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privSpeakerRecognizer = recognizer;\r\n        this.privSpeakerAudioSource = audioSource;\r\n        this.recognizeSpeaker = (model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> => this.recognizeSpeakerOnce(model);\r\n        this.sendPrePayloadJSONOverride = (): Promise<void> => this.noOp();\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speaker.response\":\r\n                const response: SpeakerResponse = JSON.parse(connectionMessage.textBody) as SpeakerResponse;\r\n                let result: SpeakerRecognitionResult;\r\n                if (response.status.statusCode.toLowerCase() !== \"success\") {\r\n                    result = new SpeakerRecognitionResult(\r\n                        response,\r\n                        ResultReason.Canceled,\r\n                        CancellationErrorCode.ServiceError,\r\n                        response.status.reason\r\n                        );\r\n                } else {\r\n                    result = new SpeakerRecognitionResult(\r\n                        response,\r\n                        ResultReason.RecognizedSpeaker,\r\n                        );\r\n                }\r\n                if (!!this.privResultDeferral) {\r\n                    this.privResultDeferral.resolve(result);\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privResultDeferral) {\r\n            const result: SpeakerRecognitionResult = new SpeakerRecognitionResult(\r\n                {\r\n                    scenario: this.privSpeakerModel.scenario,\r\n                    status: { statusCode: error, reason: error }\r\n                },\r\n                ResultReason.Canceled,\r\n                errorCode,\r\n                error\r\n                );\r\n            try {\r\n                this.privResultDeferral.resolve(result);\r\n            } catch (error) {\r\n                this.privResultDeferral.reject(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    public async recognizeSpeakerOnce(model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> {\r\n        this.privSpeakerModel = model;\r\n        this.voiceProfileType = model.scenario;\r\n        if (!this.privResultDeferral) {\r\n            this.privResultDeferral = new Deferred<SpeakerRecognitionResult>();\r\n        }\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privSpeakerAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages(this.extractSpeakerContext(model));\r\n\r\n        const node: IAudioStreamNode = await this.privSpeakerAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privSpeakerAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privSpeakerAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (err) {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, err as string);\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, (error: string): void => {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return this.privResultDeferral.promise;\r\n    }\r\n\r\n    private async sendPreAudioMessages(context: SpeakerContext): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await this.sendSpeakerRecognition(connection, context);\r\n        // await this.sendWaveHeader(connection);\r\n    }\r\n\r\n    private async sendSpeakerRecognition(connection: IConnection, context: SpeakerContext): Promise<void> {\r\n        const speakerContextJson = JSON.stringify(context);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.context\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            speakerContextJson));\r\n    }\r\n\r\n    private extractSpeakerContext(model: SpeakerRecognitionModel): SpeakerContext {\r\n        return {\r\n            features: {\r\n                interimResult: \"enabled\",\r\n                progressiveDetection: \"disabled\",\r\n            },\r\n            profileIds: model.profileIds,\r\n            scenario: model.scenario,\r\n        };\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport {\r\n    DeferralMap,\r\n    Deferred,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    VoiceProfileClient,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfilePhraseResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType,\r\n    VoiceProfile\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnrollmentResponse,\r\n    IProfile,\r\n    ISpeechConfigAudioDevice,\r\n    ProfilePhraseResponse,\r\n    ProfileResponse,\r\n    ServiceRecognizerBase,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\ninterface CreateProfile {\r\n    scenario: string;\r\n    locale: string;\r\n    number: string;\r\n}\r\n\r\ninterface PhraseRequest {\r\n    scenario: string;\r\n    locale: string;\r\n}\r\n\r\ninterface SpeakerContext {\r\n    scenario: string;\r\n    profileIds: string[];\r\n    features: {\r\n        interimResult: string;\r\n        progressiveDetection: string;\r\n    };\r\n}\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class VoiceServiceRecognizer extends ServiceRecognizerBase {\r\n    private privSpeakerAudioSource: IAudioSource;\r\n    private privDeferralMap: DeferralMap = new DeferralMap();\r\n    private privExpectedProfileId: string;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: VoiceProfileClient) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privSpeakerAudioSource = audioSource;\r\n        this.sendPrePayloadJSONOverride = (): Promise<void> => this.noOp();\r\n    }\r\n\r\n    public set SpeakerAudioSource(audioSource: IAudioSource) {\r\n        this.privSpeakerAudioSource = audioSource;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            // Profile management response for create, fetch, delete, reset\r\n            case \"speaker.profiles\":\r\n                const response: ProfileResponse = JSON.parse(connectionMessage.textBody) as ProfileResponse;\r\n                switch (response.operation.toLowerCase()) {\r\n                    case \"create\":\r\n                        this.handleCreateResponse(response, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    case \"delete\":\r\n                    case \"reset\":\r\n                        this.handleResultResponse(response, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    case \"fetch\":\r\n                        const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n                        this.handleFetchResponse(enrollmentResponse, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            // Activation and authorization phrase response\r\n            case \"speaker.phrases\":\r\n                const phraseResponse: ProfilePhraseResponse = JSON.parse(connectionMessage.textBody) as ProfilePhraseResponse;\r\n                this.handlePhrasesResponse(phraseResponse, connectionMessage.requestId);\r\n                processed = true;\r\n                break;\r\n            // Enrollment response\r\n            case \"speaker.profile.enrollment\":\r\n                const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n                const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                    this.enrollmentReasonFrom(!!enrollmentResponse.enrollment ? enrollmentResponse.enrollment.enrollmentStatus : enrollmentResponse.status.statusCode),\r\n                    !!enrollmentResponse.enrollment ? JSON.stringify(enrollmentResponse.enrollment) : undefined,\r\n                    enrollmentResponse.status.reason,\r\n                    );\r\n                if (!!this.privDeferralMap.getId(connectionMessage.requestId)) {\r\n                    this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(connectionMessage.requestId, result);\r\n                }\r\n                this.privRequestSession.onSpeechEnded();\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        // const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n            const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                ResultReason.Canceled,\r\n                error,\r\n                error,\r\n                );\r\n            if (!!this.privDeferralMap.getId(requestId)) {\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(requestId, result);\r\n            }\r\n    }\r\n\r\n    public async createProfile(profileType: VoiceProfileType, locale: string): Promise<string[]> {\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        this.voiceProfileType = profileType.toString();\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const createProfileDeferral = new Deferred<string[]>();\r\n            await conPromise;\r\n            await this.sendCreateProfile(createProfileDeferral, profileType, locale);\r\n            void this.receiveMessage();\r\n            return createProfileDeferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async resetProfile(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileResult>(\"reset\", profile.profileType, profile);\r\n    }\r\n\r\n    public async deleteProfile(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileResult>(\"delete\", profile.profileType, profile);\r\n    }\r\n\r\n    public async retrieveEnrollmentResult(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        this.privExpectedProfileId = profile.profileId;\r\n        return this.sendCommonRequest<VoiceProfileEnrollmentResult>(\"fetch\", profile.profileType, profile);\r\n    }\r\n\r\n    public async getAllProfiles(profileType: VoiceProfileType): Promise<VoiceProfileEnrollmentResult[]> {\r\n        this.voiceProfileType = profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileEnrollmentResult[]>(\"fetch\", profileType);\r\n    }\r\n\r\n    public async getActivationPhrases(profileType: VoiceProfileType, lang: string): Promise<VoiceProfilePhraseResult> {\r\n        this.voiceProfileType = profileType.toString();\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const getPhrasesDeferral = new Deferred<VoiceProfilePhraseResult>();\r\n            await conPromise;\r\n            await this.sendPhrasesRequest(getPhrasesDeferral, profileType, lang);\r\n            void this.receiveMessage();\r\n            return getPhrasesDeferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async enrollProfile(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        const enrollmentDeferral = new Deferred<VoiceProfileEnrollmentResult>();\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privSpeakerAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages(profile, enrollmentDeferral);\r\n\r\n        const node: IAudioStreamNode = await this.privSpeakerAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privSpeakerAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privSpeakerAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (err) {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, err as string);\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, (error: string): void => {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return enrollmentDeferral.promise;\r\n    }\r\n\r\n    private async sendPreAudioMessages(profile: VoiceProfile, enrollmentDeferral: Deferred<VoiceProfileEnrollmentResult>): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<VoiceProfileEnrollmentResult>(this.privRequestSession.requestId, enrollmentDeferral);\r\n        await this.sendBaseRequest(connection, \"enroll\", this.scenarioFrom(profile.profileType), profile);\r\n    }\r\n\r\n    private async sendPhrasesRequest(getPhrasesDeferral: Deferred<VoiceProfilePhraseResult>, profileType: VoiceProfileType, locale: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<VoiceProfilePhraseResult>(this.privRequestSession.requestId, getPhrasesDeferral);\r\n        const scenario = this.scenarioFrom(profileType);\r\n\r\n        const profileCreateRequest: PhraseRequest = {\r\n            locale,\r\n            scenario,\r\n        };\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.profile.phrases\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileCreateRequest)));\r\n    }\r\n\r\n    private async sendCreateProfile(createProfileDeferral: Deferred<string[]>, profileType: VoiceProfileType, locale: string): Promise<void> {\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<string[]>(this.privRequestSession.requestId, createProfileDeferral);\r\n        const scenario = profileType === VoiceProfileType.TextIndependentIdentification ? \"TextIndependentIdentification\" :\r\n            profileType === VoiceProfileType.TextIndependentVerification ? \"TextIndependentVerification\" : \"TextDependentVerification\";\r\n\r\n        const profileCreateRequest: CreateProfile = {\r\n            locale,\r\n            number: \"1\",\r\n            scenario,\r\n        };\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.profile.create\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileCreateRequest)));\r\n    }\r\n\r\n    private async sendCommonRequest<T>(operation: string, profileType: VoiceProfileType, profile: VoiceProfile = undefined): Promise<T> {\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const deferral = new Deferred<T>();\r\n            this.privRequestSession.onSpeechContext();\r\n            await conPromise;\r\n            const connection: IConnection = await this.fetchConnection();\r\n            this.privDeferralMap.add<T>(this.privRequestSession.requestId, deferral);\r\n            await this.sendBaseRequest(connection, operation, this.scenarioFrom(profileType), profile);\r\n            void this.receiveMessage();\r\n            return deferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    private async sendBaseRequest(connection: IConnection, operation: string, scenario: string, profile: VoiceProfile): Promise<void> {\r\n        const profileRequest: { maxPageSize?: number; profileIds?: string[]; scenario: string } = {\r\n            scenario\r\n        };\r\n        if (!!profile) {\r\n            profileRequest.profileIds = [ profile.profileId ];\r\n        } else {\r\n            profileRequest.maxPageSize = -1;\r\n        }\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            `speaker.profile.${operation}`,\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileRequest)));\r\n    }\r\n\r\n    private extractSpeakerContext(model: SpeakerRecognitionModel): SpeakerContext {\r\n        return {\r\n            features: {\r\n                interimResult: \"enabled\",\r\n                progressiveDetection: \"disabled\",\r\n            },\r\n            profileIds: model.profileIds,\r\n            scenario: model.scenario,\r\n        };\r\n    }\r\n\r\n    private handlePhrasesResponse(response: ProfilePhraseResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId)) {\r\n            if (response.status.statusCode.toLowerCase() !== \"success\") {\r\n                const reason: ResultReason = ResultReason.Canceled;\r\n                const result = new VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, []);\r\n                this.privDeferralMap.complete<VoiceProfilePhraseResult>(requestId, result);\r\n            } else if (!!response.phrases && response.phrases.length > 0) {\r\n                const reason: ResultReason = ResultReason.EnrollingVoiceProfile;\r\n                const result = new VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, response.phrases);\r\n                this.privDeferralMap.complete<VoiceProfilePhraseResult>(requestId, result);\r\n            } else {\r\n                throw new Error(\"Voice Profile get activation phrases failed, no phrases received\");\r\n            }\r\n        } else {\r\n            throw new Error(`Voice Profile get activation phrases request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private handleCreateResponse(response: ProfileResponse, requestId: string): void {\r\n        if (!!response.profiles && response.profiles.length > 0) {\r\n            if (!!this.privDeferralMap.getId(requestId)) {\r\n                const profileIds: string[] = response.profiles.map((profile: IProfile): string => profile.profileId);\r\n                this.privDeferralMap.complete<string[]>(requestId, profileIds);\r\n            } else {\r\n                throw new Error(`Voice Profile create request for requestID ${requestId} not found`);\r\n            }\r\n        } else {\r\n            throw new Error(\"Voice Profile create failed, no profile id received\");\r\n        }\r\n    }\r\n\r\n    private handleResultResponse(response: ProfileResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId)) {\r\n            const successReason: ResultReason = response.operation.toLowerCase() === \"delete\" ? ResultReason.DeletedVoiceProfile : ResultReason.ResetVoiceProfile;\r\n            const reason: ResultReason = response.status.statusCode.toLowerCase() === \"success\" ? successReason : ResultReason.Canceled;\r\n            const result = new VoiceProfileResult(reason, `statusCode: ${response.status.statusCode}, errorDetails: ${response.status.reason}`);\r\n            this.privDeferralMap.complete<VoiceProfileResult>(requestId, result);\r\n        } else {\r\n            throw new Error(`Voice Profile create request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private handleFetchResponse(enrollmentResponse: EnrollmentResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId) && !!enrollmentResponse.profiles[0]) {\r\n            if (!!this.privExpectedProfileId && enrollmentResponse.profiles.length === 1 && enrollmentResponse.profiles[0].profileId === this.privExpectedProfileId) {\r\n                this.privExpectedProfileId = undefined;\r\n                const profileInfo: IProfile = enrollmentResponse.profiles[0];\r\n                const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                    this.enrollmentReasonFrom(profileInfo.enrollmentStatus),\r\n                    JSON.stringify(profileInfo),\r\n                    enrollmentResponse.status.reason,\r\n                    );\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(requestId, result);\r\n            } else if (enrollmentResponse.profiles.length > 0) {\r\n                const iProfiles: IProfile[] = enrollmentResponse.profiles;\r\n                const profileResults: VoiceProfileEnrollmentResult[] = [];\r\n                for (const profile of iProfiles) {\r\n                    profileResults.push( new VoiceProfileEnrollmentResult(\r\n                        this.enrollmentReasonFrom(profile.enrollmentStatus),\r\n                        JSON.stringify(profile),\r\n                        enrollmentResponse.status.reason,\r\n                    ));\r\n                }\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult[]>(requestId, profileResults);\r\n            }\r\n        } else {\r\n            throw new Error(`Voice Profile fetch request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private enrollmentReasonFrom(statusCode: string): ResultReason {\r\n        switch (statusCode.toLowerCase()) {\r\n            case \"enrolled\":\r\n                return ResultReason.EnrolledVoiceProfile;\r\n            case \"invalidlocale\":\r\n            case \"invalidphrase\":\r\n            case \"invalidaudioformat\":\r\n            case \"invalidscenario\":\r\n            case \"invalidprofilecount\":\r\n            case \"invalidoperation\":\r\n            case \"audiotooshort\":\r\n            case \"audiotoolong\":\r\n            case \"toomanyenrollments\":\r\n            case \"storageconflict\":\r\n            case \"profilenotfound\":\r\n            case \"incompatibleprofiles\":\r\n            case \"incompleteenrollment\":\r\n                return ResultReason.Canceled;\r\n            default:\r\n                return ResultReason.EnrollingVoiceProfile;\r\n        }\r\n    }\r\n\r\n    private scenarioFrom(profileType: VoiceProfileType): string {\r\n        return profileType === VoiceProfileType.TextIndependentIdentification ? \"TextIndependentIdentification\" :\r\n            profileType === VoiceProfileType.TextIndependentVerification ? \"TextIndependentVerification\" : \"TextDependentVerification\";\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    IStringDictionary,\r\n    Stream,\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormat, AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\n\r\nexport class FileAudioSource implements IAudioSource {\r\n\r\n    private privAudioFormatPromise: Promise<AudioStreamFormatImpl>;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privSource: Blob | Buffer;\r\n\r\n    private privFilename: string;\r\n\r\n    private privHeaderEnd: number = 44;\r\n\r\n    public constructor(file: File | Buffer, filename?: string, audioSourceId?: string) {\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privSource = file;\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && this.privSource instanceof Blob) {\r\n            this.privFilename = (file as File).name;\r\n        } else {\r\n            this.privFilename = filename || \"unknown.wav\";\r\n        }\r\n\r\n        // Read the header.\r\n        this.privAudioFormatPromise = this.readHeader();\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privAudioFormatPromise;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        if (this.privFilename.lastIndexOf(\".wav\") !== this.privFilename.length - 4) {\r\n            const errorMsg = this.privFilename + \" is not supported. Only WAVE files are allowed at the moment.\";\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\r\n            return Promise.reject(errorMsg);\r\n        }\r\n\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        const stream: Stream<ArrayBuffer> = await this.upload(audioNodeId);\r\n\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return Promise.resolve({\r\n            detach: async (): Promise<void> => {\r\n                stream.readEnded();\r\n                delete this.privStreams[audioNodeId];\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                await this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n        });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream && !stream.isClosed) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privAudioFormatPromise.then<ISpeechConfigAudioDevice>((result: AudioStreamFormatImpl): Promise<{\r\n            bitspersample: number;\r\n            channelcount: number;\r\n            connectivity: connectivity.Unknown;\r\n            manufacturer: string;\r\n            model: string;\r\n            samplerate: number;\r\n            type: type.File;\r\n        }> => ( Promise.resolve({\r\n                bitspersample: result.bitsPerSample,\r\n                channelcount: result.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: \"File\",\r\n                samplerate: result.samplesPerSec,\r\n                type: type.File,\r\n            })\r\n        ));\r\n    }\r\n\r\n    private readHeader(): Promise<AudioStreamFormatImpl> {\r\n        // Read the wave header.\r\n        const maxHeaderSize: number = 4296;\r\n        const header: Blob | Buffer = this.privSource.slice(0, maxHeaderSize);\r\n\r\n        const headerResult: Deferred<AudioStreamFormatImpl> = new Deferred<AudioStreamFormatImpl>();\r\n\r\n        const processHeader = (header: ArrayBuffer): void => {\r\n            const view: DataView = new DataView(header);\r\n\r\n            const getWord = (index: number): string => String.fromCharCode(view.getUint8(index), view.getUint8(index + 1), view.getUint8(index + 2), view.getUint8(index + 3));\r\n\r\n            // RIFF 4 bytes.\r\n            if (\"RIFF\" !== getWord(0)) {\r\n                headerResult.reject(\"Invalid WAV header in file, RIFF was not found\");\r\n                return;\r\n            }\r\n\r\n            // length, 4 bytes\r\n            // RIFF Type & fmt 8 bytes\r\n            if (\"WAVE\" !== getWord(8) || \"fmt \" !== getWord(12)) {\r\n                headerResult.reject(\"Invalid WAV header in file, WAVEfmt was not found\");\r\n                return;\r\n            }\r\n\r\n            const formatSize: number = view.getInt32(16, true);\r\n            const channelCount: number = view.getUint16(22, true);\r\n            const sampleRate: number = view.getUint32(24, true);\r\n            const bitsPerSample: number = view.getUint16(34, true);\r\n            // Confirm if header is 44 bytes long.\r\n            let pos: number = 36 + Math.max(formatSize - 16, 0);\r\n            for (; getWord(pos) !== \"data\"; pos += 2) {\r\n                if (pos > maxHeaderSize - 8) {\r\n                    headerResult.reject(\"Invalid WAV header in file, data block was not found\");\r\n                    return;\r\n                }\r\n            }\r\n            this.privHeaderEnd = pos + 8;\r\n            headerResult.resolve(AudioStreamFormat.getWaveFormatPCM(sampleRate, bitsPerSample, channelCount) as AudioStreamFormatImpl);\r\n        };\r\n\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && header instanceof Blob) {\r\n            const reader: FileReader = new FileReader();\r\n\r\n            reader.onload = (event: Event): void => {\r\n                const header: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\r\n                processHeader(header);\r\n            };\r\n\r\n            reader.readAsArrayBuffer(header);\r\n        } else {\r\n            const h: Buffer = header as Buffer;\r\n            processHeader(h.buffer.slice(h.byteOffset, h.byteOffset + h.byteLength));\r\n        }\r\n        return headerResult.promise;\r\n    }\r\n\r\n    private async upload(audioNodeId: string): Promise<Stream<ArrayBuffer>> {\r\n        const onerror = (error: string): void => {\r\n            const errorMsg = `Error occurred while processing '${this.privFilename}'. ${error}`;\r\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, errorMsg));\r\n            throw new Error(errorMsg);\r\n        };\r\n\r\n        try {\r\n            await this.turnOn();\r\n\r\n            const format: AudioStreamFormatImpl = await this.privAudioFormatPromise;\r\n            const stream = new ChunkedArrayBufferStream(format.avgBytesPerSec / 10, audioNodeId);\r\n\r\n            this.privStreams[audioNodeId] = stream;\r\n            const chunk: Blob | Buffer = this.privSource.slice(this.privHeaderEnd);\r\n\r\n            const processFile = (buff: ArrayBuffer): void => {\r\n                if (stream.isClosed) {\r\n                    return; // output stream was closed (somebody called TurnOff). We're done here.\r\n                }\r\n\r\n                stream.writeStreamChunk({\r\n                    buffer: buff,\r\n                    isEnd: false,\r\n                    timeReceived: Date.now(),\r\n                });\r\n                stream.close();\r\n            };\r\n\r\n            if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && chunk instanceof Blob) {\r\n                const reader: FileReader = new FileReader();\r\n                reader.onerror = (ev: ProgressEvent<FileReader>): void  =>  onerror(ev.toString());\r\n\r\n                reader.onload = (event: Event): void => {\r\n                    const fileBuffer: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\r\n                    processFile(fileBuffer);\r\n                };\r\n\r\n                reader.readAsArrayBuffer(chunk);\r\n            } else {\r\n                const c: Buffer = chunk as Buffer;\r\n                processFile(c.buffer.slice(c.byteOffset, c.byteOffset + c.byteLength));\r\n            }\r\n\r\n            return stream;\r\n        } catch (e) {\r\n            onerror(e as string);\r\n        }\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RiffPcmEncoder, Stream } from \"../common/Exports\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\nexport class PcmRecorder implements IRecorder {\r\n    private privMediaResources: IMediaResources;\r\n    private privSpeechProcessorScript: string; // speech-processor.js Url\r\n    private privStopInputOnRelease: boolean;\r\n\r\n    public constructor(stopInputOnRelease: boolean) {\r\n        this.privStopInputOnRelease = stopInputOnRelease;\r\n    }\r\n\r\n    public record(context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void {\r\n        const desiredSampleRate = 16000;\r\n\r\n        const waveStreamEncoder = new RiffPcmEncoder(context.sampleRate, desiredSampleRate);\r\n\r\n        const micInput = context.createMediaStreamSource(mediaStream);\r\n\r\n        const attachScriptProcessor = (): void => {\r\n            // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n            const scriptNode = (() => {\r\n                let bufferSize = 0;\r\n                try {\r\n                    return context.createScriptProcessor(bufferSize, 1, 1);\r\n                } catch (error) {\r\n                    // Webkit (<= version 31) requires a valid bufferSize.\r\n                    bufferSize = 2048;\r\n                    let audioSampleRate = context.sampleRate;\r\n                    while (bufferSize < 16384 && audioSampleRate >= (2 * desiredSampleRate)) {\r\n                        bufferSize <<= 1;\r\n                        audioSampleRate >>= 1;\r\n                    }\r\n                    return context.createScriptProcessor(bufferSize, 1, 1);\r\n                }\r\n            })();\r\n            scriptNode.onaudioprocess = (event: AudioProcessingEvent): void => {\r\n                const inputFrame = event.inputBuffer.getChannelData(0);\r\n\r\n                if (outputStream && !outputStream.isClosed) {\r\n                    const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                    if (!!waveFrame) {\r\n                        outputStream.writeStreamChunk({\r\n                            buffer: waveFrame,\r\n                            isEnd: false,\r\n                            timeReceived: Date.now(),\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n            micInput.connect(scriptNode);\r\n            scriptNode.connect(context.destination);\r\n            this.privMediaResources = {\r\n                scriptProcessorNode: scriptNode,\r\n                source: micInput,\r\n                stream: mediaStream,\r\n            };\r\n        };\r\n\r\n        // https://webaudio.github.io/web-audio-api/#audioworklet\r\n        // Using AudioWorklet to improve audio quality and avoid audio glitches due to blocking the UI thread\r\n        const skipAudioWorklet = !!this.privSpeechProcessorScript && this.privSpeechProcessorScript.toLowerCase() === \"ignore\";\r\n\r\n        if (!!context.audioWorklet && !skipAudioWorklet) {\r\n            if (!this.privSpeechProcessorScript) {\r\n                const workletScript = `class SP extends AudioWorkletProcessor {\r\n                    constructor(options) {\r\n                      super(options);\r\n                    }\r\n                    process(inputs, outputs) {\r\n                      const input = inputs[0];\r\n                      const output = [];\r\n                      for (let channel = 0; channel < input.length; channel += 1) {\r\n                        output[channel] = input[channel];\r\n                      }\r\n                      this.port.postMessage(output[0]);\r\n                      return true;\r\n                    }\r\n                  }\r\n                  registerProcessor('speech-processor', SP);`;\r\n                const blob = new Blob([workletScript], { type: \"application/javascript; charset=utf-8\" });\r\n                this.privSpeechProcessorScript = URL.createObjectURL(blob);\r\n            }\r\n\r\n            context.audioWorklet\r\n                .addModule(this.privSpeechProcessorScript)\r\n                .then((): void => {\r\n                    const workletNode = new AudioWorkletNode(context, \"speech-processor\");\r\n                    workletNode.port.onmessage = (ev: MessageEvent): void => {\r\n                        const inputFrame: Float32Array = ev.data as Float32Array;\r\n\r\n                        if (outputStream && !outputStream.isClosed) {\r\n                            const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                            if (!!waveFrame) {\r\n                                outputStream.writeStreamChunk({\r\n                                    buffer: waveFrame,\r\n                                    isEnd: false,\r\n                                    timeReceived: Date.now(),\r\n                                });\r\n                            }\r\n                        }\r\n                    };\r\n                    micInput.connect(workletNode);\r\n                    workletNode.connect(context.destination);\r\n                    this.privMediaResources = {\r\n                        scriptProcessorNode: workletNode,\r\n                        source: micInput,\r\n                        stream: mediaStream,\r\n                    };\r\n                })\r\n                .catch((): void => {\r\n                    attachScriptProcessor();\r\n                });\r\n        } else {\r\n            try {\r\n                attachScriptProcessor();\r\n            } catch (err) {\r\n                throw new Error(`Unable to start audio worklet node for PCMRecorder: ${err as string}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    public releaseMediaResources(context: AudioContext): void {\r\n        if (this.privMediaResources) {\r\n            if (this.privMediaResources.scriptProcessorNode) {\r\n                this.privMediaResources.scriptProcessorNode.disconnect(context.destination);\r\n                this.privMediaResources.scriptProcessorNode = null;\r\n            }\r\n            if (this.privMediaResources.source) {\r\n                this.privMediaResources.source.disconnect();\r\n                if (this.privStopInputOnRelease) {\r\n                    this.privMediaResources.stream.getTracks().forEach((track: MediaStreamTrack): void => track.stop());\r\n                }\r\n                this.privMediaResources.source = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public setWorkletUrl(url: string): void {\r\n        this.privSpeechProcessorScript = url;\r\n    }\r\n}\r\n\r\ninterface IMediaResources {\r\n    source: MediaStreamAudioSourceNode;\r\n    scriptProcessorNode: ScriptProcessorNode | AudioWorkletNode;\r\n    stream: MediaStream;\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IConnection,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n} from \"../common/Exports\";\r\nimport { ProxyInfo } from \"./ProxyInfo\";\r\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter\";\r\n\r\nexport class WebsocketConnection implements IConnection {\r\n\r\n    private privUri: string;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privConnectionMessageAdapter: WebsocketMessageAdapter;\r\n    private privId: string;\r\n    private privIsDisposed: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        queryParameters: IStringDictionary<string>,\r\n        headers: IStringDictionary<string>,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        enableCompression: boolean = false,\r\n        connectionId?: string) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.privMessageFormatter = messageFormatter;\r\n\r\n        let queryParams = \"\";\r\n        let i = 0;\r\n\r\n        if (queryParameters) {\r\n            for (const paramName in queryParameters) {\r\n                if (paramName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n\r\n                    const key = encodeURIComponent(paramName);\r\n                    queryParams += key;\r\n\r\n                    let val = queryParameters[paramName];\r\n                    if (val) {\r\n                        val = encodeURIComponent(val);\r\n                        queryParams += `=${val}`;\r\n                    }\r\n\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (headers) {\r\n            for (const headerName in headers) {\r\n                if (headerName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(headers[headerName]);\r\n                    queryParams += `${headerName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.privUri = uri + queryParams;\r\n        this.privId = connectionId ? connectionId : createNoDashGuid();\r\n\r\n        this.privConnectionMessageAdapter = new WebsocketMessageAdapter(\r\n            this.privUri,\r\n            this.id,\r\n            this.privMessageFormatter,\r\n            proxyInfo,\r\n            headers,\r\n            enableCompression);\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        this.privIsDisposed = true;\r\n\r\n        if (this.privConnectionMessageAdapter) {\r\n            await this.privConnectionMessageAdapter.close();\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get uri(): string {\r\n        return this.privUri;\r\n    }\r\n\r\n    public state(): ConnectionState {\r\n        return this.privConnectionMessageAdapter.state;\r\n    }\r\n\r\n    public open(): Promise<ConnectionOpenResponse> {\r\n        return this.privConnectionMessageAdapter.open();\r\n    }\r\n\r\n    public send(message: ConnectionMessage): Promise<void> {\r\n        return this.privConnectionMessageAdapter.send(message);\r\n    }\r\n\r\n    public read(): Promise<ConnectionMessage> {\r\n        return this.privConnectionMessageAdapter.read();\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionMessageAdapter.events;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// Node.JS specific web socket / browser support.\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n// @ts-ignore\r\nimport * as http from \"http\";\r\nimport * as net from \"net\";\r\nimport * as tls from \"tls\";\r\nimport Agent from \"agent-base\";\r\nimport HttpsProxyAgent from \"https-proxy-agent\";\r\n\r\nimport ws from \"ws\";\r\nimport { HeaderNames } from \"../common.speech/HeaderNames\";\r\nimport {\r\n    ArgumentNullError,\r\n    BackgroundEvent,\r\n    ConnectionClosedEvent,\r\n    ConnectionErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    ConnectionOpenResponse,\r\n    ConnectionStartEvent,\r\n    ConnectionState,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    Queue,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports\";\r\nimport { ProxyInfo } from \"./ProxyInfo\";\r\n\r\ninterface ISendItem {\r\n    Message: ConnectionMessage;\r\n    RawWebsocketMessage: RawWebsocketMessage;\r\n    sendStatusDeferral: Deferred<void>;\r\n}\r\n\r\nexport class WebsocketMessageAdapter {\r\n    private privConnectionState: ConnectionState;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privWebsocketClient: WebSocket | ws;\r\n\r\n    private privSendMessageQueue: Queue<ISendItem>;\r\n    private privReceivingMessageQueue: Queue<ConnectionMessage>;\r\n    private privConnectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\r\n    private privCertificateValidatedDeferral: Deferred<void>;\r\n    private privDisconnectDeferral: Deferred<void>;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privConnectionId: string;\r\n    private privUri: string;\r\n    private proxyInfo: ProxyInfo;\r\n    private privHeaders: { [key: string]: string };\r\n    private privLastErrorReceived: string;\r\n    private privEnableCompression: boolean;\r\n\r\n    public static forceNpmWebSocket: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        connectionId: string,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        headers: { [key: string]: string },\r\n        enableCompression: boolean) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.proxyInfo = proxyInfo;\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privConnectionId = connectionId;\r\n        this.privMessageFormatter = messageFormatter;\r\n        this.privConnectionState = ConnectionState.None;\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n        this.privEnableCompression = enableCompression;\r\n\r\n        // Add the connection ID to the headers\r\n        this.privHeaders[HeaderNames.ConnectionId] = this.privConnectionId;\r\n\r\n        this.privLastErrorReceived = \"\";\r\n    }\r\n\r\n    public get state(): ConnectionState {\r\n        return this.privConnectionState;\r\n    }\r\n\r\n    public open(): Promise<ConnectionOpenResponse> {\r\n        if (this.privConnectionState === ConnectionState.Disconnected) {\r\n            return Promise.reject<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        if (this.privConnectionEstablishDeferral) {\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.privConnectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\r\n        this.privCertificateValidatedDeferral = new Deferred<void>();\r\n\r\n        this.privConnectionState = ConnectionState.Connecting;\r\n\r\n        try {\r\n\r\n            if (typeof WebSocket !== \"undefined\" && !WebsocketMessageAdapter.forceNpmWebSocket) {\r\n                // Browser handles cert checks.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n\r\n                this.privWebsocketClient = new WebSocket(this.privUri);\r\n            } else {\r\n                const options: ws.ClientOptions = { headers: this.privHeaders, perMessageDeflate: this.privEnableCompression };\r\n                // The ocsp library will handle validation for us and fail the connection if needed.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n\r\n                options.agent = this.getAgent();\r\n                // Workaround for https://github.com/microsoft/cognitive-services-speech-sdk-js/issues/465\r\n                // Which is root caused by https://github.com/TooTallNate/node-agent-base/issues/61\r\n                const uri = new URL(this.privUri);\r\n                let protocol: string = uri.protocol;\r\n\r\n                if (protocol?.toLocaleLowerCase() === \"wss:\") {\r\n                    protocol = \"https:\";\r\n                } else if (protocol?.toLocaleLowerCase() === \"ws:\") {\r\n                    protocol = \"http:\";\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                (options.agent as any).protocol = protocol;\r\n                this.privWebsocketClient = new ws(this.privUri, options);\r\n            }\r\n\r\n            this.privWebsocketClient.binaryType = \"arraybuffer\";\r\n            this.privReceivingMessageQueue = new Queue<ConnectionMessage>();\r\n            this.privDisconnectDeferral = new Deferred<void>();\r\n            this.privSendMessageQueue = new Queue<ISendItem>();\r\n            this.processSendQueue().catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        } catch (error) {\r\n            this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(500, error as string));\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.onEvent(new ConnectionStartEvent(this.privConnectionId, this.privUri));\r\n\r\n        this.privWebsocketClient.onopen = (): void => {\r\n            this.privCertificateValidatedDeferral.promise.then((): void => {\r\n                this.privConnectionState = ConnectionState.Connected;\r\n                this.onEvent(new ConnectionEstablishedEvent(this.privConnectionId));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(200, \"\"));\r\n            }, (error: string): void => {\r\n                this.privConnectionEstablishDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onerror = (e: { error: any; message: string; type: string; target: WebSocket | ws }): void => {\r\n            this.onEvent(new ConnectionErrorEvent(this.privConnectionId, e.message, e.type));\r\n            this.privLastErrorReceived = e.message;\r\n        };\r\n\r\n        this.privWebsocketClient.onclose = (e: { wasClean: boolean; code: number; reason: string; target: WebSocket | ws }): void => {\r\n            if (this.privConnectionState === ConnectionState.Connecting) {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(e.code, e.reason + \" \" + this.privLastErrorReceived));\r\n            } else {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                this.privWebsocketClient = null;\r\n                this.onEvent(new ConnectionClosedEvent(this.privConnectionId, e.code, e.reason));\r\n            }\r\n\r\n            this.onClose(e.code, e.reason).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onmessage = (e: { data: ws.Data; type: string; target: WebSocket | ws }): void => {\r\n            const networkReceivedTime = new Date().toISOString();\r\n            if (this.privConnectionState === ConnectionState.Connected) {\r\n                const deferred = new Deferred<ConnectionMessage>();\r\n                // let id = ++this.idCounter;\r\n                this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise);\r\n                if (e.data instanceof ArrayBuffer) {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage): void => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string): void => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid binary message format. Error: ${error}`);\r\n                        });\r\n                } else {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage): void => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string): void => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid text message format. Error: ${error}`);\r\n                        });\r\n                }\r\n            }\r\n        };\r\n\r\n        return this.privConnectionEstablishDeferral.promise;\r\n    }\r\n\r\n    public send(message: ConnectionMessage): Promise<void> {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(`Cannot send on connection that is in ${ConnectionState[this.privConnectionState]} state`);\r\n        }\r\n\r\n        const messageSendStatusDeferral = new Deferred<void>();\r\n        const messageSendDeferral = new Deferred<ISendItem>();\r\n\r\n        this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise);\r\n\r\n        this.privMessageFormatter\r\n            .fromConnectionMessage(message)\r\n            .then((rawMessage: RawWebsocketMessage): void => {\r\n                messageSendDeferral.resolve({\r\n                    Message: message,\r\n                    RawWebsocketMessage: rawMessage,\r\n                    sendStatusDeferral: messageSendStatusDeferral,\r\n                });\r\n            }, (error: string): void => {\r\n                messageSendDeferral.reject(`Error formatting the message. ${error}`);\r\n            });\r\n\r\n        return messageSendStatusDeferral.promise;\r\n    }\r\n\r\n    public read(): Promise<ConnectionMessage> {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject<ConnectionMessage>(`Cannot read on connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        return this.privReceivingMessageQueue.dequeue();\r\n    }\r\n\r\n    public close(reason?: string): Promise<void> {\r\n        if (this.privWebsocketClient) {\r\n            if (this.privConnectionState !== ConnectionState.Disconnected) {\r\n                this.privWebsocketClient.close(1000, reason ? reason : \"Normal closure by client\");\r\n            }\r\n        } else {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return this.privDisconnectDeferral.promise;\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    private sendRawMessage(sendItem: ISendItem): Promise<void> {\r\n        try {\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            this.onEvent(new ConnectionMessageSentEvent(this.privConnectionId, new Date().toISOString(), sendItem.Message));\r\n\r\n            // add a check for the ws readystate in order to stop the red console error 'WebSocket is already in CLOSING or CLOSED state' appearing\r\n            if (this.isWebsocketOpen) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);\r\n            } else {\r\n                return Promise.reject(\"websocket send error: Websocket not ready \" + this.privConnectionId + \" \" + sendItem.Message.id + \" \" + new Error().stack);\r\n            }\r\n            return Promise.resolve();\r\n\r\n        } catch (e) {\r\n            return Promise.reject(`websocket send error: ${e as string}`);\r\n        }\r\n    }\r\n\r\n    private async onClose(code: number, reason: string): Promise<void> {\r\n        const closeReason = `Connection closed. ${code}: ${reason}`;\r\n        this.privConnectionState = ConnectionState.Disconnected;\r\n        this.privDisconnectDeferral.resolve();\r\n        await this.privReceivingMessageQueue.drainAndDispose((): void => {\r\n            // TODO: Events for these ?\r\n            // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\r\n        }, closeReason);\r\n\r\n        await this.privSendMessageQueue.drainAndDispose((pendingSendItem: ISendItem): void => {\r\n            pendingSendItem.sendStatusDeferral.reject(closeReason);\r\n        }, closeReason);\r\n    }\r\n\r\n    private async processSendQueue(): Promise<void> {\r\n        while (true) {\r\n            const itemToSend: Promise<ISendItem> = this.privSendMessageQueue.dequeue();\r\n            const sendItem: ISendItem = await itemToSend;\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this.sendRawMessage(sendItem);\r\n                sendItem.sendStatusDeferral.resolve();\r\n            } catch (sendError) {\r\n                sendItem.sendStatusDeferral.reject(sendError as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    private onEvent(event: ConnectionEvent): void {\r\n        this.privConnectionEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private getAgent(): http.Agent {\r\n        // eslint-disable-next-line @typescript-eslint/unbound-method\r\n        const agent: { proxyInfo: ProxyInfo } = new Agent.Agent(this.createConnection) as unknown as { proxyInfo: ProxyInfo } ;\r\n\r\n        if (this.proxyInfo !== undefined &&\r\n            this.proxyInfo.HostName !== undefined &&\r\n            this.proxyInfo.Port > 0) {\r\n            agent.proxyInfo = this.proxyInfo;\r\n        }\r\n\r\n        return agent as unknown as http.Agent;\r\n    }\r\n\r\n    private static GetProxyAgent(proxyInfo: ProxyInfo): HttpsProxyAgent {\r\n        const httpProxyOptions: HttpsProxyAgent.HttpsProxyAgentOptions = {\r\n            host: proxyInfo.HostName,\r\n            port: proxyInfo.Port,\r\n        };\r\n\r\n        if (!!proxyInfo.UserName) {\r\n            httpProxyOptions.headers = {\r\n                \"Proxy-Authentication\": \"Basic \" + new Buffer(`${proxyInfo.UserName}:${(proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password}`).toString(\"base64\"),\r\n            };\r\n        } else {\r\n            httpProxyOptions.headers = {};\r\n        }\r\n\r\n        httpProxyOptions.headers.requestOCSP = \"true\";\r\n\r\n        const httpProxyAgent: HttpsProxyAgent = new HttpsProxyAgent(httpProxyOptions);\r\n        return httpProxyAgent;\r\n    }\r\n\r\n    private createConnection(request: Agent.ClientRequest, options: Agent.RequestOptions): Promise<net.Socket> {\r\n        let socketPromise: Promise<net.Socket>;\r\n\r\n        options = {\r\n            ...options,\r\n            ...{\r\n                requestOCSP: true,\r\n                servername: options.host\r\n            }\r\n        };\r\n\r\n        if (!!this.proxyInfo) {\r\n            const httpProxyAgent: HttpsProxyAgent = WebsocketMessageAdapter.GetProxyAgent(this.proxyInfo);\r\n            const baseAgent: Agent.Agent = httpProxyAgent as unknown as Agent.Agent;\r\n\r\n            socketPromise = new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void): void => {\r\n                baseAgent.callback(request, options, (error: Error, socket: net.Socket): void => {\r\n                    if (!!error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve(socket);\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            if (!!options.secureEndpoint) {\r\n                socketPromise = Promise.resolve(tls.connect(options));\r\n            } else {\r\n                socketPromise = Promise.resolve(net.connect(options));\r\n            }\r\n        }\r\n\r\n        return socketPromise;\r\n    }\r\n\r\n    private get isWebsocketOpen(): boolean {\r\n        return this.privWebsocketClient && this.privWebsocketClient.readyState === this.privWebsocketClient.OPEN;\r\n    }\r\n\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport {\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n} from \"../common/Exports\";\r\n\r\nexport class ReplayableAudioNode implements IAudioStreamNode {\r\n    private privAudioNode: IAudioStreamNode;\r\n    private privBytesPerSecond: number;\r\n    private privBuffers: BufferEntry[] = [];\r\n    private privReplayOffset: number = 0;\r\n    private privLastShrinkOffset: number = 0;\r\n    private privBufferStartOffset: number = 0;\r\n    private privBufferSerial: number = 0;\r\n    private privBufferedBytes: number = 0;\r\n    private privReplay: boolean = false;\r\n    private privLastChunkAcquiredTime: number = 0;\r\n\r\n    public constructor(audioSource: IAudioStreamNode, bytesPerSecond: number) {\r\n        this.privAudioNode = audioSource;\r\n        this.privBytesPerSecond = bytesPerSecond;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privAudioNode.id();\r\n    }\r\n\r\n    // Reads and returns the next chunk of audio buffer.\r\n    // If replay of existing buffers are needed, read() will first seek and replay\r\n    // existing content, and upoin completion it will read new content from the underlying\r\n    // audio node, saving that content into the replayable buffers.\r\n    public read(): Promise<IStreamChunk<ArrayBuffer>> {\r\n        // if there is a replay request to honor.\r\n        if (!!this.privReplay && this.privBuffers.length !== 0) {\r\n            // Find the start point in the buffers.\r\n            // Offsets are in 100ns increments.\r\n            // So how many bytes do we need to seek to get the right offset?\r\n            const offsetToSeek: number = this.privReplayOffset - this.privBufferStartOffset;\r\n\r\n            let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n            if (0 !== (bytesToSeek % 2)) {\r\n                bytesToSeek++;\r\n            }\r\n\r\n            let i: number = 0;\r\n\r\n            while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n                bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n            }\r\n\r\n            if (i < this.privBuffers.length) {\r\n                const retVal: ArrayBuffer = this.privBuffers[i].chunk.buffer.slice(bytesToSeek);\r\n\r\n                this.privReplayOffset += (retVal.byteLength / this.privBytesPerSecond) * 1e+7;\r\n\r\n                // If we've reached the end of the buffers, stop replaying.\r\n                if (i === this.privBuffers.length - 1) {\r\n                    this.privReplay = false;\r\n                }\r\n\r\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\r\n                    buffer: retVal,\r\n                    isEnd: false,\r\n                    timeReceived: this.privBuffers[i].chunk.timeReceived,\r\n                });\r\n            }\r\n        }\r\n\r\n        return this.privAudioNode.read()\r\n            .then((result: IStreamChunk<ArrayBuffer>): IStreamChunk<ArrayBuffer> => {\r\n                if (result && result.buffer) {\r\n                    this.privBuffers.push(new BufferEntry(result, this.privBufferSerial++, this.privBufferedBytes));\r\n                    this.privBufferedBytes += result.buffer.byteLength;\r\n                }\r\n                return result;\r\n            });\r\n    }\r\n\r\n    public detach(): Promise<void> {\r\n        this.privBuffers = undefined;\r\n        return this.privAudioNode.detach();\r\n    }\r\n\r\n    public replay(): void {\r\n        if (this.privBuffers && 0 !== this.privBuffers.length) {\r\n            this.privReplay = true;\r\n            this.privReplayOffset = this.privLastShrinkOffset;\r\n        }\r\n    }\r\n\r\n    // Shrinks the existing audio buffers to start at the new offset, or at the\r\n    // beginning of the buffer closest to the requested offset.\r\n    // A replay request will start from the last shrink point.\r\n    public shrinkBuffers(offset: number): void {\r\n        if (this.privBuffers === undefined || this.privBuffers.length === 0) {\r\n            return;\r\n        }\r\n\r\n        this.privLastShrinkOffset = offset;\r\n\r\n        // Find the start point in the buffers.\r\n        // Offsets are in 100ns increments.\r\n        // So how many bytes do we need to seek to get the right offset?\r\n        const offsetToSeek: number = offset - this.privBufferStartOffset;\r\n\r\n        let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n\r\n        let i: number = 0;\r\n\r\n        while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n            bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n        }\r\n        this.privBufferStartOffset = Math.round(offset - ((bytesToSeek / this.privBytesPerSecond) * 1e+7));\r\n        this.privBuffers = this.privBuffers.slice(i);\r\n    }\r\n\r\n    // Finds the time a buffer of audio was first seen by offset.\r\n    public findTimeAtOffset(offset: number): number {\r\n        if (offset < this.privBufferStartOffset || this.privBuffers === undefined) {\r\n            return 0;\r\n        }\r\n\r\n        for (const value of this.privBuffers) {\r\n            const startOffset: number = (value.byteOffset / this.privBytesPerSecond) * 1e7;\r\n            const endOffset: number = startOffset + ((value.chunk.buffer.byteLength / this.privBytesPerSecond) * 1e7);\r\n\r\n            if (offset >= startOffset && offset <= endOffset) {\r\n                return value.chunk.timeReceived;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n\r\n// Primary use of this class is to help debugging problems with the replay\r\n// code. If the memory cost of alloc / dealloc gets too much, drop it and just use\r\n// the ArrayBuffer directly.\r\nclass BufferEntry {\r\n    public chunk: IStreamChunk<ArrayBuffer>;\r\n    public serial: number;\r\n    public byteOffset: number;\r\n\r\n    public constructor(chunk: IStreamChunk<ArrayBuffer>, serial: number, byteOffset: number) {\r\n        this.chunk = chunk;\r\n        this.serial = serial;\r\n        this.byteOffset = byteOffset;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognizerConfig } from \"../common.speech/Exports\";\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports\";\r\n\r\nexport class ProxyInfo {\r\n    private privProxyHostName: string;\r\n    private privProxyPort: number;\r\n    private privProxyUserName: string;\r\n    private privProxyPassword: string;\r\n\r\n    private constructor(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string) {\r\n        this.privProxyHostName = proxyHostName;\r\n        this.privProxyPort = proxyPort;\r\n        this.privProxyUserName = proxyUserName;\r\n        this.privProxyPassword = proxyPassword;\r\n    }\r\n\r\n    public static fromParameters(parameters: PropertyCollection): ProxyInfo {\r\n        return new ProxyInfo(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyHostName),\r\n            parseInt(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPort), 10),\r\n            parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyUserName),\r\n            parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPassword));\r\n    }\r\n\r\n    public static fromRecognizerConfig(config: RecognizerConfig): ProxyInfo {\r\n        return this.fromParameters(config.parameters);\r\n    }\r\n\r\n    public get HostName(): string {\r\n        return this.privProxyHostName;\r\n    }\r\n\r\n    public get Port(): number {\r\n        return this.privProxyPort;\r\n    }\r\n\r\n    public get UserName(): string {\r\n        return this.privProxyUserName;\r\n    }\r\n\r\n    public get Password(): string {\r\n        return this.privProxyPassword;\r\n    }\r\n}\r\n",null,"// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport bent, { BentResponse, RequestBody } from \"bent\";\r\nimport {\r\n    ArgumentNullError,\r\n    Deferred\r\n} from \"../common/Exports\";\r\nimport { IRequestOptions } from \"./Exports\";\r\n\r\nexport enum RestRequestType {\r\n    Get = \"GET\",\r\n    Post = \"POST\",\r\n    Delete = \"DELETE\",\r\n    File = \"file\",\r\n}\r\n\r\nexport interface IRestResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: any;\r\n    headers: string;\r\n}\r\n\r\ninterface JsonError {\r\n    error?: {\r\n        message: string;\r\n    };\r\n}\r\n\r\n// accept rest operations via request method and return abstracted objects from server response\r\nexport class RestMessageAdapter {\r\n\r\n    private privIgnoreCache: boolean;\r\n    private privHeaders: { [key: string]: string };\r\n\r\n    public constructor(\r\n        configParams: IRequestOptions\r\n        ) {\r\n\r\n        if (!configParams) {\r\n            throw new ArgumentNullError(\"configParams\");\r\n        }\r\n\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public static extractHeaderValue(headerKey: string, headers: string): string {\r\n        let headerValue: string = \"\";\r\n\r\n        try {\r\n            const arr = headers.trim().split(/[\\r\\n]+/);\r\n            const headerMap: { [key: string]: string } = {};\r\n            arr.forEach((line: string): void => {\r\n                const parts = line.split(\": \");\r\n                const header = parts.shift().toLowerCase();\r\n                const value = parts.join(\": \");\r\n                headerMap[header] = value;\r\n            });\r\n\r\n            headerValue = headerMap[headerKey.toLowerCase()];\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n\r\n        return headerValue;\r\n    }\r\n\r\n    public set options(configParams: IRequestOptions) {\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public setHeaders(key: string, value: string): void {\r\n        this.privHeaders[key] = value;\r\n    }\r\n\r\n    public request(\r\n        method: RestRequestType,\r\n        uri: string,\r\n        queryParams: { [key: string]: any } = {},\r\n        body: any = null,\r\n        ): Promise<IRestResponse> {\r\n\r\n        const responseReceivedDeferral = new Deferred<IRestResponse>();\r\n\r\n        const requestCommand = method === RestRequestType.File ? \"POST\" : method;\r\n        const handleRestResponse = (data: BentResponse, j: JsonError = {}): IRestResponse => {\r\n            const d: { statusText?: string; statusMessage?: string } = data;\r\n            return {\r\n                data: JSON.stringify(j),\r\n                headers: JSON.stringify(data.headers),\r\n                json: j,\r\n                ok: data.statusCode >= 200 && data.statusCode < 300,\r\n                status: data.statusCode,\r\n                statusText: j.error ? j.error.message : d.statusText ? d.statusText : d.statusMessage\r\n            };\r\n        };\r\n\r\n        const send = (postData: RequestBody): void => {\r\n            const sendRequest = bent(uri, requestCommand, this.privHeaders, 200, 201, 202, 204, 400, 401, 402, 403, 404);\r\n            const params = this.queryParams(queryParams) === \"\" ? \"\" : `?${this.queryParams(queryParams)}`;\r\n            sendRequest(params, postData).then( async (data: BentResponse): Promise<void> => {\r\n                if (method === RestRequestType.Delete || data.statusCode === 204) {\r\n                    // No JSON from Delete and reset (204) operations\r\n                    responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                } else {\r\n                    try {\r\n                        const j: JsonError = await data.json() as JsonError;\r\n                        responseReceivedDeferral.resolve(handleRestResponse(data, j));\r\n                    } catch {\r\n                        responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                    }\r\n                }\r\n            }).catch((error: string): void => {\r\n                responseReceivedDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        if (this.privIgnoreCache) {\r\n            this.privHeaders[\"Cache-Control\"] = \"no-cache\";\r\n        }\r\n\r\n        if (method === RestRequestType.Post && body) {\r\n            this.privHeaders[\"content-type\"] = \"application/json\";\r\n            this.privHeaders[\"Content-Type\"] = \"application/json\";\r\n        }\r\n        send(body as RequestBody);\r\n        return responseReceivedDeferral.promise;\r\n    }\r\n\r\n    private queryParams(params: { [key: string]: string } = {}): string {\r\n        return Object.keys(params)\r\n            .map((k: string): string => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\r\n            .join(\"&\");\r\n    }\r\n}\r\n","'use strict'\n/* global fetch, btoa, Headers */\nconst core = require('./core')\n\nclass StatusError extends Error {\n  constructor (res, ...params) {\n    super(...params)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, StatusError)\n    }\n\n    this.name = 'StatusError'\n    this.message = res.statusMessage\n    this.statusCode = res.status\n    this.res = res\n    this.json = res.json.bind(res)\n    this.text = res.text.bind(res)\n    this.arrayBuffer = res.arrayBuffer.bind(res)\n    let buffer\n    const get = () => {\n      if (!buffer) buffer = this.arrayBuffer()\n      return buffer\n    }\n    Object.defineProperty(this, 'responseBody', { get })\n    // match Node.js headers object\n    this.headers = {}\n    for (const [key, value] of res.headers.entries()) {\n      this.headers[key.toLowerCase()] = value\n    }\n  }\n}\n\nconst mkrequest = (statusCodes, method, encoding, headers, baseurl) => async (_url, body, _headers = {}) => {\n  _url = baseurl + (_url || '')\n  let parsed = new URL(_url)\n\n  if (!headers) headers = {}\n  if (parsed.username) {\n    headers.Authorization = 'Basic ' + btoa(parsed.username + ':' + parsed.password)\n    parsed = new URL(parsed.protocol + '//' + parsed.host + parsed.pathname + parsed.search)\n  }\n  if (parsed.protocol !== 'https:' && parsed.protocol !== 'http:') {\n    throw new Error(`Unknown protocol, ${parsed.protocol}`)\n  }\n\n  if (body) {\n    if (body instanceof ArrayBuffer ||\n      ArrayBuffer.isView(body) ||\n      typeof body === 'string'\n    ) {\n      // noop\n    } else if (typeof body === 'object') {\n      body = JSON.stringify(body)\n      headers['Content-Type'] = 'application/json'\n    } else {\n      throw new Error('Unknown body type.')\n    }\n  }\n\n  _headers = new Headers({ ...(headers || {}), ..._headers })\n\n  const resp = await fetch(parsed, { method, headers: _headers, body })\n  resp.statusCode = resp.status\n\n  if (!statusCodes.has(resp.status)) {\n    throw new StatusError(resp)\n  }\n\n  if (encoding === 'json') return resp.json()\n  else if (encoding === 'buffer') return resp.arrayBuffer()\n  else if (encoding === 'string') return resp.text()\n  else return resp\n}\n\nmodule.exports = core(mkrequest)\n","'use strict'\nconst encodings = new Set(['json', 'buffer', 'string'])\n\nmodule.exports = mkrequest => (...args) => {\n  const statusCodes = new Set()\n  let method\n  let encoding\n  let headers\n  let baseurl = ''\n\n  args.forEach(arg => {\n    if (typeof arg === 'string') {\n      if (arg.toUpperCase() === arg) {\n        if (method) {\n          const msg = `Can't set method to ${arg}, already set to ${method}.`\n          throw new Error(msg)\n        } else {\n          method = arg\n        }\n      } else if (arg.startsWith('http:') || arg.startsWith('https:')) {\n        baseurl = arg\n      } else {\n        if (encodings.has(arg)) {\n          encoding = arg\n        } else {\n          throw new Error(`Unknown encoding, ${arg}`)\n        }\n      }\n    } else if (typeof arg === 'number') {\n      statusCodes.add(arg)\n    } else if (typeof arg === 'object') {\n      if (Array.isArray(arg) || arg instanceof Set) {\n        arg.forEach(code => statusCodes.add(code))\n      } else {\n        if (headers) {\n          throw new Error('Cannot set headers twice.')\n        }\n        headers = arg\n      }\n    } else {\n      throw new Error(`Unknown type: ${typeof arg}`)\n    }\n  })\n\n  if (!method) method = 'GET'\n  if (statusCodes.size === 0) {\n    statusCodes.add(200)\n  }\n\n  return mkrequest(statusCodes, method, encoding, headers, baseurl)\n}\n",null,"import createDeferred from 'p-defer-es5';\n\nexport default function() {\n  let shiftDeferred;\n  const queue = [];\n\n  const push = value => {\n    if (shiftDeferred) {\n      const { resolve } = shiftDeferred;\n\n      shiftDeferred = null;\n      resolve(value);\n    } else {\n      queue.push(value);\n    }\n  };\n\n  const shift = () => {\n    if (queue.length) {\n      return Promise.resolve(queue.shift());\n    }\n\n    return (shiftDeferred || (shiftDeferred = createDeferred())).promise;\n  };\n\n  return {\n    push,\n    shift\n  };\n}\n",null,"/* eslint class-methods-use-this: \"off\" */\n\nexport default class {\n  constructor() {\n    this._phrases = [];\n  }\n\n  addFromString() {\n    throw new Error('JSGF is not supported');\n  }\n\n  get phrases() {\n    return this._phrases;\n  }\n\n  set phrases(value) {\n    if (Array.isArray(value)) {\n      this._phrases = value;\n    } else if (typeof value === 'string') {\n      this._phrases = [value];\n    } else {\n      throw new Error(`The provided value is not an array or of type 'string'`);\n    }\n  }\n}\n","export interface AzureCredentials {\n  endpoint: string;\n  key: string;\n}\n\nexport interface Settings {\n  locale: string;\n  azureCredentials: string | AzureCredentials;\n  asrDefaultCompleteTimeout: number;\n  asrDefaultNoInputTimeout: number;\n  ttsDefaultVoice: string;\n}\n\nexport interface Agenda {\n  utterance: string;\n  voice?: string;\n  streamURL?: string;\n}\n\nexport interface Hypothesis {\n  utterance: string;\n  confidence: number;\n}\n\nexport interface RecogniseParameters {\n  noInputTimeout?: number;\n  completeTimeout?: number;\n  locale?: string;\n  hints?: string[];\n}\n"],"names":["createSpeechSynthesisPonyfill","DEFAULT_OUTPUT_FORMAT","EMPTY_ARRAY","options","patchOptions","audioContext","fetchCredentials","ponyfill","AudioContext","window","webkitAudioContext","speechSynthesisDeploymentId","speechSynthesisOutputFormat","console","warn","SpeechSynthesis","queue","AudioContextQueue","updateVoices","stop","getEventAttributeValue","value","setEventAttributeValue","pause","resume","utterance","SpeechSynthesisUtterance","Error","createDeferred","reject","resolve","promise","handleError","errorCode","error","message","stack","addEventListener","preload","deploymentId","outputFormat","push","finally","removeEventListener","speaking","customVoiceHostname","region","speechSynthesisHostname","subscriptionKey","onErrorResumeNext","fetchCustomVoices","voices","getVoices","fetchVoices","dispatchEvent","SpeechSynthesisEvent","EventTarget","speechSynthesis","consumer","paused","getAudioContext","memoize","startConsumer","length","AudioContextConsumer","start","splice","suspend","playingUtterance","CustomEvent","shift","play","state","hostname","fetch","encodeURI","encodeURIComponent","headers","accept","res","ok","json","models","map","gender","properties","Gender","lang","locale","voiceURI","name","SpeechSynthesisVoice","sort","x","y","_default","_gender","_lang","_localService","_name","_voiceURI","authorizationToken","authorization","Locale","Name","shouldWarnOnSubscriptionKey","credentials","looseEvent","looseEvents","otherOptions","resolveFunctionOrReturnValue","speechRecognitionHostname","resolvedCredentials","fnOrValue","type","Event","asyncDecodeAudioData","arrayBuffer","Promise","decodeAudioData","then","playDecoded","audioBuffer","source","audioContextClosed","EventAsPromise","sourceEnded","unsubscribe","subscribeEvent","target","eventListener","buffer","onended","connect","destination","race","upcoming","err","text","_pitch","_rate","_voice","_volume","onboundary","onend","onerror","onmark","onpause","onresume","onstart","arrayBufferPromise","fetchSpeechData","navigator","language","pitch","rate","voice","volume","catch","createBufferSource","_playingSource","ErrorEvent","defers","upcomingDeferred","bind","one","Symbol","iterator","next","done","event","deferred","args","array","slice","call","arguments","module","exports","ret","DEFAULT_LANGUAGE","DEFAULT_VOICE","EMPTY_MP3_BASE64","decode","ssml","isSSML","buildSSML","search","url","Authorization","method","body","status","relativePercentage","relative","Math","round","SPEAK_TAG_PATTERN","XML_PROLOG_PATTERN","test","handler","createSpeechRecognitionPonyfill","AudioConfig","SpeechSDK","OutputFormat","ResultReason","SpeechConfig","SpeechRecognizer","serializeRecognitionResult","duration","errorDetails","offset","reason","resultId","JSON","parse","averageAmplitude","Int16Array","reduce","amplitude","abs","cognitiveServicesAsyncToPromise","fn","SpeechRecognitionEvent","data","emma","interpretation","resultIndex","results","prepareAudioConfig","audioConfig","originalAttach","attach","boundOriginalAttach","firstChunk","muted","reader","read","chunk","events","onEvent","ArrayBuffer","isEnd","timeReceived","Date","now","unprepare","createSpeechRecognitionPonyfillFromRecognizer","createRecognizer","enableTelemetry","referenceGrammars","textNormalization","SpeechRecognition","_continuous","_interimResults","document","documentElement","getAttribute","_grammars","SpeechGrammarList","_maxAlternatives","_startOnce","recognizer","createPromiseQueue","audioSourceReady","audioSourceOff","firstAudibleChunk","detachAudioConfigEvent","detach","canceled","_","sessionId","recognized","result","recognizing","sessionStarted","sessionStopped","speechStartDetected","speechEndDetected","phrases","grammars","dynamicGrammar","privReco","addReferenceGrammar","addPhrase","startContinuousRecognitionAsync","stopContinuousRecognitionAsync","abort","undefined","finalizedResults","loop","Object","keys","forEach","emitCognitiveServices","errorMessage","finalEvent","audioStarted","stopping","soundStarted","speechStarted","NoMatch","cognitiveServiceEventResultToWebSpeechRecognitionResultList","maxAlternatives","recognizable","transcript","continuous","interimResults","dispose","fromDefaultMicrophoneInput","speechRecognitionEndpointId","mediaDevices","getUserMedia","host","port","protocol","speechConfig","fromHost","fromAuthorizationToken","fromSubscription","endpointId","Detailed","speechRecognitionLanguage","RecognizingSpeech","RecognizedSpeech","Infinity","NBest","resultList","confidence","isFinal","arrayToMap","Confidence","display","Display","itn","ITN","lexical","Lexical","maskedITN","MaskedITN","extras","index","shiftDeferred","_phrases","Array","isArray"],"version":3,"file":"index.aefad6ae.js.map","sourceRoot":"/__parcel_source_root/"}